/*
 * File: stack_model.sec
 * Description:
 *       This file specifies a model interface of the stack subsystem.
 *
 * Copyright (c) 2003 ISP RAS.
 * B.Communisticheskaya,25, Moscow, Russia.
 * All rights reserved.
 *
 */


#include "stack_model.seh"

#include <atl/integer.h>


/*
 * The model state of the stack subsystem.
 *
 * The stack is modeled by the stck global variable.
 */
invariant List* stck;

/*
 * The invariant of the stck variable.
 *
 * The stck size should be less than or equal to the stack capacity.
 */
invariant(stck) {
  return size_List(stck) <= STACK_SIZE;
}

coverage StackCoverage( List* stack )
{
    if (size_List(stack) == 0)               return { empty, "empty stack" };
    else if (size_List(stack) == STACK_SIZE) return { full, "full stack" };
    else                                     return { nonempty, "nonempty stack" };
}

/*
 * The definition of push_spec() specification function.
 *
 * The function pushes the integer into the stack.
 *
 * The function returns false if stack is full and true - otherwise.
 */
specification bool push_spec(int i)
  updates stck
{
  coverage c = StackCoverage(stck);
  post {
    if (size_List(@stck) == STACK_SIZE)
      return    (compare(@stck, stck) == 0)
             && !push_spec;
    else
      return (    (compare(@stck, subList_List(stck, 1, size_List(stck))) == 0)
               && i == value_Integer(get_List(stck, 0))
               && push_spec
             );
  }
}

/*
 * The definition of pop_spec() specification function.
 *
 * The function pops the element from the stack and writes it by item pointer
 * if the stack is not empty.
 *
 * The item parameter should be not NULL.
 *
 * The function returns false if stack is empty and true - otherwise.
 */
specification bool pop_spec(int *item)
  updates stck
  writes i = *item
{
  coverage c = StackCoverage(stck);
  post {
    if (size_List(@stck) == 0)
      return    (compare(@stck, stck) == 0)
             && !pop_spec;
    else
      return (     (compare(stck, subList_List(@stck, 1, size_List(@stck))) == 0)
                && i == value_Integer(get_List(@stck, 0))
                && pop_spec
             );
  }
}
