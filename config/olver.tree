Cluster fs                                                 {dir, fifo, fs, ftw, glob, meta, name, symlink, tmpfile}
Cluster io                                                 {file, fstream, multiplex, pipe, streams, syslog, term}
Cluster locale                                             {collate, ctrans, ctype, iconv, locale, messages, nlcat, textdomain, wcollate, wctrans, wctype}
Cluster math                                               {bessel, cexp, chyper, complex, ctrig, error, exp, gamma, hyper, integer, rand, real, trig}
Cluster memory                                             {break, heap, mman}
Cluster ncurses                                            {bkgd, border, char, chgat, chstr, clear, color, input, line, misc, mode, move, screen, slk, string, terminal, window}
Cluster process                                            {context, environ, fenv, goto, ipc, meta, pgroup, process, resources, scheduler}
Cluster pthread                                            {attr, cond, mutex, pthread, rwlock, scheduler, sem, tls}
Cluster signal                                             {sigaction, sigctrl, sigsend, sigset, sigstr, sigwait}
Cluster socket                                             {netdata, netdb, netif, rpc, socket}
Cluster system                                             {host, stat, sysconf, user}
Cluster time                                               {clock, conversion, time, timer}
Cluster util                                               {assert, bit, compress, conversion, crypt, dl, float, format, getopt, inet, pam, regex, search, string, wordexp}
Subsystem dir                                              {dir, scandir}
Subsystem fifo                                             {fifo}
Subsystem fs                                               {fs}
Subsystem ftw                                              {ftw}
Subsystem glob                                             {glob}
Subsystem fs.meta                                          {access, meta, statvfs}
Subsystem name                                             {name}
Subsystem symlink                                          {symlink}
Subsystem tmpfile                                          {tmpfile}
Subsystem file                                             {file}
Subsystem fstream                                          {buffer, fstream, lock, wstream}
Subsystem multiplex                                        {multiplex}
Subsystem pipe                                             {pipe}
Subsystem streams                                          {streams}
Subsystem syslog                                           {syslog}
Subsystem term                                             {term}
Subsystem collate                                          {collate}
Subsystem ctrans                                           {ctrans}
Subsystem ctype                                            {ctype}
Subsystem iconv                                            {iconv}
Subsystem locale                                           {locale}
Subsystem messages                                         {messages}
Subsystem nlcat                                            {nlcat}
Subsystem textdomain                                       {textdomain}
Subsystem wcollate                                         {wcollate}
Subsystem wctrans                                          {wctrans}
Subsystem wctype                                           {wctype}
Subsystem bessel                                           {bessel}
Subsystem cexp                                             {cexp}
Subsystem chyper                                           {chyper}
Subsystem complex                                          {complex}
Subsystem ctrig                                            {ctrig}
Subsystem error                                            {error}
Subsystem exp                                              {exp}
Subsystem gamma                                            {gamma}
Subsystem hyper                                            {hyper}
Subsystem integer                                          {integer}
Subsystem rand                                             {rand}
Subsystem real                                             {real}
Subsystem trig                                             {trig}
Subsystem break                                            {break}
Subsystem heap                                             {heap}
Subsystem mman                                             {mman}
Subsystem bkgd                                             {bkgd}
Subsystem border                                           {border}
Subsystem char                                             {add, input, insert}
Subsystem chgat                                            {chgat}
Subsystem chstr                                            {add, input}
Subsystem clear                                            {clear}
Subsystem color                                            {color}
Subsystem input                                            {char, input, string, timeout}
Subsystem line                                             {line}
Subsystem misc                                             {misc}
Subsystem mode                                             {mode}
Subsystem move                                             {move}
Subsystem screen                                           {screen}
Subsystem slk                                              {slk}
Subsystem ncurses.string                                   {add, input, insert, printf, scanf}
Subsystem terminal                                         {control, termcap, terminal, terminfo}
Subsystem window                                           {attr, pad, refresh, scroll, window}
Subsystem context                                          {context}
Subsystem environ                                          {environ}
Subsystem fenv                                             {fenv}
Subsystem goto                                             {goto}
Subsystem ipc                                              {ipc, msg, sem, shm}
Subsystem process.meta                                     {fs, meta, nice, user}
Subsystem pgroup                                           {pgroup}
Subsystem process                                          {process}
Subsystem resources                                        {resources}
Subsystem process.scheduler                                {scheduler}
Subsystem attr                                             {attr}
Subsystem cond                                             {cond, condattr}
Subsystem mutex                                            {mutex, mutexattr}
Subsystem pthread                                          {pthread}
Subsystem rwlock                                           {rwlock, rwlockattr}
Subsystem pthread.scheduler                                {scheduler}
Subsystem sem                                              {sem}
Subsystem tls                                              {tls}
Subsystem sigaction                                        {sigaction}
Subsystem sigctrl                                          {sigctrl}
Subsystem sigsend                                          {sigsend}
Subsystem sigset                                           {sigset}
Subsystem sigstr                                           {sigstr}
Subsystem sigwait                                          {sigwait}
Subsystem netdata                                          {netdata}
Subsystem netdb                                            {netdb}
Subsystem netif                                            {netif}
Subsystem rpc                                              {clnt, pmap, secure, svc, xdr}
Subsystem socket                                           {socket}
Subsystem host                                             {host}
Subsystem stat                                             {stat}
Subsystem sysconf                                          {sysconf}
Subsystem user                                             {account, group, user}
Subsystem clock                                            {clock}
Subsystem time.conversion                                  {conversion}
Subsystem time                                             {time}
Subsystem timer                                            {timer}
Subsystem assert                                           {assert}
Subsystem bit                                              {bit}
Subsystem compress                                         {compress}
Subsystem util.conversion                                  {strint, strreal, token, wchar, wstrint, wstrreal, wtoken}
Subsystem crypt                                            {crypt}
Subsystem dl                                               {dl}
Subsystem float                                            {float}
Subsystem format                                           {fmtmsg, money, printf, scanf, time, wprintf, wscanf, wtime}
Subsystem getopt                                           {getopt}
Subsystem inet                                             {inet}
Subsystem pam                                              {pam}
Subsystem regex                                            {regex}
Subsystem search                                           {hash, queue, search, tree}
Subsystem util.string                                      {casecmp, mem, str, wcasecmp, wmem, wstr}
Subsystem wordexp                                          {wordexp}
Group dir                                                  {fs_dir_scenario}
Group scandir                                              {}
Group fifo                                                 {}
Group fs                                                   {fs_fs_scenario}
Group ftw                                                  {fs_ftw_scenario}
Group glob                                                 {fs_glob_scenario}
Group access                                               {fs_meta_access_scenario}
Group meta.meta                                            {fs_meta_meta_scenario}
Group statvfs                                              {fs_meta_statvfs_scenario}
Group name                                                 {fs_name_scenario}
Group symlink                                              {fs_symlink_scenario, fs_symlink_cancel_scenario}
Group tmpfile                                              {}
Group file                                                 {io_file_lock_scenario, io_file_lockf_scenario, io_file_flock_scenario, io_file_scenario}
Group buffer                                               {}
Group fstream                                              {fstream_scenario}
Group lock                                                 {}
Group wstream                                              {}
Group multiplex                                            {}
Group pipe                                                 {io_pipe_scenario, io_pipe_blocked_scenario}
Group streams                                              {}
Group syslog                                               {}
Group term                                                 {}
Group collate                                              {locale_collate_simple_scenario}
Group ctrans                                               {locale_ctrans_simple_scenario}
Group ctype                                                {locale_ctype_simple_scenario}
Group iconv                                                {locale_iconv_simple_scenario}
Group locale                                               {locale_simple_scenario}
Group messages                                             {}
Group nlcat                                                {}
Group textdomain                                           {}
Group wcollate                                             {locale_wcollate_simple_scenario}
Group wctrans                                              {locale_wctrans_simple_scenario}
Group wctype                                               {locale_wctype_simple_scenario}
Group bessel                                               {}
Group cexp                                                 {}
Group chyper                                               {}
Group complex                                              {}
Group ctrig                                                {}
Group error                                                {}
Group exp                                                  {}
Group gamma                                                {}
Group hyper                                                {}
Group integer                                              {integer_scenario}
Group rand                                                 {}
Group real                                                 {}
Group trig                                                 {}
Group break                                                {}
Group heap                                                 {memory_heap_scenario}
Group mman                                                 {memory_mman_b1_scenario, memory_mman_errors_scenario, memory_mman_scenario, memory_mman_usual_scenario}
Group bkgd                                                 {ncurses_bkgd_simple_scenario}
Group border                                               {ncurses_border_scenario}
Group char.add                                             {ncurses_char_add_scenario}
Group char.input                                           {}
Group char.insert                                          {}
Group chgat                                                {ncurses_chgat_scenario}
Group chstr.add                                            {ncurses_chstr_add_scenario}
Group chstr.input                                          {}
Group clear                                                {ncurses_clear_scenario}
Group color                                                {ncurses_color_scenario}
Group char                                                 {ncurses_input_char_scenario}
Group input.input                                          {ncurses_input_input_scenario}
Group string                                               {ncurses_input_string_scenario}
Group timeout                                              {ncurses_input_timeout_scenario}
Group line                                                 {ncurses_line_scenario, ncurses_line_rip_6_scenario, ncurses_line_rip_scenario}
Group misc                                                 {}
Group mode                                                 {ncurses_mode_scenario}
Group move                                                 {ncurses_move_scenario}
Group screen                                               {ncurses_screen_scenario}
Group slk                                                  {}
Group string.add                                           {ncurses_string_add_scenario}
Group string.input                                         {}
Group string.insert                                        {ncurses_string_insert_scenario}
Group string.printf                                        {}
Group string.scanf                                         {}
Group control                                              {ncurses_terminal_control_simple_scenario}
Group termcap                                              {ncurses_terminal_termcap_simple_scenario}
Group terminal                                             {ncurses_terminal_terminal_scenario}
Group terminfo                                             {ncurses_terminal_terminfo_scenario}
Group attr                                                 {ncurses_window_attr_scenario}
Group pad                                                  {ncurses_window_pad_scenario}
Group refresh                                              {ncurses_window_refresh_scenario}
Group scroll                                               {ncurses_window_scroll_simple_scenario}
Group window                                               {ncurses_window_window_scenario}
Group context                                              {process_context_get_make_set_scenario, process_context_get_swap_scenario}
Group environ                                              {process_environ_scenario}
Group fenv                                                 {process_fenv_scenario}
Group goto                                                 {process_goto_scenario}
Group ipc                                                  {}
Group ipc.sem                                               {}
Group msg                                                  {}
Group shm                                                  {}
Group fs                                                   {process_meta_fs_ch_scenario, process_meta_fs_wd_scenario, process_meta_fs_umask_scenario}
Group meta.meta                                            {process_meta_meta_scenario}
Group nice                                                 {process_meta_nice_set_get_priority_scenario, process_meta_nice_scenario}
Group meta.user                                            {process_meta_user_scenario}
Group pgroup                                               {process_pgroup_scenario}
Group process                                              {process_process__Exit_scenario, process_process___cxa_atexit_scenario, process_process___libc_start_main_scenario, process_process___register_atfork_scenario, process_process__exit_scenario, process_process_abort_scenario, process_process_daemon_scenario, process_process_execl_scenario, process_process_execle_scenario, process_process_execlp_scenario, process_process_execv_scenario, process_process_execve_scenario, process_process_execvp_scenario, process_process_exit_scenario, process_process_fork_scenario, process_process_forkpty_scenario, process_process_popen_pclose_scenario, process_process_return_from_main_scenario, process_process_vfork_scenario, process_process_wait_scenario, process_process_wait4_scenario, process_process_waitpid_scenario}
Group resources                                            {resources_scenario}
Group scheduler                                            {process_scheduler_scenario}
Group attr                                                 {pthread_attr_scenario}
Group cond                                                 {pthread_cond_condattr_scenario, pthread_cond_cond_errors_scenario, pthread_cond_cond_init_destroy_scenario, pthread_cond_cond_single_scenario}
Group condattr                                             {pthread_cond_condattr_scenario}
Group mutex                                                {pthread_mutex_mutex_static_init_scenario}
Group mutexattr                                            {}
Group pthread                                              {pthread_pthread_cleanup_diff_scenario, pthread_pthread_cleanup_simple_scenario, pthread_pthread_create_cancel_scenario, pthread_pthread_cancelpoints_scenario, pthread_pthread_exit_join_scenario}
Group rwlock                                               {pthread_rwlock_rwlockattr_scenario, pthread_rwlock_rwlock_deadlock_scenario, pthread_rwlock_rwlock_errors_scenario, pthread_rwlock_rwlock_init_destroy_scenario, pthread_rwlock_rwlock_N_rwlock_scenario, pthread_rwlock_rwlock_repeated_lock_scenario, pthread_rwlock_rwlock_single_rwlock_scenario}
Group rwlockattr                                           {pthread_rwlock_rwlockattr_scenario}
Group scheduler                                            {pthread_scheduler_scenario}
Group sem.sem                                              {pthread_sem_complex_scenario, pthread_sem_open_close_scenario, pthread_sem_dummy_scenario}
Group tls                                                  {tls_scenario, setget_scenario, destruct_scenario, manykeys_scenario, pthread_tls_fork_scenario, errors_scenario}
Group sigaction                                            {}
Group sigctrl                                              {}
Group sigsend                                              {signal_sigsend_kill_and_sigaction_scenario}
Group sigset                                               {signal_sigset_automatic_scenario, signal_sigset_static_scenario}
Group sigstr                                               {}
Group sigwait                                              {}
Group netdata                                              {socket_netdata_scenario}
Group netdb                                                {}
Group netif                                                {}
Group clnt                                                 {}
Group pmap                                                 {socket_rpc_pmap_scenario}
Group secure                                               {}
Group svc                                                  {}
Group xdr                                                  {}
Group socket                                               {}
Group host                                                 {host_scenario}
Group stat                                                 {}
Group sysconf                                              {system_sysconf_scenario}
Group account                                              {system_user_account_scenario}
Group group                                                {system_user_group_scenario, system_user_group_cancel_scenario}
Group user.user                                            {system_user_user_scenario, system_user_user_additional_scenario, system_user_user_cancel_scenario}
Group clock                                                {time_clock_scenario}
Group conversion                                           {}
Group time                                                 {}
Group timer                                                {time_timer_alarm_scenario, time_timer_ualarm_scenario}
Group assert                                               {}
Group bit                                                  {util_bit_scenario}
Group compress                                             {util_compress_scenario}
Group strint                                               {util_conversion_strint_scenario}
Group strreal                                              {}
Group token                                                {util_conversion_token_scenario}
Group wchar                                                {util_conversion_wchar_scenario}
Group wstrint                                              {util_conversion_wstrint_scenario}
Group wstrreal                                             {}
Group wtoken                                               {util_conversion_wtoken_scenario}
Group crypt                                                {util_crypt_scenario}
Group dl                                                   {util_dl_scenario}
Group float                                                {}
Group fmtmsg                                               {}
Group money                                                {util_format_money_scenario}
Group format.printf                                        {}
Group format.scanf                                         {}
Group time                                                 {}
Group wprintf                                              {}
Group wscanf                                               {}
Group wtime                                                {}
Group getopt                                               {util_getopt_scenario}
Group inet                                                 {util_inet_scenario}
Group pam                                                  {util_pam_scenario}
Group regex                                                {}
Group hash                                                 {util_search_hash_scenario}
Group queue                                                {util_search_queue_scenario}
Group search                                               {util_search_search_scenario}
Group tree                                                 {util_search_tree_scenario}
Group casecmp                                              {}
Group mem                                                  {util_string_mem_scenario}
Group str                                                  {util_string_str_scenario}
Group wcasecmp                                             {}
Group wmem                                                 {util_string_wmem_scenario}
Group wstr                                                 {util_string_wstr_scenario}
Group wordexp                                              {util_wordexp_scenario}
Scenario fs_dir_scenario                                   {init_dir_scenario, makeremove_scen, openread_scen, openread2_scen, makeremove2_scen, openread_scen, openread_r_scen, openread64_scen, openreadseek_scen, openclose_scen}
Scenario fs_fs_scenario                                    {init_fs_scenario, init_scen, rename_scen, remove_scen, link_scen, unlink_scen, unlink_scen, xmknod_scen}
Scenario fs_ftw_scenario                                   {init_ftw_scenario, ftw_f_scen, ftw_fd_scen, ftw_fds_scen, ftw_dnr_scen, ftw_non_zero_scen, ftw_ndirs_scen, ftw_eacces_scen}
Scenario fs_glob_scenario                                  {init_glob_scenario, glob_scen, glob64_scen}
Scenario fs_meta_access_scenario                           {init_fs_meta_access_scenario, fs_meta_access_creat_scenario_scen, fs_meta_access_init_scenario_scen, fs_lchown_scen, fs_chmod_scen, fs_fchown_scen, fs_access_scen, fs_fchmod_scen, fs_chown_scen, fs_meta_access_remove_scenario_scen}
Scenario fs_meta_meta_scenario                             {init_fs_meta_meta_scenario, fs_meta_meta_creat_scenario_scen, fs_meta_meta_init_scenario_scen, fs_meta_utime_null_simple_scen, fs_meta__xstat_simple_scen, fs_meta__lxstat_simple_scen, fs_meta_utimes_non_null_simple_scen, fs_meta__fxstat_simple_scen, fs_meta__xstat64_simple_scen, fs_meta_utimes_null_simple_scen, fs_meta__lxstat64_simple_scen, fs_meta__fxstat64_simple_scen, fs_meta_utime_non_null_simple_scen, fs_meta_meta_remove_scenario_scen}
Scenario fs_meta_statvfs_scenario                          {init_fs_meta_statvfs_scenario, fs_meta_statvfs_creat_scenario_scen, fs_meta_statvfs_init_scenario_scen, fs_fstatvfs64_scen, fs_statvfs_simple_scen, fs_fstatvfs_scen, fs_statvfs64_simple_scen, fs_meta_statvfs_remove_scenario_scen}
Scenario fs_name_scenario                                  {init_name_scenario, fs_name_creat_scenario_scen, realpath_scen, realpath_relative_scen, fs_name_remove_scenario_scen, basename_scen, dirname_scen}
Scenario fs_symlink_scenario                               {init_fs_symlink_scenario, fs_symlink_scen}
Scenario fs_symlink_cancel_scenario                        {init_fs_symlink_scenario, fs_cancel_symlink_scen}
Scenario io_file_lock_scenario                             {init_io_file_lock_scenario, io_file_lock_scen, io_file_unlock_scen}
Scenario io_file_lockf_scenario                            {init_io_file_lockf_scenario, io_file_lockf_scen, io_file_unlockf_scen}
Scenario io_file_flock_scenario                            {init_io_file_flock_scenario, io_file_flock_scen, io_file_unflock_scen}
Scenario io_file_scenario                                  {init_io_file_scenario, io_file_scen}
Scenario fstream_scenario                                  {init_fstream_scenario, fstream_scen}
Scenario io_pipe_scenario                                  {init_io_pipe_scenario, io_write_fifo_scen, io_read_fifo_scen, io_writev_fifo_scen, io_readv_fifo_scen}
Scenario io_pipe_blocked_scenario                          {init_io_blocked_pipe_scenario, io_write_fifo_scen, io_read_fifo_scen, io_writev_fifo_scen, io_readv_fifo_scen}
Scenario locale_collate_simple_scenario                    {init_collate_simple_scenario, collate_simple_scen}
Scenario locale_ctrans_simple_scenario                     {init_ctrans_simple_scenario, ctrans_simple_scen}
Scenario locale_ctype_simple_scenario                      {init_ctype_simple_scenario, ctype_simple_scen}
Scenario locale_iconv_simple_scenario                      {init_iconv_simple_scenario, iconv_simple_scen}
Scenario locale_simple_scenario                            {init_locale_simple_scenario, locale_simple_scen}
Scenario locale_wcollate_simple_scenario                   {init_wcollate_simple_scenario, wcollate_simple_scen}
Scenario locale_wctrans_simple_scenario                    {init_wctrans_simple_scenario, wctrans_simple_scen}
Scenario locale_wctype_simple_scenario                     {init_wctype_simple_scenario, wctype_simple_scen}
Scenario integer_scenario                                  {init_integer_scenario, abs_scen, div_scen, imaxabs_scen, imaxdiv_scen, labs_scen, llabs_scen, ldiv_scen, lldiv_scen}
Scenario memory_heap_scenario                              {init_heap_scenario, calloc_scen, free_scen, malloc_scen, posix_memalign_scen, realloc_scen}
Scenario memory_mman_b1_scenario                           {init_memory_mman_usual_scenario, mman_b1_functions_scen}
Scenario memory_mman_errors_scenario                       {init_memory_mman_errors_scenario, read_write_errors_scen, mmap_errors_scen, mlock_errors_scen, mlockall_errors_scen, mprotect_errors_scen, msync_errors_scen, munlock_errors_scen, munlockall_errors_scen, munmap_errors_scen, shm_open_errors_scen, shm_unlink_errors_scen}
Scenario memory_mman_scenario                              {init_memory_mman_scenario, mmap_scen, mlock_scen, mlockall_scen, mprotect_scen, msync_scen, munlock_scen, munlockall_scen, munmap_scen, shm_open_scen, shm_unlink_scen}
Scenario memory_mman_usual_scenario                        {init_memory_mman_usual_scenario, usual_use_mman_functions_scen}
Scenario ncurses_bkgd_simple_scenario                      {init_bkgd_simple_scenario, bkgd_simple_scen}
Scenario ncurses_border_scenario                           {init_border_scenario, border_scen, wborder_scen, box_scen}
Scenario ncurses_char_add_scenario                         {init_char_add_scenario, io_char_add_scen}
Scenario ncurses_chgat_scenario                            {init_chgat_scenario, io_chgat_scen}
Scenario ncurses_chstr_add_scenario                        {init_chstr_add_scenario, io_chstr_add_scen}
Scenario ncurses_clear_scenario                            {init_clear_scenario, ncurses_clear_clear_scen, ncurses_clear_clrtobot_scen, ncurses_clear_clrtoeol_scen, ncurses_clear_delch_scen, ncurses_clear_deleteln_scen, ncurses_clear_erasechar_scen}
Scenario ncurses_color_scenario                            {init_color_scenario, ncurses_color_has_colors_scen, ncurses_color_can_change_color_scen, ncurses_color_init_color_scen, ncurses_color_color_content_scen, ncurses_color_init_pair_scen, ncurses_color_pair_content_scen}
Scenario ncurses_input_char_scenario                       {init_input_char_scenario, ncurses_input_char_scen}
Scenario ncurses_input_input_scenario                      {init_input_input_scenario, test_scen}
Scenario ncurses_input_string_scenario                     {init_input_string_scenario, ncurses_input_string_scen}
Scenario ncurses_input_timeout_scenario                    {init_timeout_scenario, timeout_scen, wtimeout_scen, notimeout_scen}
Scenario ncurses_line_scenario                             {init_line_scenario, line_scen}
Scenario ncurses_line_rip_6_scenario                       {init_line_scenario, ripoffline_6_scen}
Scenario ncurses_line_rip_scenario                         {init_line_scenario, small_scen}
Scenario ncurses_mode_scenario                             {init_mode_scenario, set_modes_scen, ttyfunc_scen}
Scenario ncurses_move_scenario                             {init_move_scenario, ncurses_move_scen, ncurses_mvcur_scen}
Scenario ncurses_screen_scenario                           {init_screen_scenario, screen_scen}
Scenario ncurses_string_add_scenario                       {init_nstring_scenario, io_nstring_scen}
Scenario ncurses_string_insert_scenario                    {init_insert_nstring_scenario, io_insert_nstring_scen}
Scenario ncurses_terminal_control_simple_scenario          {init_terminal_control_simple_scenario, terminal_control_simple_scen}
Scenario ncurses_terminal_termcap_simple_scenario          {init_terminal_termcap_simple_scenario, terminal_termcap_simple_scen}
Scenario ncurses_terminal_terminal_scenario                {init_terminal_scenario, vidattr_scen, newterm_scen, initscr_scen, set_term_scen}
Scenario ncurses_terminal_terminfo_scenario                {init_terminfo_scenario, setupterm_scen, putp_scen, tigetters_scen}
Scenario ncurses_window_attr_scenario                      {init_attr_scenario, io_attr_scen}
Scenario ncurses_window_pad_scenario                       {init_window_pad_scenario, ncurses_window_pad_newpad_scen, ncurses_window_pad_subpad_scen, ncurses_window_pad_pnoutrefresh_scen}
Scenario ncurses_window_refresh_scenario                   {init_refresh_scenario, ncurses_memterm_refresh_scen, ncurses_doupdate_scen, ncurses_sync_scen, ncurses_redraw_scen, ncurses_endwin_test_scen}
Scenario ncurses_window_scroll_simple_scenario             {init_window_scroll_simple_scenario, window_scroll_simple_scen}
Scenario ncurses_window_window_scenario                    {init_window_scenario, ncurses_window_copywin_scen, ncurses_window_curs_set_scen, ncurses_window_delwin_scen, ncurses_window_derwin_subwin_scen, ncurses_window_dupwin_mvwin_scen, ncurses_window_intrflush_scen, ncurses_window_keypad_scen, ncurses_window_meta_scen, ncurses_window_mvderwin_scen, ncurses_window_nodelay_scen, ncurses_window_overlay_overwrite_scen, ncurses_window_putwin_getwin_scen}
Scenario process_context_get_make_set_scenario             {init_get_make_set_scenario, get_make_set_scen}
Scenario process_context_get_swap_scenario                 {init_get_swap_scenario, get_swap_scen}
Scenario process_environ_scenario                          {init_environ_scenario, getenv_scen, putenv_scen, setenv_scen, unsetenv_scen}
Scenario process_fenv_scenario                             {init_fenv_scenario, fecleartestexcept_scen, feholdtestexcept_scen, feraisetestexcept_scen, fegetsetenv_scen, fegetsettestexceptflag_scen, fesetgetround_scen, feupdateenv_scen}
Scenario process_goto_scenario                             {init_goto_scenario, goto_scen}
Scenario process_meta_fs_ch_scenario                       {init_ch_scenario, chdir_scen, chroot_scen, fchdir_scen}
Scenario process_meta_fs_wd_scenario                       {init_wd_scenario, getcwd_scen, getwd_scen}
Scenario process_meta_fs_umask_scenario                    {init_umask_scenario, umask_scen}
Scenario process_meta_meta_scenario                        {init_meta_scenario, getpid_scen, getppid_scen}
Scenario process_meta_nice_set_get_priority_scenario       {init_set_get_priority_scenario, set_get_priority_scen}
Scenario process_meta_nice_scenario                        {init_nice_scenario, nice_scen}
Scenario process_meta_user_scenario                        {init_user_scenario, cuserid_scen, getegid_scen, geteuid_scen, getgid_scen, getgroups_scen, getuid_scen, initgroups_scen, setegid_scen, seteuid_scen, setgid_scen, setgroups_scen, setregid_scen, setreuid_scen, setuid_scen}
Scenario process_pgroup_scenario                           {init_pgroup_scenario, __getpgid_scen, getpgid_scen, getpgrp_scen, getsid_scen, setpgid_scen, setpgrp_scen, setsid_scen}
Scenario process_process__Exit_scenario                    {init__Exit_scenario, exit_scen}
Scenario process_process___cxa_atexit_scenario             {init___cxa_atexit_scenario, __cxa_atexit_scen}
Scenario process_process___libc_start_main_scenario        {init___libc_start_main_scenario, __libc_start_main_scen}
Scenario process_process___register_atfork_scenario        {init___register_atfork_scenario, __register_atfork_scen}
Scenario process_process__exit_scenario                    {init__exit_scenario, exit_scen}
Scenario process_process_abort_scenario                    {init_abort_scenario, abort_scen}
Scenario process_process_daemon_scenario                   {init_daemon_scenario, fork_scen}
Scenario process_process_execl_scenario                    {init_execl_scenario, exec_scen}
Scenario process_process_execle_scenario                   {init_execle_scenario, exec_scen}
Scenario process_process_execlp_scenario                   {init_execlp_scenario, exec_scen}
Scenario process_process_execv_scenario                    {init_execv_scenario, exec_scen}
Scenario process_process_execve_scenario                   {init_execve_scenario, exec_scen}
Scenario process_process_execvp_scenario                   {init_execvp_scenario, exec_scen}
Scenario process_process_exit_scenario                     {init_exit_scenario, exit_scen}
Scenario process_process_fork_scenario                     {init_fork_scenario, fork_scen}
Scenario process_process_forkpty_scenario                  {init_forkpty_scenario, fork_scen}
Scenario process_process_popen_pclose_scenario             {init_popen_pclose_scenario, popen_pclose_scen}
Scenario process_process_return_from_main_scenario         {init_return_from_main_scenario, exit_scen}
Scenario process_process_vfork_scenario                    {init_vfork_scenario, fork_scen}
Scenario process_process_wait_scenario                     {init_wait_scenario, wait_scen}
Scenario process_process_wait4_scenario                    {init_wait4_scenario, wait_scen}
Scenario process_process_waitpid_scenario                  {init_waitpid_scenario, wait_scen}
Scenario resources_scenario                                {init_resources_scenario, getrlimit_scen, setrlimit_scen, getrusage_scen}
Scenario process_scheduler_scenario                        {init_process_scheduler_scenario, sched_yield_scen}
Scenario pthread_attr_scenario                             {init_attr_scenario, attr_scen}
Scenario pthread_cond_condattr_scenario                    {init_condattr_scenario, pthread_condattr_scen}
Scenario pthread_cond_cond_errors_scenario                 {init_cond_errors_scenario, sc_errors_scen}
Scenario pthread_cond_cond_init_destroy_scenario           {init_cond_init_destroy_scenario, cond_init_scen, cond_destroy_scen}
Scenario pthread_cond_cond_single_scenario                 {init_single_cond_scenario, sc_base_conformance_scen, sc_simple_scen, sc_init_scen, sc_destroy_scen}
Scenario pthread_mutex_mutex_static_init_scenario          {init_mutex_static_init_scenario, mutex_static_init_scen, mutex_init_static_scen, mutex_lock_static_scen, mutex_trylock_static_scen, mutex_unlock_static_scen, mutex_destroy_static_scen, mutex_verification_use_case1_static_scen}
Scenario pthread_pthread_cleanup_diff_scenario             {init_cleanup_diff_scenario, back_arc_scen, pthread_cleanup_exit_scen}
Scenario pthread_pthread_cleanup_simple_scenario           {init_cleanup_simple_scenario, pthread_cleanup_push_scen, pthread_cleanup_pop_scen}
Scenario pthread_pthread_create_cancel_scenario            {init_simple_scenario, pthread_cancel_type_scen, pthread_cancel_state_scen, pthread_create_scen, pthread_cancel_scen}
Scenario pthread_pthread_cancelpoints_scenario             {init_simple_scenario, pthread_cancelpoints_scen}
Scenario pthread_pthread_exit_join_scenario                {init_exit_join_scenario, pthread_create_thread_scen, pthread_exit_scen, pthread_join_scen, pthread_detach_scen}
Scenario pthread_rwlock_rwlockattr_scenario                {init_rwlockattr_scenario, pthread_rwlockattr_scen}
Scenario pthread_rwlock_rwlock_deadlock_scenario           {init_deadlock_scenario, deadlock_init_scen, dl_wrlock_scen, dl_rdlock_scen, dl_unlock_scen, dl_wrlock_scen, dl_timedrdlock_scen, dl_unlock_scen, dl_rdlock_scen, dl_wrlock_scen, dl_unlock_scen, dl_rdlock_scen, dl_timedwrlock_scen, dl_unlock_scen, dl_wrlock_scen, dl_wrlock_scen, dl_unlock_scen, dl_wrlock_scen, dl_timedwrlock_scen, dl_unlock_scen, deadlock_destroy_scen}
Scenario pthread_rwlock_rwlock_errors_scenario             {init_rwlock_errors_scenario, er_init_scen, er_initattr_bad_scen, er_init_scen, er_initattr_scen, er_init_scen, er_init_scen, er_destroy_scen, er_init_scen, er_rdlock_scen, er_destroy_scen, er_unlock_scen, er_wrlock_scen, er_destroy_scen, er_unlock_scen, er_destroy_scen, er_destroy_scen, er_init_scen, er_wrlock1_scen, er_tryrdlock_scen, er_unlock1_scen, er_destroy_scen, er_tryrdlock_scen, er_rdlock_scen, er_init_scen, er_wrlock1_scen, er_trywrlock_scen, er_unlock1_scen, er_rdlock1_scen, er_trywrlock_scen, er_unlock1_scen, er_destroy_scen, er_trywrlock_scen, er_wrlock_scen, er_init_scen, er_wrlock1_scen, er_timedrdlock_scen, sleep_scen, er_unlock1_scen, er_destroy_scen, er_timedrdlock_scen, er_init_scen, er_timedrdlock_bad_scen, er_destroy_scen, er_init_scen, er_wrlock1_scen, er_timedrdlock_bad_scen, er_unlock1_scen, er_destroy_scen, er_init_scen, er_wrlock1_scen, er_timedwrlock_scen, sleep_scen, er_unlock1_scen, er_destroy_scen, er_timedwrlock_scen, er_init_scen, er_timedwrlock_bad_scen, er_destroy_scen, er_init_scen, er_wrlock1_scen, er_timedwrlock_bad_scen, er_unlock1_scen, er_destroy_scen, er_unlock_scen, er_init_scen, er_wrlock1_scen, er_unlock_scen, er_unlock1_scen, er_rdlock1_scen, er_unlock_scen, er_unlock1_scen, er_destroy_scen, er_destroyattr_scen}
Scenario pthread_rwlock_rwlock_init_destroy_scenario       {init_rwlock_init_destroy_scenario, rwlock_init_scen, rwlock_destroy_scen}
Scenario pthread_rwlock_rwlock_N_rwlock_scenario           {init_N_M_scenario, init_N_M_scen, rdlock_takeover_N_M_scen, rdlock_stuck_N_M_scen, tryrdlock_takeover_N_M_scen, tryrdlock_stuck_N_M_scen, unlock_reader_N_M_scen, wrlock_takeover_N_M_scen, wrlock_stuck_N_M_scen, trywrlock_takeover_N_M_scen, trywrlock_stuck_N_M_scen, unlock_writer_N_M_scen, destroy_N_M_scen}
Scenario pthread_rwlock_rwlock_repeated_lock_scenario      {init_rp_complete_scenario, rp_pthread_rwlock_init_scen, rp_rdlock_takeover_scen, rp_rdlock_stuck_scen, rp_tryrdlock_takeover_scen, rp_tryrdlock_stuck_scen, rp_wrlock_takeover_scen, rp_wrlock_stuck_scen, rp_trywrlock_takeover_scen, rp_trywrlock_stuck_scen, rp_unlock_writer_scen, rp_unlock_reader_scen, rp_pthread_rwlock_destroy_scen}
Scenario pthread_rwlock_rwlock_single_rwlock_scenario      {init_complete_scenario, single_rwlock_init_scen, rdlock_takeover_scen, rdlock_stuck_scen, tryrdlock_takeover_scen, tryrdlock_stuck_scen, wrlock_takeover_scen, wrlock_stuck_scen, trywrlock_takeover_scen, trywrlock_stuck_scen, unlock_writer_scen, unlock_reader_scen, single_rwlock_destroy_scen}
Scenario pthread_rwlock_rwlockattr_scenario                {init_rwlockattr_scenario, pthread_rwlockattr_scen}
Scenario pthread_scheduler_scenario                        {init_pthread_scheduler_scenario, pthread_getconcurrency_scen, pthread_setconcurrency_scen, pthread_getschedparam_scen, pthread_setschedparam_scen, pthread_setschedparam_scen}
Scenario pthread_sem_complex_scenario                      {init_sem_complex_scenario, sem_wait_scen, sem_trywait_scen, sem_post_scen, sem_getvalue_scen}
Scenario pthread_sem_open_close_scenario                   {init_sem_close_open_scenario, close_open_scen, init_destroy_scen, timedwait_scen}
Scenario pthread_sem_dummy_scenario                        {init_sem_plain_scenario, warmup_unnamed_scen, sem_open_scen, sem_wait_scen, sem_post_scen, sem_close_scen}
Scenario tls_scenario                                      {init_tls_scenario, tls_create_key_scen, tls_set_specific_scen, tls_get_specific_scen, tls_delete_key_scen}
Scenario setget_scenario                                   {init_tls_scenario, tls_create_key_scen, tls_setget_scen, tls_delete_key_scen}
Scenario destruct_scenario                                 {init_tls_scenario, tls_create_key_scen, tls_set_specific_scen}
Scenario manykeys_scenario                                 {init_manykeys_scenario, mk_create_key_scen, mk_set_specific_scen, mk_get_specific_scen, mk_delete_key_scen}
Scenario pthread_tls_fork_scenario                         {init_tls_scenario, tls_create_key_scen, tls_set_specific_scen, tls_fork_scen, tls_get_specific_scen, tls_set_specific_scen, tls_get_specific_scen, tls_delete_key_scen}
Scenario errors_scenario                                   {init_tls_scenario, errors_scen}
Scenario signal_sigsend_kill_and_sigaction_scenario        {init_kill_and_sigaction_scenario, sigaction_scen, pthread_sigmask_scen, kill_scen}
Scenario signal_sigset_automatic_scenario                  {init_sigset_auto_scenario, sigemptyset_scen, sigaddset_scen, sigdelset_scen, sigfillset_scen, sigisemptyset_scen, sigismember_scen}
Scenario signal_sigset_static_scenario                     {init_sigset_scenario, sigset_add_del_ismember_scen, sigset_sigempty_sigfill_isempty_scen, sigset_sigand_sigor_scen}
Scenario socket_netdata_scenario                           {init_netdata_scenario, htonl_ntohl_scen, htons_ntohs_scen}
Scenario host_scenario                                     {init_host_scenario, gethostid_scen}
Scenario system_sysconf_scenario                           {init_sysconf_scenario, sysconf_scen, __sysconf_scen, getpagesize_scen, __getpagesize_scen, pathconf_scen, fpathconf_scen}
Scenario system_user_account_scenario                      {init_account_scenario, endutxent_scen, getutxent_scen, getutxid_scen, getutxline_scen, pututxline_scen, setutxent_scen, getutent_scen, getutent_r_scen, login_scen, logout_scen, logwtmp_scen, setutent_scen, utmpname_scen}
Scenario system_user_group_scenario                        {init_group_scenario, group_scen}
Scenario system_user_group_cancel_scenario                 {init_group_cancel_scenario, group_cancel_scen}
Scenario system_user_user_scenario                         {init_system_user_scenario, getpwent_scen, setpwent_scen, endpwent_scen}
Scenario system_user_user_additional_scenario              {init_additional_scenario, additional_scen}
Scenario system_user_user_cancel_scenario                  {init_user_cancel_scenario, user_cancel_scen}
Scenario time_clock_scenario                               {init_time_clock_scenario, clock_getcpuclockid_scen, clock_getres_scen, clock_gettime_scen, clock_nanosleep_scen, clock_settime_scen}
Scenario time_timer_alarm_scenario                         {init_alarm_scenario, alarm_scen}
Scenario time_timer_ualarm_scenario                        {init_ualarm_scenario, ualarm_scen}
Scenario util_bit_scenario                                 {init_bit_scenario, ffs1_scen, ffs2_scen, toascii_scen}
Scenario util_compress_scenario                            {init_compress_scenario, adler32_scen, compress_scen, compress_uncompress_scen, compress2_scen, compress_compress2_scen, compressBound_scen, crc32_scen, get_crc_table_scen, zError_scen, zlibVersion_scen, deflateInit2__scen, deflateInit__scen, deflate_scen, deflateBound_scen, deflateCopy_scen, deflateEnd_scen, deflateParams_scen, deflateReset_scen, deflateSetDictionary_scen, inflate_scen, inflateInit2__scen, inflateInit__scen, inflateEnd_scen, inflateReset_scen, inflateSetDictionary_scen, inflateSync_scen, inflateSyncPoint_scen, gzopen_scen, gzclose_scen, gzdopen_scen, gzeof_scen, gzerror_scen, gzflush_scen, gzgetc_gzputc_scen, gzgets_gzputs_scen, gzread_gzwrite_scen, gzrewind_scen, gzsetparams_scen}
Scenario util_conversion_strint_scenario                   {init_strint_scenario, strtol_scen, strtoll_scen, __strtol_internal_scen, __strtoll_internal_scen, strtoq_scen, strtoimax_scen, strtoul_scen, strtoull_scen, __strtoul_internal_scen, __strtoull_internal_scen, strtouq_scen, strtoumax_scen, atoi_scen, atol_scen, atoll_scen, l64a_scen, a64l_scen}
Scenario util_conversion_token_scenario                    {init_token_scenario, strsep_scen, strtok_scen, strtok_r_scen, __strtok_r_scen}
Scenario util_conversion_wchar_scenario                    {init_wchar_scenario, btowc_wctob_scen, wctomb_mblen_mbtowc_scen, wcrtomb_mbrlen_mbrtowc_scen, wcstombs_mbstowcs_scen, wcsrtombs_mbsrtowcs_scen, wcsnrtombs_mbsnrtowcs_scen, mbtowc_scen, wctomb_scen, mblen_scen, mbrtowc_scen, mbrlen_scen, wcrtomb_scen, mbsinit_scen, mbstowcs_scen, wcstombs_scen, wcsrtombs_scen, mbsrtowcs_scen, mbsnrtowcs_scen, wcsnrtombs_scen}
Scenario util_conversion_wstrint_scenario                  {init_wtoken_scenario, wcstol_scen, __wcstol_internal_scen, wcstoll_scen, wcstoimax_scen, wcstoq_scen, wcstoul_scen, __wcstoul_internal_scen, wcstoull_scen, wcstouq_scen, wcstoumax_scen}
Scenario util_conversion_wtoken_scenario                   {init_wtoken_scenario, wcstok_scen}
Scenario util_crypt_scenario                               {init_crypt_scenario, crypt_scen, setkey_encrypt_scen, setkey_scen, encrypt_scen}
Scenario util_format_money_scenario                        {init_money_scenario, strfmon_scen}
Scenario util_getopt_scenario                              {init_getopt_scenario, getopt_long_scen, getopt_long_09_scen, getopt_long_only_scen, getsubopt_posix_scen, getsubopt_implementation_scen}
Scenario util_inet_scenario                                {init_inet_scenario, inet_ntoa_scen}
Scenario util_pam_scenario                                 {init_pam_scenario, pam_min_scen}
Scenario util_search_hash_scenario                         {init_hash_scenario, hash_scen}
Scenario util_search_queue_scenario                        {init_queue_scenario, linear_queue_scen, circular_queue_scen}
Scenario util_search_search_scenario                       {init_search_scenario, bsearch_scen, lfind_scen, lsearch_scen, qsort_scen}
Scenario util_search_tree_scenario                         {init_tree_scenario, tree_scen}
Scenario util_string_mem_scenario                          {init_mem_scenario, __mempcpy_scen, __rawmemchr_scen, bcmp_same_scen, bcmp_diff_scen, bcopy_scen, bzero_scen, memccpy_scen, memchr_scen, memcmp_same_scen, memcmp_diff_scen, memcpy_scen, memmove_scen, memrchr_scen, memmem_same_scen, memmem_diff_scen, memset_scen, swab_scen}
Scenario util_string_str_scenario                          {init_str_scenario, strcpy_scen, strncpy_scen, strcat_scen, strncat_scen, strstr_scen, strspn_scen, strdup_scen, strcmp_scen, strchr_scen, index_scen, strlen_scen, strncmp_scen, strcspn_scen, strpbrk_scen, strndup_scen, stpcpy_scen, __stpcpy_scen, stpncpy_scen, strnlen_scen, __strdup_scen, strrchr_scen, rindex_scen}
Scenario util_string_wmem_scenario                         {init_wmem_scenario, wmemchr_scen, wmemcmp_same_scen, wmemcmp_diff_scen, wmemcpy_scen, wmemmove_scen, wmemset_scen}
Scenario util_string_wstr_scenario                         {init_wstr_scenario, wcscpy_scen, wcsncpy_scen, wcscat_scen, wcsncat_scen, wcswcs_scen, wcsspn_scen, wcsdup_scen, wcscmp_scen, wcschr_scen, wcslen_scen, wcsncmp_scen, wcscspn_scen, wcspbrk_scen, wcpcpy_scen, wcpncpy_scen, wcsnlen_scen, wcsrchr_scen, wcsstr_scen}
Scenario util_wordexp_scenario                             {init_wordexp_scenario, wordexp_scen}
Scenario socket_rpc_pmap_scenario                          {}
Scenario util_dl_scenario                                  {}
Scenario locale_messages_scenario                          {strerror_scen}
Scenario locale_nlcat_scenario                             {nlcat_scen, nlcat_err_scen}
Transition nlcat_scen                                      {catclose_spec, catopen_spec, catgets_spec}
Transition nlcat_err_scen                                  {catclose_spec, catopen_spec, catgets_spec}
Transition strerror_scen								   {strerror_spec}
Transition init_test_dir                                   {}
Transition init_dir_scenario                               {mkdir_spec, rmdir_spec}
Transition makeremove_scen                                 {}
Transition makeremove2_scen                                {}
Transition openread_scen                                   {opendir_spec, readdir_spec, closedir_spec}
Transition openread2_scen                                  {opendir_spec, readdir_spec, closedir_spec}
Transition openclose_scen                                  {}
Transition openread64_scen                                 {opendir_spec, readdir64_spec, closedir_spec}
Transition openread_r_scen                                 {opendir_spec, readdir_r_spec, closedir_spec}
Transition openreadseek_scen                               {opendir_spec, telldir_spec, readdir_spec, seekdir_spec, rewinddir_spec, closedir_spec}
Transition init_test_dir                                   {mkdir_spec}
Transition init_fs_scenario                                {}
Transition init_scen                                       {}
Transition rename_scen                                     {rename_spec}
Transition remove_scen                                     {remove_spec}
Transition link_scen                                       {link_spec}
Transition unlink_scen                                     {unlink_spec}
Transition xmknod_scen                                     {__xmknod_spec}
Transition init_test_dir                                   {mkdir_spec}
Transition init_ftw_scenario                               {ftw_spec, ftw64_spec, nftw_spec, nftw64_spec}
Transition ftw_f_scen                                      {}
Transition ftw_fd_scen                                     {}
Transition ftw_fds_scen                                    {}
Transition ftw_dnr_scen                                    {}
Transition ftw_non_zero_scen                               {}
Transition ftw_ndirs_scen                                  {}
Transition ftw_eacces_scen                                 {}
Transition init_glob_scenario                              {}
Transition glob_scen                                       {glob_spec, globfree_spec, setglob_spec}
Transition glob64_scen                                     {glob64_spec, globfree64_spec, setglob64_spec}
Transition init_fs_meta_access_scenario                    {}
Transition fs_meta_access_creat_scenario_scen              {__lxstat_spec, mkdir_spec}
Transition fs_meta_access_remove_scenario_scen             {rmdir_spec}
Transition fs_meta_access_init_scenario_scen               {}
Transition fs_access_scen                                  {access_spec}
Transition fs_chmod_scen                                   {chmod_spec}
Transition fs_chown_scen                                   {pathconf_spec, chown_spec}
Transition fs_fchmod_scen                                  {__xstat_spec, open_spec, fchmod_spec}
Transition fs_fchown_scen                                  {__xstat_spec, open_spec, pathconf_spec, fchown_spec}
Transition fs_lchown_scen                                  {pathconf_spec, lchown_spec}
Transition init_fs_meta_meta_scenario                      {}
Transition fs_meta_meta_creat_scenario_scen                {__lxstat_spec, mkdir_spec, open_spec, symlink_spec}
Transition fs_meta_meta_remove_scenario_scen               {}
Transition fs_meta_meta_init_scenario_scen                 {}
Transition fs_meta__xstat_simple_scen                      {__xstat_spec}
Transition fs_meta__lxstat_simple_scen                     {__lxstat_spec}
Transition fs_meta__fxstat_simple_scen                     {__xstat_spec, open_spec, __fxstat_spec}
Transition fs_meta__xstat64_simple_scen                    {__xstat64_spec}
Transition fs_meta__lxstat64_simple_scen                   {__lxstat64_spec}
Transition fs_meta__fxstat64_simple_scen                   {__xstat64_spec, open_spec, __fxstat64_spec}
Transition fs_meta_utime_non_null_simple_scen              {utime_spec}
Transition fs_meta_utime_null_simple_scen                  {utime_spec}
Transition fs_meta_utimes_non_null_simple_scen             {utimes_spec}
Transition fs_meta_utimes_null_simple_scen                 {utimes_spec}
Transition init_fs_meta_statvfs_scenario                   {}
Transition fs_meta_statvfs_creat_scenario_scen             {__lxstat_spec, mkdir_spec}
Transition fs_meta_statvfs_remove_scenario_scen            {}
Transition fs_meta_statvfs_init_scenario_scen              {}
Transition fs_fstatvfs_scen                                {__xstat_spec, open_spec, fstatvfs_spec}
Transition fs_fstatvfs64_scen                              {__xstat_spec, open_spec, fstatvfs64_spec}
Transition fs_statvfs_simple_scen                          {statvfs_spec}
Transition fs_statvfs64_simple_scen                        {statvfs64_spec}
Transition init_name_scenario                              {}
Transition fs_name_creat_scenario_scen                     {mkdir_spec, open_spec, symlink_spec}
Transition fs_name_init_scenario_scen                      {}
Transition fs_name_remove_scenario_scen                    {}
Transition basename_scen                                   {basename_spec}
Transition dirname_scen                                    {dirname_spec}
Transition realpath_scen                                   {realpath_spec}
Transition realpath_relative_scen                          {realpath_spec}
Transition init_fs_symlink_scenario                        {}
Transition fs_symlink_scen                                 {symlink_spec, readlink_spec}
Transition fs_cancel_symlink_scen                          {createThread, pthread_setcancelstate_spec, pthread_cancel_spec, symlink_spec}
Transition init_io_file_lock_function                      {creat_spec, write_spec, close_spec, createProcess, open_spec}
Transition init_io_file_flock_scenario                     {}
Transition init_io_file_lockf_scenario                     {lockf_spec}
Transition init_io_file_lock_scenario                      {}
Transition io_file_unlock_scen                             {fcntl_F_SETLKW_spec}
Transition io_file_lock_scen                               {fcntl_F_SETLKW_spec}
Transition io_file_unlockf_scen                            {lseek_spec, lockf_F_UNLOCK_spec}
Transition io_file_lockf_scen                              {lseek_spec, lockf_F_LOCK_spec}
Transition io_file_unflock_scen                            {flock_spec}
Transition io_file_flock_scen                              {flock_spec}
Transition init_io_file_scenario                           {}
Transition io_file_scen                                    {open_spec, writev_spec, pwrite_spec, pread_spec, read_spec, write_spec, lseek_spec, lockf_F_TLOCK_spec, lockf_F_UNLOCK_spec, lockf_F_TEST_spec, createProcess, close_spec, readv_spec, creat_spec, dup_spec, dup2_spec, fcntl_F_DUPFD_spec, fcntl_F_SETFD_spec, fcntl_F_GETFD_spec, fcntl_F_SETFL_spec, fcntl_F_GETFL_spec, fcntl_F_SETOWN_spec, fcntl_F_GETOWN_spec, fcntl_F_GETLCK_spec, fcntl_F_SETLCK_spec, fdatasync_spec, flock_spec, fsync_spec, ftruncate_spec, sync_spec, truncate_spec}
Transition init_fstream_scenario                           {}
Transition fstream_scen                                    {open_spec, fdopen_spec, setbuf_spec, setbuffer_spec, setvbuf_spec, fclose_spec, fopen_spec, fputwc_spec, fputws_spec, freopen_spec, fileno_spec, fputc_spec, clearerr_spec, __fpending_spec, _IO_puts_spec, _IO_putc_spec, _IO_feof_spec, feof_spec, ferror_spec, fflush_spec, ftell_spec, fwrite_spec, rewind_spec, fread_spec, fputs_spec, fseek_spec, puts_spec, putw_spec, putwc_spec, fwide_spec, getwc_spec, fgets_spec, fgetc_spec, fgetwc_spec, fgetws_spec, ungetc_spec, getw_spec, _IO_getc_spec, ungetwc_spec, getwchar_spec, putwchar_spec, fgetpos_spec, fsetpos_spec, flockfile_spec, funlockfile_spec, ftrylockfile_spec}
Transition init_io_pipe_scenario                           {}
Transition init_io_blocked_pipe_scenario                   {close_fifo_spec}
Transition io_readv_fifo_scen                              {readv_fifo_spec}
Transition io_read_fifo_scen                               {read_fifo_spec}
Transition io_writev_fifo_scen                             {writev_fifo_spec}
Transition io_write_fifo_scen                              {write_fifo_spec}
Transition init_cf_scenario                                {}
Transition cfsetiogetiospeed_scen                          {cfsetispeed_spec, cfsetospeed_spec, cfgetispeed_spec, cfgetospeed_spec, cfmakeraw_spec}
Transition cfsetgetiospeed_scen                            {cfsetspeed_spec, cfgetispeed_spec, cfgetospeed_spec, cfmakeraw_spec}
Transition init_cterm_scenario                             {}
Transition ctermid_scen                                    {ctermid_spec}
Transition getlogin_scen                                   {getlogin_spec, getlogin_r_spec}
Transition init_open_tty_scenario                          {}
Transition open_tty_scen                                   {open_tty_spec}
Transition init_pt_scenario                                {}
Transition pt_scen                                         {posix_openpt_spec, grantpt_spec, unlockpt_spec, ptsname_spec}
Transition pty_scen                                        {openpty_spec, ttyio_TIOCGWINSZ_spec, grantpt_spec, unlockpt_spec, ptsname_spec}
Transition init_rw_canon_scenario                          {createThreadInContext}
Transition openpty_tcgetattr_scen                          {openpty_spec, tcgetattr_spec}
Transition tcsetattr_scen                                  {settermios_spec, tcsetattr_spec, tcgetattr_spec}
Transition read_write_1_scen                               {write_tty_spec, read_tty_spec}
Transition read_write_2_scen                               {write_tty_spec, read_tty_spec}
Transition reset_scen                                      {settermios_spec, tcsetattr_spec, tcgetattr_spec, tcflush_spec, close_tty_spec}
Transition init_rw_case_a_scenario                         {createThreadInContext}
Transition open_scen                                       {openpty_spec, tcgetattr_spec}
Transition setattr_scen                                    {settermios_spec, tcsetattr_spec, tcgetattr_spec}
Transition read_scen                                       {read_tty_spec}
Transition write_scen                                      {sleep_msec_spec, write_tty_spec}
Transition close_scen                                      {tcflush_spec, close_tty_spec}
Transition init_rw_case_b_scenario                         {createThreadInContext}
Transition open_scen                                       {openpty_spec, tcgetattr_spec}
Transition setattr_scen                                    {settermios_spec, tcsetattr_spec, tcgetattr_spec}
Transition read_scen                                       {read_tty_spec}
Transition write_scen                                      {write_tty_spec}
Transition close_scen                                      {tcflush_spec, close_tty_spec}
Transition init_rw_case_c_scenario                         {createThreadInContext}
Transition open_scen                                       {openpty_spec, tcgetattr_spec}
Transition setattr_scen                                    {settermios_spec, tcsetattr_spec, tcgetattr_spec}
Transition read_scen                                       {read_tty_spec}
Transition write_scen                                      {sleep_msec_spec, write_tty_spec}
Transition close_scen                                      {tcflush_spec, close_tty_spec}
Transition init_rw_case_d_scenario                         {}
Transition open_scen                                       {openpty_spec, tcgetattr_spec}
Transition read_scen                                       {read_tty_spec}
Transition write_scen                                      {write_tty_spec}
Transition close_scen                                      {tcflush_spec, close_tty_spec}
Transition init_tcpgrp_scenario                            {}
Transition tcpgrp_scen                                     {openpty_spec, tcgetattr_spec, tcgetpgrp_spec, tcgetsid_spec, tcsetpgrp_spec}
Transition init_tc_scenario                                {}
Transition tcdrain_scen                                    {openpty_spec, tcgetattr_spec, tcdrain_spec}
Transition tcflow_scen                                     {openpty_spec, tcgetattr_spec, tcflow_spec}
Transition tcflush_scen                                    {openpty_spec, tcgetattr_spec, tcflush_spec}
Transition tcgetattr_scen                                  {openpty_spec, tcgetattr_spec}
Transition tcsendbreak_scen                                {openpty_spec, tcgetattr_spec, tcsendbreak_spec}
Transition tcsetattr_scen                                  {openpty_spec, tcgetattr_spec, cfmakeraw_spec, cfsetspeed_spec, tcsetattr_spec}
Transition init_tty_scenario                               {}
Transition tty_scen                                        {open_spec, isatty_spec, ttyname_spec, ttyname_r_spec}
Transition pty_scen                                        {openpty_spec, isatty_spec, ttyname_spec, ttyname_r_spec}
Transition init_collate_simple_scenario                    {}
Transition collate_simple_scen                             {strcoll_spec, strxfrm_spec}
Transition init_ctrans_simple_scenario                     {}
Transition ctrans_simple_scen                              {toupper_spec, _toupper_spec, tolower_spec, _tolower_spec, __ctype_toupper_loc_spec, __ctype_tolower_loc_spec}
Transition init_ctype_simple_scenario                      {}
Transition ctype_simple_scen                               {__ctype_b_loc_spec, __ctype_get_mb_cur_max_spec, isalnum_spec, isalpha_spec, isascii_spec, isblank_spec, iscntrl_spec, isdigit_spec, isgraph_spec, islower_spec, isprint_spec, ispunct_spec, isspace_spec, isupper_spec, isxdigit_spec}
Transition init_iconv_simple_scenario                      {}
Transition iconv_simple_scen                               {iconv_open_spec, iconv_spec, iconv_close_spec}
Transition init_locale_simple_scenario                     {createThread}
Transition locale_simple_scen                              {setlocale_spec, nl_langinfo_spec, newlocale_spec, uselocale_spec, localeconv_spec, duplocale_spec, freelocale_spec}
Transition init_wcollate_simple_scenario                   {}
Transition wcollate_simple_scen                            {wcscoll_spec, wcsxfrm_spec}
Transition init_wctrans_simple_scenario                    {}
Transition wctrans_simple_scen                             {wctrans_spec, towupper_spec, towctrans_spec, towlower_spec}
Transition init_wctype_simple_scenario                     {}
Transition wctype_simple_scen                              {iswalnum_spec, iswalpha_spec, iswblank_spec, iswcntrl_spec, iswdigit_spec, iswgraph_spec, iswlower_spec, iswprint_spec, iswpunct_spec, iswspace_spec, iswupper_spec, iswxdigit_spec, wctype_spec, iswctype_spec, wcwidth_spec, wcswidth_spec}
Transition init_integer_scenario                           {}
Transition abs_scen                                        {abs_spec}
Transition div_scen                                        {div_spec}
Transition imaxabs_scen                                    {imaxabs_spec}
Transition imaxdiv_scen                                    {imaxdiv_spec}
Transition labs_scen                                       {labs_spec}
Transition llabs_scen                                      {llabs_spec}
Transition ldiv_scen                                       {ldiv_spec}
Transition lldiv_scen                                      {lldiv_spec}
Transition init_heap_scenario                              {}
Transition calloc_scen                                     {calloc_spec}
Transition free_scen                                       {free_spec}
Transition malloc_scen                                     {malloc_spec}
Transition posix_memalign_scen                             {posix_memalign_spec}
Transition realloc_scen                                    {malloc_spec, realloc_spec}
Transition init_memory_scenario                            {}
Transition calloc_memory_scen                              {calloc_spec}
Transition malloc_memory_scen                              {malloc_spec}
Transition realloc_memory_scen                             {malloc_spec, realloc_spec}
Transition realloc_null_memory_scen                        {realloc_spec}
Transition free_memory_scen                                {free_spec}
Transition free_null_memory_scen                           {free_spec}
Transition init_memory_mman_usual_scenario                 {sysconf_spec, shm_open_spec, mmap_spec, shm_unlink_spec}
Transition mman_b1_functions_scen                          {}
Transition init_memory_mman_errors_scenario                {sysconf_spec, shm_open_spec, mmap_spec, munmap_spec, shm_unlink_spec}
Transition mlock_errors_scen                               {mlock_spec}
Transition mlockall_errors_scen                            {mlockall_spec}
Transition mmap_errors_scen                                {mmap_spec}
Transition mmap64_scen                                     {}
Transition mprotect_errors_scen                            {mprotect_spec}
Transition msync_errors_scen                               {msync_spec}
Transition munlock_errors_scen                             {munlock_spec}
Transition munlockall_errors_scen                          {munlockall_spec}
Transition munmap_errors_scen                              {munmap_spec}
Transition shm_open_errors_scen                            {shm_open_spec}
Transition shm_unlink_errors_scen                          {shm_unlink_spec}
Transition read_write_errors_scen                          {write_mapped_mem_block_spec, read_mapped_mem_block_spec}
Transition init_memory_mman_scenario                       {}
Transition mlock_scen                                      {mlock_spec}
Transition mlockall_scen                                   {mlockall_spec}
Transition mmap_scen                                       {mmap_spec}
Transition mmap64_scen                                     {}
Transition mprotect_scen                                   {mprotect_spec}
Transition msync_scen                                      {msync_spec}
Transition munlock_scen                                    {munlock_spec}
Transition munlockall_scen                                 {munlockall_spec}
Transition munmap_scen                                     {munmap_spec}
Transition shm_open_scen                                   {shm_open_spec}
Transition shm_unlink_scen                                 {shm_unlink_spec}
Transition init_memory_mman_usual_scenario                 {sysconf_spec, shm_open_spec, mmap_spec, shm_unlink_spec, write_mapped_mem_block_spec, msync_spec}
Transition usual_use_mman_functions_scen                   {shm_open_spec, mlock_spec, mlockall_spec, munlock_spec, munlockall_spec, write_mapped_mem_block_spec, munmap_spec, mmap_spec, read_mapped_mem_block_spec, shm_unlink_spec}
Transition init_bkgd_simple_scenario                       {}
Transition bkgd_simple_scen                                {initscr_spec, newwin_spec, bkgd_spec, getbkgd_spec, bkgdset_spec, addchstr_spec, clear_spec, inchstr_spec, endwin_spec}
Transition init_border_scenario                            {initscr_spec, newwin_spec, endwin_spec}
Transition border_scen                                     {border_spec, refresh_spec}
Transition wborder_scen                                    {wborder_spec, refresh_spec}
Transition box_scen                                        {box_spec, refresh_spec}
Transition init_char_add_scenario                          {}
Transition io_char_add_scen                                {initscr_spec, newwin_spec, addch_spec, inch_spec, refresh_spec, insch_spec, endwin_spec}
Transition init_chgat_scenario                             {}
Transition io_chgat_scen                                   {initscr_spec, has_colors_spec, can_change_color_spec, start_color_spec, newwin_spec, addchstr_spec, chgat_spec, refresh_spec, inchstr_spec, endwin_spec}
Transition init_chstr_add_scenario                         {}
Transition io_chstr_add_scen                               {initscr_spec, newwin_spec, addchstr_spec, inchstr_spec, refresh_spec, endwin_spec}
Transition init_clear_scenario                             {initscr_spec, endwin_spec}
Transition ncurses_clear_clear_scen                        {newwin_spec, derwin_spec, addch_spec, refresh_spec, clear_spec}
Transition ncurses_clear_clrtobot_scen                     {newwin_spec, derwin_spec, addch_spec, refresh_spec, clrtobot_spec}
Transition ncurses_clear_clrtoeol_scen                     {newwin_spec, derwin_spec, addch_spec, refresh_spec, clrtoeol_spec}
Transition ncurses_clear_delch_scen                        {newwin_spec, derwin_spec, addch_spec, refresh_spec, delch_spec}
Transition ncurses_clear_deleteln_scen                     {newwin_spec, derwin_spec, addch_spec, refresh_spec, deleteln_spec}
Transition ncurses_clear_erasechar_scen                    {erasechar_spec, newwin_spec, derwin_spec, addch_spec, refresh_spec}
Transition ncurses_terminfo_scen                           {}
Transition init_color_scenario                             {initscr_spec, has_colors_spec, can_change_color_spec, start_color_spec, endwin_spec}
Transition ncurses_color_has_colors_scen                   {has_colors_spec}
Transition ncurses_color_can_change_color_scen             {can_change_color_spec}
Transition ncurses_color_init_color_scen                   {init_color_spec}
Transition ncurses_color_color_content_scen                {color_content_spec}
Transition ncurses_color_init_pair_scen                    {init_pair_spec}
Transition ncurses_color_pair_content_scen                 {pair_content_spec}
Transition init_input_char_scenario                        {initscr_spec, endwin_spec}
Transition ncurses_input_char_scen                         {newwin_spec, refresh_spec, ungetch_spec, addch_spec, move_spec, getch_spec, scrollok_spec}
Transition init_input_input_scenario                       {initscr_spec, endwin_spec}
Transition ncurses_input_input_scen                        {newwin_spec, refresh_spec, ungetch_spec, addch_spec, move_spec, getch_spec, scrollok_spec}
Transition test_scen                                       {newwin_spec, refresh_spec, nonl_spec, raw_spec, getch_spec, cbreak_spec, nocbreak_spec, noraw_spec, nl_spec}
Transition init_input_string_scenario                      {initscr_spec, endwin_spec}
Transition ncurses_input_string_scen                       {newwin_spec, refresh_spec, getnstr_spec, getstr_spec}
Transition init_timeout_scenario                           {initscr_spec, newwin_spec, notimeout_spec, endwin_spec}
Transition timeout_scen                                    {timeout_spec}
Transition wtimeout_scen                                   {wtimeout_spec}
Transition notimeout_scen                                  {notimeout_spec}
Transition init_line_scenario                              {}
Transition line_scen                                       {initscr_spec, newwin_spec, refresh_spec, hline_spec, vline_spec, insertln_spec, insdelln_spec, endwin_spec}
Transition ripoffline_6_scen                               {ripoffline_spec, initscr_spec, endwin_spec}
Transition small_scen                                      {ripoffline_spec, initscr_spec, endwin_spec}
Transition ripoffline_scen                                 {ripoffline_spec, initscr_spec, endwin_spec}
Transition init_mode_scenario                              {endwin_spec, refresh_spec}
Transition set_modes_scen                                  {newterm_spec, set_term_spec, def_mode_spec, box_spec, reset_mode_spec, delscreen_spec}
Transition ttyfunc_scen                                    {newterm_spec, set_term_spec, def_mode_spec, box_spec, reset_mode_spec, delscreen_spec}
Transition init_move_scenario                              {initscr_spec, endwin_spec}
Transition ncurses_mvcur_scen                              {mvcur_spec, addch_spec, inch_spec}
Transition ncurses_move_scen                               {newwin_spec, move_spec}
Transition init_screen_scenario                            {initscr_spec, endwin_spec}
Transition screen_scen                                     {box_spec, refresh_spec, scr_dump_spec, scr_restore_spec}
Transition init_nstring_scenario                           {}
Transition io_nstring_scen                                 {initscr_spec, newwin_spec, addstr_spec, refresh_spec, instr_spec, endwin_spec}
Transition init_insert_nstring_scenario                    {}
Transition io_insert_nstring_scen                          {initscr_spec, newwin_spec, insstr_spec, instr_spec, refresh_spec, endwin_spec}
Transition init_terminal_control_simple_scenario           {}
Transition terminal_control_simple_scen                    {use_env_spec, initscr_spec, newwin_spec, clearok_spec, echo_spec, noecho_spec, has_ic_spec, has_il_spec, idcok_spec, idlok_spec, immedok_spec, leaveok_spec, qiflush_spec, noqiflush_spec, scrollok_spec, setscrreg_spec, endwin_spec}
Transition init_terminal_termcap_simple_scenario           {}
Transition terminal_termcap_simple_scen                    {tgoto_spec, tgetent_spec, tgetnum_spec, tgetflag_spec, tgetstr_spec, initscr_spec, endwin_spec}
Transition init_terminal_scenario                          {}
Transition newterm_scen                                    {newterm_spec, longname_spec, endwin_spec}
Transition initscr_scen                                    {filter_spec, initscr_spec, delay_output_spec, termattrs_spec, longname_spec, endwin_spec}
Transition set_term_scen                                   {newterm_spec, set_term_spec, delscreen_spec, endwin_spec}
Transition vidattr_scen                                    {initscr_spec, addch_spec, vidattr_spec, endwin_spec}
Transition init_terminfo_scenario                          {}
Transition setupterm_scen                                  {setupterm_spec, termname_spec, set_curterm_spec, del_curterm_spec, initscr_spec}
Transition putp_scen                                       {setupterm_spec, putp_spec, endwin_spec}
Transition tigetters_scen                                  {tigetflag_spec, tigetnum_spec, tigetstr_spec, tparm_spec, initscr_spec, endwin_spec}
Transition init_attr_scenario                              {}
Transition io_attr_scen                                    {initscr_spec, has_colors_spec, can_change_color_spec, start_color_spec, newwin_spec, attr_on_spec, attr_get_spec, addstr_spec, inchstr_spec, refresh_spec, attr_off_spec, attr_set_spec, attron_spec, attroff_spec, attrset_spec, standout_spec, standend_spec, endwin_spec}
Transition init_window_pad_scenario                        {initscr_spec, endwin_spec}
Transition ncurses_window_pad_newpad_scen                  {refresh_spec, newpad_spec, subpad_spec, prefresh_spec, pechochar_spec, addch_spec}
Transition ncurses_window_pad_subpad_scen                  {refresh_spec, newpad_spec, prefresh_spec, addch_spec, subpad_spec, pechochar_spec}
Transition ncurses_window_pad_pnoutrefresh_scen            {refresh_spec, newpad_spec, pnoutrefresh_spec, addch_spec, subpad_spec, doupdate_spec, pechochar_spec}
Transition init_refresh_scenario                           {initscr_spec, has_colors_spec, can_change_color_spec, start_color_spec, endwin_spec}
Transition ncurses_memterm_refresh_scen                    {newwin_spec, pair_content_spec, init_pair_spec, addch_spec, refresh_spec, move_spec, is_linetouched_spec, is_wintouched_spec, touchline_spec, touchwin_spec, wtouchln_spec, untouchwin_spec, inch_spec}
Transition ncurses_doupdate_scen                           {newwin_spec, addch_spec, refresh_spec, wnoutrefresh_spec, doupdate_spec}
Transition ncurses_sync_scen                               {newwin_spec, derwin_spec, addch_spec, refresh_spec, syncok_spec, wsyncdown_spec, wcursyncup_spec, wsyncup_spec, is_wintouched_spec}
Transition ncurses_redraw_scen                             {newwin_spec, refresh_spec, addch_spec, is_linetouched_spec, is_wintouched_spec, redrawwin_spec, wredrawln_spec}
Transition ncurses_endwin_test_scen                        {newwin_spec, refresh_spec, addch_spec, endwin_spec, isendwin_spec, doupdate_spec}
Transition init_window_scroll_simple_scenario              {}
Transition window_scroll_simple_scen                       {initscr_spec, newwin_spec, addch_spec, refresh_spec, scrollok_spec, setscrreg_spec, scrl_spec, scroll_spec, endwin_spec}
Transition init_window_scenario                            {initscr_spec, endwin_spec}
Transition ncurses_window_copywin_scen                     {newwin_spec, addch_spec, refresh_spec, copywin_spec}
Transition ncurses_window_overlay_overwrite_scen           {newwin_spec, addch_spec, overlay_spec, refresh_spec, overwrite_spec}
Transition ncurses_window_curs_set_scen                    {curs_set_spec}
Transition ncurses_window_delwin_scen                      {newwin_spec, addch_spec, delwin_spec}
Transition ncurses_window_derwin_subwin_scen               {newwin_spec, addch_spec, refresh_spec, derwin_spec, subwin_spec, delwin_spec}
Transition ncurses_window_dupwin_mvwin_scen                {newwin_spec, refresh_spec, dupwin_spec, addch_spec, mvwin_spec}
Transition ncurses_window_intrflush_scen                   {intrflush_spec}
Transition ncurses_window_keypad_scen                      {newwin_spec, keypad_spec}
Transition ncurses_window_meta_scen                        {meta_spec}
Transition ncurses_window_nodelay_scen                     {newwin_spec, nodelay_spec}
Transition ncurses_window_putwin_getwin_scen               {newwin_spec, putwin_spec, getwin_spec}
Transition ncurses_window_mvderwin_scen                    {newwin_spec, derwin_spec, addch_spec, refresh_spec, mvderwin_spec, touchwin_spec}
Transition init_scenario                                   {}
Transition init_get_make_set_scenario                      {}
Transition init_get_swap_scenario                          {}
Transition get_make_set_scen                               {getcontext_spec, makecontext_spec, setcontext_spec}
Transition get_swap_scen                                   {getcontext_spec, swapcontext_spec}
Transition init_environ_scenario                           {}
Transition getenv_scen                                     {getenv_spec}
Transition putenv_scen                                     {putenv_spec}
Transition setenv_scen                                     {setenv_spec}
Transition unsetenv_scen                                   {unsetenv_spec}
Transition init_fenv_scenario                              {}
Transition fecleartestexcept_scen                          {feclearexcept_spec, fetestexcept_spec}
Transition feholdtestexcept_scen                           {feholdexcept_spec, fetestexcept_spec}
Transition feraisetestexcept_scen                          {feraiseexcept_spec, fetestexcept_spec}
Transition fegetsetenv_scen                                {fegetenv_spec, fesetenv_spec}
Transition fegetsettestexceptflag_scen                     {fegetexceptflag_spec, fesetexceptflag_spec, fetestexcept_spec}
Transition fesetgetround_scen                              {fesetround_spec, fegetround_spec}
Transition feupdateenv_scen                                {fegetenv_spec, feupdateenv_spec}
Transition init_scenario                                   {}
Transition init_goto_scenario                              {}
Transition goto_scen                                       {__sigsetjmp_spec, _longjmp_spec, _setjmp_spec, longjmp_spec, siglongjmp_spec}
Transition init_scenario                                   {}
Transition init_ch_scenario                                {}
Transition init_wd_scenario                                {}
Transition init_umask_scenario                             {}
Transition chdir_scen                                      {chdir_spec}
Transition chroot_scen                                     {chroot_spec}
Transition fchdir_scen                                     {fchdir_spec}
Transition getcwd_scen                                     {getcwd_spec}
Transition getwd_scen                                      {getwd_spec}
Transition umask_scen                                      {umask_spec}
Transition init_meta_scenario                              {}
Transition getpid_scen                                     {getpid_spec}
Transition getppid_scen                                    {getppid_spec}
Transition init_scenario                                   {}
Transition init_set_get_priority_scenario                  {}
Transition init_nice_scenario                              {}
Transition set_get_priority_scen                           {setpriority_spec, getpriority_spec}
Transition nice_scen                                       {nice_spec}
Transition init_user_scenario                              {}
Transition cuserid_scen                                    {cuserid_spec}
Transition getegid_scen                                    {getegid_spec}
Transition geteuid_scen                                    {geteuid_spec}
Transition getgid_scen                                     {getgid_spec}
Transition getgroups_scen                                  {getgroups_spec}
Transition getuid_scen                                     {getuid_spec}
Transition initgroups_scen                                 {initgroups_spec}
Transition setegid_scen                                    {setegid_spec}
Transition seteuid_scen                                    {seteuid_spec}
Transition setgid_scen                                     {setgid_spec}
Transition setgroups_scen                                  {setgroups_spec}
Transition setregid_scen                                   {setregid_spec}
Transition setreuid_scen                                   {setreuid_spec}
Transition setuid_scen                                     {setuid_spec}
Transition init_pgroup_scenario                            {}
Transition __getpgid_scen                                  {__getpgid_spec}
Transition getpgid_scen                                    {getpgid_spec}
Transition getpgrp_scen                                    {getpgrp_spec}
Transition getsid_scen                                     {getsid_spec}
Transition setpgid_scen                                    {setpgid_spec}
Transition setpgrp_scen                                    {setpgrp_spec}
Transition setsid_scen                                     {setsid_spec}
Transition init_scenario                                   {}
Transition init__Exit_scenario                             {}
Transition init___cxa_atexit_scenario                      {}
Transition init___libc_start_main_scenario                 {}
Transition init___register_atfork_scenario                 {}
Transition init__exit_scenario                             {}
Transition init_abort_scenario                             {}
Transition init_daemon_scenario                            {}
Transition init_execl_scenario                             {}
Transition init_execle_scenario                            {}
Transition init_execlp_scenario                            {}
Transition init_execv_scenario                             {}
Transition init_execve_scenario                            {}
Transition init_execvp_scenario                            {}
Transition init_exit_scenario                              {}
Transition init_fork_scenario                              {}
Transition init_forkpty_scenario                           {}
Transition init_popen_pclose_scenario                      {}
Transition init_return_from_main_scenario                  {}
Transition init_vfork_scenario                             {}
Transition init_wait_scenario                              {}
Transition init_wait4_scenario                             {}
Transition init_waitpid_scenario                           {}
Transition __cxa_atexit_scen                               {__cxa_atexit_spec}
Transition __libc_start_main_scen                          {__libc_start_main_spec}
Transition __register_atfork_scen                          {__register_atfork_spec}
Transition abort_scen                                      {abort_spec}
Transition exec_scen                                       {execl_spec, execle_spec, execlp_spec, execv_spec, execve_spec, execvp_spec}
Transition exit_scen                                       {_Exit_spec, _exit_spec, exit_spec, return_from_main_spec}
Transition fork_scen                                       {daemon_spec, fork_spec, forkpty_spec, vfork_spec}
Transition popen_pclose_scen                               {popen_spec, pclose_spec}
Transition wait_scen                                       {fork_spec, exit_spec, wait_spec}
Transition init_resources_scenario                         {createProcess, sysconf_spec, getpwnam_spec, setgid_spec, setuid_spec}
Transition getrlimit_scen                                  {getrlimit_spec}
Transition setrlimit_scen                                  {setrlimit_spec, getrlimit_spec}
Transition getrusage_scen                                  {getrusage_spec}
Transition getrlimit64_scen                                {getrlimit64_spec, setrlimit64_spec, ulimit_spec, setrlimit_spec, getrlimit_spec}
Transition init_process_scheduler_scenario                 {}
Transition sched_yield_scen                                {sched_yield_spec}
Transition init_attr_scenario                              {}
Transition attr_scen                                       {pthread_attr_getschedpolicy_spec, pthread_attr_setschedpolicy_spec, pthread_attr_getschedparam_spec, pthread_attr_setschedparam_spec, pthread_attr_getdetachstate_spec, pthread_attr_destroy_spec, pthread_attr_init_spec, pthread_attr_getguardsize_spec, pthread_attr_setguardsize_spec, pthread_attr_getinheritsched_spec, pthread_attr_getscope_spec, pthread_attr_setscope_spec, pthread_attr_getstacksize_spec, pthread_attr_setstacksize_spec, pthread_attr_getstack_spec, pthread_attr_setstack_spec, pthread_attr_setinheritsched_spec, pthread_attr_getstackaddr_spec, pthread_attr_setstackaddr_spec, pthread_attr_setdetachstate_spec}
Transition init_condattr_scenario                          {}
Transition pthread_condattr_scen                           {pthread_condattr_init_spec, pthread_condattr_getpshared_spec, pthread_condattr_setpshared_spec, pthread_condattr_destroy_spec}
Transition init_cond_errors_scenario                       {createThread, pthread_condattr_init_spec, pthread_condattr_destroy_spec, pthread_cond_init_spec, pthread_cond_destroy_spec, pthread_mutex_init_spec, pthread_mutex_destroy_spec, pthread_mutex_lock_spec, pthread_cond_timedwait_spec, pthread_cond_signal_spec, pthread_cond_wait_spec, pthread_mutex_unlock_spec, pthread_cond_broadcast_spec, pthread_cond_timedwait_bad_spec}
Transition sc_errors_scen                                  {}
Transition init_cond_init_destroy_scenario                 {createThread}
Transition cond_init_scen                                  {pthread_cond_init_spec}
Transition cond_destroy_scen                               {pthread_cond_destroy_spec}
Transition init_single_cond_scenario                       {createThread}
Transition sc_full_conformance_scen                        {pthread_cond_init_spec, pthread_mutex_init_spec, pthread_mutex_lock_spec, pthread_cond_wait_spec, pthread_mutex_unlock_spec, pthread_mutex_destroy_spec, pthread_cond_destroy_spec, pthread_cond_signal_spec, pthread_cond_broadcast_spec}
Transition sc_base_conformance_scen                        {pthread_cond_init_spec, pthread_mutex_init_spec, pthread_mutex_lock_spec, pthread_cond_timedwait_spec, pthread_cond_wait_spec, pthread_cond_signal_spec, pthread_mutex_unlock_spec, pthread_mutex_destroy_spec, pthread_cond_destroy_spec}
Transition sc_simple_scen                                  {pthread_cond_init_spec, pthread_mutex_init_spec, pthread_mutex_lock_spec, pthread_cond_wait_spec, pthread_cond_signal_spec, pthread_mutex_unlock_spec, pthread_mutex_destroy_spec, pthread_cond_destroy_spec}
Transition sc_init_scen                                    {pthread_cond_init_spec}
Transition sc_destroy_scen                                 {pthread_cond_destroy_spec, pthread_cond_init_spec, pthread_mutex_init_spec, pthread_mutex_lock_spec, pthread_cond_timedwait_spec, pthread_cond_wait_spec, pthread_mutex_unlock_spec, pthread_mutex_destroy_spec, pthread_cond_signal_spec, pthread_cond_broadcast_spec}
Transition sc_forever_scen                                 {}
Transition init_condattr_scenario                          {}
Transition pthread_condattr_scen                           {pthread_condattr_init_spec, pthread_condattr_getpshared_spec, pthread_condattr_setpshared_spec, pthread_condattr_destroy_spec}
Transition init_mutex_static_init_scenario                 {createThread}
Transition mutex_static_init_scen                          {pthread_mutex_static_init_spec}
Transition mutex_init_static_scen                          {pthread_mutexattr_init_spec, pthread_mutexattr_settype_spec, pthread_mutexattr_setpshared_spec, pthread_mutex_init_spec, pthread_mutexattr_destroy_spec}
Transition mutex_lock_static_scen                          {pthread_mutex_lock_spec}
Transition mutex_trylock_static_scen                       {pthread_mutex_trylock_spec}
Transition mutex_unlock_static_scen                        {pthread_mutex_unlock_spec}
Transition mutex_destroy_static_scen                       {pthread_mutex_unlock_spec, pthread_mutex_destroy_spec}
Transition mutex_verification_use_case1_static_scen        {pthread_mutex_lock_spec, pthread_mutex_trylock_spec, pthread_mutex_unlock_spec}
Transition init_cleanup_diff_scenario                      {createProcess, pthread_create_spec, pthread_cancel_spec, pthread_testcancel_spec}
Transition pthread_cleanup_exit_scen                       {pthread_exit_spec, _pthread_cleanup_push_spec, _pthread_cleanup_pop_spec}
Transition back_arc_scen                                   {pthread_create_spec, _pthread_cleanup_push_spec}
Transition init_cleanup_simple_scenario                    {createProcess}
Transition pthread_cleanup_pop_scen                        {_pthread_cleanup_pop_spec}
Transition pthread_cleanup_push_scen                       {_pthread_cleanup_push_spec}
Transition init_simple_scenario                            {createProcess}
Transition pthread_create_scen                             {pthread_attr_init_spec, pthread_attr_destroy_spec, pthread_attr_setdetachstate_spec, pthread_attr_setguardsize_spec, pthread_attr_setinheritsched_spec, pthread_attr_setschedparam_spec, pthread_attr_setschedpolicy_spec, pthread_attr_setscope_spec, pthread_attr_setstack_spec, pthread_create_spec}
Transition pthread_cancel_scen                             {pthread_testcancel_spec, pthread_self_spec, __errno_location_spec, pthread_cancel_spec, pthread_detach_spec}
Transition pthread_cancel_state_scen                       {pthread_setcancelstate_spec}
Transition pthread_cancel_type_scen                        {pthread_setcanceltype_spec, createThreadInContext, pthread_setcancelstate_spec, pthread_cancel_spec, pthread_testcancel_spec, pthread_join_spec, pthread_exit_spec, pthread_self_spec}
Transition pthread_cancelpoints_scen                       {}
Transition init_exit_join_scenario                         {createProcess}
Transition pthread_create_thread_scen                      {pthread_self_spec, __errno_location_spec, pthread_attr_init_spec, pthread_attr_setdetachstate_spec, pthread_create_spec}
Transition pthread_exit_scen                               {pthread_exit_spec, pthread_join_spec}
Transition pthread_equal_scen                              {pthread_equal_spec}
Transition pthread_join_scen                               {pthread_join_spec}
Transition pthread_detach_scen                             {pthread_detach_spec, pthread_once_spec}
Transition init_rwlockattr_scenario                        {}
Transition pthread_rwlockattr_scen                         {pthread_rwlockattr_init_spec, pthread_rwlockattr_getpshared_spec, pthread_rwlockattr_setpshared_spec, pthread_rwlockattr_destroy_spec}
Transition init_deadlock_scenario                          {createThread}
Transition deadlock_init_scen                              {pthread_rwlock_init_spec}
Transition deadlock_destroy_scen                           {pthread_rwlock_destroy_spec}
Transition dl_rdlock_scen                                  {pthread_rwlock_rdlock_spec}
Transition dl_wrlock_scen                                  {pthread_rwlock_wrlock_spec}
Transition dl_timedrdlock_scen                             {pthread_rwlock_timedrdlock_spec}
Transition dl_timedwrlock_scen                             {pthread_rwlock_timedwrlock_spec}
Transition dl_unlock_scen                                  {pthread_rwlock_unlock_spec}
Transition init_rwlock_errors_scenario                     {createThread}
Transition er_initattr_scen                                {pthread_rwlockattr_init_spec}
Transition er_initattr_bad_scen                            {pthread_rwlockattr_init_spec}
Transition er_destroyattr_scen                             {pthread_rwlockattr_destroy_spec}
Transition er_init_scen                                    {pthread_rwlock_init_spec}
Transition er_destroy_scen                                 {pthread_rwlock_destroy_spec}
Transition er_rdlock_scen                                  {pthread_rwlock_rdlock_spec}
Transition er_tryrdlock_scen                               {pthread_rwlock_tryrdlock_spec}
Transition er_timedrdlock_scen                             {pthread_rwlock_timedrdlock_spec}
Transition er_timedrdlock_bad_scen                         {pthread_rwlock_timedrdlock_bad_spec}
Transition er_wrlock_scen                                  {pthread_rwlock_wrlock_spec}
Transition er_trywrlock_scen                               {pthread_rwlock_trywrlock_spec}
Transition er_timedwrlock_scen                             {pthread_rwlock_timedwrlock_spec}
Transition er_timedwrlock_bad_scen                         {pthread_rwlock_timedwrlock_bad_spec}
Transition er_unlock_scen                                  {pthread_rwlock_unlock_spec}
Transition er_rdlock1_scen                                 {pthread_rwlock_rdlock_spec}
Transition er_wrlock1_scen                                 {pthread_rwlock_wrlock_spec}
Transition er_unlock1_scen                                 {pthread_rwlock_unlock_spec}
Transition sleep_scen                                      {}
Transition init_rwlock_init_destroy_scenario               {createThread}
Transition rwlock_init_scen                                {pthread_rwlock_init_spec}
Transition rwlock_destroy_scen                             {pthread_rwlock_destroy_spec}
Transition init_N_M_lightscenario                          {createThread}
Transition init_N_M_lightscen                              {pthread_rwlock_init_spec, pthread_rwlock_destroy_spec, pthread_rwlock_rdlock_spec, pthread_rwlock_tryrdlock_spec}
Transition tryrdlock_stuck_scen                            {pthread_rwlock_tryrdlock_spec, pthread_rwlock_wrlock_spec, pthread_rwlock_unlock_spec}
Transition init_N_M_scenario                               {createThread}
Transition init_N_M_scen                                   {pthread_rwlock_init_spec}
Transition destroy_N_M_scen                                {pthread_rwlock_destroy_spec}
Transition rdlock_takeover_N_M_scen                        {pthread_rwlock_rdlock_spec}
Transition tryrdlock_takeover_N_M_scen                     {pthread_rwlock_tryrdlock_spec}
Transition rdlock_stuck_N_M_scen                           {pthread_rwlock_rdlock_spec}
Transition tryrdlock_stuck_N_M_scen                        {pthread_rwlock_tryrdlock_spec}
Transition wrlock_takeover_N_M_scen                        {pthread_rwlock_wrlock_spec}
Transition trywrlock_takeover_N_M_scen                     {pthread_rwlock_trywrlock_spec}
Transition wrlock_stuck_N_M_scen                           {pthread_rwlock_wrlock_spec}
Transition trywrlock_stuck_N_M_scen                        {pthread_rwlock_trywrlock_spec}
Transition unlock_reader_N_M_scen                          {pthread_rwlock_unlock_spec}
Transition unlock_writer_N_M_scen                          {pthread_rwlock_unlock_spec}
Transition init_rp_complete_scenario                       {createThread}
Transition rp_rdlock_takeover_scen                         {pthread_rwlock_rdlock_spec}
Transition rp_tryrdlock_takeover_scen                      {pthread_rwlock_tryrdlock_spec}
Transition rp_rdlock_stuck_scen                            {pthread_rwlock_rdlock_spec}
Transition rp_tryrdlock_stuck_scen                         {pthread_rwlock_tryrdlock_spec}
Transition rp_wrlock_takeover_scen                         {pthread_rwlock_wrlock_spec}
Transition rp_trywrlock_takeover_scen                      {pthread_rwlock_trywrlock_spec}
Transition rp_wrlock_stuck_scen                            {pthread_rwlock_wrlock_spec}
Transition rp_trywrlock_stuck_scen                         {pthread_rwlock_trywrlock_spec}
Transition rp_unlock_reader_scen                           {pthread_rwlock_unlock_spec}
Transition rp_unlock_writer_scen                           {pthread_rwlock_unlock_spec}
Transition rp_pthread_rwlock_init_scen                     {pthread_rwlock_init_spec}
Transition rp_pthread_rwlock_destroy_scen                  {pthread_rwlock_destroy_spec}
Transition init_complete_scenario                          {createThread}
Transition rdlock_takeover_scen                            {pthread_rwlock_rdlock_spec}
Transition tryrdlock_takeover_scen                         {pthread_rwlock_tryrdlock_spec}
Transition rdlock_stuck_scen                               {pthread_rwlock_rdlock_spec}
Transition tryrdlock_stuck_scen                            {pthread_rwlock_tryrdlock_spec}
Transition wrlock_takeover_scen                            {pthread_rwlock_wrlock_spec}
Transition trywrlock_takeover_scen                         {pthread_rwlock_trywrlock_spec}
Transition wrlock_stuck_scen                               {pthread_rwlock_wrlock_spec}
Transition trywrlock_stuck_scen                            {pthread_rwlock_trywrlock_spec}
Transition unlock_reader_scen                              {pthread_rwlock_unlock_spec}
Transition unlock_writer_scen                              {pthread_rwlock_unlock_spec}
Transition single_rwlock_init_scen                         {pthread_rwlock_init_spec}
Transition single_rwlock_destroy_scen                      {pthread_rwlock_destroy_spec}
Transition init_rwlockattr_scenario                        {}
Transition pthread_rwlockattr_scen                         {pthread_rwlockattr_init_spec, pthread_rwlockattr_getpshared_spec, pthread_rwlockattr_setpshared_spec, pthread_rwlockattr_destroy_spec}
Transition init_pthread_scheduler_scenario                 {sysconf_spec}
Transition pthread_getconcurrency_scen                     {pthread_getconcurrency_spec}
Transition pthread_setconcurrency_scen                     {pthread_setconcurrency_spec, pthread_getconcurrency_spec, pthread_create_spec, createThread, sysconf_spec}
Transition pthread_getschedparam_scen                      {pthread_getschedparam_spec}
Transition pthread_setschedparam_scen                      {pthread_setschedparam_spec, pthread_getschedparam_spec}
Transition pthread_setschedprio_scen                       {pthread_setschedprio_spec, pthread_getschedparam_spec}
Transition init_sem_complex_scen_data                      {sem_open_spec, sem_init_spec, sem_close_spec, sem_unlink_spec, sem_destroy_spec}
Transition init_sem_complex_scenario                       {createThread}
Transition sem_post_scen                                   {sem_post_spec}
Transition sem_wait_scen                                   {sem_wait_spec}
Transition sem_trywait_scen                                {sem_trywait_spec}
Transition sem_getvalue_scen                               {sem_getvalue_spec}
Transition init_sem_error_scen_data                        {}
Transition init_sem_error_scenario                         {createThread, createProcess}
Transition sem_getvalue_error_scen                         {sem_open_spec, sem_getvalue_spec, sem_unlink_spec, sem_close_spec, sem_wait_spec, sem_init_spec, sem_destroy_spec}
Transition sem_wait_error_scen                             {sem_open_spec, sem_timedwait_spec, sem_unlink_spec, sem_close_spec}
Transition sem_timedwait_error_scen                        {}
Transition sem_trywait_error_scen                          {sem_open_spec, sem_trywait_spec, sem_unlink_spec, sem_close_spec, sem_init_spec, sem_destroy_spec, sem_post_spec}
Transition sem_post_error_scen                             {}
Transition sem_open_error_scen                             {sem_open_spec, sem_unlink_spec, sem_close_spec}
Transition sem_init_error_scen                             {sem_init_spec, sem_destroy_spec, sem_wait_spec}
Transition sem_destroy_error_scen                          {}
Transition init_sem_close_open_scen_data                   {}
Transition init_sem_close_open_scenario                    {createProcess}
Transition close_open_scen                                 {sem_open_spec, sem_close_spec, sem_unlink_spec}
Transition init_destroy_scen                               {sem_init_spec, sem_destroy_spec}
Transition timedwait_scen                                  {sem_open_spec, sem_timedwait_spec, sem_close_spec, sem_unlink_spec}
Transition sem_open_scen                                   {sem_open_spec}
Transition sem_wait_scen                                   {sem_wait_spec}
Transition sem_post_scen                                   {sem_post_spec}
Transition sem_close_scen                                  {sem_close_spec}
Transition init_sem_plain_scen_data                        {}
Transition init_sem_plain_scenario                         {createThread}
Transition warmup_scen                                     {sem_open_spec, sem_getvalue_spec, sem_post_spec, sem_close_spec, sem_wait_spec, sem_unlink_spec}
Transition warmup_unnamed_scen                             {sem_init_spec, sem_destroy_spec}
Transition init_tls_scenario                               {createProcess, sysconf_spec, createThreadInContext}
Transition init_manykeys_scenario                          {createProcess, sysconf_spec, createThreadInContext, pthread_exit_spec}
Transition tls_create_key_scen                             {pthread_key_create_spec}
Transition tls_delete_key_scen                             {pthread_key_delete_spec}
Transition tls_set_specific_scen                           {pthread_setspecific_spec}
Transition tls_get_specific_scen                           {pthread_getspecific_spec}
Transition tls_setget_scen                                 {pthread_setspecific_spec, pthread_getspecific_spec, pthread_key_delete_spec, pthread_key_create_spec, _pthread_cleanup_push_spec, pthread_cancel_spec, pthread_testcancel_spec, pthread_finish_spec, pthread_exit_spec}
Transition mk_create_key_scen                              {pthread_key_create_spec}
Transition mk_delete_key_scen                              {pthread_key_delete_spec}
Transition mk_set_specific_scen                            {pthread_setspecific_spec}
Transition mk_get_specific_scen                            {pthread_getspecific_spec}
Transition tls_fork_scen                                   {sysconf_spec, createThreadInContext}
Transition errors_scen                                     {pthread_key_create_spec, pthread_key_delete_spec, pthread_setspecific_spec}
Transition init_signal_specific_scenario                   {createProcess, createThreadInContext, sigaction_spec, sigemptyset_spec, sigaddset_spec, pthread_sigmask_spec, kill_spec, sigdelset_spec, pthread_kill_spec}
Transition init_kill_and_sigaction_scenario                {createProcess, sigaction_spec}
Transition kill_scen                                       {kill_spec}
Transition sigaction_scen                                  {sigaction_spec}
Transition pthread_sigmask_scen                            {sigemptyset_spec, sigfillset_spec, pthread_sigmask_spec}
Transition init_sigset_auto_scenario                       {}
Transition sigaddset_scen                                  {sigaddset_spec}
Transition sigdelset_scen                                  {sigdelset_spec}
Transition sigemptyset_scen                                {sigemptyset_spec}
Transition sigfillset_scen                                 {sigfillset_spec}
Transition sigisemptyset_scen                              {sigisemptyset_spec}
Transition sigismember_scen                                {sigismember_spec}
Transition init_sigset_scenario                            {}
Transition sigset_add_del_ismember_scen                    {sigemptyset_spec, sigaddset_spec, sigismember_spec, sigdelset_spec}
Transition sigset_sigempty_sigfill_isempty_scen            {sigisemptyset_spec, sigemptyset_spec, sigaddset_spec, sigismember_spec, sigfillset_spec, sigdelset_spec}
Transition sigset_sigand_sigor_scen                        {sigemptyset_spec, sigaddset_spec, sigandset_spec, sigorset_spec, sigismember_spec, sigdelset_spec}
Transition init_netdata_scenario                           {}
Transition htonl_ntohl_scen                                {htonl_spec, ntohl_spec}
Transition htons_ntohs_scen                                {htons_spec, ntohs_spec}
Transition init_host_scenario                              {}
Transition init_host_scenario2                             {createProcess, sysconf_spec, getpwnam_spec, setgid_spec, setuid_spec, gethostname_spec, sethostname_spec}
Transition gethostid_scen                                  {gethostid_spec}
Transition gethostname_scen                                {gethostname_spec}
Transition sethostname_scen                                {sethostname_spec}
Transition uname_scen                                      {uname_spec}
Transition init_sysconf_scenario                           {open_spec, close_spec, sysconf_spec}
Transition sysconf_scen                                    {sysconf_spec}
Transition __sysconf_scen                                  {__sysconf_spec, confstr_spec}
Transition getpagesize_scen                                {getpagesize_spec}
Transition __getpagesize_scen                              {__getpagesize_spec}
Transition pathconf_scen                                   {pathconf_spec}
Transition fpathconf_scen                                  {fpathconf_spec}
Transition init_account_scenario                           {}
Transition endutxent_scen                                  {endutxent_spec}
Transition getutxent_scen                                  {getutxent_spec}
Transition getutxid_scen                                   {setutxent_spec, getutxent_spec, getutxid_spec}
Transition getutxline_scen                                 {setutxent_spec, getutxent_spec, getutxline_spec}
Transition pututxline_scen                                 {setutxent_spec, getutxent_spec, pututxline_spec}
Transition setutxent_scen                                  {setutxent_spec}
Transition getutent_scen                                   {getutent_spec}
Transition getutent_r_scen                                 {setutxent_spec, getutxent_spec, getutent_r_spec}
Transition login_scen                                      {setutent_spec, getutent_spec, login_spec}
Transition logout_scen                                     {logout_spec}
Transition logwtmp_scen                                    {logwtmp_spec}
Transition setutent_scen                                   {setutent_spec}
Transition utmpname_scen                                   {utmpname_spec}
Transition init_group_scenario                             {}
Transition init_group_cancel_scenario                      {}
Transition group_scen                                      {getgrouplist_spec, getgrgid_spec, getgrgid_r_spec, getgrnam_spec, getgrnam_r_spec, getgrent_spec, setgrent_spec, endgrent_spec}
Transition group_cancel_scen                               {createThread, pthread_setcancelstate_spec, pthread_cancel_spec, getgrent_spec, setgrent_spec, endgrent_spec, getgrgid_spec, getgrgid_r_spec, getgrnam_spec, getgrnam_r_spec}
Transition init_system_user_scenario                       {}
Transition init_user_cancel_scenario                       {}
Transition init_additional_scenario                        {createProcess, createThread}
Transition getpwent_scen                                   {getpwent_spec}
Transition setpwent_scen                                   {setpwent_spec}
Transition endpwent_scen                                   {endpwent_spec}
Transition getp_and_r_scen                                 {getpwnam_spec, getpwnam_r_spec, getpwuid_spec, getpwuid_r_spec}
Transition getpwent_filled_scen                            {endpwent_spec, getpwent_spec}
Transition additional_scen                                 {setuid_spec, setgid_spec, getpwnam_r_spec, getpwuid_r_spec}
Transition user_cancel_scen                                {createThread, pthread_setcancelstate_spec, pthread_cancel_spec, getpwent_spec, endpwent_spec, getpwnam_spec, getpwuid_spec, getpwnam_r_spec, getpwuid_r_spec}
Transition init_scenario                                   {}
Transition init_time_clock_scenario                        {}
Transition clock_getcpuclockid_scen                        {clock_getcpuclockid_spec}
Transition clock_getres_scen                               {clock_getres_spec}
Transition clock_gettime_scen                              {clock_gettime_spec}
Transition clock_nanosleep_scen                            {clock_nanosleep_spec}
Transition clock_settime_scen                              {clock_settime_spec}
Transition init_scenario                                   {}
Transition init_alarm_scenario                             {}
Transition init_ualarm_scenario                            {}
Transition alarm_scen                                      {alarm_spec}
Transition ualarm_scen                                     {ualarm_spec}
Transition init_bit_scenario                               {}
Transition ffs1_scen                                       {ffs_spec}
Transition ffs2_scen                                       {ffs_spec}
Transition toascii_scen                                    {toascii_spec}
Transition init_compress_scenario                          {}
Transition adler32_scen                                    {adler32_spec}
Transition compress_scen                                   {compress_spec}
Transition compress2_scen                                  {compress2_spec}
Transition compress_compress2_scen                         {compress2_spec, compress_spec}
Transition compressBound_scen                              {compressBound_spec, compress_spec, compress2_spec}
Transition compress_uncompress_scen                        {compress_spec, uncompress_spec}
Transition crc32_scen                                      {crc32_spec}
Transition get_crc_table_scen                              {get_crc_table_spec}
Transition zError_scen                                     {zError_spec}
Transition zError_err_scen                                 {zError_spec}
Transition zlibVersion_scen                                {zlibVersion_spec}
Transition get_z_stream_size_scen                          {}
Transition deflateInit2__scen                              {zlibVersion_spec, deflateInit2__spec}
Transition deflateInit__scen                               {zlibVersion_spec, deflateInit__spec, deflateInit2__spec}
Transition deflate_scen                                    {zlibVersion_spec, deflateInit__spec, deflate_spec}
Transition deflateBound_scen                               {zlibVersion_spec, deflateInit__spec, deflateBound_spec, deflate_spec}
Transition deflateCopy_scen                                {zlibVersion_spec, deflateInit__spec, deflateCopy_spec}
Transition deflateEnd_scen                                 {zlibVersion_spec, deflateInit__spec, deflate_spec, deflateEnd_spec}
Transition deflateParams_scen                              {zlibVersion_spec, deflateInit__spec, deflate_spec, deflateParams_spec}
Transition deflateReset_scen                               {zlibVersion_spec, deflateInit__spec, deflate_spec, deflateReset_spec}
Transition deflateSetDictionary_scen                       {zlibVersion_spec, deflateInit__spec, deflateSetDictionary_spec}
Transition inflate_scen                                    {zlibVersion_spec, deflateInit__spec, deflate_spec, inflateInit__spec, inflate_spec}
Transition inflateInit2__scen                              {zlibVersion_spec, deflateInit2__spec, deflate_spec, inflateInit2__spec, inflate_spec}
Transition inflateInit__scen                               {zlibVersion_spec, deflateInit__spec, deflateInit2__spec, inflateInit2__spec, inflateInit__spec}
Transition inflateEnd_scen                                 {zlibVersion_spec, deflateInit__spec, deflate_spec, inflateInit__spec, inflate_spec, inflateEnd_spec}
Transition inflateReset_scen                               {zlibVersion_spec, deflateInit__spec, deflate_spec, inflateInit__spec, inflate_spec, inflateReset_spec}
Transition inflateSetDictionary_scen                       {zlibVersion_spec, deflateInit__spec, deflateSetDictionary_spec, deflate_spec, inflateInit__spec, inflate_spec, inflateSetDictionary_spec}
Transition inflateSync_scen                                {zlibVersion_spec, deflateInit__spec, deflate_spec, inflateInit__spec, inflateSync_spec}
Transition inflateSyncPoint_scen                           {zlibVersion_spec, deflateInit__spec, deflate_spec, inflateInit__spec, inflateSyncPoint_spec}
Transition gzopen_scen                                     {gzopen_spec}
Transition gzclose_scen                                    {gzopen_spec, gzclose_spec}
Transition gzdopen_scen                                    {gzopen_spec}
Transition gzeof_scen                                      {gzopen_spec, gzeof_spec}
Transition gzerror_scen                                    {gzopen_spec, gzerror_spec}
Transition gzflush_scen                                    {gzopen_spec, gzflush_spec}
Transition gzgetc_gzputc_scen                              {gzopen_spec, gzputc_spec, gzclose_spec, gzgetc_spec, gzeof_spec}
Transition gzgets_gzputs_scen                              {gzopen_spec, gzputs_spec, gzclose_spec, gzgets_spec}
Transition gzread_gzwrite_scen                             {gzopen_spec, gzwrite_spec, gzclose_spec, gzread_spec}
Transition gzrewind_scen                                   {gzopen_spec, gzwrite_spec, gzclose_spec, gzread_spec, gzrewind_spec, gzseek_spec, gztell_spec}
Transition gzsetparams_scen                                {gzopen_spec, gzsetparams_spec, gzwrite_spec, gzclose_spec, gzread_spec}
Transition init_strint_scenario                            {}
Transition strtol_scen                                     {strtol_spec}
Transition strtoll_scen                                    {strtoll_spec}
Transition __strtol_internal_scen                          {__strtol_internal_spec}
Transition __strtoll_internal_scen                         {__strtoll_internal_spec}
Transition strtoq_scen                                     {strtoq_spec}
Transition strtoimax_scen                                  {strtoimax_spec}
Transition strtoul_scen                                    {strtoul_spec}
Transition strtoull_scen                                   {strtoull_spec}
Transition __strtoul_internal_scen                         {__strtoul_internal_spec}
Transition __strtoull_internal_scen                        {__strtoull_internal_spec}
Transition strtouq_scen                                    {strtouq_spec}
Transition strtoumax_scen                                  {strtoumax_spec}
Transition atoi_scen                                       {atoi_spec}
Transition atol_scen                                       {atol_spec}
Transition atoll_scen                                      {atoll_spec}
Transition l64a_scen                                       {l64a_spec}
Transition a64l_scen                                       {a64l_spec}
Transition init_token_scenario                             {createThread}
Transition strsep_scen                                     {strsep_spec}
Transition strtok_scen                                     {strtok_spec}
Transition strtok_r_scen                                   {strtok_r_spec}
Transition __strtok_r_scen                                 {__strtok_r_spec}
Transition init_wchar_scenario                             {}
Transition btowc_wctob_scen                                {btowc_spec, wctob_spec}
Transition wctomb_mblen_mbtowc_scen                        {wctomb_spec, mblen_spec, mbtowc_spec}
Transition mbtowc_scen                                     {mbtowc_spec}
Transition wctomb_scen                                     {wctomb_spec}
Transition mblen_scen                                      {mblen_spec}
Transition wcrtomb_mbrlen_mbrtowc_scen                     {wcrtomb_spec, mbrlen_spec, mbrtowc_spec}
Transition mbrtowc_scen                                    {mbrtowc_spec}
Transition mbrlen_scen                                     {mbrlen_spec}
Transition wcrtomb_scen                                    {wcrtomb_spec}
Transition mbsinit_scen                                    {mbsinit_spec}
Transition wcstombs_mbstowcs_scen                          {wcstombs_spec, mbstowcs_spec}
Transition mbstowcs_scen                                   {mbstowcs_spec}
Transition wcstombs_scen                                   {wcstombs_spec}
Transition wcsrtombs_mbsrtowcs_scen                        {wcsrtombs_spec, mbsrtowcs_spec}
Transition wcsrtombs_scen                                  {wcsrtombs_spec}
Transition mbsrtowcs_scen                                  {mbsrtowcs_spec}
Transition wcsnrtombs_mbsnrtowcs_scen                      {wcsnrtombs_spec, mbsnrtowcs_spec}
Transition mbsnrtowcs_scen                                 {mbsnrtowcs_spec}
Transition wcsnrtombs_scen                                 {wcsnrtombs_spec}
Transition init_wtoken_scenario                            {}
Transition wcstol_scen                                     {wcstol_spec}
Transition __wcstol_internal_scen                          {__wcstol_internal_spec}
Transition wcstoll_scen                                    {wcstoll_spec}
Transition wcstoq_scen                                     {wcstoq_spec}
Transition wcstoimax_scen                                  {wcstoimax_spec}
Transition wcstoul_scen                                    {wcstoul_spec}
Transition wcstoull_scen                                   {wcstoull_spec}
Transition __wcstoul_internal_scen                         {__wcstoul_internal_spec}
Transition wcstoumax_scen                                  {wcstoumax_spec}
Transition wcstouq_scen                                    {wcstouq_spec}
Transition init_wtoken_scenario                            {}
Transition wcstok_scen                                     {wcstok_spec}
Transition init_crypt_scenario                             {}
Transition crypt_scen                                      {crypt_spec}
Transition encrypt_scen                                    {encrypt_spec}
Transition setkey_scen                                     {setkey_spec}
Transition setkey_encrypt_scen                             {setkey_spec, encrypt_spec}
Transition init_money_scenario                             {}
Transition strfmon_scen                                    {strfmon_spec}
Transition init_getopt_scenario                            {setenv_spec}
Transition getopt_scen                                     {getopt_spec}
Transition getopt_err_no_arg_scen                          {getopt_spec}
Transition getopt_09_scen                                  {getopt_spec}
Transition getopt_long_scen                                {getopt_long_spec}
Transition getopt_long_err_no_arg_scen                     {getopt_long_spec}
Transition getopt_long_09_scen                             {getopt_long_spec}
Transition getopt_long_only_scen                           {getopt_long_only_spec}
Transition getsubopt_posix_scen                            {getsubopt_spec}
Transition getsubopt_implementation_scen                   {getsubopt_spec}
Transition init_inet_scenario                              {inet_addr_spec}
Transition inet_ntoa_scen                                  {inet_ntoa_spec, inet_ntop_spec, inet_pton_spec}
Transition init_pam_scenario                               {}
Transition pam_min_scen                                    {setuid_spec, setgid_spec, pam_start_spec, pam_set_item_spec, pam_get_item_spec, pam_authenticate_spec, pam_acct_mgmt_spec, pam_setcred_spec, pam_open_session_spec, pam_chauthtok_spec, pam_fail_delay_spec, pam_getenvlist_spec, pam_strerror_spec, pam_close_session_spec, pam_end_spec}
Transition init_hash_scenario                              {createProcess, createThread}
Transition hash_scen                                       {hcreate_spec, hsearch_spec, hdestroy_spec}
Transition init_queue_scenario                             {}
Transition linear_queue_scen                               {create_linear_queue_spec, insque_spec, remque_spec}
Transition circular_queue_scen                             {create_circular_queue_spec, insque_spec, remque_spec}
Transition init_search_scenario                            {}
Transition bsearch_scen                                    {bsearch_spec}
Transition lfind_scen                                      {lfind_spec}
Transition lsearch_scen                                    {lsearch_spec}
Transition qsort_scen                                      {qsort_spec}
Transition init_tree_scenario                              {}
Transition tree_scen                                       {tsearch_spec, tdelete_spec, twalk_spec, tfind_spec}
Transition init_mem_scenario                               {}
Transition __mempcpy_scen                                  {__mempcpy_spec}
Transition __rawmemchr_scen                                {__rawmemchr_spec}
Transition bcmp_diff_scen                                  {bcmp_spec}
Transition bcmp_same_scen                                  {bcmp_spec}
Transition bcopy_scen                                      {bcopy_spec}
Transition bzero_scen                                      {bzero_spec}
Transition memccpy_scen                                    {memccpy_spec}
Transition memchr_scen                                     {memchr_spec}
Transition memcmp_diff_scen                                {memcmp_spec}
Transition memcmp_same_scen                                {memcmp_spec}
Transition memcpy_scen                                     {memcpy_spec}
Transition memmem_diff_scen                                {memmem_spec}
Transition memmem_same_scen                                {memmem_spec}
Transition memmove_scen                                    {memmove_spec}
Transition memrchr_scen                                    {memrchr_spec}
Transition memset_scen                                     {memset_spec}
Transition swab_scen                                       {swab_spec}
Transition init_str_scenario                               {}
Transition strcpy_scen                                     {strcpy_spec}
Transition stpcpy_scen                                     {stpcpy_spec}
Transition __stpcpy_scen                                   {__stpcpy_spec}
Transition strcat_scen                                     {strcat_spec}
Transition strncat_scen                                    {strncat_spec}
Transition strdup_scen                                     {strdup_spec}
Transition __strdup_scen                                   {__strdup_spec}
Transition strndup_scen                                    {strndup_spec}
Transition strlen_scen                                     {strlen_spec}
Transition strnlen_scen                                    {strnlen_spec}
Transition strncpy_scen                                    {strncpy_spec}
Transition stpncpy_scen                                    {stpncpy_spec}
Transition strcmp_scen                                     {strcmp_spec}
Transition strncmp_scen                                    {strncmp_spec}
Transition strchr_scen                                     {strchr_spec}
Transition strspn_scen                                     {strspn_spec}
Transition strrchr_scen                                    {strrchr_spec}
Transition rindex_scen                                     {rindex_spec}
Transition strstr_scen                                     {strstr_spec}
Transition index_scen                                      {index_spec}
Transition strcspn_scen                                    {strcspn_spec}
Transition strpbrk_scen                                    {strpbrk_spec}
Transition init_wmem_scenario                              {}
Transition wmemchr_scen                                    {wmemchr_spec}
Transition wmemcmp_same_scen                               {wmemcmp_spec}
Transition wmemcmp_diff_scen                               {wmemcmp_spec}
Transition wmemcpy_scen                                    {wmemcpy_spec}
Transition wmemmove_scen                                   {wmemmove_spec}
Transition wmemset_scen                                    {wmemset_spec}
Transition init_wstr_scenario                              {}
Transition wcscpy_scen                                     {wcscpy_spec}
Transition wcsncpy_scen                                    {wcsncpy_spec}
Transition wcscat_scen                                     {wcscat_spec}
Transition wcsncat_scen                                    {wcsncat_spec}
Transition wcswcs_scen                                     {wcswcs_spec}
Transition wcsspn_scen                                     {wcsspn_spec}
Transition wcscspn_scen                                    {wcscspn_spec}
Transition wcsdup_scen                                     {wcsdup_spec}
Transition wcscmp_scen                                     {wcscmp_spec}
Transition wcschr_scen                                     {wcschr_spec}
Transition wcslen_scen                                     {wcslen_spec}
Transition wcsncmp_scen                                    {wcsncmp_spec}
Transition wcspbrk_scen                                    {wcspbrk_spec}
Transition wcpcpy_scen                                     {wcpcpy_spec}
Transition wcpncpy_scen                                    {wcpncpy_spec}
Transition wcsnlen_scen                                    {wcsnlen_spec}
Transition wcsrchr_scen                                    {wcsrchr_spec}
Transition wcsstr_scen                                     {wcsstr_spec}
Transition wcscpy_scen                                     {wcscpy_spec}
Transition wcsncpy_scen                                    {wcsncpy_spec}
Transition wcscat_scen                                     {wcscat_spec}
Transition wcsncat_scen                                    {wcsncat_spec}
Transition wcswcs_scen                                     {wcswcs_spec}
Transition wcsspn_scen                                     {wcsspn_spec}
Transition wcscspn_scen                                    {wcscspn_spec}
Transition wcsdup_scen                                     {wcsdup_spec}
Transition wcscmp_scen                                     {wcscmp_spec}
Transition wcschr_scen                                     {wcschr_spec}
Transition wcslen_scen                                     {wcslen_spec}
Transition wcsncmp_scen                                    {wcsncmp_spec}
Transition wcspbrk_scen                                    {wcspbrk_spec}
Transition wcpcpy_scen                                     {wcpcpy_spec}
Transition wcpncpy_scen                                    {wcpncpy_spec}
Transition wcsnlen_scen                                    {wcsnlen_spec}
Transition wcsrchr_scen                                    {wcsrchr_spec}
Transition wcsstr_scen                                     {wcsstr_spec}
Transition init_wordexp_scenario                           {}
Transition wordexp_scen                                    {wordexp_spec}
Specification closedir_spec                                {closedir}
Specification mkdir_spec                                   {mkdir}
Specification scandir_spec                                 {scandir}
Specification opendir_spec                                 {opendir}
Specification readdir_spec                                 {readdir}
Specification readdir64_spec                               {readdir64}
Specification readdir_r_spec                               {readdir_r}
Specification rewinddir_spec                               {rewinddir}
Specification rmdir_spec                                   {rmdir}
Specification seekdir_spec                                 {seekdir}
Specification telldir_spec                                 {telldir}
Specification dirfd_spec                                   {dirfd}
Specification mkfifo_spec                                  {mkfifo}
Specification close_fifo_spec                              {close}
Specification write_fifo_spec                              {write_fifo}
Specification writev_fifo_spec                             {writev_fifo}
Specification read_fifo_spec                               {read_fifo}
Specification readv_fifo_spec                              {readv_fifo}
Specification open_fifo_spec                               {}
Specification __xmknod_spec                                {__xmknod}
Specification link_spec                                    {link}
Specification remove_spec                                  {remove}
Specification rename_spec                                  {rename}
Specification unlink_spec                                  {unlink}
Specification ftw_spec                                     {ftw}
Specification ftw64_spec                                   {ftw64}
Specification nftw_spec                                    {nftw}
Specification nftw64_spec                                  {nftw64}
Specification setglob_spec                                 {}
Specification setglob64_spec                               {}
Specification glob_spec                                    {glob}
Specification glob64_spec                                  {glob64}
Specification globfree_spec                                {globfree}
Specification globfree64_spec                              {globfree64}
Specification access_spec                                  {access}
Specification chmod_spec                                   {chmod}
Specification chown_spec                                   {chown}
Specification fchmod_spec                                  {fchmod}
Specification fchown_spec                                  {fchown}
Specification lchown_spec                                  {lchown}
Specification __xstat_spec                                 {__xstat}
Specification __xstat64_spec                               {__xstat64}
Specification __lxstat_spec                                {__lxstat}
Specification __lxstat64_spec                              {__lxstat64}
Specification __fxstat_spec                                {__fxstat}
Specification __fxstat64_spec                              {__fxstat64}
Specification utime_spec                                   {utime}
Specification utimes_spec                                  {utimes}
Specification fstatvfs_spec                                {fstatvfs}
Specification fstatvfs64_spec                              {fstatvfs64}
Specification statvfs_spec                                 {statvfs}
Specification statvfs64_spec                               {statvfs64}
Specification basename_spec                                {basename}
Specification dirname_spec                                 {dirname}
Specification realpath_spec                                {realpath}
Specification readlink_spec                                {readlink}
Specification symlink_spec                                 {symlink}
Specification mkstemp_spec                                 {mkstemp}
Specification mkstemp64_spec                               {mkstemp64}
Specification mktemp_spec                                  {mktemp}
Specification tempnam_spec                                 {tempnam}
Specification tmpfile_spec                                 {tmpfile}
Specification tmpfile64_spec                               {tmpfile64}
Specification tmpnam_spec                                  {tmpnam}
Specification close_spec                                   {close}
Specification creat_spec                                   {creat, creat64}
Specification creat64_spec                                 {creat64}
Specification dup_spec                                     {dup}
Specification dup2_spec                                    {dup2}
Specification fcntl_spec                                   {}
Specification fcntl_F_DUPFD_spec                           {fcntl}
Specification fcntl_F_GETFD_spec                           {fcntl}
Specification fcntl_F_SETFD_spec                           {fcntl}
Specification fcntl_F_GETFL_spec                           {}
Specification fcntl_F_SETFL_spec                           {}
Specification fcntl_F_GETOWN_spec                          {fcntl}
Specification fcntl_F_SETOWN_spec                          {fcntl}
Specification fcntl_F_GETLCK_spec                          {}
Specification fcntl_F_SETLCK_spec                          {fcntl}
Specification fcntl_F_SETLKW_spec                          {}
Specification fdatasync_spec                               {fdatasync}
Specification flock_spec                                   {flock}
Specification fsync_spec                                   {fsync}
Specification ftruncate_spec                               {ftruncate, ftruncate64}
Specification ftruncate64_spec                             {ftruncate64}
Specification lockf_F_TLOCK_spec                           {lockf, lockf64}
Specification lockf_F_UNLOCK_spec                          {lockf, lockf64}
Specification lockf_F_TEST_spec                            {lockf, lockf64}
Specification lockf_F_LOCK_spec                            {}
Specification lockf64_spec                                 {lockf64}
Specification lseek_spec                                   {lseek, lseek64}
Specification lseek64_spec                                 {lseek64}
Specification open_spec                                    {open, open64}
Specification open64_spec                                  {open64}
Specification pread_spec                                   {pread, pread64}
Specification pread64_spec                                 {pread64}
Specification pwrite_spec                                  {pwrite, pwrite64}
Specification pwrite64_spec                                {pwrite64}
Specification read_spec                                    {read}
Specification readv_spec                                   {readv}
Specification sync_spec                                    {sync}
Specification truncate_spec                                {truncate, truncate64}
Specification truncate64_spec                              {truncate64}
Specification write_spec                                   {write}
Specification writev_spec                                  {writev}
Specification setbuf_spec                                  {setbuf}
Specification setbuffer_spec                               {setbuffer}
Specification setvbuf_spec                                 {setvbuf}
Specification _IO_feof_spec                                {_IO_feof}
Specification _IO_getc_spec                                {_IO_getc}
Specification _IO_putc_spec                                {_IO_putc}
Specification _IO_puts_spec                                {_IO_puts}
Specification __fpending_spec                              {__fpending}
Specification clearerr_spec                                {clearerr}
Specification fclose_spec                                  {fclose}
Specification fdopen_spec                                  {fdopen}
Specification feof_spec                                    {feof}
Specification ferror_spec                                  {ferror}
Specification fflush_spec                                  {fflush_unlocked, fflush}
Specification fflush_unlocked_spec                         {fflush_unlocked}
Specification fgetc_spec                                   {fgetc, getc, getc_unlocked, getchar, getchar_unlocked}
Specification fgetpos_spec                                 {fgetpos, fgetpos64}
Specification fgetpos64_spec                               {fgetpos64}
Specification fgets_spec                                   {fgets}
Specification fgetwc_unlocked_spec                         {fgetwc_unlocked}
Specification fileno_spec                                  {fileno}
Specification fopen_spec                                   {fopen, fopen64}
Specification fopen64_spec                                 {fopen64}
Specification fputc_spec                                   {fputc, putc, putc_unlocked, putchar, putchar_unlocked}
Specification fputs_spec                                   {fputs}
Specification fread_spec                                   {fread}
Specification freopen_spec                                 {freopen, freopen64}
Specification freopen64_spec                               {freopen64}
Specification fseek_spec                                   {fseek, fseeko, fseeko64}
Specification fseeko_spec                                  {fseeko}
Specification fseeko64_spec                                {fseeko64}
Specification fsetpos_spec                                 {fsetpos, fsetpos64}
Specification fsetpos64_spec                               {fsetpos64}
Specification ftell_spec                                   {ftell, ftello, ftello64}
Specification ftello_spec                                  {ftello}
Specification ftello64_spec                                {ftello64}
Specification fwrite_spec                                  {fwrite}
Specification getc_spec                                    {getc}
Specification getc_unlocked_spec                           {getc_unlocked}
Specification getchar_spec                                 {getchar}
Specification getchar_unlocked_spec                        {getchar_unlocked}
Specification getw_spec                                    {getw}
Specification putc_spec                                    {putc}
Specification putc_unlocked_spec                           {putc_unlocked}
Specification putchar_spec                                 {putchar}
Specification putchar_unlocked_spec                        {putchar_unlocked}
Specification puts_spec                                    {puts}
Specification putw_spec                                    {putw}
Specification rewind_spec                                  {rewind}
Specification ungetc_spec                                  {ungetc}
Specification flockfile_spec                               {flockfile}
Specification ftrylockfile_spec                            {ftrylockfile}
Specification funlockfile_spec                             {flockfile}
Specification fgetwc_spec                                  {fgetwc}
Specification fgetws_spec                                  {fgetws}
Specification fputwc_spec                                  {fputwc}
Specification fputws_spec                                  {fputws}
Specification fwide_spec                                   {fwide}
Specification getwc_spec                                   {getwc}
Specification getwchar_spec                                {getwchar}
Specification putwc_spec                                   {putwc}
Specification putwchar_spec                                {putwchar}
Specification ungetwc_spec                                 {ungetwc}
Specification poll_spec                                    {poll}
Specification select_spec                                  {select}
Specification pipe_spec                                    {pipe}
Specification ioctl_spec                                   {ioctl}
Specification closelog_spec                                {closelog}
Specification openlog_spec                                 {openlog}
Specification setlogmask_spec                              {setlogmask}
Specification syslog_spec                                  {syslog}
Specification vsyslog_spec                                 {vsyslog}
Specification settermios_spec                              {}
Specification cfgetispeed_spec                             {cfgetispeed}
Specification cfgetospeed_spec                             {cfgetospeed}
Specification cfmakeraw_spec                               {cfmakeraw}
Specification cfsetispeed_spec                             {cfsetispeed}
Specification cfsetospeed_spec                             {cfsetospeed}
Specification cfsetspeed_spec                              {cfsetspeed}
Specification close_tty_spec                               {close_tty}
Specification ctermid_spec                                 {ctermid}
Specification getlogin_spec                                {getlogin}
Specification getlogin_r_spec                              {getlogin_r}
Specification grantpt_spec                                 {grantpt}
Specification isatty_spec                                  {isatty}
Specification open_tty_spec                                {open_tty}
Specification openpty_spec                                 {openpty}
Specification posix_openpt_spec                            {posix_openpt}
Specification ptsname_spec                                 {ptsname}
Specification read_tty_spec                                {read_tty}
Specification tcdrain_spec                                 {tcdrain}
Specification tcflow_spec                                  {tcflow}
Specification tcflush_spec                                 {tcflush}
Specification tcgetattr_spec                               {tcgetattr}
Specification tcgetpgrp_spec                               {tcgetpgrp}
Specification tcgetsid_spec                                {tcgetsid}
Specification tcsendbreak_spec                             {tcsendbreak}
Specification tcsetattr_spec                               {tcsetattr}
Specification tcsetpgrp_spec                               {tcsetpgrp}
Specification ttyio_TIOCGWINSZ_spec                        {}
Specification ttyname_spec                                 {ttyname}
Specification ttyname_r_spec                               {ttyname_r}
Specification unlockpt_spec                                {unlockpt}
Specification write_tty_spec                               {write_tty}
Specification strcoll_spec                                 {strcoll}
Specification strxfrm_spec                                 {strxfrm}
Specification __ctype_tolower_loc_spec                     {}
Specification __ctype_toupper_loc_spec                     {}
Specification _tolower_spec                                {_tolower}
Specification _toupper_spec                                {_toupper}
Specification tolower_spec                                 {tolower}
Specification toupper_spec                                 {toupper}
Specification __ctype_b_loc_spec                           {}
Specification __ctype_get_mb_cur_max_spec                  {__ctype_get_mb_cur_max}
Specification isalnum_spec                                 {isalnum}
Specification isalpha_spec                                 {isalpha}
Specification isascii_spec                                 {isascii}
Specification isblank_spec                                 {isblank}
Specification iscntrl_spec                                 {iscntrl}
Specification isdigit_spec                                 {isdigit}
Specification isgraph_spec                                 {isgraph}
Specification islower_spec                                 {islower}
Specification isprint_spec                                 {isprint}
Specification ispunct_spec                                 {ispunct}
Specification isspace_spec                                 {isspace}
Specification isupper_spec                                 {isupper}
Specification isxdigit_spec                                {isxdigit}
Specification iconv_spec                                   {iconv}
Specification iconv_close_spec                             {iconv_close}
Specification iconv_open_spec                              {iconv_open}
Specification duplocale_spec                               {}
Specification freelocale_spec                              {}
Specification localeconv_spec                              {localeconv}
Specification newlocale_spec                               {}
Specification nl_langinfo_spec                             {nl_langinfo}
Specification setlocale_spec                               {setlocale}
Specification uselocale_spec                               {}
Specification perror_spec                                  {perror}
Specification strerror_spec                                {strerror}
Specification strerror_r_spec                              {strerror_r}
Specification catclose_spec                                {catclose}
Specification catgets_spec                                 {catgets}
Specification catopen_spec                                 {catopen}
Specification bind_textdomain_codeset_spec                 {bind_textdomain_codeset}
Specification bindtextdomain_spec                          {bindtextdomain}
Specification dcgettext_spec                               {dcgettext}
Specification dcngettext_spec                              {dcngettext}
Specification dgettext_spec                                {dgettext}
Specification dngettext_spec                               {dngettext}
Specification gettext_spec                                 {gettext}
Specification ngettext_spec                                {ngettext}
Specification textdomain_spec                              {textdomain}
Specification wcscoll_spec                                 {wcscoll}
Specification wcsxfrm_spec                                 {wcsxfrm}
Specification towctrans_spec                               {towctrans}
Specification towlower_spec                                {towlower}
Specification towupper_spec                                {towupper}
Specification wctrans_spec                                 {wctrans}
Specification iswalnum_spec                                {iswalnum}
Specification iswalpha_spec                                {iswalpha}
Specification iswblank_spec                                {iswblank}
Specification iswcntrl_spec                                {iswcntrl}
Specification iswctype_spec                                {iswctype}
Specification iswdigit_spec                                {iswdigit}
Specification iswgraph_spec                                {iswgraph}
Specification iswlower_spec                                {iswlower}
Specification iswprint_spec                                {iswprint}
Specification iswpunct_spec                                {iswpunct}
Specification iswspace_spec                                {iswspace}
Specification iswupper_spec                                {iswupper}
Specification iswxdigit_spec                               {iswxdigit}
Specification wctype_spec                                  {wctype}
Specification wcwidth_spec                                 {wcwidth}
Specification wcswidth_spec                                {wcswidth}
Specification j0_spec                                      {j0}
Specification j0f_spec                                     {j0f}
Specification j0l_spec                                     {j0l}
Specification j1_spec                                      {j1}
Specification j1f_spec                                     {j1f}
Specification j1l_spec                                     {j1l}
Specification jn_spec                                      {jn}
Specification jnf_spec                                     {jnf}
Specification jnl_spec                                     {jnl}
Specification y0_spec                                      {y0}
Specification y0f_spec                                     {y0f}
Specification y0l_spec                                     {y0l}
Specification y1_spec                                      {y1}
Specification y1f_spec                                     {y1f}
Specification y1l_spec                                     {y1l}
Specification yn_spec                                      {yn}
Specification ynf_spec                                     {ynf}
Specification ynl_spec                                     {ynl}
Specification cexp_spec                                    {cexp}
Specification cexpf_spec                                   {cexpf}
Specification cexpl_spec                                   {cexpl}
Specification clog_spec                                    {clog}
Specification clog10_spec                                  {clog10}
Specification clog10f_spec                                 {clog10f}
Specification clog10l_spec                                 {clog10l}
Specification clogf_spec                                   {clogf}
Specification clogl_spec                                   {clogl}
Specification cpow_spec                                    {cpow}
Specification cpowf_spec                                   {cpowf}
Specification cpowl_spec                                   {cpowl}
Specification csqrt_spec                                   {csqrt}
Specification csqrtf_spec                                  {csqrtf}
Specification csqrtl_spec                                  {csqrtl}
Specification cacosh_spec                                  {cacosh}
Specification cacoshf_spec                                 {cacoshf}
Specification cacoshl_spec                                 {cacoshl}
Specification casinh_spec                                  {casinh}
Specification casinhf_spec                                 {casinhf}
Specification casinhl_spec                                 {casinhl}
Specification catanh_spec                                  {catanh}
Specification catanhf_spec                                 {catanhf}
Specification catanhl_spec                                 {catanhl}
Specification ccosh_spec                                   {ccosh}
Specification ccoshf_spec                                  {ccoshf}
Specification ccoshl_spec                                  {ccoshl}
Specification csinh_spec                                   {csinh}
Specification csinhf_spec                                  {csinhf}
Specification csinhl_spec                                  {csinhl}
Specification ctanh_spec                                   {ctanh}
Specification ctanhf_spec                                  {ctanhf}
Specification ctanhl_spec                                  {ctanhl}
Specification cabs_spec                                    {cabs}
Specification cabsf_spec                                   {cabsf}
Specification cabsl_spec                                   {cabsl}
Specification carg_spec                                    {carg}
Specification cargf_spec                                   {cargf}
Specification cargl_spec                                   {cargl}
Specification cimag_spec                                   {cimag}
Specification cimagf_spec                                  {cimagf}
Specification cimagl_spec                                  {cimagl}
Specification conj_spec                                    {conj}
Specification conjf_spec                                   {conjf}
Specification conjl_spec                                   {conjl}
Specification cproj_spec                                   {cproj}
Specification cprojf_spec                                  {cprojf}
Specification cprojl_spec                                  {cprojl}
Specification creal_spec                                   {creal}
Specification crealf_spec                                  {crealf}
Specification creall_spec                                  {creall}
Specification cacos_spec                                   {cacos}
Specification cacosf_spec                                  {cacosf}
Specification cacosl_spec                                  {cacosl}
Specification casin_spec                                   {casin}
Specification casinf_spec                                  {casinf}
Specification casinl_spec                                  {casinl}
Specification catan_spec                                   {catan}
Specification catanf_spec                                  {catanf}
Specification catanl_spec                                  {catanl}
Specification ccos_spec                                    {ccos}
Specification ccosf_spec                                   {ccosf}
Specification ccosl_spec                                   {ccosl}
Specification csin_spec                                    {csin}
Specification csinf_spec                                   {csinf}
Specification csinl_spec                                   {csinl}
Specification ctan_spec                                    {ctan}
Specification ctanf_spec                                   {ctanf}
Specification ctanl_spec                                   {ctanl}
Specification erf_spec                                     {erf}
Specification erfc_spec                                    {erfc}
Specification erfcf_spec                                   {erfcf}
Specification erfcl_spec                                   {erfcl}
Specification erff_spec                                    {erff}
Specification erfl_spec                                    {erfl}
Specification cbrt_spec                                    {cbrt}
Specification cbrtf_spec                                   {cbrtf}
Specification cbrtl_spec                                   {cbrtl}
Specification exp_spec                                     {exp}
Specification exp2_spec                                    {exp2}
Specification exp2f_spec                                   {exp2f}
Specification expf_spec                                    {expf}
Specification expl_spec                                    {expl}
Specification expm1_spec                                   {expm1}
Specification expm1f_spec                                  {expm1f}
Specification expm1l_spec                                  {expm1l}
Specification hypot_spec                                   {hypot}
Specification hypotf_spec                                  {hypotf}
Specification hypotl_spec                                  {hypotl}
Specification log_spec                                     {log}
Specification log10_spec                                   {log10}
Specification log10f_spec                                  {log10f}
Specification log10l_spec                                  {log10l}
Specification log1p_spec                                   {log1p}
Specification log1pf_spec                                  {log1pf}
Specification log1pl_spec                                  {log1pl}
Specification log2_spec                                    {log2}
Specification log2f_spec                                   {log2f}
Specification log2l_spec                                   {log2l}
Specification logf_spec                                    {logf}
Specification logl_spec                                    {logl}
Specification pow_spec                                     {pow}
Specification pow10_spec                                   {pow10}
Specification pow10f_spec                                  {pow10f}
Specification pow10l_spec                                  {pow10l}
Specification powf_spec                                    {powf}
Specification powl_spec                                    {powl}
Specification sqrt_spec                                    {sqrt}
Specification sqrtf_spec                                   {sqrtf}
Specification sqrtl_spec                                   {sqrtl}
Specification gamma_spec                                   {gamma}
Specification gammaf_spec                                  {gammaf}
Specification gammal_spec                                  {gammal}
Specification lgamma_spec                                  {lgamma}
Specification lgamma_r_spec                                {lgamma_r}
Specification lgammaf_spec                                 {lgammaf}
Specification lgammaf_r_spec                               {lgammaf_r}
Specification lgammal_spec                                 {lgammal}
Specification lgammal_r_spec                               {lgammal_r}
Specification tgamma_spec                                  {tgamma}
Specification tgammaf_spec                                 {tgammaf}
Specification tgammal_spec                                 {tgammal}
Specification acosh_spec                                   {acosh}
Specification acoshf_spec                                  {acoshf}
Specification acoshl_spec                                  {acoshl}
Specification asinh_spec                                   {asinh}
Specification asinhf_spec                                  {asinhf}
Specification asinhl_spec                                  {asinhl}
Specification atanh_spec                                   {atanh}
Specification atanhf_spec                                  {atanhf}
Specification atanhl_spec                                  {atanhl}
Specification cosh_spec                                    {cosh}
Specification coshf_spec                                   {coshf}
Specification coshl_spec                                   {coshl}
Specification sinh_spec                                    {sinh}
Specification sinhf_spec                                   {sinhf}
Specification sinhl_spec                                   {sinhl}
Specification tanh_spec                                    {tanh}
Specification tanhf_spec                                   {tanhf}
Specification tanhl_spec                                   {tanhl}
Specification abs_spec                                     {abs}
Specification div_spec                                     {div}
Specification imaxabs_spec                                 {imaxabs}
Specification imaxdiv_spec                                 {imaxdiv}
Specification labs_spec                                    {labs}
Specification ldiv_spec                                    {ldiv}
Specification llabs_spec                                   {llabs}
Specification lldiv_spec                                   {lldiv}
Specification drand48_spec                                 {drand48}
Specification erand48_spec                                 {erand48}
Specification initstate_spec                               {initstate}
Specification jrand48_spec                                 {jrand48}
Specification lcong48_spec                                 {lcong48}
Specification lrand48_spec                                 {lrand48}
Specification mrand48_spec                                 {mrand48}
Specification nrand48_spec                                 {nrand48}
Specification rand_spec                                    {rand}
Specification rand_r_spec                                  {rand_r}
Specification random_spec                                  {random}
Specification seed48_spec                                  {seed48}
Specification setstate_spec                                {setstate}
Specification srand_spec                                   {srand}
Specification srand48_spec                                 {srand48}
Specification srandom_spec                                 {srandom}
Specification ceil_spec                                    {ceil}
Specification ceilf_spec                                   {ceilf}
Specification ceill_spec                                   {ceill}
Specification copysign_spec                                {copysign}
Specification copysignf_spec                               {copysignf}
Specification copysignl_spec                               {copysignl}
Specification dremf_spec                                   {dremf}
Specification dreml_spec                                   {dreml}
Specification fabs_spec                                    {fabs}
Specification fabsf_spec                                   {fabsf}
Specification fabsl_spec                                   {fabsl}
Specification fdim_spec                                    {fdim}
Specification fdimf_spec                                   {fdimf}
Specification fdiml_spec                                   {fdiml}
Specification floor_spec                                   {floor}
Specification floorf_spec                                  {floorf}
Specification floorl_spec                                  {floorl}
Specification fma_spec                                     {fma}
Specification fmaf_spec                                    {fmaf}
Specification fmal_spec                                    {fmal}
Specification fmax_spec                                    {fmax}
Specification fmaxf_spec                                   {fmaxf}
Specification fmaxl_spec                                   {fmaxl}
Specification fmin_spec                                    {fmin}
Specification fminf_spec                                   {fminf}
Specification fminl_spec                                   {fminl}
Specification fmod_spec                                    {fmod}
Specification fmodf_spec                                   {fmodf}
Specification fmodl_spec                                   {fmodl}
Specification llrint_spec                                  {llrint}
Specification llrintf_spec                                 {llrintf}
Specification llrintl_spec                                 {llrintl}
Specification llround_spec                                 {llround}
Specification llroundf_spec                                {llroundf}
Specification llroundl_spec                                {llroundl}
Specification lrint_spec                                   {lrint}
Specification lrintf_spec                                  {lrintf}
Specification lrintl_spec                                  {lrintl}
Specification lround_spec                                  {lround}
Specification lroundf_spec                                 {lroundf}
Specification lroundl_spec                                 {lroundl}
Specification modf_spec                                    {modf}
Specification modff_spec                                   {modff}
Specification modfl_spec                                   {modfl}
Specification nan_spec                                     {nan}
Specification nanf_spec                                    {nanf}
Specification nanl_spec                                    {nanl}
Specification nearbyint_spec                               {nearbyint}
Specification nearbyintf_spec                              {nearbyintf}
Specification nearbyintl_spec                              {nearbyintl}
Specification remainder_spec                               {remainder}
Specification remainderf_spec                              {remainderf}
Specification remainderl_spec                              {remainderl}
Specification remquo_spec                                  {remquo}
Specification remquof_spec                                 {remquof}
Specification remquol_spec                                 {remquol}
Specification rint_spec                                    {rint}
Specification rintf_spec                                   {rintf}
Specification rintl_spec                                   {rintl}
Specification round_spec                                   {round}
Specification roundf_spec                                  {roundf}
Specification roundl_spec                                  {roundl}
Specification trunc_spec                                   {trunc}
Specification truncf_spec                                  {truncf}
Specification truncl_spec                                  {truncl}
Specification acos_spec                                    {acos}
Specification acosf_spec                                   {acosf}
Specification acosl_spec                                   {acosl}
Specification asin_spec                                    {asin}
Specification asinf_spec                                   {asinf}
Specification asinl_spec                                   {asinl}
Specification atan_spec                                    {atan}
Specification atan2_spec                                   {atan2}
Specification atan2f_spec                                  {atan2f}
Specification atan2l_spec                                  {atan2l}
Specification atanf_spec                                   {atanf}
Specification atanl_spec                                   {atanl}
Specification cos_spec                                     {cos}
Specification cosf_spec                                    {cosf}
Specification cosl_spec                                    {cosl}
Specification sin_spec                                     {sin}
Specification sincos_spec                                  {sincos}
Specification sincosf_spec                                 {sincosf}
Specification sincosl_spec                                 {sincosl}
Specification sinf_spec                                    {sinf}
Specification sinl_spec                                    {sinl}
Specification tan_spec                                     {tan}
Specification tanf_spec                                    {tanf}
Specification tanl_spec                                    {tanl}
Specification brk_spec                                     {brk}
Specification sbrk_spec                                    {sbrk}
Specification calloc_spec                                  {calloc}
Specification free_spec                                    {free}
Specification malloc_spec                                  {malloc}
Specification posix_memalign_spec                          {posix_memalign}
Specification realloc_spec                                 {realloc}
Specification mlock_spec                                   {mlock}
Specification mlockall_spec                                {mlockall}
Specification mmap_spec                                    {mmap}
Specification mmap64_spec                                  {mmap64}
Specification mprotect_spec                                {mprotect}
Specification msync_spec                                   {msync}
Specification munlock_spec                                 {munlock}
Specification munlockall_spec                              {munlockall}
Specification munmap_spec                                  {munmap}
Specification shm_open_spec                                {}
Specification shm_unlink_spec                              {}
Specification write_mapped_mem_block_spec                  {}
Specification read_mapped_mem_block_spec                   {}
Specification bkgd_spec                                    {bkgd, wbkgd}
Specification bkgdset_spec                                 {bkgdset, wbkgdset}
Specification getbkgd_spec                                 {getbkgd}
Specification wbkgd_spec                                   {wbkgd}
Specification wbkgdset_spec                                {wbkgdset}
Specification border_spec                                  {border}
Specification box_spec                                     {box}
Specification wborder_spec                                 {wborder}
Specification addch_spec                                   {wechochar, mvwaddch, waddch, echochar, mvaddch, addch}
Specification echochar_spec                                {echochar}
Specification mvaddch_spec                                 {mvaddch}
Specification mvwaddch_spec                                {mvwaddch}
Specification waddch_spec                                  {waddch}
Specification wechochar_spec                               {wechochar}
Specification inch_spec                                    {mvwinch, winch, mvinch, inch}
Specification mvinch_spec                                  {mvinch}
Specification mvwinch_spec                                 {mvwinch}
Specification winch_spec                                   {winch}
Specification insch_spec                                   {mvwinsch, winsch, mvinsch, insch}
Specification mvinsch_spec                                 {mvinsch}
Specification mvwinsch_spec                                {mvwinsch}
Specification winsch_spec                                  {winsch}
Specification chgat_spec                                   {mvwchgat, wchgat, mvchgat, chgat}
Specification mvchgat_spec                                 {mvchgat}
Specification mvwchgat_spec                                {mvwchgat}
Specification wchgat_spec                                  {wchgat}
Specification addchnstr_spec                               {addchnstr}
Specification addchstr_spec                                {mvwaddchnstr, waddchnstr, mvwaddchstr, waddchstr, mvaddchnstr, addchnstr, mvaddchstr, addchstr}
Specification mvaddchnstr_spec                             {mvaddchnstr}
Specification mvaddchstr_spec                              {mvaddchstr}
Specification mvwaddchnstr_spec                            {mvwaddchnstr}
Specification mvwaddchstr_spec                             {mvwaddchstr}
Specification waddchnstr_spec                              {waddchnstr}
Specification waddchstr_spec                               {waddchstr}
Specification inchnstr_spec                                {inchnstr}
Specification inchstr_spec                                 {mvwinchnstr, winchnstr, mvwinchstr, winchstr, mvinchnstr, inchnstr, mvinchstr, inchstr}
Specification mvinchnstr_spec                              {mvinchnstr}
Specification mvinchstr_spec                               {mvinchstr}
Specification mvwinchnstr_spec                             {mvwinchnstr}
Specification mvwinchstr_spec                              {mvwinchstr}
Specification winchnstr_spec                               {winchnstr}
Specification winchstr_spec                                {winchstr}
Specification clear_spec                                   {werase, wclear, erase, clear}
Specification clrtobot_spec                                {wclrtobot, clrtobot}
Specification clrtoeol_spec                                {wclrtoeol, clrtoeol}
Specification delch_spec                                   {mvwdelch, wdelch, mvdelch, delch}
Specification deleteln_spec                                {wdeleteln, deleteln}
Specification erasechar_spec                               {killchar, erasechar}
Specification erasechar_spec                               {killchar, erasechar}
Specification killchar_spec                                {killchar}
Specification mvdelch_spec                                 {mvdelch}
Specification mvwdelch_spec                                {mvwdelch}
Specification wclear_spec                                  {wclear}
Specification wclrtobot_spec                               {wclrtobot}
Specification wclrtoeol_spec                               {wclrtoeol}
Specification wdelch_spec                                  {wdelch}
Specification wdeleteln_spec                               {wdeleteln}
Specification werase_spec                                  {werase}
Specification can_change_color_spec                        {can_change_color}
Specification color_content_spec                           {color_content}
Specification has_colors_spec                              {has_colors}
Specification init_color_spec                              {init_color}
Specification init_pair_spec                               {init_pair}
Specification pair_content_spec                            {pair_content}
Specification start_color_spec                             {start_color}
Specification getch_spec                                   {getch, mvgetch, wgetch, mvwgetch}
Specification mvgetch_spec                                 {mvgetch}
Specification mvwgetch_spec                                {mvwgetch}
Specification ungetch_spec                                 {ungetch}
Specification wgetch_spec                                  {wgetch}
Specification cbreak_spec                                  {cbreak}
Specification flushinp_spec                                {flushinp}
Specification halfdelay_spec                               {halfdelay}
Specification nl_spec                                      {nl}
Specification nocbreak_spec                                {nocbreak}
Specification nonl_spec                                    {nonl}
Specification noraw_spec                                   {noraw}
Specification raw_spec                                     {raw}
Specification getnstr_spec                                 {getnstr, mvgetnstr, wgetnstr, mvwgetnstr}
Specification getstr_spec                                  {getstr, mvgetstr, wgetstr, mvwgetstr}
Specification mvgetnstr_spec                               {mvgetnstr}
Specification mvgetstr_spec                                {mvgetstr}
Specification mvwgetnstr_spec                              {mvwgetnstr}
Specification mvwgetstr_spec                               {mvwgetstr}
Specification wgetnstr_spec                                {wgetnstr}
Specification wgetstr_spec                                 {wgetstr}
Specification notimeout_spec                               {notimeout}
Specification timeout_spec                                 {timeout}
Specification wtimeout_spec                                {wtimeout}
Specification hline_spec                                   {mvwhline, whline, mvhline, hline}
Specification vline_spec                                   {mvwvline, wvline, mvvline, vline}
Specification insertln_spec                                {winsertln, insertln}
Specification insdelln_spec                                {winsdelln, insdelln}
Specification ripoffline_spec                              {ripoffline}
Specification baudrate_spec                                {baudrate}
Specification beep_spec                                    {beep}
Specification flash_spec                                   {flash}
Specification keyname_spec                                 {keyname}
Specification napms_spec                                   {napms}
Specification typeahead_spec                               {typeahead}
Specification unctrl_spec                                  {unctrl}
Specification def_mode_spec                                {def_shell_mode}
Specification reset_mode_spec                              {reset_shell_mode}
Specification move_spec                                    {wmove, move}
Specification mvcur_spec                                   {mvcur}
Specification wmove_spec                                   {wmove}
Specification scr_dump_spec                                {scr_dump}
Specification scr_init_spec                                {scr_init}
Specification scr_restore_spec                             {scr_restore}
Specification scr_set_spec                                 {scr_set}
Specification slk_attr_set_spec                            {slk_attr_set}
Specification slk_attroff_spec                             {slk_attroff}
Specification slk_attron_spec                              {slk_attron}
Specification slk_attrset_spec                             {slk_attrset}
Specification slk_clear_spec                               {slk_clear}
Specification slk_color_spec                               {slk_color}
Specification slk_init_spec                                {slk_init}
Specification slk_label_spec                               {slk_label}
Specification slk_noutrefresh_spec                         {slk_noutrefresh}
Specification slk_refresh_spec                             {slk_refresh}
Specification slk_restore_spec                             {slk_restore}
Specification slk_set_spec                                 {slk_set}
Specification slk_touch_spec                               {slk_touch}
Specification addnstr_spec                                 {addnstr}
Specification addstr_spec                                  {mvwaddnstr, waddnstr, mvwaddstr, waddstr, mvaddnstr, addnstr, mvaddstr, addstr}
Specification mvaddnstr_spec                               {mvaddnstr}
Specification mvaddstr_spec                                {mvaddstr}
Specification mvwaddnstr_spec                              {mvwaddnstr}
Specification mvwaddstr_spec                               {mvwaddstr}
Specification waddnstr_spec                                {waddnstr}
Specification waddstr_spec                                 {waddstr}
Specification innstr_spec                                  {innstr}
Specification instr_spec                                   {mvwinnstr, winnstr, mvwinstr, winstr, mvinnstr, innstr, mvinstr, instr}
Specification mvinnstr_spec                                {mvinnstr}
Specification mvinstr_spec                                 {mvinstr}
Specification mvwinnstr_spec                               {mvwinnstr}
Specification mvwinstr_spec                                {mvwinstr}
Specification winnstr_spec                                 {winnstr}
Specification winstr_spec                                  {winstr}
Specification insnstr_spec                                 {insstr}
Specification insstr_spec                                  {mvwinsnstr, winsnstr, mvwinsstr, winsstr, mvinsnstr, insnstr, mvinsstr, insstr}
Specification mvinsnstr_spec                               {mvinsnstr}
Specification mvinsstr_spec                                {mvinsstr}
Specification mvwinsnstr_spec                              {mvwinsnstr}
Specification mvwinsstr_spec                               {mvwinsstr}
Specification winsnstr_spec                                {winsnstr}
Specification winsstr_spec                                 {winsstr}
Specification mvprintw_spec                                {mvprintw}
Specification mvwprintw_spec                               {mvwprintw}
Specification printw_spec                                  {printw}
Specification vw_printw_spec                               {vw_printw}
Specification vwprintw_spec                                {vwprintw}
Specification wprintw_spec                                 {wprintw}
Specification mvscanw_spec                                 {mvscanw}
Specification mvwscanw_spec                                {mvwscanw}
Specification scanw_spec                                   {scanw}
Specification vw_scanw_spec                                {vw_scanw}
Specification vwscanw_spec                                 {vwscanw}
Specification wscanw_spec                                  {wscanw}
Specification clearok_spec                                 {clearok}
Specification echo_spec                                    {echo}
Specification has_ic_spec                                  {has_ic}
Specification has_il_spec                                  {has_il}
Specification idcok_spec                                   {idcok}
Specification idlok_spec                                   {idlok}
Specification immedok_spec                                 {immedok}
Specification leaveok_spec                                 {leaveok}
Specification noecho_spec                                  {noecho}
Specification noqiflush_spec                               {noqiflush}
Specification qiflush_spec                                 {qiflush}
Specification scrollok_spec                                {scrollok}
Specification setscrreg_spec                               {setscrreg, wsetscrreg}
Specification use_env_spec                                 {use_env}
Specification wsetscrreg_spec                              {wsetscrreg}
Specification tgetent_spec                                 {tgetent}
Specification tgetflag_spec                                {tgetflag}
Specification tgetnum_spec                                 {tgetnum}
Specification tgetstr_spec                                 {tgetstr}
Specification tgoto_spec                                   {tgoto}
Specification delay_output_spec                            {delay_output}
Specification delscreen_spec                               {delscreen}
Specification endwin_spec                                  {endwin}
Specification filter_spec                                  {filter}
Specification initscr_spec                                 {initscr}
Specification longname_spec                                {longname}
Specification newterm_spec                                 {newterm, newterm}
Specification set_term_spec                                {set_term}
Specification termattrs_spec                               {termattrs}
Specification vidattr_spec                                 {vidattr, vidputs}
Specification vidputs_spec                                 {vidputs}
Specification del_curterm_spec                             {del_curterm}
Specification putp_spec                                    {tputs, putp}
Specification restartterm_spec                             {restartterm}
Specification set_curterm_spec                             {set_curterm}
Specification setupterm_spec                               {setupterm, setupterm, restartterm, restartterm}
Specification termname_spec                                {termname}
Specification tigetflag_spec                               {tigetflag}
Specification tigetnum_spec                                {tigetnum}
Specification tigetstr_spec                                {tigetstr}
Specification tparm_spec                                   {tparm}
Specification tputs_spec                                   {tputs}
Specification attr_get_spec                                {wattr_get, attr_get}
Specification attr_off_spec                                {wattr_off, attr_off}
Specification attr_on_spec                                 {wattr_on, attr_on}
Specification attr_set_spec                                {wattr_set, wcolor_set, attr_set, color_set}
Specification attroff_spec                                 {wattroff, attroff}
Specification attron_spec                                  {wattron, attron}
Specification attrset_spec                                 {wattrset, attrset}
Specification color_set_spec                               {color_set}
Specification standend_spec                                {wstandend, standend}
Specification standout_spec                                {wstandout, standout}
Specification wattr_get_spec                               {wattr_get}
Specification wattr_off_spec                               {wattr_off}
Specification wattr_on_spec                                {wattr_on}
Specification wattr_set_spec                               {wattr_set}
Specification wattroff_spec                                {wattroff}
Specification wattron_spec                                 {wattron}
Specification wattrset_spec                                {wattrset}
Specification wcolor_set_spec                              {wcolor_set}
Specification wstandend_spec                               {wstandend}
Specification wstandout_spec                               {wstandout}
Specification newpad_spec                                  {newpad}
Specification pechochar_spec                               {pechochar}
Specification pnoutrefresh_spec                            {pnoutrefresh}
Specification prefresh_spec                                {prefresh}
Specification subpad_spec                                  {subpad}
Specification doupdate_spec                                {doupdate}
Specification is_linetouched_spec                          {is_linetouched}
Specification is_wintouched_spec                           {is_wintouched}
Specification isendwin_spec                                {isendwin}
Specification redrawwin_spec                               {redrawwin}
Specification refresh_spec                                 {wrefresh, refresh}
Specification syncok_spec                                  {syncok}
Specification touchline_spec                               {touchline}
Specification touchwin_spec                                {touchwin}
Specification untouchwin_spec                              {untouchwin}
Specification wcursyncup_spec                              {wcursyncup}
Specification wnoutrefresh_spec                            {wnoutrefresh}
Specification wredrawln_spec                               {wredrawln}
Specification wrefresh_spec                                {wrefresh}
Specification wsyncdown_spec                               {wsyncdown}
Specification wsyncup_spec                                 {wsyncup}
Specification wtouchln_spec                                {wtouchln}
Specification scrl_spec                                    {scrl, wscrl}
Specification scroll_spec                                  {scroll}
Specification wscrl_spec                                   {wscrl}
Specification copywin_spec                                 {copywin}
Specification curs_set_spec                                {curs_set}
Specification delwin_spec                                  {delwin}
Specification derwin_spec                                  {derwin}
Specification dupwin_spec                                  {dupwin}
Specification getwin_spec                                  {getwin}
Specification intrflush_spec                               {intrflush}
Specification keypad_spec                                  {keypad}
Specification meta_spec                                    {meta}
Specification mvderwin_spec                                {mvderwin}
Specification mvwin_spec                                   {mvwin}
Specification newwin_spec                                  {newwin}
Specification nodelay_spec                                 {nodelay}
Specification overlay_spec                                 {overlay}
Specification overwrite_spec                               {overwrite}
Specification putwin_spec                                  {putwin}
Specification subwin_spec                                  {subwin}
Specification getcontext_spec                              {getcontext}
Specification makecontext_spec                             {makecontext}
Specification setcontext_spec                              {setcontext}
Specification swapcontext_spec                             {swapcontext}
Specification getenv_spec                                  {getenv}
Specification putenv_spec                                  {putenv}
Specification setenv_spec                                  {setenv}
Specification unsetenv_spec                                {unsetenv}
Specification feclearexcept_spec                           {feclearexcept}
Specification fegetenv_spec                                {fegetenv}
Specification fegetexceptflag_spec                         {fegetexceptflag}
Specification fegetround_spec                              {fegetround}
Specification feholdexcept_spec                            {feholdexcept}
Specification feraiseexcept_spec                           {feraiseexcept}
Specification fesetenv_spec                                {fesetenv}
Specification fesetexceptflag_spec                         {fesetexceptflag}
Specification fesetround_spec                              {fesetround}
Specification fetestexcept_spec                            {fetestexcept}
Specification feupdateenv_spec                             {feupdateenv}
Specification __sigsetjmp_spec                             {__sigsetjmp}
Specification _longjmp_spec                                {_longjmp}
Specification _setjmp_spec                                 {_setjmp}
Specification longjmp_spec                                 {longjmp}
Specification siglongjmp_spec                              {siglongjmp}
Specification ftok_spec                                    {ftok}
Specification msgctl_spec                                  {msgctl}
Specification msgget_spec                                  {msgget}
Specification msgrcv_spec                                  {msgrcv}
Specification msgsnd_spec                                  {msgsnd}
Specification semctl_spec                                  {semctl}
Specification semget_spec                                  {semget}
Specification semop_spec                                   {semop}
Specification shmat_spec                                   {shmat}
Specification shmctl_spec                                  {shmctl}
Specification shmdt_spec                                   {shmdt}
Specification shmget_spec                                  {shmget}
Specification chdir_spec                                   {chdir}
Specification chroot_spec                                  {chroot}
Specification fchdir_spec                                  {fchdir}
Specification getcwd_spec                                  {getcwd}
Specification getwd_spec                                   {getwd}
Specification umask_spec                                   {umask}
Specification getpid_spec                                  {getpid}
Specification getppid_spec                                 {getppid}
Specification getpriority_spec                             {getpriority}
Specification nice_spec                                    {nice}
Specification setpriority_spec                             {setpriority}
Specification cuserid_spec                                 {cuserid}
Specification getegid_spec                                 {getegid}
Specification geteuid_spec                                 {geteuid}
Specification getgid_spec                                  {getgid}
Specification getgroups_spec                               {getgroups}
Specification getuid_spec                                  {getuid}
Specification initgroups_spec                              {initgroups, getgroups, getgroups}
Specification setegid_spec                                 {setegid}
Specification seteuid_spec                                 {seteuid}
Specification setgid_spec                                  {setgid, getgid}
Specification setgroups_spec                               {setgroups}
Specification setregid_spec                                {setregid}
Specification setreuid_spec                                {setreuid}
Specification setuid_spec                                  {setuid, getuid}
Specification __getpgid_spec                               {__getpgid}
Specification getpgid_spec                                 {getpgid}
Specification getpgrp_spec                                 {getpgrp}
Specification getsid_spec                                  {getsid}
Specification setpgid_spec                                 {setpgid}
Specification setpgrp_spec                                 {setpgrp, getsid}
Specification setsid_spec                                  {setsid}
Specification _Exit_spec                                   {_Exit}
Specification __cxa_atexit_spec                            {__cxa_atexit}
Specification __libc_start_main_spec                       {__libc_start_main}
Specification __register_atfork_spec                       {}
Specification _exit_spec                                   {_exit}
Specification abort_spec                                   {abort}
Specification daemon_spec                                  {daemon}
Specification execl_spec                                   {}
Specification execle_spec                                  {execle}
Specification execlp_spec                                  {}
Specification execv_spec                                   {}
Specification execve_spec                                  {execve}
Specification execvp_spec                                  {}
Specification exit_spec                                    {exit}
Specification fork_spec                                    {fork}
Specification forkpty_spec                                 {forkpty}
Specification pclose_spec                                  {pclose}
Specification popen_spec                                   {popen}
Specification return_from_main_spec                        {}
Specification system_spec                                  {system}
Specification vfork_spec                                   {vfork}
Specification wait_spec                                    {wait}
Specification wait4_spec                                   {wait4}
Specification waitpid_spec                                 {waitpid}
Specification getrlimit_spec                               {getrlimit}
Specification setrlimit_spec                               {setrlimit, setrlimit}
Specification getrusage_spec                               {getrusage}
Specification getrlimit64_spec                             {getrlimit64}
Specification setrlimit64_spec                             {setrlimit64, setrlimit64}
Specification ulimit_spec                                  {ulimit, ulimit}
Specification sched_get_priority_max_spec                  {sched_get_priority_max}
Specification sched_get_priority_min_spec                  {sched_get_priority_min}
Specification sched_getparam_spec                          {sched_getparam}
Specification sched_getscheduler_spec                      {sched_getscheduler}
Specification sched_rr_get_interval_spec                   {sched_rr_get_interval}
Specification sched_setparam_spec                          {sched_setparam}
Specification sched_setscheduler_spec                      {sched_setscheduler}
Specification sched_yield_spec                             {sched_yield}
Specification pthread_attr_destroy_spec                    {pthread_attr_destroy}
Specification pthread_attr_getdetachstate_spec             {}
Specification pthread_attr_getguardsize_spec               {}
Specification pthread_attr_getinheritsched_spec            {}
Specification pthread_attr_getschedparam_spec              {}
Specification pthread_attr_getschedpolicy_spec             {}
Specification pthread_attr_getscope_spec                   {pthread_attr_getscope}
Specification pthread_attr_getstack_spec                   {pthread_attr_getstack}
Specification pthread_attr_getstackaddr_spec               {}
Specification pthread_attr_getstacksize_spec               {}
Specification pthread_attr_init_spec                       {pthread_attr_init}
Specification pthread_attr_setdetachstate_spec             {}
Specification pthread_attr_setguardsize_spec               {}
Specification pthread_attr_setinheritsched_spec            {}
Specification pthread_attr_setschedparam_spec              {}
Specification pthread_attr_setschedpolicy_spec             {}
Specification pthread_attr_setscope_spec                   {pthread_attr_setscope}
Specification pthread_attr_setstack_spec                   {pthread_attr_setstack}
Specification pthread_attr_setstackaddr_spec               {}
Specification pthread_attr_setstacksize_spec               {}
Specification pthread_cond_init_spec                       {pthread_cond_init}
Specification pthread_cond_destroy_spec                    {pthread_cond_destroy}
Specification pthread_cond_broadcast_spec                  {pthread_cond_broadcast}
Specification pthread_cond_signal_spec                     {pthread_cond_signal}
Specification pthread_cond_wait_spec                       {pthread_cond_wait}
Specification pthread_cond_timedwait_spec                  {pthread_cond_timedwait}
Specification pthread_cond_timedwait_bad_spec              {}
Specification pthread_condattr_destroy_spec                {pthread_condattr_destroy}
Specification pthread_condattr_getpshared_spec             {pthread_condattr_getpshared}
Specification pthread_condattr_init_spec                   {pthread_condattr_init}
Specification pthread_condattr_setpshared_spec             {pthread_condattr_setpshared}
Specification pthread_mutex_static_init_spec               {}
Specification pthread_mutex_init_spec                      {pthread_mutex_init}
Specification pthread_mutex_destroy_spec                   {pthread_mutex_destroy}
Specification pthread_mutex_lock_spec                      {pthread_mutex_lock}
Specification pthread_mutex_trylock_spec                   {pthread_mutex_trylock}
Specification pthread_mutex_unlock_spec                    {pthread_mutex_unlock}
Specification pthread_mutexattr_init_spec                  {pthread_mutexattr_init}
Specification pthread_mutexattr_getpshared_spec            {pthread_mutexattr_getpshared}
Specification pthread_mutexattr_gettype_spec               {pthread_mutexattr_gettype}
Specification pthread_mutexattr_setpshared_spec            {pthread_mutexattr_setpshared}
Specification pthread_mutexattr_settype_spec               {pthread_mutexattr_settype}
Specification pthread_mutexattr_destroy_spec               {pthread_mutexattr_destroy}
Specification __errno_location_spec                        {__errno_location}
Specification _pthread_cleanup_pop_spec                    {_pthread_cleanup_pop}
Specification _pthread_cleanup_push_spec                   {_pthread_cleanup_push}
Specification pthread_cancel_spec                          {pthread_cancel}
Specification pthread_create_spec                          {pthread_create}
Specification pthread_detach_spec                          {pthread_detach}
Specification pthread_equal_spec                           {pthread_equal}
Specification pthread_exit_spec                            {pthread_exit}
Specification pthread_join_spec                            {pthread_join, pthread_join}
Specification pthread_once_spec                            {pthread_once}
Specification pthread_self_spec                            {pthread_self}
Specification pthread_setcancelstate_spec                  {pthread_setcancelstate}
Specification pthread_setcanceltype_spec                   {pthread_setcanceltype}
Specification pthread_testcancel_spec                      {pthread_testcancel}
Specification pthread_finish_spec                          {}
Specification pthread_rwlock_destroy_spec                  {pthread_rwlock_destroy}
Specification pthread_rwlock_init_spec                     {pthread_rwlock_init}
Specification pthread_rwlock_rdlock_spec                   {pthread_rwlock_rdlock}
Specification pthread_rwlock_timedrdlock_spec              {pthread_rwlock_timedrdlock}
Specification pthread_rwlock_timedrdlock_bad_spec          {}
Specification pthread_rwlock_timedwrlock_spec              {pthread_rwlock_timedwrlock}
Specification pthread_rwlock_timedwrlock_bad_spec          {}
Specification pthread_rwlock_tryrdlock_spec                {pthread_rwlock_tryrdlock}
Specification pthread_rwlock_trywrlock_spec                {pthread_rwlock_trywrlock}
Specification pthread_rwlock_unlock_spec                   {pthread_rwlock_unlock}
Specification pthread_rwlock_wrlock_spec                   {pthread_rwlock_wrlock}
Specification pthread_rwlockattr_destroy_spec              {pthread_rwlockattr_destroy}
Specification pthread_rwlockattr_getpshared_spec           {pthread_rwlockattr_getpshared}
Specification pthread_rwlockattr_init_spec                 {pthread_rwlockattr_init}
Specification pthread_rwlockattr_setpshared_spec           {pthread_rwlockattr_setpshared}
Specification pthread_getconcurrency_spec                  {pthread_getconcurrency}
Specification pthread_setconcurrency_spec                  {pthread_setconcurrency}
Specification pthread_getschedparam_spec                   {pthread_getschedparam}
Specification pthread_setschedparam_spec                   {pthread_setschedparam}
Specification pthread_setschedprio_spec                    {}
Specification sem_close_spec                               {sem_close}
Specification sem_destroy_spec                             {sem_destroy}
Specification sem_getvalue_spec                            {sem_getvalue}
Specification sem_init_spec                                {sem_init}
Specification sem_open_spec                                {sem_open}
Specification sem_timedwait_spec                           {sem_timedwait}
Specification sem_trywait_spec                             {sem_trywait}
Specification sem_unlink_spec                              {sem_unlink}
Specification sem_wait_spec                                {sem_wait}
Specification sem_post_spec                                {sem_post}
Specification pthread_getspecific_spec                     {pthread_getspecific}
Specification pthread_key_create_spec                      {pthread_key_create}
Specification pthread_key_delete_spec                      {pthread_key_delete}
Specification pthread_setspecific_spec                     {pthread_setspecific}
Specification __libc_current_sigrtmax_spec                 {__libc_current_sigrtmax}
Specification __libc_current_sigrtmin_spec                 {__libc_current_sigrtmin}
Specification __sysv_signal_spec                           {__sysv_signal}
Specification bsd_signal_spec                              {bsd_signal}
Specification pause_spec                                   {pause}
Specification pthread_sigmask_spec                         {pthread_sigmask}
Specification sigaction_spec                               {sigaction, sigaction}
Specification sigaltstack_spec                             {sigaltstack}
Specification siginterrupt_spec                            {siginterrupt}
Specification signal_spec                                  {signal}
Specification sigpending_spec                              {sigpending}
Specification sigprocmask_spec                             {sigprocmask}
Specification sigreturn_spec                               {sigreturn}
Specification sigsuspend_spec                              {sigsuspend}
Specification sighold_spec                                 {sighold}
Specification sigignore_spec                               {sigignore}
Specification sigpause_spec                                {sigpause}
Specification sigrelse_spec                                {sigrelse}
Specification sigset_spec                                  {sigset}
Specification kill_spec                                    {kill}
Specification killpg_spec                                  {killpg}
Specification pthread_kill_spec                            {pthread_kill}
Specification raise_spec                                   {raise}
Specification sigqueue_spec                                {sigqueue}
Specification sockio_spec                                  {sockio}
Specification login_tty_spec                               {login_tty}
Specification sigaddset_spec                               {sigaddset}
Specification sigandset_spec                               {sigandset}
Specification sigdelset_spec                               {sigdelset}
Specification sigemptyset_spec                             {sigemptyset}
Specification sigfillset_spec                              {sigfillset}
Specification sigisemptyset_spec                           {sigisemptyset}
Specification sigismember_spec                             {sigismember}
Specification sigorset_spec                                {sigorset}
Specification psignal_spec                                 {psignal}
Specification strsignal_spec                               {strsignal}
Specification sigtimedwait_spec                            {sigtimedwait}
Specification sigwait_spec                                 {sigwait}
Specification sigwaitinfo_spec                             {sigwaitinfo}
Specification htonl_spec                                   {htonl}
Specification htons_spec                                   {htons}
Specification ntohl_spec                                   {ntohl}
Specification ntohs_spec                                   {ntohs}
Specification __h_errno_location_spec                      {__h_errno_location}
Specification endprotoent_spec                             {endprotoent}
Specification endservent_spec                              {endservent}
Specification freeaddrinfo_spec                            {freeaddrinfo}
Specification gai_strerror_spec                            {gai_strerror}
Specification getaddrinfo_spec                             {getaddrinfo}
Specification gethostbyaddr_spec                           {gethostbyaddr}
Specification gethostbyname_spec                           {gethostbyname}
Specification getnameinfo_spec                             {getnameinfo}
Specification getprotobyname_spec                          {getprotobyname}
Specification getprotobynumber_spec                        {getprotobynumber}
Specification getprotoent_spec                             {getprotoent}
Specification getservbyname_spec                           {getservbyname}
Specification getservbyport_spec                           {getservbyport}
Specification getservent_spec                              {getservent}
Specification setprotoent_spec                             {setprotoent}
Specification setservent_spec                              {setservent}
Specification if_freenameindex_spec                        {if_freenameindex}
Specification if_indextoname_spec                          {if_indextoname}
Specification if_nameindex_spec                            {if_nameindex}
Specification if_nametoindex_spec                          {if_nametoindex}
Specification authnone_create_spec                         {authnone_create}
Specification clnt_create_spec                             {clnt_create}
Specification clnt_pcreateerror_spec                       {clnt_pcreateerror}
Specification clnt_perrno_spec                             {clnt_perrno}
Specification clnt_perror_spec                             {clnt_perror}
Specification clnt_spcreateerror_spec                      {clnt_spcreateerror}
Specification clnt_sperrno_spec                            {clnt_sperrno}
Specification clnt_sperror_spec                            {clnt_sperror}
Specification pmap_getport_spec                            {pmap_getport}
Specification pmap_set_spec                                {pmap_set}
Specification pmap_unset_spec                              {pmap_unset}
Specification key_decryptsession_spec                      {key_decryptsession}
Specification svc_getreqset_spec                           {svc_getreqset}
Specification svc_register_spec                            {svc_register}
Specification svc_run_spec                                 {svc_run}
Specification svc_sendreply_spec                           {svc_sendreply}
Specification svcerr_auth_spec                             {svcerr_auth}
Specification svcerr_decode_spec                           {svcerr_decode}
Specification svcerr_noproc_spec                           {svcerr_noproc}
Specification svcerr_noprog_spec                           {svcerr_noprog}
Specification svcerr_progvers_spec                         {svcerr_progvers}
Specification svcerr_systemerr_spec                        {svcerr_systemerr}
Specification svcerr_weakauth_spec                         {svcerr_weakauth}
Specification svctcp_create_spec                           {svctcp_create}
Specification svcudp_create_spec                           {svcudp_create}
Specification xdr_accepted_reply_spec                      {xdr_accepted_reply}
Specification xdr_array_spec                               {xdr_array}
Specification xdr_bool_spec                                {xdr_bool}
Specification xdr_bytes_spec                               {xdr_bytes}
Specification xdr_callhdr_spec                             {xdr_callhdr}
Specification xdr_callmsg_spec                             {xdr_callmsg}
Specification xdr_char_spec                                {xdr_char}
Specification xdr_double_spec                              {xdr_double}
Specification xdr_enum_spec                                {xdr_enum}
Specification xdr_float_spec                               {xdr_float}
Specification xdr_free_spec                                {xdr_free}
Specification xdr_int_spec                                 {xdr_int}
Specification xdr_long_spec                                {xdr_long}
Specification xdr_opaque_spec                              {xdr_opaque}
Specification xdr_opaque_auth_spec                         {xdr_opaque_auth}
Specification xdr_pointer_spec                             {xdr_pointer}
Specification xdr_reference_spec                           {xdr_reference}
Specification xdr_rejected_reply_spec                      {xdr_rejected_reply}
Specification xdr_replymsg_spec                            {xdr_replymsg}
Specification xdr_short_spec                               {xdr_short}
Specification xdr_string_spec                              {xdr_string}
Specification xdr_u_char_spec                              {xdr_u_char}
Specification xdr_u_int_spec                               {xdr_u_int}
Specification xdr_u_long_spec                              {xdr_u_long}
Specification xdr_u_short_spec                             {xdr_u_short}
Specification xdr_union_spec                               {xdr_union}
Specification xdr_vector_spec                              {xdr_vector}
Specification xdr_void_spec                                {xdr_void}
Specification xdr_wrapstring_spec                          {xdr_wrapstring}
Specification xdrmem_create_spec                           {xdrmem_create}
Specification xdrrec_create_spec                           {xdrrec_create}
Specification xdrrec_eof_spec                              {xdrrec_eof}
Specification accept_spec                                  {accept}
Specification bind_spec                                    {bind}
Specification bindresvport_spec                            {bindresvport}
Specification connect_spec                                 {connect}
Specification getpeername_spec                             {getpeername}
Specification getsockname_spec                             {getsockname}
Specification getsockopt_spec                              {getsockopt}
Specification listen_spec                                  {listen}
Specification recv_spec                                    {recv}
Specification recvfrom_spec                                {recvfrom}
Specification recvmsg_spec                                 {recvmsg}
Specification send_spec                                    {send}
Specification sendmsg_spec                                 {sendmsg}
Specification sendto_spec                                  {sendto}
Specification setsockopt_spec                              {setsockopt}
Specification shutdown_spec                                {shutdown}
Specification sockatmark_spec                              {sockatmark}
Specification socket_spec                                  {socket}
Specification socketpair_spec                              {socketpair}
Specification gethostid_spec                               {gethostid}
Specification gethostname_spec                             {gethostname}
Specification sethostname_spec                             {sethostname}
Specification uname_spec                                   {uname}
Specification acct_spec                                    {acct}
Specification clock_spec                                   {clock}
Specification getloadavg_spec                              {getloadavg}
Specification times_spec                                   {times}
Specification sysconf_spec                                 {sysconf}
Specification __sysconf_spec                               {__sysconf}
Specification confstr_spec                                 {confstr}
Specification getpagesize_spec                             {getpagesize}
Specification __getpagesize_spec                           {__getpagesize}
Specification pathconf_spec                                {pathconf}
Specification fpathconf_spec                               {fpathconf}
Specification endutent_spec                                {endutent}
Specification endutxent_spec                               {endutxent}
Specification getutxent_spec                               {getutxent}
Specification getutxid_spec                                {getutxid}
Specification getutxline_spec                              {getutxline}
Specification pututxline_spec                              {pututxline}
Specification setutxent_spec                               {setutxent}
Specification getutent_spec                                {getutent}
Specification getutent_r_spec                              {getutent_r}
Specification login_spec                                   {login}
Specification logout_spec                                  {logout}
Specification logwtmp_spec                                 {logwtmp}
Specification setutent_spec                                {setutent}
Specification utmpname_spec                                {utmpname}
Specification endgrent_spec                                {endgrent}
Specification getgrent_spec                                {getgrent}
Specification getgrgid_spec                                {getgrgid}
Specification getgrgid_r_spec                              {getgrgid_r}
Specification getgrnam_spec                                {getgrnam}
Specification getgrnam_r_spec                              {getgrnam_r}
Specification getgrouplist_spec                            {getgrouplist}
Specification setgrent_spec                                {setgrent}
Specification endpwent_spec                                {endpwent}
Specification getpwent_spec                                {getpwent}
Specification getpwnam_spec                                {getpwnam}
Specification getpwnam_r_spec                              {getpwnam_r}
Specification getpwuid_spec                                {getpwuid}
Specification getpwuid_r_spec                              {getpwuid_r}
Specification setpwent_spec                                {setpwent}
Specification clock_getcpuclockid_spec                     {}
Specification clock_getres_spec                            {}
Specification clock_gettime_spec                           {}
Specification clock_nanosleep_spec                         {}
Specification clock_settime_spec                           {}
Specification asctime_spec                                 {asctime}
Specification asctime_r_spec                               {asctime_r}
Specification ctime_spec                                   {ctime}
Specification ctime_r_spec                                 {ctime_r}
Specification gmtime_spec                                  {gmtime}
Specification gmtime_r_spec                                {gmtime_r}
Specification localtime_spec                               {localtime}
Specification localtime_r_spec                             {localtime_r}
Specification mktime_spec                                  {mktime}
Specification adjtime_spec                                 {adjtime}
Specification difftime_spec                                {difftime}
Specification ftime_spec                                   {ftime}
Specification gettimeofday_spec                            {gettimeofday}
Specification stime_spec                                   {stime}
Specification time_spec                                    {time}
Specification tzset_spec                                   {tzset}
Specification alarm_spec                                   {alarm}
Specification getitimer_spec                               {}
Specification nanosleep_spec                               {nanosleep}
Specification setitimer_spec                               {setitimer}
Specification sleep_spec                                   {sleep}
Specification timer_create_spec                            {}
Specification timer_delete_spec                            {}
Specification timer_getoverrun_spec                        {}
Specification timer_gettime_spec                           {}
Specification timer_settime_spec                           {setitimer}
Specification ualarm_spec                                  {ualarm}
Specification usleep_spec                                  {usleep}
Specification __assert_fail_spec                           {__assert_fail}
Specification err_spec                                     {err}
Specification error_spec                                   {error}
Specification errx_spec                                    {errx}
Specification verrx_spec                                   {verrx}
Specification warn_spec                                    {warn}
Specification warnx_spec                                   {warnx}
Specification ffs_spec                                     {ffs}
Specification toascii_spec                                 {toascii}
Specification adler32_spec                                 {adler32}
Specification compress_spec                                {compress}
Specification compress2_spec                               {compress2}
Specification compressBound_spec                           {compressBound}
Specification crc32_spec                                   {crc32}
Specification deflate_spec                                 {deflate}
Specification deflateBound_spec                            {deflateBound}
Specification deflateCopy_spec                             {deflateCopy}
Specification deflateEnd_spec                              {deflateEnd}
Specification deflateInit2__spec                           {deflateInit2_}
Specification deflateInit__spec                            {deflateInit_}
Specification deflateParams_spec                           {deflateParams}
Specification deflateReset_spec                            {deflateReset}
Specification deflateSetDictionary_spec                    {deflateSetDictionary}
Specification get_crc_table_spec                           {get_crc_table}
Specification gzclose_spec                                 {gzclose}
Specification gzdopen_spec                                 {gzdopen}
Specification gzeof_spec                                   {gzeof}
Specification gzerror_spec                                 {gzerror}
Specification gzflush_spec                                 {gzflush}
Specification gzgetc_spec                                  {gzgetc}
Specification gzgets_spec                                  {gzgets}
Specification gzopen_spec                                  {gzopen}
Specification gzprintf_spec                                {gzprintf}
Specification gzputc_spec                                  {gzputc}
Specification gzputs_spec                                  {gzputs}
Specification gzread_spec                                  {gzread}
Specification gzrewind_spec                                {gzrewind}
Specification gzseek_spec                                  {gzseek}
Specification gzsetparams_spec                             {gzsetparams}
Specification gztell_spec                                  {gztell}
Specification gzwrite_spec                                 {gzwrite}
Specification inflate_spec                                 {inflate}
Specification inflateEnd_spec                              {inflateEnd}
Specification inflateInit2__spec                           {inflateInit2_}
Specification inflateInit__spec                            {inflateInit_}
Specification inflateReset_spec                            {inflateReset}
Specification inflateSetDictionary_spec                    {inflateSetDictionary}
Specification inflateSync_spec                             {inflateSync}
Specification inflateSyncPoint_spec                        {inflateSyncPoint}
Specification uncompress_spec                              {uncompress}
Specification zError_spec                                  {zError}
Specification zlibVersion_spec                             {zlibVersion}
Specification __strtol_internal_spec                       {}
Specification __strtoll_internal_spec                      {}
Specification __strtoul_internal_spec                      {}
Specification __strtoull_internal_spec                     {}
Specification a64l_spec                                    {a64l}
Specification atoi_spec                                    {}
Specification atol_spec                                    {}
Specification atoll_spec                                   {}
Specification l64a_spec                                    {l64a}
Specification strtoimax_spec                               {}
Specification strtol_spec                                  {}
Specification strtoll_spec                                 {}
Specification strtoq_spec                                  {}
Specification strtoul_spec                                 {}
Specification strtoull_spec                                {}
Specification strtoumax_spec                               {}
Specification strtouq_spec                                 {}
Specification __strtod_internal_spec                       {__strtod_internal}
Specification __strtof_internal_spec                       {__strtof_internal}
Specification __strtold_internal_spec                      {__strtold_internal}
Specification atof_spec                                    {atof}
Specification ecvt_spec                                    {ecvt}
Specification fcvt_spec                                    {fcvt}
Specification gcvt_spec                                    {gcvt}
Specification strtod_spec                                  {strtod}
Specification strtof_spec                                  {strtof}
Specification strtold_spec                                 {strtold}
Specification strsep_spec                                  {strsep}
Specification strtok_spec                                  {strtok}
Specification strtok_r_spec                                {strtok_r}
Specification __strtok_r_spec                              {__strtok_r}
Specification btowc_spec                                   {btowc}
Specification mblen_spec                                   {mblen}
Specification mbrlen_spec                                  {mbrlen}
Specification mbrtowc_spec                                 {mbrtowc}
Specification mbsinit_spec                                 {mbsinit}
Specification mbsnrtowcs_spec                              {mbsnrtowcs}
Specification mbsrtowcs_spec                               {mbsrtowcs}
Specification mbstowcs_spec                                {mbstowcs}
Specification mbtowc_spec                                  {mbtowc}
Specification wcrtomb_spec                                 {wcrtomb}
Specification wcsnrtombs_spec                              {wcsnrtombs}
Specification wcsrtombs_spec                               {wcsrtombs}
Specification wcstombs_spec                                {wcstombs}
Specification wctob_spec                                   {wctob}
Specification wctomb_spec                                  {wctomb}
Specification wcstol_spec                                  {wcstol}
Specification __wcstol_internal_spec                       {__wcstol_internal}
Specification wcstoll_spec                                 {wcstoll}
Specification wcstoq_spec                                  {wcstoq}
Specification wcstoimax_spec                               {wcstoimax}
Specification wcstoul_spec                                 {wcstoul}
Specification __wcstoul_internal_spec                      {__wcstoul_internal}
Specification wcstoull_spec                                {wcstoull}
Specification wcstouq_spec                                 {wcstouq}
Specification wcstoumax_spec                               {wcstoumax}
Specification __wcstod_internal_spec                       {__wcstod_internal}
Specification __wcstof_internal_spec                       {__wcstof_internal}
Specification __wcstold_internal_spec                      {__wcstold_internal}
Specification wcstod_spec                                  {wcstod}
Specification wcstof_spec                                  {wcstof}
Specification wcstold_spec                                 {wcstold}
Specification wcstok_spec                                  {wcstok}
Specification crypt_spec                                   {crypt}
Specification encrypt_spec                                 {encrypt}
Specification setkey_spec                                  {setkey}
Specification dladdr_spec                                  {dladdr}
Specification dlclose_spec                                 {dlclose}
Specification dlerror_spec                                 {dlerror}
Specification dlopen_spec                                  {dlopen}
Specification dlsym_spec                                   {dlsym}
Specification __finite_spec                                {__finite}
Specification __finitef_spec                               {__finitef}
Specification __finitel_spec                               {__finitel}
Specification __fpclassify_spec                            {__fpclassify}
Specification __fpclassifyf_spec                           {__fpclassifyf}
Specification __isinf_spec                                 {__isinf}
Specification __isinff_spec                                {__isinff}
Specification __isinfl_spec                                {__isinfl}
Specification __isnan_spec                                 {__isnan}
Specification __isnanf_spec                                {__isnanf}
Specification __isnanl_spec                                {__isnanl}
Specification __signbit_spec                               {__signbit}
Specification __signbitf_spec                              {__signbitf}
Specification finite_spec                                  {finite}
Specification finitef_spec                                 {finitef}
Specification finitel_spec                                 {finitel}
Specification frexp_spec                                   {frexp}
Specification frexpf_spec                                  {frexpf}
Specification frexpl_spec                                  {frexpl}
Specification ilogb_spec                                   {ilogb}
Specification ilogbf_spec                                  {ilogbf}
Specification ilogbl_spec                                  {ilogbl}
Specification ldexp_spec                                   {ldexp}
Specification ldexpf_spec                                  {ldexpf}
Specification ldexpl_spec                                  {ldexpl}
Specification logb_spec                                    {logb}
Specification logbf_spec                                   {logbf}
Specification logbl_spec                                   {logbl}
Specification nextafter_spec                               {nextafter}
Specification nextafterf_spec                              {nextafterf}
Specification nextafterl_spec                              {nextafterl}
Specification nexttoward_spec                              {nexttoward}
Specification nexttowardf_spec                             {nexttowardf}
Specification nexttowardl_spec                             {nexttowardl}
Specification scalb_spec                                   {scalb}
Specification scalbf_spec                                  {scalbf}
Specification scalbl_spec                                  {scalbl}
Specification scalbln_spec                                 {scalbln}
Specification scalblnf_spec                                {scalblnf}
Specification scalblnl_spec                                {scalblnl}
Specification scalbn_spec                                  {scalbn}
Specification scalbnf_spec                                 {scalbnf}
Specification scalbnl_spec                                 {scalbnl}
Specification significand_spec                             {significand}
Specification significandf_spec                            {significandf}
Specification significandl_spec                            {significandl}
Specification fmtmsg_spec                                  {fmtmsg}
Specification strfmon_spec                                 {strfmon}
Specification asprintf_spec                                {asprintf}
Specification fprintf_spec                                 {fprintf}
Specification printf_spec                                  {printf}
Specification snprintf_spec                                {snprintf}
Specification sprintf_spec                                 {sprintf}
Specification vasprintf_spec                               {vasprintf}
Specification vdprintf_spec                                {vdprintf}
Specification vfprintf_spec                                {vfprintf}
Specification vprintf_spec                                 {vprintf}
Specification vsnprintf_spec                               {vsnprintf}
Specification vsprintf_spec                                {vsprintf}
Specification fscanf_spec                                  {fscanf}
Specification scanf_spec                                   {scanf}
Specification sscanf_spec                                  {sscanf}
Specification vfscanf_spec                                 {vfscanf}
Specification vscanf_spec                                  {vscanf}
Specification vsscanf_spec                                 {vsscanf}
Specification getdate_spec                                 {getdate}
Specification strftime_spec                                {strftime}
Specification strptime_spec                                {strptime}
Specification fwprintf_spec                                {fwprintf}
Specification swprintf_spec                                {swprintf}
Specification vfwprintf_spec                               {vfwprintf}
Specification vswprintf_spec                               {vswprintf}
Specification vwprintf_spec                                {vwprintf}
Specification wprintf_spec                                 {wprintf}
Specification fwscanf_spec                                 {fwscanf}
Specification swscanf_spec                                 {swscanf}
Specification vfwscanf_spec                                {vfwscanf}
Specification vswscanf_spec                                {vswscanf}
Specification vwscanf_spec                                 {vwscanf}
Specification wscanf_spec                                  {wscanf}
Specification wcsftime_spec                                {wcsftime}
Specification getopt_spec                                  {getopt}
Specification getopt_long_spec                             {getopt_long}
Specification getopt_long_only_spec                        {getopt_long_only}
Specification getsubopt_spec                               {getsubopt}
Specification inet_addr_spec                               {inet_addr}
Specification inet_ntoa_spec                               {inet_ntoa}
Specification inet_ntop_spec                               {inet_ntop}
Specification inet_pton_spec                               {inet_pton}
Specification pam_acct_mgmt_spec                           {pam_acct_mgmt}
Specification pam_authenticate_spec                        {pam_authenticate}
Specification pam_chauthtok_spec                           {pam_chauthtok}
Specification pam_close_session_spec                       {pam_close_session}
Specification pam_end_spec                                 {pam_end}
Specification pam_fail_delay_spec                          {pam_fail_delay}
Specification pam_get_item_spec                            {pam_get_item}
Specification pam_getenvlist_spec                          {pam_getenvlist}
Specification pam_open_session_spec                        {pam_open_session}
Specification pam_set_item_spec                            {pam_set_item}
Specification pam_setcred_spec                             {pam_setcred}
Specification pam_start_spec                               {pam_start}
Specification pam_strerror_spec                            {pam_strerror}
Specification fnmatch_spec                                 {fnmatch}
Specification regcomp_spec                                 {regcomp}
Specification regerror_spec                                {regerror}
Specification regexec_spec                                 {regexec}
Specification regfree_spec                                 {regfree}
Specification hcreate_spec                                 {hcreate}
Specification hdestroy_spec                                {hdestroy}
Specification hsearch_spec                                 {hsearch}
Specification insque_spec                                  {insque}
Specification remque_spec                                  {remque}
Specification create_circular_queue_spec                   {}
Specification create_linear_queue_spec                     {}
Specification bsearch_spec                                 {bsearch}
Specification lfind_spec                                   {lfind}
Specification lsearch_spec                                 {lsearch}
Specification qsort_spec                                   {qsort}
Specification tdelete_spec                                 {tdelete}
Specification tfind_spec                                   {tfind}
Specification tsearch_spec                                 {tsearch}
Specification twalk_spec                                   {twalk}
Specification strcasecmp_spec                              {strcasecmp}
Specification strcasestr_spec                              {strcasestr}
Specification strncasecmp_spec                             {strncasecmp}
Specification __mempcpy_spec                               {__mempcpy}
Specification __rawmemchr_spec                             {__rawmemchr}
Specification bcmp_spec                                    {bcmp}
Specification bcopy_spec                                   {bcopy}
Specification bzero_spec                                   {bzero}
Specification memccpy_spec                                 {memccpy}
Specification memchr_spec                                  {memchr}
Specification memcmp_spec                                  {memcmp}
Specification memcpy_spec                                  {memcpy}
Specification memmem_spec                                  {memmem}
Specification memmove_spec                                 {memmove}
Specification memrchr_spec                                 {memrchr}
Specification memset_spec                                  {memset}
Specification swab_spec                                    {swab}
Specification __stpcpy_spec                                {__stpcpy}
Specification __strdup_spec                                {__strdup}
Specification rindex_spec                                  {rindex}
Specification stpcpy_spec                                  {stpcpy}
Specification stpncpy_spec                                 {stpncpy}
Specification strcat_spec                                  {strcat}
Specification index_spec                                   {index}
Specification strchr_spec                                  {strchr}
Specification strcmp_spec                                  {strcmp}
Specification strcpy_spec                                  {strcpy}
Specification strcspn_spec                                 {strcspn}
Specification strdup_spec                                  {strdup}
Specification strlen_spec                                  {strlen}
Specification strncat_spec                                 {strncat}
Specification strncmp_spec                                 {strncmp}
Specification strncpy_spec                                 {strncpy}
Specification strndup_spec                                 {strndup}
Specification strnlen_spec                                 {strnlen}
Specification strpbrk_spec                                 {strpbrk}
Specification strrchr_spec                                 {strrchr}
Specification strspn_spec                                  {strspn}
Specification strstr_spec                                  {strstr}
Specification wcscasecmp_spec                              {wcscasecmp}
Specification wcsncasecmp_spec                             {wcsncasecmp}
Specification wmemchr_spec                                 {wmemchr}
Specification wmemcmp_spec                                 {wmemcmp}
Specification wmemcpy_spec                                 {wmemcpy}
Specification wmemmove_spec                                {wmemmove}
Specification wmemset_spec                                 {wmemset}
Specification wcpcpy_spec                                  {wcpcpy}
Specification wcpncpy_spec                                 {wcpncpy}
Specification wcscat_spec                                  {wcscat}
Specification wcschr_spec                                  {wcschr}
Specification wcscmp_spec                                  {wcscmp}
Specification wcscpy_spec                                  {wcscpy}
Specification wcscspn_spec                                 {wcscspn}
Specification wcsdup_spec                                  {wcsdup}
Specification wcslen_spec                                  {wcslen}
Specification wcsncat_spec                                 {wcsncat}
Specification wcsncmp_spec                                 {wcsncmp}
Specification wcsncpy_spec                                 {wcsncpy}
Specification wcsnlen_spec                                 {wcsnlen}
Specification wcspbrk_spec                                 {wcspbrk}
Specification wcsrchr_spec                                 {wcsrchr}
Specification wcsspn_spec                                  {wcsspn}
Specification wcsstr_spec                                  {wcsstr}
Specification wcswcs_spec                                  {wcswcs}
Specification setwordexp_spec                              {}
Specification wordexp_spec                                 {wordexp}
Specification wordfree_spec                                {wordfree}
Specification sleep_msec_spec                              {}
Specification createProcess                                {fork, execl, perror}
Specification createThread                                 {pthread_create}
Specification createThreadInContext                        {pthread_create}
Specification lockf_spec                                   {lockf}
Reaction sleep_return                                       {sleep}

scope realpath_spec                                   { POSIX_REALPATH_FAILS_WITH_ELOOP,
                                                   POSIX_REALPATH_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_REALPATH_FAILS_WITH_ENOMEM,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_REALPATH_HAS_EXTRA_ERROR_CODES }

option POSIX_REALPATH_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the function realpath() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REALPATH_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the function realpath() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REALPATH_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the function realpath() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, the current implementation of realpath()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALPATH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@If this constant is set to 1, then current implementation of realpath()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope basename_spec                                 { FS_NAME_BASENAME_SLASH_STATE,
                                                   FS_NAME_DIRNAME_SLASH_STATE }

option FS_NAME_BASENAME_SLASH_STATE {
    type            "set"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@Please select one of the following:@/
    values {
                     1  FS_NAME_BASENAME_SLASH_ONE   /@we allow only one slash   returned by call of basename("\\");@/
                     2  FS_NAME_BASENAME_SLASH_TWO   /@we allow only two slashes returned by call of basename("\\");@/
    default:         3  FS_NAME_BASENAME_SLASH_BOTH   /@we allow both one and two slashes returned by call of basename("\\");@/
    }
}

option FS_NAME_DIRNAME_SLASH_STATE {
    type            "set"
    kind            "var"
    destination     "fs/name/name_config.h"
    description     /@Please select one of the following:@/
    values {
                     1  FS_NAME_DIRNAME_SLASH_ONE   /@we allow only one slash   returned by call of dirname("\\");@/
                     2  FS_NAME_DIRNAME_SLASH_TWO   /@we allow only two slashes returned by call of dirname("\\");@/
    default:         3  FS_NAME_DIRNAME_SLASH_BOTH   /@we allow both one and two slashes returned by call of dirname("\\");@/
    }
}

scope deflateInit2__spec                              { DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR,
                                                   DEFLATEINIT2__HAS_EXTRA_ERROR_CODES }

option DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit2_()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit2_()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option DEFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit2_()
                      may generate error code of Z_VERSION_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option DEFLATEINIT2__HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateInit2_()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope open_spec                                       { FILE_IO_OPEN_SETS_GID_TO_PROCESS_GID,
                                                   POSIX_OPEN_FAILS_WITH_EAGAIN,
                                                   POSIX_OPEN_FAILS_WITH_EINVAL,
                                                   POSIX_OPEN_FAILS_WITH_ELOOP,
                                                   POSIX_OPEN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_OPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_OPEN_FAILS_WITH_ETXTBSY,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOSR,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_OPEN_HAS_EXTRA_ERROR_CODES }

option FILE_IO_OPEN_SETS_GID_TO_PROCESS_GID {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@This flag resolves ambiguity in !io.file open function. Standard declares
                       " Otherwise, the file shall be created; the user ID
                       of the file shall be set to the effective user ID of the process; the group
                       ID of the file shall be set to the group ID of the file's parent directory
                       or to the effective group ID of the process;...". If this flag is set to 0,
                       then the group ID of the file shall be set to the group ID of the file's
                       parent directory.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function open() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOSR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENOSR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of open()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of open()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope glob64_spec                                     { LSB_GLOB64_HAS_EXTRA_CONDITION_ON_GLOB_ABORTED,
                                                   LSB_GLOB64_HAS_EXTRA_CONDITION_ON_GLOB_NOMATCH,
                                                   LSB_GLOB64_HAS_EXTRA_ERROR_CODES }

option LSB_GLOB64_HAS_EXTRA_CONDITION_ON_GLOB_ABORTED {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, the current implementation of glob64()
                      may generate error code of GLOB_ABORTED under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GLOB64_HAS_EXTRA_CONDITION_ON_GLOB_NOMATCH {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, the current implementation of glob64()
                      may generate error code of GLOB_NOMATCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GLOB64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, then current implementation of glob64()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getpwuid_r_spec                                 { POSIX_GETPWUID_R_FAILS_WITH_EINTR,
                                                   POSIX_GETPWUID_R_FAILS_WITH_EIO,
                                                   POSIX_GETPWUID_R_FAILS_WITH_EMFILE,
                                                   POSIX_GETPWUID_R_FAILS_WITH_ENFILE,
                                                   POSIX_GETPWUID_R_FAILS_WITH_ERANGE,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETPWUID_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPWUID_R_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid_r() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_R_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid_r() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_R_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid_r() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_R_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid_r() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid_r()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid_r()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid_r()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid_r()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of getpwuid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setsid_spec                                     { IS_WCONTINUED_DEFINED,
                                                   POSIX_SETSID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETSID_HAS_EXTRA_ERROR_CODES }

option IS_WCONTINUED_DEFINED {
    type            "set"
    kind            "def"
    destination     "process/pgroup/pgroup_config.h"
    description     /@Please select one of the following:@/
    values {
                     1  WCONTINUED_DEFINED   /@WCONTINUED defined@/
    default:         2  WCONTINUED_NOT_DEFINED   /@WCONTINUED not defined@/
    }
}

option POSIX_SETSID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of setsid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, then current implementation of setsid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope lockf_spec                                 { LOCKF_EQUIVALENT_TO_FCNTL,
                                                   POSIX_LOCKF_FAILS_WITH_EAGAIN,
                                                   POSIX_LOCKF_FAILS_WITH_EDEADLK,
                                                   POSIX_LOCKF_FAILS_WITH_EINVAL,
                                                   POSIX_LOCKF_FAILS_WITH_EOPNOTSUPP,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LOCKF_HAS_EXTRA_ERROR_CODES }

option LOCKF_EQUIVALENT_TO_FCNTL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this flag is set to 1, than the implementation of function lockf()
                      is just more simple interface to fcntl(), otherwise lockf() and fcntl()
                      shal not be used together@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LOCKF_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function lockf() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LOCKF_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function lockf() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LOCKF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function lockf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LOCKF_FAILS_WITH_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function lockf() ensures
                      that the error EOPNOTSUPP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lockf()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCKF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __getpgid_spec                                  { LSB___GETPGID_FAILS_WITH_EINVAL,
                                                   LSB___GETPGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB___GETPGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB___GETPGID_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   LSB___GETPGID_HAS_EXTRA_ERROR_CODES }

option LSB___GETPGID_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the function __getpgid() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___GETPGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of __getpgid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___GETPGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of __getpgid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___GETPGID_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of __getpgid()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___GETPGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, then current implementation of __getpgid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __register_atfork_spec                          { LSB___REGISTER_ATFORK_HAS_EXTRA_ERROR_CODES }

option LSB___REGISTER_ATFORK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of __register_atfork()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __wcstol_internal_spec                   { LSB___WCSTOL_INTERNAL_FAILS_WITH_EINVAL,
                                                   LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB___WCSTOL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option LSB___WCSTOL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function __wcstol_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstol_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstol_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of __wcstol_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __wcstoul_internal_spec                         { LSB___WCSTOUL_INTERNAL_FAILS_WITH_EINVAL,
                                                   LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB___WCSTOUL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option LSB___WCSTOUL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstouq() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstouq()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstouq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOUL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstouq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope adjtime_spec                                    { LSB_ADJTIME_HAS_EXTRA_CONDITION_ON_EFAULT,
                                                   LSB_ADJTIME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB_ADJTIME_HAS_EXTRA_ERROR_CODES }

option LSB_ADJTIME_HAS_EXTRA_CONDITION_ON_EFAULT {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, the current implementation of time()
                      may generate error code of EFAULT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ADJTIME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, the current implementation of time()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ADJTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, then current implementation of time()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope bindresvport_spec                               { LSB_BINDRESVPORT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB_BINDRESVPORT_HAS_EXTRA_CONDITION_ON_EPFNOSUPPORT,
                                                   LSB_BINDRESVPORT_HAS_EXTRA_ERROR_CODES }

option LSB_BINDRESVPORT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bindresvport()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BINDRESVPORT_HAS_EXTRA_CONDITION_ON_EPFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bindresvport()
                      may generate error code of EPFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BINDRESVPORT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of bindresvport()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                 0  /@False@/
     default:    1  /@True@/
    }
}

scope cfsetspeed_spec                          { LSB_CFSETSPEED_FAILS_WITH_EINVAL,
                                                   LSB_CFSETSPEED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_CFSETSPEED_HAS_EXTRA_ERROR_CODES }

option LSB_CFSETSPEED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function cfsetspeed() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_CFSETSPEED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of cfsetspeed()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_CFSETSPEED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of cfsetspeed()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope compress_spec                                   { LSB_COMPRESS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_COMPRESS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_COMPRESS_HAS_EXTRA_ERROR_CODES }

option LSB_COMPRESS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of compress()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_COMPRESS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of compress()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_COMPRESS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of compress()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope compress2_spec                                  { LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_COMPRESS2_HAS_EXTRA_ERROR_CODES }

option LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of compress2()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of compress2()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_COMPRESS2_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of compress2()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_COMPRESS2_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of compress2()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope daemon_spec                                     { LSB_DAEMON_HAS_EXTRA_ERROR_CODES }

option LSB_DAEMON_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of daemon()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflate_spec                                    { LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATE_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflate()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflate()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflate()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflate()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateCopy_spec                                { LSB_DEFLATECOPY_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_DEFLATECOPY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATECOPY_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATECOPY_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateCopy()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATECOPY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateCopy()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATECOPY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateCopy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateEnd_spec                                 { LSB_DEFLATEEND_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATEEND_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATEEND_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateEnd()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEEND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateEnd()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateInit__spec                               { LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR,
                                                   LSB_DEFLATEINIT__HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit_()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit_()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateInit_()
                      may generate error code of Z_VERSION_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEINIT__HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateInit_()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateParams_spec                              { LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATEPARAMS_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateParams()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateParams()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEPARAMS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateParams()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATEPARAMS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateParams()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateReset_spec                               { LSB_DEFLATERESET_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATERESET_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATERESET_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of deflateReset()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATERESET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of deflateReset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope deflateSetDictionary_spec                       { LSB_DEFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_DEFLATESETDICTIONARY_HAS_EXTRA_ERROR_CODES }

option LSB_DEFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of
                      deflateSetDictionary() may generate error code of Z_STREAM_ERROR under
                      circumstances other than those described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DEFLATESETDICTIONARY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of
                      deflateSetDictionary() may support additional errors not included in the
                      list described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope duplocale_spec                                  { LSB_DUPLOCALE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_DUPLOCALE_HAS_EXTRA_ERROR_CODES }

option LSB_DUPLOCALE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, the current implementation of duplocale()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_DUPLOCALE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope forkpty_spec                                    { LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_FORKPTY_HAS_EXTRA_ERROR_CODES }

option LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of forkpty()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of forkpty()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FORKPTY_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of forkpty()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FORKPTY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of forkpty()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ftw64_spec                                      { LSB_FTW64_FAILS_WITH_EINVAL,
                                                   LSB_FTW64_FAILS_WITH_ELOOP,
                                                   LSB_FTW64_FAILS_WITH_ENAMETOOLONG,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   LSB_FTW64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   LSB_FTW64_HAS_EXTRA_ERROR_CODES }

option LSB_FTW64_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw64() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw64() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_FTW64_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw64() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw64()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_FTW64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, then current implementation of ftw64()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzclose_spec                                    { LSB_GZCLOSE_FAILS_WITH_Z_BUF_ERROR,
                                                   LSB_GZCLOSE_FAILS_WITH_Z_ERRNO,
                                                   LSB_GZCLOSE_FAILS_WITH_Z_STREAM_ERROR,
                                                   LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZCLOSE_HAS_EXTRA_ERROR_CODES }

option LSB_GZCLOSE_FAILS_WITH_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the function gzclose() ensures
                      that the error Z_BUF_ERROR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_GZCLOSE_FAILS_WITH_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the function gzclose() ensures
                      that the error Z_ERRNO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_GZCLOSE_FAILS_WITH_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the function gzclose() ensures
                      that the error Z_STREAM_ERROR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzclose()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzclose()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZCLOSE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzclose()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZCLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzclose()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzdopen_spec                                    { LSB_GZDOPEN_HAS_EXTRA_ERROR_CODES }

option LSB_GZDOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzdopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope gzflush_spec                                    { LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZFLUSH_HAS_EXTRA_ERROR_CODES }

option LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzflush()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzflush()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzflush()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZFLUSH_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzflush()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZFLUSH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzflush()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzopen_spec                                     { LSB_GZOPEN_HAS_EXTRA_ERROR_CODES }

option LSB_GZOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope gzputs_spec                                     { LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZPUTS_HAS_EXTRA_ERROR_CODES }

option LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzputs()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzputs()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzputs()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPUTS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzputs()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPUTS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzputs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzread_spec                                     { LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR,
                                                   LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_NEED_DICT,
                                                   LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_STREAM_END,
                                                   LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZREAD_HAS_EXTRA_ERROR_CODES }

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_DATA_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_NEED_DICT {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_NEED_DICT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_STREAM_END {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_STREAM_END under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzread()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZREAD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzread()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzsetparams_spec                                { LSB_GZSETPARAMS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZSETPARAMS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZSETPARAMS_HAS_EXTRA_ERROR_CODES }

option LSB_GZSETPARAMS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzsetparams()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZSETPARAMS_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzsetparams()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZSETPARAMS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzsetparams()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gzwrite_spec                                    { LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZWRITE_HAS_EXTRA_ERROR_CODES }

option LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzwrite()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzwrite()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzwrite()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZWRITE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzwrite()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZWRITE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzwrite()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflate_spec                                    { LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_NEED_DICT,
                                                   LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATE_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflate()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflate()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_NEED_DICT {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflate()
                      may generate error code of Z_NEED_DICT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATE_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflate()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflate()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope inflateEnd_spec                                 { LSB_INFLATEEND_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATEEND_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATEEND_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateEnd()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEEND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflateEnd()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateInit__spec                               { LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR,
                                                   LSB_INFLATEINIT__HAS_EXTRA_ERROR_CODES }

option LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit_()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit_()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit_()
                      may generate error code of Z_VERSION_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT__HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflateInit_()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateInit2__spec                              { LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR,
                                                   LSB_INFLATEINIT2__HAS_EXTRA_ERROR_CODES }

option LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit2_()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit2_()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT2__HAS_EXTRA_CONDITION_ON_Z_VERSION_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateInit2_()
                      may generate error code of Z_VERSION_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATEINIT2__HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflateInit2_()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateReset_spec                               { LSB_INFLATERESET_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATERESET_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATERESET_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateReset()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATERESET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflateReset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateSetDictionary_spec                       { LSB_INFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR,
                                                   LSB_INFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATESETDICTIONARY_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of
                      inflateSetDictionary() may generate error code of Z_DATA_ERROR under
                      circumstances other than those described in
                      the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESETDICTIONARY_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of
                      inflateSetDictionary() may generate error code of Z_STREAM_ERROR under
                      circumstances other than those described in
                      the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESETDICTIONARY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of
                      inflateSetDictionary() may support additional errors not included in the
                      list described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateSync_spec                                { LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR,
                                                   LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATESYNC_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateSync()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateSync()
                      may generate error code of Z_DATA_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESYNC_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of inflateSync()
                      may generate error code of Z_STREAM_ERROR under circumstances other than
                      those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESYNC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of inflateSync()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inflateSyncPoint_spec                           { LSB_INFLATESYNCPOINT_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_INFLATESYNCPOINT_HAS_EXTRA_ERROR_CODES }

option LSB_INFLATESYNCPOINT_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of
                      inflateSyncPoint() may generate error code of Z_STREAM_ERROR under
                      circumstances other than those described in
                      the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_INFLATESYNCPOINT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of
                      inflateSyncPoint() may support additional errors not included in the list
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbsnrtowcs_spec                                 { LSB_MBSNRTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_MBSNRTOWCS_HAS_EXTRA_ERROR_CODES }

option LSB_MBSNRTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbsnrtowcs()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_MBSNRTOWCS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbsnrtowcs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope newlocale_spec                                  { LSB_NEWLOCALE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_NEWLOCALE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_NEWLOCALE_HAS_EXTRA_ERROR_CODES,
                                                   LSB_NEWLOCALE_MODIFIES_EXISTING_BASE }

option LSB_NEWLOCALE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, the current implementation of newlocale()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NEWLOCALE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, the current implementation of newlocale()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NEWLOCALE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NEWLOCALE_MODIFIES_EXISTING_BASE {
    type            "bool"
    kind            "var"
    destination     "locale/locale/locale_config.h"
    description     /@If this constant is set to 1, the current implementation of newlocale()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope nftw64_spec                                     { LSB_NFTW64_FAILS_WITH_ELOOP,
                                                   LSB_NFTW64_FAILS_WITH_EMFILE,
                                                   LSB_NFTW64_FAILS_WITH_ENAMETOOLONG,
                                                   LSB_NFTW64_FAILS_WITH_ENFILE,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   LSB_NFTW64_HAS_EXTRA_ERROR_CODES }

option LSB_NFTW64_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw64() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_NFTW64_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw64() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_NFTW64_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw64() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_NFTW64_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw64() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw64()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_NFTW64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, then current implementation of nftw64()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope openpty_spec                             { LSB_OPENPTY_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   LSB_OPENPTY_HAS_EXTRA_ERROR_CODES }

option LSB_OPENPTY_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of openpty()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_OPENPTY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of openpty()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sethostname_spec                                { LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB_SETHOSTNAME_HAS_EXTRA_ERROR_CODES,
												    LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EFAULT}

option LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/host/host_config.h"
    description     /@If this constant is set to 1, the current implementation of sethostname()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EFAULT {
    type            "bool"
    kind            "var"
    destination     "system/host/host_config.h"
    description     /@If this constant is set to 1, the current implementation of sethostname()
                      may generate error code of EFAULT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SETHOSTNAME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "system/host/host_config.h"
    description     /@If this constant is set to 1, the current implementation of sethostname()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SETHOSTNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/host/host_config.h"
    description     /@If this constant is set to 1, then current implementation of sethostname()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigandset_spec                                  { LSB_SIGANDSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_SIGANDSET_HAS_EXTRA_ERROR_CODES }

option LSB_SIGANDSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SIGANDSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@LSB_SIGANDSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigisemptyset_spec                              { LSB_SIGISEMPTYSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_SIGISEMPTYSET_HAS_EXTRA_ERROR_CODES }

option LSB_SIGISEMPTYSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SIGISEMPTYSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@LSB_SIGISEMPTYSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigorset_spec                                   { LSB_SIGORSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_SIGORSET_HAS_EXTRA_ERROR_CODES }

option LSB_SIGORSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SIGORSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@LSB_SIGORSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope stime_spec                                      { LSB_STIME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_STIME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB_STIME_HAS_EXTRA_ERROR_CODES }

option LSB_STIME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, the current implementation of stime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_STIME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, the current implementation of stime()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_STIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/time/time_config.h"
    description     /@If this constant is set to 1, then current implementation of stime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strndup_spec                                    { LSB_STRNDUP_FAILS_WITH_ENOMEM,
                                                   LSB_STRNDUP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_STRNDUP_HAS_EXTRA_ERROR_CODES }

option LSB_STRNDUP_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, the function strndup() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_STRNDUP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, the current implementation of strndup()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_STRNDUP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, then current implementation of strndup()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ttyio_TIOCGWINSZ_spec                          { LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EFAULT,
                                                   LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_ERROR_CODES }

option LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyio_TIOCGWINSZ()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EFAULT {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyio_TIOCGWINSZ()
                      may generate error code of EFAULT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyio_TIOCGWINSZ()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_TTYIO_TIOCGWINSZ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of ttyio_TIOCGWINSZ()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope uncompress_spec                                 { LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR,
                                                   LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR,
                                                   LSB_UNCOMPRESS_HAS_EXTRA_ERROR_CODES }

option LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of uncompress()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_DATA_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of uncompress()
                      may generate error code of Z_DATA_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_UNCOMPRESS_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of uncompress()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_UNCOMPRESS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of uncompress()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wait4_spec                                      { LSB_WAIT4_FAILS_WITH_ECHILD,
                                                   LSB_WAIT4_FAILS_WITH_EINTR,
                                                   LSB_WAIT4_HAS_EXTRA_CONDITION_ON_ECHILD,
                                                   LSB_WAIT4_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   LSB_WAIT4_HAS_EXTRA_ERROR_CODES }

option LSB_WAIT4_FAILS_WITH_ECHILD {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function wait4() ensures
                      that the error ECHILD will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_WAIT4_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function wait4() ensures
                      that the error ERESTARTSYS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_WAIT4_HAS_EXTRA_CONDITION_ON_ECHILD {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of wait4()
                      may generate error code of ECHILD under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WAIT4_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of wait4()
                      may generate error code of ERESTARTSYS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WAIT4_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of wait4()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcsdup_spec                                     { LSB_WCSDUP_FAILS_WITH_ENOMEM,
                                                   LSB_WCSDUP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_WCSDUP_HAS_EXTRA_ERROR_CODES }

option LSB_WCSDUP_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/wstr_config.h"
    description     /@If this constant is set to 1, the function wcsdup() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_WCSDUP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/wstr_config.h"
    description     /@If this constant is set to 1, the current implementation of wcsdup()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSDUP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/string/wstr_config.h"
    description     /@If this constant is set to 1, then current implementation of wcsdup()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcsnrtombs_spec                                 { LSB_WCSNRTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_WCSNRTOMBS_HAS_EXTRA_ERROR_CODES }

option LSB_WCSNRTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcsnrtombs()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSNRTOMBS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of wcsnrtombs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoq_spec                                     { LSB_WCSTOQ_FAILS_WITH_EINVAL,
                                                   LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB_WCSTOQ_HAS_EXTRA_ERROR_CODES }

option LSB_WCSTOQ_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoimax() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoimax()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoimax()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoimax()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstouq_spec                                    { LSB_WCSTOUQ_FAILS_WITH_EINVAL,
                                                   LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB_WCSTOUQ_HAS_EXTRA_ERROR_CODES }

option LSB_WCSTOUQ_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoumax() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoumax()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoumax()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_WCSTOUQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoumax()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Cluster ncurses                                { NCURSES_ATTRSET_RETURNS_OK,
                                                     NCURSES_INSSTR_ALWAYS_NO_WRAP,
                                                     NCURSES_RESTICTED_ATTRS_ALL_DATA,
                                                     NCURSES_STANDEND_RETURNS_OK,
                                                     NCURSES_STANDOUT_RETURNS_OK,
                                                     NCURSES_TERMINAL_STANDOUT_NOT_SUPPORTED }

option NCURSES_ATTRSET_RETURNS_OK {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses function attrset() returns value
                      that can be found in the standard, otherwise it returns something different@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option NCURSES_INSSTR_ALWAYS_NO_WRAP {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses functions  of family insstr() always
                      don't perform wrapping, otherwise the do wrapping according to the standard@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option NCURSES_RESTICTED_ATTRS_ALL_DATA {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses function that work with restricted
                      attributes (attrset and wattrset) clears
                      attributes other, than A_BLINK, A_BOLD, A_DIM, A_REVERSE, A_STANDOUT and
                      A_UNDERLINE.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option NCURSES_STANDEND_RETURNS_OK {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses function standend() returns value
                      that can be found in the standard, otherwise it returns something different@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option NCURSES_STANDOUT_RETURNS_OK {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses function standout() returns value
                      that can be found in the standard, otherwise it returns something different@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option NCURSES_TERMINAL_STANDOUT_NOT_SUPPORTED {
    type            "bool"
    kind            "var"
    destination     "ncurses/ncurses/ncurses_config.h"
    description     /@If this variable is set to 1, than ncurses terminal  models standout
                      attribute on screen using other attributes@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope posix_memalign_spec                             { POSIX_POSIX_MEMALIGN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_POSIX_MEMALIGN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_POSIX_MEMALIGN_HAS_EXTRA_ERROR_CODES }

option POSIX_POSIX_MEMALIGN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_memalign()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_MEMALIGN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_memalign()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_MEMALIGN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, then current implementation of posix_memalign()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope chdir_spec                                      { POSIX_CHDIR_FAILS_WITH_ELOOP,
                                                   POSIX_CHDIR_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_CHDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_CHDIR_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the function chdir() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHDIR_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the function chdir() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chdir()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chdir()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chdir()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chdir()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chdir()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, then current implementation of chdir()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope clock_getcpuclockid_spec                 { POSIX_CLOCK_GETCPUCLOCKID_FAILS_WITH_ESRCH,
                                                   POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOCK_GETCPUCLOCKID_FAILS_WITH_ESRCH {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the function clock_getcpuclockid() ensures
                      that the error ESRCH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_getcpuclockid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_getcpuclockid()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_GETCPUCLOCKID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of clock_getcpuclockid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope clock_getres_spec                        { POSIX_CLOCK_GETRES_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CLOCK_GETRES_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOCK_GETRES_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_GETRES_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of clock_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope clock_gettime_spec                              { POSIX_CLOCK_GETTIME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CLOCK_GETTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOCK_GETTIME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CLOCK_GETTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of clock_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope clock_nanosleep_spec                                     { POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_ENOTSUP }

option POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of clock_nanosleep()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_nanosleep()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_nanosleep()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_NANOSLEEP_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_nanosleep()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sleep_return                                    { POSIX_USLEEP_HAS_EXTRA_ERROR_CODES,
                                                         POSIX_USLEEP_FAILS_WITH_EINVAL,
                                                         POSIX_USLEEP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                         POSIX_NANOSLEEP_HAS_EXTRA_ERROR_CODES,
                                                         POSIX_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINTR,
                                                         POSIX_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_USLEEP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of usleep()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_USLEEP_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the function usleep() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:                0  /@False@/
            1  /@True@/
    }
}

option POSIX_USLEEP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of usleep()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NANOSLEEP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of nanosleep()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of nanosleep()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NANOSLEEP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of nanosleep()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope clock_settime_spec                              { POSIX_CLOCK_SETTIME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CLOCK_SETTIME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_CLOCK_SETTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOCK_SETTIME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_SETTIME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, the current implementation of clock_settime()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOCK_SETTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/clock/clock_config.h"
    description     /@If this constant is set to 1, then current implementation of clock_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execl_spec                        { POSIX_EXECL_FAILS_WITH_ELOOP,
                                                   POSIX_EXECL_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECL_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECL_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOEXEC,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_EXECL_HAS_EXTRA_ERROR_CODES }

option POSIX_EXECL_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execl() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECL_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execl() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECL_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execl() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECL_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execl() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOEXEC {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ENOEXEC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execl()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of execl()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execle_spec                                     { POSIX_EXECLE_FAILS_WITH_ELOOP,
                                                   POSIX_EXECLE_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECLE_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECLE_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOEXEC,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_EXECLE_HAS_EXTRA_ERROR_CODES }

option POSIX_EXECLE_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execle() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLE_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execle() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLE_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execle() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLE_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execle() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOEXEC {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ENOEXEC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execle()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of execle()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execlp_spec                                     { POSIX_EXECLP_FAILS_WITH_ELOOP,
                                                   POSIX_EXECLP_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECLP_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECLP_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_EXECLP_HAS_EXTRA_ERROR_CODES }

option POSIX_EXECLP_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execlp() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLP_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execlp() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLP_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execlp() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLP_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execlp() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execlp()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECLP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of execlp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execv_spec                                      { POSIX_EXECV_FAILS_WITH_ELOOP,
                                                   POSIX_EXECV_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECV_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECV_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOEXEC,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_EXECV_HAS_EXTRA_ERROR_CODES }

option POSIX_EXECV_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execv() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECV_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execv() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECV_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execv() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECV_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execv() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOEXEC {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ENOEXEC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execv()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of execv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execve_spec                                     { POSIX_EXECVE_FAILS_WITH_ELOOP,
                                                   POSIX_EXECVE_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECVE_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECVE_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOEXEC,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_EXECVE_HAS_EXTRA_ERROR_CODES }

option POSIX_EXECVE_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execve() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVE_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execve() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVE_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execve() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVE_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function execve() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOEXEC {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ENOEXEC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of execve()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of execve()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fchdir_spec                                     { POSIX_FCHDIR_FAILS_WITH_EINTR,
                                                   POSIX_FCHDIR_FAILS_WITH_EIO,
                                                   POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_FCHDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_FCHDIR_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the function fchdir() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHDIR_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the function fchdir() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of fchdir()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of fchdir()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of fchdir()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of fchdir()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of fchdir()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, then current implementation of fchdir()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getcwd_spec                                     { POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETCWD_HAS_EXTRA_ERROR_CODES }

option POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of getcwd()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of getcwd()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of getcwd()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETCWD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of getcwd()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETCWD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, then current implementation of getcwd()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setuid_spec                              { POSIX_SETUID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETUID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETUID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETUID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setuid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETUID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setuid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETUID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setuid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope vfork_spec                                      { POSIX_VFORK_HAS_EXTRA_ERROR_CODES }

option POSIX_VFORK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of vfork()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wait_spec                                       { POSIX_WAIT_HAS_EXTRA_CONDITION_ON_ECHILD,
                                                   POSIX_WAIT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_WAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_WAIT_HAS_EXTRA_CONDITION_ON_ECHILD {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of wait()
                      may generate error code of ECHILD under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WAIT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of wait()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of wait()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope waitpid_spec                                    { POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_ECHILD,
                                                   POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WAITPID_HAS_EXTRA_ERROR_CODES }

option POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_ECHILD {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of waitpid()
                      may generate error code of ECHILD under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of waitpid()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WAITPID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of waitpid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WAITPID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of waitpid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __strtol_internal_spec                          { POSIX___STRTOL_INTERNAL_FAILS_WITH_EINVAL,
                                                   POSIX___STRTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX___STRTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX___STRTOL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option POSIX___STRTOL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function __strtol_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtol_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtol_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of __strtol_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __strtoll_internal_spec                         { POSIX___STRTOLL_INTERNAL_FAILS_WITH_EINVAL,
                                                   POSIX___STRTOLL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX___STRTOLL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX___STRTOLL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option POSIX___STRTOLL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function __strtoll_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOLL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoll_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOLL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoll_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOLL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of __strtoll_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __strtoul_internal_spec                         { POSIX___STRTOUL_INTERNAL_FAILS_WITH_EINVAL,
                                                   POSIX___STRTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX___STRTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX___STRTOUL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option POSIX___STRTOUL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function __strtoul_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoul_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoul_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOUL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of __strtoul_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __strtoull_internal_spec                        { POSIX___STRTOULL_INTERNAL_FAILS_WITH_EINVAL,
                                                   POSIX___STRTOULL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX___STRTOULL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX___STRTOULL_INTERNAL_HAS_EXTRA_ERROR_CODES }

option POSIX___STRTOULL_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function __strtoull_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOULL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoull_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOULL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtoull_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX___STRTOULL_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of __strtoull_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope access_spec                                     { POSIX_ACCESS_FAILS_WITH_EINVAL,
                                                   POSIX_ACCESS_FAILS_WITH_ELOOP,
                                                   POSIX_ACCESS_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_ACCESS_FAILS_WITH_ETXTBSY,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_ACCESS_HAS_EXTRA_ERROR_CODES }

option POSIX_ACCESS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function access() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCESS_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function access() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCESS_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function access() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCESS_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function access() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of access()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCESS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope calloc_spec                                     { POSIX_CALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_CALLOC_HAS_EXTRA_ERROR_CODES }

option POSIX_CALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, the current implementation of calloc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CALLOC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, then current implementation of calloc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope cfsetispeed_spec                                { POSIX_CFSETISPEED_FAILS_WITH_EINVAL,
                                                   POSIX_CFSETISPEED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CFSETISPEED_HAS_EXTRA_ERROR_CODES }

option POSIX_CFSETISPEED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function cfsetispeed() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CFSETISPEED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of cfsetispeed()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CFSETISPEED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of cfsetispeed()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope cfsetospeed_spec                                { POSIX_CFSETOSPEED_FAILS_WITH_EINVAL,
                                                   POSIX_CFSETOSPEED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CFSETOSPEED_HAS_EXTRA_ERROR_CODES }

option POSIX_CFSETOSPEED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function cfsetospeed() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CFSETOSPEED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of cfsetospeed()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CFSETOSPEED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of cfsetospeed()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope chmod_spec                                      { POSIX_CHMOD_FAILS_WITH_EINTR,
                                                   POSIX_CHMOD_FAILS_WITH_EINVAL,
                                                   POSIX_CHMOD_FAILS_WITH_ELOOP,
                                                   POSIX_CHMOD_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_CHMOD_HAS_EXTRA_ERROR_CODES }

option POSIX_CHMOD_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chmod() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHMOD_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chmod() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHMOD_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chmod() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHMOD_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chmod() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chmod()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHMOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope chown_spec                                      { CHOWN_CTIME_UPDATE_MARK,
                                                   POSIX_CHOWN_FAILS_WITH_EINTR,
                                                   POSIX_CHOWN_FAILS_WITH_EINVAL,
                                                   POSIX_CHOWN_FAILS_WITH_EIO,
                                                   POSIX_CHOWN_FAILS_WITH_ELOOP,
                                                   POSIX_CHOWN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_CHOWN_HAS_EXTRA_ERROR_CODES }

option CHOWN_CTIME_UPDATE_MARK {
    type            "set"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@Please select one of the following:@/
    values {
    default:         1  MARK_ALWAYS   /@we mark st_ctime for update always@/
                     2  MARK_ON_NON_MINUS_ONE   /@we mark st_ctime for update only if owner!=-1 or group!=-1@/
    }
}

option POSIX_CHOWN_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chown() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHOWN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chown() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHOWN_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chown() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHOWN_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chown() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHOWN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function chown() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of chown()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CHOWN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope close_spec                                      { POSIX_CLOSE_FAILS_WITH_EIO,
                                                   POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_CLOSE_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOSE_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function close() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of close()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of close()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOSE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of close()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of close()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope confstr_spec                             { POSIX_CONFSTR_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CONFSTR_HAS_EXTRA_ERROR_CODES }

option POSIX_CONFSTR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of confstr()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONFSTR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope creat_spec                                      { POSIX_CREAT_FAILS_WITH_EAGAIN,
                                                   POSIX_CREAT_FAILS_WITH_EINVAL,
                                                   POSIX_CREAT_FAILS_WITH_ELOOP,
                                                   POSIX_CREAT_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CREAT_FAILS_WITH_ENOMEM,
                                                   POSIX_CREAT_FAILS_WITH_ETXTBSY,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOSR,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_CREAT_HAS_EXTRA_ERROR_CODES }

option POSIX_CREAT_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function creat() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOSR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENOSR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of creat()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CREAT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of open()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope crypt_spec                               { POSIX_CRYPT_HAS_EXTRA_CONDITION_ON_ENOSYS,
                                                   POSIX_CRYPT_HAS_EXTRA_ERROR_CODES }

option POSIX_CRYPT_HAS_EXTRA_CONDITION_ON_ENOSYS {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, the current implementation of crypt()
                      may generate error code of ENOSYS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CRYPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, then current implementation of crypt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group file                                    { POSIX_DIRECTORY_READ_NOT_ALLOWED,
                                                      POSIX_READ_PERFORMS_ERRORS_DETECTION }

option POSIX_DIRECTORY_READ_NOT_ALLOWED {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this flag is set to 1, than the implementation does
                      not allow the directory to be read using read() or pread(). The readdir()
                      function should be used instead.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_PERFORMS_ERRORS_DETECTION {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this flag is set to one, then pread() and read() functions
                      perform error detection, if nbyte equals to zero and the file is a regular
                      file@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope dup_spec                                        { POSIX_DUP_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_DUP_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_DUP_HAS_EXTRA_ERROR_CODES }

option POSIX_DUP_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of dup()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DUP_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of dup()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DUP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope dup2_spec                                       { POSIX_DUP2_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_DUP2_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_DUP2_HAS_EXTRA_ERROR_CODES }

option POSIX_DUP2_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of dup2()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DUP2_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of dup2()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DUP2_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of dup()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope encrypt_spec                                    { POSIX_ENCRYPT_HAS_EXTRA_CONDITION_ON_ENOSYS,
                                                   POSIX_ENCRYPT_HAS_EXTRA_ERROR_CODES }

option POSIX_ENCRYPT_HAS_EXTRA_CONDITION_ON_ENOSYS {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, the current implementation of encrypt()
                      may generate error code of ENOSYS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ENCRYPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, then current implementation of encrypt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope endpwent_spec                                   { POSIX_ENDPWENT_FAILS_WITH_EIO,
                                                   POSIX_ENDPWENT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_ENDPWENT_HAS_EXTRA_ERROR_CODES }

option POSIX_ENDPWENT_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function endpwent() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ENDPWENT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of endpwent()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ENDPWENT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of setpwent()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope fchmod_spec                                     { POSIX_FCHMOD_FAILS_WITH_EINTR,
                                                   POSIX_FCHMOD_FAILS_WITH_EINVAL,
                                                   POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_FCHMOD_HAS_EXTRA_ERROR_CODES }

option POSIX_FCHMOD_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function fchmod() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHMOD_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function fchmod() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchmod()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchmod()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchmod()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchmod()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchmod()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHMOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fchown_spec                                     { POSIX_FCHOWN_FAILS_WITH_EINTR,
                                                   POSIX_FCHOWN_FAILS_WITH_EINVAL,
                                                   POSIX_FCHOWN_FAILS_WITH_EIO,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_FCHOWN_HAS_EXTRA_ERROR_CODES }

option POSIX_FCHOWN_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function fchown() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHOWN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function fchown() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHOWN_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function fchown() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of fchown()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCHOWN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fclose_spec                                     { POSIX_FCLOSE_FAILS_WITH_ENXIO,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FCLOSE_HAS_EXTRA_ERROR_CODES }

option POSIX_FCLOSE_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fclose() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fclose()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fclose()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fcntl_spec                                      { POSIX_FCNTL_FAILS_WITH_EDEADLK,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_ENOLCK,
                                                   POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FCNTL_HAS_EXTRA_ERROR_CODES }

option POSIX_FCNTL_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function fcntl() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_ENOLCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of ENOLCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fcntl()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FCNTL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fdatasync_spec                                  { POSIX_FDATASYNC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FDATASYNC_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FDATASYNC_HAS_EXTRA_ERROR_CODES }

option POSIX_FDATASYNC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fdatasync()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDATASYNC_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fdatasync()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDATASYNC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fdopen_spec                                     { POSIX_FDOPEN_FAILS_WITH_EBADF,
                                                   POSIX_FDOPEN_FAILS_WITH_EINVAL,
                                                   POSIX_FDOPEN_FAILS_WITH_EMFILE,
                                                   POSIX_FDOPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FDOPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_FDOPEN_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fdopen() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FDOPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fdopen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FDOPEN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fdopen() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FDOPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fdopen() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fdopen()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fdopen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fdopen()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fdopen()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fdopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fflush_spec                                     { POSIX_FFLUSH_FAILS_WITH_ENXIO,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FFLUSH_HAS_EXTRA_ERROR_CODES }

option POSIX_FFLUSH_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fflush() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fflush()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fflush_unlocked_spec                            { POSIX_FFLUSH_UNLOCKED_FAILS_WITH_ENXIO,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_ERROR_CODES }

option POSIX_FFLUSH_UNLOCKED_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fflush_unlocked() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fflush_unlocked()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FFLUSH_UNLOCKED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fflush_unlocked()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fgetc_spec                                      { POSIX_FGETC_FAILS_WITH_ENOMEM,
                                                   POSIX_FGETC_FAILS_WITH_ENXIO,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FGETC_HAS_EXTRA_ERROR_CODES }

option POSIX_FGETC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgetc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgetc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetc()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fgetc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fgetpos_spec                                    { POSIX_FGETPOS_FAILS_WITH_EBADF,
                                                   POSIX_FGETPOS_FAILS_WITH_ESPIPE,
                                                   POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_FGETPOS_HAS_EXTRA_ERROR_CODES }

option POSIX_FGETPOS_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgetpos() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETPOS_FAILS_WITH_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgetpos() ensures
                      that the error ESPIPE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetpos()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetpos()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETPOS_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetpos()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETPOS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fgetpos()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fgets_spec                                      { POSIX_FGETS_FAILS_WITH_ENOMEM,
                                                   POSIX_FGETS_FAILS_WITH_ENXIO,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FGETS_HAS_EXTRA_ERROR_CODES }

option POSIX_FGETS_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgets() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETS_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fgets() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgets()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fgets()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fgetwc_spec                                     { POSIX_FGETWC_FAILS_WITH_ENOMEM,
                                                   POSIX_FGETWC_FAILS_WITH_ENXIO,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FGETWC_HAS_EXTRA_ERROR_CODES }

option POSIX_FGETWC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fgetwc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETWC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fgetwc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetwc()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fgetwc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fgetws_spec                                     { POSIX_FGETWS_FAILS_WITH_ENOMEM,
                                                   POSIX_FGETWS_FAILS_WITH_ENXIO,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FGETWS_HAS_EXTRA_ERROR_CODES }

option POSIX_FGETWS_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fgetws() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETWS_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fgetws() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fgetws()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FGETWS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fgetws()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fileno_spec                                     { POSIX_FILENO_FAILS_WITH_EBADF,
                                                   POSIX_FILENO_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FILENO_HAS_EXTRA_ERROR_CODES }

option POSIX_FILENO_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fileno() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FILENO_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fileno()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FILENO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fileno()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope flock_spec                                      { POSIX_FLOCK_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_FLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_FLOCK_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of flock()
                      may generate error code of EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope fopen_spec                                      { POSIX_FOPEN_FAILS_WITH_EINVAL,
                                                   POSIX_FOPEN_FAILS_WITH_ELOOP,
                                                   POSIX_FOPEN_FAILS_WITH_EMFILE,
                                                   POSIX_FOPEN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_FOPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_FOPEN_FAILS_WITH_ETXTBSY,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_FOPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_FOPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fopen() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fopen()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fpathconf_spec                                  { POSIX_FPATHCONF_FAILS_WITH_EBADF,
                                                   POSIX_FPATHCONF_FAILS_WITH_EINVAL,
                                                   POSIX_FPATHCONF_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FPATHCONF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FPATHCONF_HAS_EXTRA_ERROR_CODES }

option POSIX_FPATHCONF_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function fpathconf() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPATHCONF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function fpathconf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPATHCONF_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of fpathconf()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPATHCONF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of fpathconf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPATHCONF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, then current implementation of fpathconf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fputc_spec                                      { POSIX_FPUTC_FAILS_WITH_ENOMEM,
                                                   POSIX_FPUTC_FAILS_WITH_ENXIO,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FPUTC_HAS_EXTRA_ERROR_CODES }

option POSIX_FPUTC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fputc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fputc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputc()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fputc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fputs_spec                                      { POSIX_FPUTS_FAILS_WITH_ENOMEM,
                                                   POSIX_FPUTS_FAILS_WITH_ENXIO,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FPUTS_HAS_EXTRA_ERROR_CODES }

option POSIX_FPUTS_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fputs() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTS_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fputs() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputs()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fputs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fputwc_spec                                     { POSIX_FPUTWC_FAILS_WITH_ENOMEM,
                                                   POSIX_FPUTWC_FAILS_WITH_ENXIO,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FPUTWC_HAS_EXTRA_ERROR_CODES }

option POSIX_FPUTWC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fputwc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTWC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fputwc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputwc()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fputwc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fputws_spec                                     { POSIX_FPUTWS_FAILS_WITH_ENOMEM,
                                                   POSIX_FPUTWS_FAILS_WITH_ENXIO,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FPUTWS_HAS_EXTRA_ERROR_CODES }

option POSIX_FPUTWS_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fputws() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTWS_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fputws() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fputws()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPUTWS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fputws()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fread_spec                                      { POSIX_FREAD_FAILS_WITH_ENOMEM,
                                                   POSIX_FREAD_FAILS_WITH_ENXIO,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FREAD_HAS_EXTRA_ERROR_CODES }

option POSIX_FREAD_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fread() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREAD_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fread() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fread()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREAD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fread()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope freopen_spec                                    { POSIX_FREOPEN_FAILS_WITH_EBADF,
                                                   POSIX_FREOPEN_FAILS_WITH_EINVAL,
                                                   POSIX_FREOPEN_FAILS_WITH_ELOOP,
                                                   POSIX_FREOPEN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_FREOPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_FREOPEN_FAILS_WITH_ENXIO,
                                                   POSIX_FREOPEN_FAILS_WITH_ETXTBSY,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   POSIX_FREOPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_FREOPEN_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function freopen() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of freopen()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FREOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of freopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fseek_spec                                      { POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_FSEEK_HAS_EXTRA_ERROR_CODES }

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fseek()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSEEK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fseek()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fsetpos_spec                                    { POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FSETPOS_HAS_EXTRA_ERROR_CODES }

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fsetpos()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSETPOS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fsetpos()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __fxstat_spec                                   { POSIX_FSTAT_FAILS_WITH_EOVERFLOW,
                                                   POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FSTAT_HAS_EXTRA_ERROR_CODES }

option POSIX_FSTAT_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function fstat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __fxstat64_spec                                   { POSIX_FSTAT64_FAILS_WITH_EOVERFLOW,
                                                   POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FSTAT64_HAS_EXTRA_ERROR_CODES }

option POSIX_FSTAT64_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function fstat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of fstat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTAT64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}


scope fstatvfs_spec                                   { POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FSTATVFS_HAS_EXTRA_ERROR_CODES }

option POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, then current implementation of statvfs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fstatvfs64_spec                                 { POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FSTATVFS64_HAS_EXTRA_ERROR_CODES }

option POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of fstatvfs()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSTATVFS64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, then current implementation of statvfs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fsync_spec                                      { POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FSYNC_HAS_EXTRA_ERROR_CODES }

option POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fsync()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fsync()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fsync()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSYNC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of fsync()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSYNC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ftell_spec                                      { POSIX_FTELL_FAILS_WITH_ESPIPE,
                                                   POSIX_FTELL_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FTELL_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FTELL_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_FTELL_HAS_EXTRA_ERROR_CODES }

option POSIX_FTELL_FAILS_WITH_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function ftell() ensures
                      that the error ESPIPE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FTELL_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of ftell()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTELL_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of ftell()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTELL_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of ftell()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTELL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of ftell()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ftruncate_spec                                  { POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_FTRUNCATE_HAS_EXTRA_ERROR_CODES }

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of ftruncate()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTRUNCATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ftw_spec                                        { POSIX_FTW_FAILS_WITH_EINVAL,
                                                   POSIX_FTW_FAILS_WITH_ELOOP,
                                                   POSIX_FTW_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_FTW_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_FTW_HAS_EXTRA_ERROR_CODES }

option POSIX_FTW_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FTW_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function ftw() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of ftw()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, then current implementation of ftw()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fwide_spec                                      { POSIX_FWIDE_FAILS_WITH_EBADF,
                                                   POSIX_FWIDE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FWIDE_HAS_EXTRA_ERROR_CODES }

option POSIX_FWIDE_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function fwide() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWIDE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwide()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWIDE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fwide()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope fwrite_spec                                     { POSIX_FWRITE_FAILS_WITH_ENOMEM,
                                                   POSIX_FWRITE_FAILS_WITH_ENXIO,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_FWRITE_HAS_EXTRA_ERROR_CODES }

option POSIX_FWRITE_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fwrite() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWRITE_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function fwrite() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of fwrite()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWRITE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of fwrite()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getgrent_spec                                   { POSIX_GETGRENT_FAILS_WITH_EINTR,
                                                   POSIX_GETGRENT_FAILS_WITH_EIO,
                                                   POSIX_GETGRENT_FAILS_WITH_EMFILE,
                                                   POSIX_GETGRENT_FAILS_WITH_ENFILE,
                                                   POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETGRENT_HAS_EXTRA_ERROR_CODES }

option POSIX_GETGRENT_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrent() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRENT_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrent() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRENT_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrent() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRENT_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrent() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrent()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrent()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrent()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRENT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrent()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRENT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
          	0  /@False@/
    default:    1  /@True@/
    }
}

scope getgrgid_spec                                   { POSIX_GETGRGID_FAILS_WITH_EINTR,
                                                   POSIX_GETGRGID_FAILS_WITH_EIO,
                                                   POSIX_GETGRGID_FAILS_WITH_EMFILE,
                                                   POSIX_GETGRGID_FAILS_WITH_ENFILE,
                                                   POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETGRGID_HAS_EXTRA_ERROR_CODES }

option POSIX_GETGRGID_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRGID_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRGID_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRGID_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRGID_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope getgrgid_r_spec                                 { POSIX_GETGRGID_R_FAILS_WITH_ERANGE,
                                                   POSIX_GETGRGID_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETGRGID_R_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETGRID_R_FAILS_WITH_EINTR,
                                                   POSIX_GETGRID_R_FAILS_WITH_EIO,
                                                   POSIX_GETGRID_R_FAILS_WITH_EMFILE,
                                                   POSIX_GETGRID_R_FAILS_WITH_ENFILE,
                                                   POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETGRID_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GETGRGID_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRGID_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRGID_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of getgrgid_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRID_R_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid_r() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRID_R_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid_r() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRID_R_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid_r() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRID_R_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrgid_r() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid_r()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid_r()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid_r()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRID_R_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrgid_r()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRID_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of getgrgid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getgrnam_spec                                   { POSIX_GETGRNAM_FAILS_WITH_EINTR,
                                                   POSIX_GETGRNAM_FAILS_WITH_EIO,
                                                   POSIX_GETGRNAM_FAILS_WITH_EMFILE,
                                                   POSIX_GETGRNAM_FAILS_WITH_ENFILE,
                                                   POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETGRNAM_HAS_EXTRA_ERROR_CODES }

option POSIX_GETGRNAM_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope getgrnam_r_spec                                 { POSIX_GETGRNAM_R_FAILS_WITH_EINTR,
                                                   POSIX_GETGRNAM_R_FAILS_WITH_EIO,
                                                   POSIX_GETGRNAM_R_FAILS_WITH_EMFILE,
                                                   POSIX_GETGRNAM_R_FAILS_WITH_ENFILE,
                                                   POSIX_GETGRNAM_R_FAILS_WITH_ERANGE,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETGRNAM_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GETGRNAM_R_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam_r() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_R_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam_r() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_R_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam_r() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_R_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam_r() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the function getgrnam_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam_r()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam_r()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam_r()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam_r()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, the current implementation of getgrnam_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGRNAM_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/group_config.h"
    description     /@If this constant is set to 1, then current implementation of getgrnam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
            	0  /@False@/
    default:    1  /@True@/
    }
}

scope getgroups_spec                                  { POSIX_GETGROUPS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETGROUPS_HAS_EXTRA_ERROR_CODES,
                                                   GETGROUPS_RETURNS_THE_EFFECTIVE_GROUP_ID_IN_THE_GROUPLIST_ARRAY }

option POSIX_GETGROUPS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of getgroups()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETGROUPS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of getgroups()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option GETGROUPS_RETURNS_THE_EFFECTIVE_GROUP_ID_IN_THE_GROUPLIST_ARRAY {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@TODO:@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getlogin_spec                                   { POSIX_GETLOGIN_FAILS_WITH_EMFILE,
                                                   POSIX_GETLOGIN_FAILS_WITH_ENFILE,
                                                   POSIX_GETLOGIN_FAILS_WITH_ENXIO,
                                                   POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETLOGIN_HAS_EXTRA_ERROR_CODES }

option POSIX_GETLOGIN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of getlogin()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
			        0  /@False@/
    default:        1  /@True@/
    }
}

scope getlogin_r_spec                                 { POSIX_GETLOGIN_R_FAILS_WITH_EMFILE,
                                                   POSIX_GETLOGIN_R_FAILS_WITH_ENFILE,
                                                   POSIX_GETLOGIN_R_FAILS_WITH_ENXIO,
                                                   POSIX_GETLOGIN_R_FAILS_WITH_ERANGE,
                                                   POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETLOGIN_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GETLOGIN_R_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin_r() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_R_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin_r() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_R_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin_r() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function getlogin_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin_r()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin_r()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin_r()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of getlogin_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETLOGIN_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of getlogin_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
			        0  /@False@/
    default:        1  /@True@/
    }
}

scope getpeername_spec                                { POSIX_GETPEERNAME_FAILS_WITH_EINVAL,
                                                   POSIX_GETPEERNAME_FAILS_WITH_ENOBUFS,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_GETPEERNAME_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPEERNAME_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@This is bug in implementation: getpeername() shall fail with EINVAL
                      according to specification@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getpeername() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getpeername()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPEERNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of getpeername()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getpgid_spec                             { POSIX_GETPGID_FAILS_WITH_EINVAL,
                                                   POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_GETPGID_HAS_EXTRA_ERROR_CODES,
                                                   PROCESS_PGROUP_IMPLEMENTATION_DOES_NOT_ALLOW_ACCESS_TO_PROCESS_THAT_IS_NOT_IN_THE_SAME_SESSION }

option POSIX_GETPGID_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the function getpgid() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of getpgid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of getpgid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPGID_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of getpgid()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, then current implementation of getpgid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PROCESS_PGROUP_IMPLEMENTATION_DOES_NOT_ALLOW_ACCESS_TO_PROCESS_THAT_IS_NOT_IN_THE_SAME_SESSION {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@The process whose process ID is equal to pid is not in the same session as
                      the calling process, and the implementation does not allow access to the
                      process group ID of that process from the calling process.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope getpriority_spec                                { POSIX_GETPRIORITY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETPRIORITY_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_GETPRIORITY_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPRIORITY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPRIORITY_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPRIORITY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, then current implementation of setpriority()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getpwent_spec                                   { POSIX_GETPWENT_FAILS_WITH_EIO,
                                                   POSIX_GETPWENT_FAILS_WITH_EMFILE,
                                                   POSIX_GETPWENT_FAILS_WITH_ENFILE,
                                                   POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETPWENT_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPWENT_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwent() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWENT_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwent() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWENT_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwent() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwent()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwent()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWENT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwent()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWENT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
          	0  /@False@/
    default:    1  /@True@/
    }
}

scope getpwnam_spec                                   { POSIX_GETPWNAM_FAILS_WITH_EINTR,
                                                   POSIX_GETPWNAM_FAILS_WITH_EIO,
                                                   POSIX_GETPWNAM_FAILS_WITH_EMFILE,
                                                   POSIX_GETPWNAM_FAILS_WITH_ENFILE,
                                                   POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETPWNAM_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPWNAM_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
     default:   1  /@True@/
    }
}

scope getpwnam_r_spec                                 { POSIX_GETPWNAM_R_FAILS_WITH_EINTR,
                                                   POSIX_GETPWNAM_R_FAILS_WITH_EIO,
                                                   POSIX_GETPWNAM_R_FAILS_WITH_EMFILE,
                                                   POSIX_GETPWNAM_R_FAILS_WITH_ENFILE,
                                                   POSIX_GETPWNAM_R_FAILS_WITH_ERANGE,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_GETPWNAM_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPWNAM_R_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam_r() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_R_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam_r() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_R_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam_r() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_R_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam_r() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwnam_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam_r()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam_r()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam_r()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam_r()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwnam_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWNAM_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of getpwnam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getpwuid_spec                                   { POSIX_GETPWUID_FAILS_WITH_EINTR,
                                                   POSIX_GETPWUID_FAILS_WITH_EIO,
                                                   POSIX_GETPWUID_FAILS_WITH_EMFILE,
                                                   POSIX_GETPWUID_FAILS_WITH_ENFILE,
                                                   POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_GETPWUID_HAS_EXTRA_ERROR_CODES }

option POSIX_GETPWUID_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function getpwuid() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of getpwuid()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETPWUID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope getrlimit_spec                                  { POSIX_GETRLIMIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETRLIMIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_GETRLIMIT_HAS_EXTRA_ERROR_CODES }

option POSIX_GETRLIMIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of getrlimit()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETRLIMIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of getrlimit()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETRLIMIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of getrlimit()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope getrlimit64_spec                                { POSIX_GETRLIMIT64_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETRLIMIT64_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_GETRLIMIT64_HAS_EXTRA_ERROR_CODES }

option POSIX_GETRLIMIT64_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of getrlimit64()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETRLIMIT64_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of getrlimit64()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETRLIMIT64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of getrlimit64()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope getrusage_spec                                  { POSIX_GETRUSAGE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETRUSAGE_HAS_EXTRA_ERROR_CODES }

option POSIX_GETRUSAGE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of getrusage()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETRUSAGE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of getrusage()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getsid_spec                                     { POSIX_GETSID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_GETSID_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_GETSID_HAS_EXTRA_ERROR_CODES }

option POSIX_GETSID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of getsid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSID_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of getsid()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, then current implementation of getsid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getsockname_spec                                { POSIX_GETSOCKNAME_FAILS_WITH_EINVAL,
                                                   POSIX_GETSOCKNAME_FAILS_WITH_ENOBUFS,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_GETSOCKNAME_HAS_EXTRA_ERROR_CODES }

option POSIX_GETSOCKNAME_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getsockname() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETSOCKNAME_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getsockname() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockname()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockname()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockname()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockname()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockname()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of getsockname()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getsockopt_spec                          { POSIX_GETSOCKOPT_FAILS_WITH_EACCES,
                                                   POSIX_GETSOCKOPT_FAILS_WITH_EINVAL,
                                                   POSIX_GETSOCKOPT_FAILS_WITH_ENOBUFS,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOPROTOOPT,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_GETSOCKOPT_HAS_EXTRA_ERROR_CODES }

option POSIX_GETSOCKOPT_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getsockopt() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETSOCKOPT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getsockopt() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETSOCKOPT_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function getsockopt() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOPROTOOPT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of ENOPROTOOPT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of getsockopt()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETSOCKOPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of getsockopt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getw_spec                                { POSIX_GETW_FAILS_WITH_ENOMEM,
                                                   POSIX_GETW_FAILS_WITH_ENXIO,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETW_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GETW_HAS_EXTRA_ERROR_CODES }

option POSIX_GETW_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function getw() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETW_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function getw() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getw()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of getw()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getwc_spec                                      { POSIX_GETWC_FAILS_WITH_ENOMEM,
                                                   POSIX_GETWC_FAILS_WITH_ENXIO,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GETWC_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETWC_UNLOCKED_FAILS_WITH_ENOMEM,
                                                   POSIX_GETWC_UNLOCKED_FAILS_WITH_ENXIO,
                                                   POSIX_GETWC_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_GETWC_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETWC_UNLOCKED_HAS_EXTRA_ERROR_CODES }

option POSIX_GETWC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of getwc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_UNLOCKED_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwc_unlocked() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWC_UNLOCKED_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwc_unlocked() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWC_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_UNLOCKED_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWC_UNLOCKED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of getwc_unlocked()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getwchar_spec                                   { POSIX_GETWCHAR_FAILS_WITH_ENOMEM,
                                                   POSIX_GETWCHAR_FAILS_WITH_ENXIO,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GETWCHAR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_ERROR_CODES }

option POSIX_GETWCHAR_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwchar() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWCHAR_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function getwchar() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwchar()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of getwchar()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of getwc_unlocked()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETWCHAR_UNLOCKED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of getwc_unlocked()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope glob_spec                                       { POSIX_GLOB_HAS_EXTRA_CONDITION_ON_GLOB_ABORTED,
                                                   POSIX_GLOB_HAS_EXTRA_CONDITION_ON_GLOB_NOMATCH,
                                                   POSIX_GLOB_HAS_EXTRA_ERROR_CODES }

option POSIX_GLOB_HAS_EXTRA_CONDITION_ON_GLOB_ABORTED {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, the current implementation of glob()
                      may generate error code of GLOB_ABORTED under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GLOB_HAS_EXTRA_CONDITION_ON_GLOB_NOMATCH {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, the current implementation of glob()
                      may generate error code of GLOB_NOMATCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GLOB_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/glob/glob_config.h"
    description     /@If this constant is set to 1, then current implementation of glob()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gmtime_spec                                     { POSIX_GMTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GMTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_GMTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the current implementation of gmtime_r()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GMTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, then current implementation of gmtime_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gmtime_r_spec                                   { POSIX_GMTIME_R_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_GMTIME_R_HAS_EXTRA_ERROR_CODES }

option POSIX_GMTIME_R_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the current implementation of gmtime_r()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GMTIME_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, then current implementation of gmtime_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope grantpt_spec                                    { POSIX_GRANTPT_FAILS_WITH_EACCES,
                                                   POSIX_GRANTPT_FAILS_WITH_EBADF,
                                                   POSIX_GRANTPT_FAILS_WITH_EINVAL,
                                                   POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_GRANTPT_HAS_EXTRA_ERROR_CODES }

option POSIX_GRANTPT_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function grantpt() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GRANTPT_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function grantpt() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GRANTPT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function grantpt() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of grantpt()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of grantpt()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GRANTPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of grantpt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GRANTPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of grantpt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope hash                           { POSIX_HASH_SEARCH_TABLE_IS_PROCESS_LOCAL }

option POSIX_HASH_SEARCH_TABLE_IS_PROCESS_LOCAL {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@There are no explicit requirements to behaviour of a hash search table
                        subsystem if functions hcreate, hdestroy and hsearch are called within
                        different threads.

                        There are two possible implementations conforming the standard.

                        The first one places a hash table in process static memory.
                        The second one places a hash table in thread local memory.

                        The first implementation is the general used one.
                        So it is the only implementation supported by the test suite.

                        The proposal to clarify the standard is registered as defect XXX.

                        Dependencies: util.search.hash, process.process.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope hcreate_spec                                    { POSIX_HCREATE_FAILS_WITH_ENOMEM,
                                                   POSIX_HCREATE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_HCREATE_HAS_EXTRA_ERROR_CODES }

option POSIX_HCREATE_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, the function hcreate() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_HCREATE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, the current implementation of hcreate()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_HCREATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, then current implementation of hcreate()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope hsearch_spec                                    { POSIX_HSEARCH_FAILS_WITH_ENOMEM,
                                                   POSIX_HSEARCH_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_HSEARCH_HAS_EXTRA_ERROR_CODES }

option POSIX_HSEARCH_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, the function hsearch() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_HSEARCH_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, the current implementation of hsearch()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_HSEARCH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/search/hash_config.h"
    description     /@If this constant is set to 1, then current implementation of hsearch()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope iconv_close_spec                                { POSIX_ICONV_CLOSE_FAILS_WITH_EBADF,
                                                   POSIX_ICONV_CLOSE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_ICONV_CLOSE_HAS_EXTRA_ERROR_CODES }

option POSIX_ICONV_CLOSE_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv_close() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_CLOSE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv_close()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_CLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, then current implementation of iconv_close()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope iconv_spec                                      { POSIX_ICONV_FAILS_WITH_EBADF,
                                                   POSIX_ICONV_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ICONV_HAS_EXTRA_ERROR_CODES }

option POSIX_ICONV_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ICONV_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, then current implementation of iconv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope iconv_open_spec                                 { POSIX_ICONV_OPEN_FAILS_WITH_EINVAL,
                                                   POSIX_ICONV_OPEN_FAILS_WITH_EMFILE,
                                                   POSIX_ICONV_OPEN_FAILS_WITH_ENFILE,
                                                   POSIX_ICONV_OPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_ICONV_OPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_ICONV_OPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv_open() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ICONV_OPEN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv_open() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ICONV_OPEN_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv_open() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ICONV_OPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the function iconv_open() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv_open()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv_open()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv_open()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_OPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, the current implementation of iconv_open()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ICONV_OPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/iconv/iconv_config.h"
    description     /@If this constant is set to 1, then current implementation of iconv_open()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inet_ntop_spec                                  { POSIX_INET_NTOP_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_INET_NTOP_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_INET_NTOP_HAS_EXTRA_ERROR_CODES }

option POSIX_INET_NTOP_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, the current implementation of inet_ntop()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INET_NTOP_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, the current implementation of inet_ntop()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INET_NTOP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, then current implementation of inet_ntop()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope inet_pton_spec                                  { POSIX_INET_PTON_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_INET_PTON_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_INET_PTON_HAS_EXTRA_ERROR_CODES }

option POSIX_INET_PTON_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, the current implementation of inet_pton()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INET_PTON_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, the current implementation of inet_pton()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INET_PTON_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/inet/inet_config.h"
    description     /@If this constant is set to 1, then current implementation of inet_pton()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope initgroups_spec                                 { POSIX_INITGROUPS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_INITGROUPS_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_INITGROUPS_HAS_EXTRA_ERROR_CODES }

option POSIX_INITGROUPS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of initgroups()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INITGROUPS_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of initgroups()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_INITGROUPS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of initgroups()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group term                                 { POSIX_IO_TERM_CONTROL_CHARACTERS_MUST_RESET_TIMER,
                                                   POSIX_IO_TERM_CONTROL_CHARACTERS_MUST_RESTART_OUTPUT,
                                                   POSIX_IO_TERM_FILE_DESC_ID_MUST_REFER_TO_PTM,
                                                   POSIX_IO_TERM_FILE_DESC_ID_MUST_REFER_TO_TERMINAL,
                                                   POSIX_IO_TERM_OPEN_WITHOUT_NOCTTY_BEHAVIOUR,
                                                   POSIX_IO_TERM_PT_TRANSMISSION_TIME,
                                                   POSIX_IO_TERM_PTM_DEVICE_FILE_NAME,
                                                   POSIX_IO_TERM_SPEED_MUST_BE_DEFINED_AS_SYMBOLIC_NAME,
                                                   POSIX_IO_TERM_TAB_SIZE,
                                                   POSIX_IO_TERM_TTY_TIMER_ACCURACY }

option POSIX_IO_TERM_CONTROL_CHARACTERS_MUST_RESET_TIMER {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, control characters must reset inter byte
                        terminal timer (non-canonical mode, case A), otherwise they must not.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_IO_TERM_CONTROL_CHARACTERS_MUST_RESTART_OUTPUT {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, control characters must restart output
                        if IXANY flag is set, otherwise they must not.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_IO_TERM_FILE_DESC_ID_MUST_REFER_TO_PTM {
    type            "bool"
    kind            "def"
    destination     "io/term/term_config.h"
    description     /@There are no explicit requirements for the fildes argument of the
                        unlockpt() and grantpt() functions in POSIX and LSB. If the fildes
                        argument does not refer to master preudo-terminal device, behavior
                        is not fully defined.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_IO_TERM_FILE_DESC_ID_MUST_REFER_TO_TERMINAL {
    type            "bool"
    kind            "def"
    destination     "io/term/term_config.h"
    description     /@There are no explicit requirements for the fildes argument of
                        ttyname() and ttyname_r() functions in POSIX and LSB. If the
                        fildes argument does not refer to terminal device, behavior is
                        not fully defined.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_IO_TERM_OPEN_WITHOUT_NOCTTY_BEHAVIOUR {
    type            "set"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@if session leader, which has no controlling terminal, opens a
                      a terminal device file that is not already associated with a
                      session without using the O_NOCTTY option:@/
    values {
                     1  POSIX_IO_TERM_OPEN_WITHOUT_NOCTTY_SHALL_SET_CTERM   /@the terminal always becomes the controlling terminal@/
                     2  POSIX_IO_TERM_OPEN_WITHOUT_NOCTTY_SHALL_NOT_SET_CTERM   /@the terminal never becomes the controlling terminal@/
    default:         3  POSIX_IO_TERM_OPEN_WITHOUT_NOCTTY_MAY_SET_CTERM   /@the terminal may becomes the controlling terminal@/
    }
}

option POSIX_IO_TERM_PT_TRANSMISSION_TIME {
    type            "int"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@Transmission time between master and slave pseudo-terminals.@/
    values {
    default:        100000000  /@100000000@/
    }
}

option POSIX_IO_TERM_PTM_DEVICE_FILE_NAME {
    type            "string"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@Master pseudo-terminal device file name.@/
    values {
    default:        1 /@/dev/ptmx@/
                    0 /@NULL@/
    }
}

option POSIX_IO_TERM_SPEED_MUST_BE_DEFINED_AS_SYMBOLIC_NAME {
    type            "bool"
    kind            "def"
    destination     "io/term/term_config.h"
    description     /@POSIX says that the cfsetospeed() and cfsetispeed() functions do
                        not take speed arguments as numbers, but rather as Bxxx symbolic
                        names defined in termios.h file. At the same time, POSIX admits
                        these functions to handle error if the value of speed is outside
                        the range of possible speed values.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_IO_TERM_TAB_SIZE {
    type            "int"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@TAB character size.@/
    values {
    default:        8  /@8@/
    }
}

option POSIX_IO_TERM_TTY_TIMER_ACCURACY {
    type            "int"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@Terminal timer accuracy in nanoseconds.@/
    values {
    default:        100000000  /@100000000@/
    }
}

scope kill_spec                                       { POSIX_KILL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_KILL_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_KILL_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_KILL_HAS_EXTRA_ERROR_CODES }

option POSIX_KILL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of kill()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_KILL_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of kill()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_KILL_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of kill()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_KILL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope lchown_spec                                     { POSIX_LCHOWN_FAILS_WITH_EINTR,
                                                   POSIX_LCHOWN_FAILS_WITH_EIO,
                                                   POSIX_LCHOWN_FAILS_WITH_ELOOP,
                                                   POSIX_LCHOWN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_LCHOWN_HAS_EXTRA_ERROR_CODES }

option POSIX_LCHOWN_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function lchown() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LCHOWN_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function lchown() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LCHOWN_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function lchown() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LCHOWN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the function lchown() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, the current implementation of lchown()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LCHOWN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/access_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope localtime_spec                                  { POSIX_LOCALTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LOCALTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_LOCALTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the current implementation of localtime_r()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCALTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, then current implementation of localtime_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope localtime_r_spec                                { POSIX_LOCALTIME_R_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LOCALTIME_R_HAS_EXTRA_ERROR_CODES }

option POSIX_LOCALTIME_R_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the current implementation of localtime_r()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOCALTIME_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, then current implementation of localtime_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope lseek_spec                                      { POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_LSEEK_HAS_EXTRA_ERROR_CODES }

option POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lseek()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lseek()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lseek()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSEEK_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of lseek()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSEEK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __lxstat_spec                                   { POSIX_LSTAT_FAILS_WITH_ELOOP,
                                                   POSIX_LSTAT_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_LSTAT_FAILS_WITH_EOVERFLOW,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LSTAT_HAS_EXTRA_ERROR_CODES }

option POSIX_LSTAT_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope __lxstat64_spec                                 { POSIX_LSTAT64_FAILS_WITH_ELOOP,
                                                   POSIX_LSTAT64_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_LSTAT64_FAILS_WITH_EOVERFLOW,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_LSTAT64_HAS_EXTRA_ERROR_CODES }

option POSIX_LSTAT64_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT64_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT64_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function lstat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of lstat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LSTAT64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope malloc_spec                                     { POSIX_MALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MALLOC_HAS_EXTRA_ERROR_CODES }

option POSIX_MALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, the current implementation of malloc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MALLOC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, then current implementation of malloc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mblen_spec                                      { POSIX_MBLEN_FAILS_WITH_EILSEQ,
                                                   POSIX_MBLEN_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBLEN_HAS_EXTRA_ERROR_CODES }

option POSIX_MBLEN_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mblen() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBLEN_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mblen()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBLEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mblen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbrlen_spec                                     { POSIX_MBRLEN_FAILS_WITH_EILSEQ,
                                                   POSIX_MBRLEN_FAILS_WITH_EINVAL,
                                                   POSIX_MBRLEN_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBRLEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MBRLEN_HAS_EXTRA_ERROR_CODES }

option POSIX_MBRLEN_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbrlen() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBRLEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbrlen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBRLEN_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbrlen()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBRLEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbrlen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBRLEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbrlen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbrtowc_spec                                    { POSIX_MBRTOWC_FAILS_WITH_EILSEQ,
                                                   POSIX_MBRTOWC_FAILS_WITH_EINVAL,
                                                   POSIX_MBRTOWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBRTOWC_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MBRTOWC_HAS_EXTRA_ERROR_CODES }

option POSIX_MBRTOWC_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbrtowc() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBRTOWC_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbrtowc() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBRTOWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbrtowc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBRTOWC_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbrtowc()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBRTOWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbrtowc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbsrtowcs_spec                                  { POSIX_MBSRTOWCS_FAILS_WITH_EILSEQ,
                                                   POSIX_MBSRTOWCS_FAILS_WITH_EINVAL,
                                                   POSIX_MBSRTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBSRTOWCS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MBSRTOWCS_HAS_EXTRA_ERROR_CODES }

option POSIX_MBSRTOWCS_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbsrtowcs() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBSRTOWCS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbsrtowcs() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBSRTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbsrtowcs()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBSRTOWCS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbsrtowcs()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBSRTOWCS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbsrtowcs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbstowcs_spec                                   { POSIX_MBSTOWCS_FAILS_WITH_EILSEQ,
                                                   POSIX_MBSTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBSTOWCS_HAS_EXTRA_ERROR_CODES }

option POSIX_MBSTOWCS_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbstowcs() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBSTOWCS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbstowcs()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBSTOWCS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbstowcs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mbtowc_spec                                     { POSIX_MBTOWC_FAILS_WITH_EILSEQ,
                                                   POSIX_MBTOWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_MBTOWC_HAS_EXTRA_ERROR_CODES }

option POSIX_MBTOWC_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function mbtowc() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MBTOWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of mbtowc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MBTOWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of mbtowc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mkfifo_spec                                     { POSIX_MKFIFO_FAILS_WITH_ELOOP,
                                                   POSIX_MKFIFO_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_MKFIFO_HAS_EXTRA_ERROR_CODES }

option POSIX_MKFIFO_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the function mkfifo() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MKFIFO_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the function mkfifo() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, the current implementation of mkfifo()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKFIFO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fifo/fifo_config.h"
    description     /@If this constant is set to 1, then current implementation of mkfifo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mktime_spec                                     { POSIX_MKTIME_FAILS_WITH_EOVERFLOW,
                                                   POSIX_MKTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_MKTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_MKTIME_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the function mktime() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKTIME_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, the current implementation of mktime()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/conversion/conversion_config.h"
    description     /@If this constant is set to 1, then current implementation of mktime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope mlock_spec                                      { POSIX_MLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_MLOCK_FAILS_WITH_ENOMEM,
                                                   POSIX_MLOCK_FAILS_WITH_EPERM,
                                                   POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_MLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_MLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function mlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MLOCK_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function mlock() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MLOCK_FAILS_WITH_EPERM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function mlock() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlock()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlock()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of mlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope mlockall_spec                                   { POSIX_MLOCKALL_FAILS_WITH_ENOMEM,
                                                   POSIX_MLOCKALL_FAILS_WITH_EPERM,
                                                   POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_MLOCKALL_HAS_EXTRA_ERROR_CODES }

option POSIX_MLOCKALL_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function mlockall() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MLOCKALL_FAILS_WITH_EPERM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function mlockall() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlockall()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlockall()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlockall()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCKALL_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mlockall()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MLOCKALL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of mlockall()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mmap_spec                                       { POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENODEV,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_MMAP_HAS_EXTRA_ERROR_CODES }

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENODEV {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of ENODEV under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mmap()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MMAP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of mmap()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mprotect_spec                                   { POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_MPROTECT_HAS_EXTRA_ERROR_CODES }

option POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mprotect()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mprotect()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mprotect()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mprotect()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MPROTECT_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of mprotect()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MPROTECT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of mprotect()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope msync_spec                                      { POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MSYNC_HAS_EXTRA_ERROR_CODES }

option POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of msync()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of msync()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSYNC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of msync()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSYNC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of msync()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope munlock_spec                                    { POSIX_MUNLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_MUNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MUNLOCK_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_MUNLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_MUNLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the function munlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MUNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of munlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MUNLOCK_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of munlock()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MUNLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of munlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope munmap_spec                                     { POSIX_MUNMAP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MUNMAP_HAS_EXTRA_ERROR_CODES }

option POSIX_MUNMAP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of munmap()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MUNMAP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of munmap()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope nftw_spec                                       { POSIX_NFTW_FAILS_WITH_ELOOP,
                                                   POSIX_NFTW_FAILS_WITH_EMFILE,
                                                   POSIX_NFTW_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_NFTW_FAILS_WITH_ENFILE,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_NFTW_HAS_EXTRA_ERROR_CODES }

option POSIX_NFTW_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_NFTW_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_NFTW_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_NFTW_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the function nftw() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, the current implementation of nftw()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NFTW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/ftw/ftw_config.h"
    description     /@If this constant is set to 1, then current implementation of nftw()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope nice_spec                                       { POSIX_NICE_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_NICE_HAS_EXTRA_ERROR_CODES }

option POSIX_NICE_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of nice()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NICE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, then current implementation of nice()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope pthread_once_spec                               { POSIX_ONCE_FAILS_WITH_EINVAL,
                                                   POSIX_ONCE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ONCE_HAS_EXTRA_ERROR_CODES }

option POSIX_ONCE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_once() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ONCE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_once()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ONCE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pathconf_spec                                   { POSIX_PATHCONF_FAILS_WITH_EACCES,
                                                   POSIX_PATHCONF_FAILS_WITH_EINVAL,
                                                   POSIX_PATHCONF_FAILS_WITH_ELOOP,
                                                   POSIX_PATHCONF_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_PATHCONF_FAILS_WITH_ENOENT,
                                                   POSIX_PATHCONF_FAILS_WITH_ENOTDIR,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_PATHCONF_HAS_EXTRA_ERROR_CODES }

option POSIX_PATHCONF_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_FAILS_WITH_ENOENT {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error ENOENT will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_FAILS_WITH_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the function pathconf() ensures
                      that the error ENOTDIR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of pathconf()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PATHCONF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, then current implementation of pathconf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pclose_spec                                     { POSIX_PCLOSE_HAS_EXTRA_CONDITION_ON_ECHILD,
                                                   POSIX_PCLOSE_HAS_EXTRA_ERROR_CODES }

option POSIX_PCLOSE_HAS_EXTRA_CONDITION_ON_ECHILD {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of pclose()
                      may generate error code of ECHILD under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PCLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of pclose()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pipe_spec                                       { POSIX_PIPE_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_PIPE_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_PIPE_HAS_EXTRA_ERROR_CODES }

option POSIX_PIPE_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/pipe/pipe_config.h"
    description     /@If this constant is set to 1, the current implementation of pipe()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PIPE_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/pipe/pipe_config.h"
    description     /@If this constant is set to 1, the current implementation of pipe()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PIPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/pipe/pipe_config.h"
    description     /@If this constant is set to 1, then current implementation of pipe()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope popen_spec                                      { POSIX_POPEN_FAILS_WITH_EINVAL,
                                                   POSIX_POPEN_FAILS_WITH_EMFILE,
                                                   POSIX_POPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_POPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_POPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_POPEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function popen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_POPEN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the function popen() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_POPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of popen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


option POSIX_POPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, the current implementation of popen()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@If this constant is set to 1, then current implementation of popen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope posix_openpt_spec                               { POSIX_POSIX_OPENPT_FAILS_WITH_EAGAIN,
                                                   POSIX_POSIX_OPENPT_FAILS_WITH_EINVAL,
                                                   POSIX_POSIX_OPENPT_FAILS_WITH_ENOSR,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_ENOSR,
                                                   POSIX_POSIX_OPENPT_HAS_EXTRA_ERROR_CODES }

option POSIX_POSIX_OPENPT_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function posix_openpt() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function posix_openpt() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_FAILS_WITH_ENOSR {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function posix_openpt() ensures
                      that the error ENOSR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_openpt()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_openpt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_openpt()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_openpt()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_CONDITION_ON_ENOSR {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of posix_openpt()
                      may generate error code of ENOSR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POSIX_OPENPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of posix_openpt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pread_spec                                      { POSIX_PREAD_FAILS_WITH_EIO,
                                                   POSIX_PREAD_FAILS_WITH_ENOBUFS,
                                                   POSIX_PREAD_FAILS_WITH_ENOMEM,
                                                   POSIX_PREAD_FAILS_WITH_ENXIO,
                                                   POSIX_PREAD_FAILS_WITH_XSI,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EBADMSG,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_PREAD_HAS_EXTRA_CONDITION_ON_XSI,
                                                   POSIX_PREAD_HAS_EXTRA_ERROR_CODES }

option POSIX_PREAD_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pread() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PREAD_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pread() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PREAD_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pread() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PREAD_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pread() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PREAD_FAILS_WITH_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pread() ensures
                      that the error XSI will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EBADMSG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EBADMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_CONDITION_ON_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pread()
                      may generate error code of XSI under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PREAD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of pread()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group fenv                               { POSIX_PROCESS_FENV_OVERFLOW_RAISING_BEHAVIOUR,
                                                 POSIX_PROCESS_FENV_UNDERFLOW_RAISING_BEHAVIOUR }

option POSIX_PROCESS_FENV_OVERFLOW_RAISING_BEHAVIOUR {
    type            "set"
    kind            "var"
    destination     "process/fenv/fenv_config.h"
    description     /@Please select one of the following:@/
    values {
                     1  POSIX_PROCESS_FENV_OVERFLOW_SHALL_RAISE_INEXACT   /@feraiseexcept() shall raise the inexact exception whenever it raises the overflow@/
                     2  POSIX_PROCESS_FENV_OVERFLOW_SHALL_NOT_RAISE_INEXACT   /@feraiseexcept() shall not raise the inexact exception whenever it raises the overflow@/
    default:         3  POSIX_PROCESS_FENV_OVERFLOW_MAY_RAISE_INEXACT   /@feraiseexcept() may raise the inexact exception whenever it raises the overflow@/
    }
}

option POSIX_PROCESS_FENV_UNDERFLOW_RAISING_BEHAVIOUR {
    type            "set"
    kind            "var"
    destination     "process/fenv/fenv_config.h"
    description     /@Please select one of the following:@/
    values {
                     1  POSIX_PROCESS_FENV_UNDERFLOW_SHALL_RAISE_INEXACT   /@feraiseexcept() shall raise the inexact exception whenever it raises the underflow@/
                     2  POSIX_PROCESS_FENV_UNDERFLOW_SHALL_NOT_RAISE_INEXACT   /@feraiseexcept() shall not raise the inexact exception whenever it raises the underflow@/
    default:         3  POSIX_PROCESS_FENV_UNDERFLOW_MAY_RAISE_INEXACT   /@feraiseexcept() may raise the inexact exception whenever it raises the underflow@/
    }
}

scope pthread_attr_destroy_spec                       { POSIX_PTHREAD_ATTR_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_init()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getdetachstate_spec                { POSIX_PTHREAD_ATTR_GETDETACHSTATE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETDETACHSTATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETDETACHSTATE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETDETACHSTATE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getdetachstate() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETDETACHSTATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getdetachstate()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETDETACHSTATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_setdetachstate()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getguardsize_spec                  { POSIX_PTHREAD_ATTR_GETGUARDSIZE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETGUARDSIZE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETGUARDSIZE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETGUARDSIZE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getguardsize() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETGUARDSIZE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getguardsize()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETGUARDSIZE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_setguardsize()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getinheritsched_spec               { POSIX_PTHREAD_ATTR_GETINHERITSCHED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETINHERITSCHED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETINHERITSCHED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETINHERITSCHED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getinheritsched() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETINHERITSCHED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getinheritsched()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETINHERITSCHED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getschedparam_spec                 { POSIX_PTHREAD_ATTR_GETSCHEDPARAM_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCHEDPARAM_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSCHEDPARAM_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getschedparam() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getschedparam()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCHEDPARAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getschedpolicy_spec                { POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getschedpolicy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getschedpolicy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCHEDPOLICY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getscope_spec                      { POSIX_PTHREAD_ATTR_GETSCOPE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCOPE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSCOPE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSCOPE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getscope() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCOPE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getscope()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSCOPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getstack_spec                      { POSIX_PTHREAD_ATTR_GETSTACK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSTACK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getstack() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getstack()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_setstack()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getstackaddr_spec                  { POSIX_PTHREAD_ATTR_GETSTACKADDR_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACKADDR_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACKADDR_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSTACKADDR_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getstackaddr() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACKADDR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getstackaddr()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACKADDR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_getstacksize_spec                  { POSIX_PTHREAD_ATTR_GETSTACKSIZE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACKSIZE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_GETSTACKSIZE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_GETSTACKSIZE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_getstacksize() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACKSIZE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_getstacksize()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_GETSTACKSIZE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_setstacksize()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_init_spec                          { IS_AFTER_DESTROY_BEHAVIOUR_KNOWN,
                                                   IS_REINITIALIZE_BEHAVIOUR_KNOWN,
                                                   POSIX_PTHREAD_ATTR_INIT_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_ERROR_CODES }

option IS_AFTER_DESTROY_BEHAVIOUR_KNOWN {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1 then pthread_attr_destroy() function shall
                        return [EINVAL] in the case of the already destroyed pthread_attr_t object,
                        otherwise the behaviour is undefined@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option IS_REINITIALIZE_BEHAVIOUR_KNOWN {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1 then pthread_attr_init() function shall return
                        [EBUSY] in the case of the already initialized pthread_attr_t object,
                        otherwise the behaviour is undefined@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_INIT_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_init() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_init()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setdetachstate_spec                { POSIX_PTHREAD_ATTR_SETDETACHSTATE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETDETACHSTATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETDETACHSTATE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETDETACHSTATE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setdetachstate() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETDETACHSTATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setdetachstate()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETDETACHSTATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setguardsize_spec                  { POSIX_PTHREAD_ATTR_SETGUARDSIZE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETGUARDSIZE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETGUARDSIZE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETGUARDSIZE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setguardsize() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETGUARDSIZE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setguardsize()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETGUARDSIZE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setinheritsched_spec               { POSIX_PTHREAD_ATTR_SETINHERITSCHED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETINHERITSCHED_FAILS_WITH_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETINHERITSCHED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setinheritsched() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETINHERITSCHED_FAILS_WITH_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setinheritsched() ensures
                      that the error ENOTSUP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setinheritsched()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setinheritsched()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETINHERITSCHED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_getinheritsched()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setschedparam_spec                 { POSIX_PTHREAD_ATTR_SETSCHEDPARAM_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPARAM_FAILS_WITH_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSCHEDPARAM_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setschedparam() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPARAM_FAILS_WITH_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setschedparam() ensures
                      that the error ENOTSUP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setschedparam()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setschedparam()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPARAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_getschedparam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setschedpolicy_spec                { POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_FAILS_WITH_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setschedpolicy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_FAILS_WITH_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setschedpolicy() ensures
                      that the error ENOTSUP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setschedpolicy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setschedpolicy()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCHEDPOLICY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_getschedpolicy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setscope_spec                      { POSIX_PTHREAD_ATTR_SETSCOPE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCOPE_FAILS_WITH_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSCOPE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setscope() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCOPE_FAILS_WITH_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setscope() ensures
                      that the error ENOTSUP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setscope()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setscope()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSCOPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_getscope()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setstack_spec                      { POSIX_PTHREAD_ATTR_SETSTACK_FAILS_WITH_EACCES,
                                                   POSIX_PTHREAD_ATTR_SETSTACK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSTACK_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setstack() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setstack() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setstack()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setstack()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setstackaddr_spec                  { POSIX_PTHREAD_ATTR_SETSTACKADDR_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACKADDR_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACKADDR_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSTACKADDR_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setstackaddr() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACKADDR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setstackaddr()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACKADDR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_attr_getstackaddr()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_attr_setstacksize_spec                  { POSIX_PTHREAD_ATTR_SETSTACKSIZE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACKSIZE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_ATTR_SETSTACKSIZE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_ATTR_SETSTACKSIZE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the function pthread_attr_setstacksize() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACKSIZE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_attr_setstacksize()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_ATTR_SETSTACKSIZE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/attr/attr_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_cancel_spec                             { POSIX_PTHREAD_CANCEL_FAILS_WITH_ESRCH,
                                                   POSIX_PTHREAD_CANCEL_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_PTHREAD_CANCEL_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CANCEL_FAILS_WITH_ESRCH {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_cancel() ensures
                      that the error ESRCH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_CANCEL_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cancel()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CANCEL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_cond_destroy_spec                       { POSIX_PTHREAD_COND_DESTROY_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_COND_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_COND_DESTROY_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_destroy() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_destroy()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_cond_init_spec                          { POSIX_PTHREAD_COND_INIT_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_COND_INIT_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_COND_INIT_HAS_EXTRA_ERROR_CODES,
                                                   PTHREAD_COND_BROADCAST_FAILS_WITH_EINVAL,
                                                   PTHREAD_COND_BROADCAST_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   PTHREAD_COND_BROADCAST_HAS_EXTRA_ERROR_CODES,
                                                   PTHREAD_COND_SIGNAL_FAILS_WITH_EINVAL,
                                                   PTHREAD_COND_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   PTHREAD_COND_SIGNAL_HAS_EXTRA_ERROR_CODES,
                                                   PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EINVAL_ON_BAD_COND,
                                                   PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EINVAL_ON_BAD_MUTEX,
                                                   PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EPERM,
                                                   PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_ERROR_CODES,
                                                   PTHREAD_COND_WAIT_FAILS_WITH_EINVAL_ON_BAD_COND,
                                                   PTHREAD_COND_WAIT_FAILS_WITH_EINVAL_ON_BAD_MUTEX,
                                                   PTHREAD_COND_WAIT_FAILS_WITH_EPERM,
                                                   PTHREAD_COND_WAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   PTHREAD_COND_WAIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   PTHREAD_COND_WAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_COND_INIT_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_init() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_init() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_init()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_init()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_init()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_COND_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_cond_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_BROADCAST_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_broadcast() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_BROADCAST_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_broadcast()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_BROADCAST_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_SIGNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_signal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_signal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_SIGNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_cond_broadcast()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EINVAL_ON_BAD_COND {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_timedwait() ensures
                      that the error EINVAL caused by incorrect cond will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EINVAL_ON_BAD_MUTEX {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_timedwait() ensures
                      that the error EINVAL caused by incorrect mutex will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_FAILS_WITH_EPERM {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_timedwait() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_timedwait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_timedwait()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_timedwait()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_TIMEDWAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_FAILS_WITH_EINVAL_ON_BAD_COND {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_wait() ensures
                      that the error EINVAL caused by incorrect cond will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_FAILS_WITH_EINVAL_ON_BAD_MUTEX {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_wait() ensures
                      that the error EINVAL caused by incorrect mutex will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_FAILS_WITH_EPERM {
    type            "bool"
    kind            "def"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the function pthread_cond_wait() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_wait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_cond_wait()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_COND_WAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/cond_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_cond_timedwait()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_condattr_destroy_spec                   { POSIX_PTHREAD_CONDATTR_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_CONDATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_CONDATTR_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CONDATTR_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the function pthread_condattr_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_condattr_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_condattr_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_condattr_getpshared_spec                { POSIX_PTHREAD_CONDATTR_GETPSHARED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_CONDATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_CONDATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CONDATTR_GETPSHARED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the function pthread_condattr_getpshared() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_condattr_getpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_condattr_getpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_condattr_init_spec                      { POSIX_PTHREAD_CONDATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_CONDATTR_INIT_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CONDATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_condattr_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_condattr_init()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_condattr_setpshared_spec                { POSIX_PTHREAD_CONDATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_ATTR,
                                                   POSIX_PTHREAD_CONDATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_PSHARED,
                                                   POSIX_PTHREAD_CONDATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_CONDATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CONDATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_ATTR {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the function pthread_condattr_setpshared() ensures
                      that the error EINVAL because of invalid attr will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_PSHARED {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the function pthread_condattr_setpshared() ensures
                      that the error EINVAL because of invalid pshared will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_condattr_setpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CONDATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/cond/condattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_condattr_setpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_create_spec                             { POSIX_PTHREAD_CREATE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_PTHREAD_CREATE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_CREATE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_create() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_create()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_create()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CREATE_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_create()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_CREATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
           	0  /@False@/
    default:    1  /@True@/
    }
}

scope pthread_detach_spec                             { POSIX_PTHREAD_DETACH_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_DETACH_FAILS_WITH_ESRCH,
                                                   POSIX_PTHREAD_DETACH_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_DETACH_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_PTHREAD_DETACH_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_DETACH_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_detach() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_DETACH_FAILS_WITH_ESRCH {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_detach() ensures
                      that the error ESRCH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_DETACH_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_detach()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_DETACH_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_detach()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_DETACH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_getconcurrency_spec                     { POSIX_PTHREAD_GETCONCURRENCY_HAS_EXTRA_ERROR_CODES}

option POSIX_PTHREAD_GETCONCURRENCY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/scheduler/scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_setconcurrency()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_getspecific_spec                        { POSIX_PTHREAD_GETSPECIFIC_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_GETSPECIFIC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_setspecific()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_join_spec                               { POSIX_PTHREAD_JOIN_FAILS_WITH_EDEADLK,
                                                   POSIX_PTHREAD_JOIN_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_PTHREAD_JOIN_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_JOIN_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_join() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_JOIN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_join() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_join()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_join()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_JOIN_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_join()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_JOIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_key_create_spec                         { POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_key_create()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_key_create()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_KEY_CREATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_key_delete_spec                         { POSIX_PTHREAD_KEY_DELETE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_KEY_DELETE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_KEY_DELETE_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_KEY_DELETE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the function pthread_key_delete() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_KEY_DELETE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_key_delete()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_KEY_DELETE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_kill_spec                               { POSIX_PTHREAD_KILL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_KILL_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_PTHREAD_KILL_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_KILL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_kill()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_KILL_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_kill()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_KILL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_kill()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_destroy_spec                     { POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_destroy() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_destroy()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_init_spec                        { POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_init() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_init() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_init()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_init()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_init()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_init()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_rdlock_spec                      { POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_rdlock() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_rdlock() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_rdlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_rdlock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_rdlock()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_rdlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_RDLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_rdlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_timedrdlock_spec                 { POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedrdlock() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedrdlock() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedrdlock() ensures
                      that the error EINVAL because of invalid rwlock will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedrdlock() ensures
                      that the error EINVAL because of invalid timeout when rwlock is locked will be
                      found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedrdlock() ensures
                      that the error EINVAL because of invalid timeout when rwlock is not locked will
                      be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedrdlock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedrdlock()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedrdlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedrdlock()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_timedrdlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_timedwrlock_spec                 { POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EDEADLK_ON_READLOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EDEADLK_ON_WRITELOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EDEADLK_ON_READLOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedwrlock() ensures
                      that the error EDEADLK because of lock for reading will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EDEADLK_ON_WRITELOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedwrlock() ensures
                      that the error EDEADLK because of lock for writing will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedwrlock() ensures
                      that the error EINVAL because of invalid rwlock will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedwrlock() ensures
                      that the error EINVAL because of invalid timeout when rwlock is locked will be
                      found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_timedwrlock() ensures
                      that the error EINVAL because of invalid timeout when rwlock is not locked will
                      be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedwrlock()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedwrlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_timedwrlock()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_timedwrlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_tryrdlock_spec                   { POSIX_PTHREAD_RWLOCK_TRYRDLOCK_FAILS_WITH_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_TRYRDLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_tryrdlock() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_tryrdlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_tryrdlock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_tryrdlock()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_tryrdlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYRDLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_tryrdlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_trywrlock_spec                   { POSIX_PTHREAD_RWLOCK_TRYWRLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_TRYWRLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_trywrlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_trywrlock()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_trywrlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_TRYWRLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_trywrlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_unlock_spec                      { POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EPERM,
                                                   POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_unlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EPERM {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_unlock() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_unlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_unlock()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_UNLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_unlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlock_wrlock_spec                      { POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EDEADLK_ON_READLOCK,
                                                   POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EDEADLK_ON_WRITELOCK,
                                                   POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EDEADLK_ON_READLOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_wrlock() ensures
                      that the error EDEADLK because of lock for reading will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EDEADLK_ON_WRITELOCK {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_wrlock() ensures
                      that the error EDEADLK because of lock for writing will be found and correctly
                      handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "def"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlock_wrlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_wrlock()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlock_wrlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCK_WRLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlock_wrlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlockattr_destroy_spec                 { POSIX_PTHREAD_RWLOCKATTR_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCKATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCKATTR_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCKATTR_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlockattr_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlockattr_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlockattr_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlockattr_getpshared_spec              { POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlockattr_getpshared() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlockattr_getpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlockattr_getpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlockattr_init_spec                    { POSIX_PTHREAD_RWLOCKATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_RWLOCKATTR_INIT_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCKATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlockattr_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlockattr_init()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_rwlockattr_setpshared_spec              { POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_ATTR,
                                                   POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_PSHARED,
                                                   POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_ATTR {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlockattr_setpshared() ensures
                      that the error EINVAL because of invalid attr will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_FAILS_WITH_EINVAL_ON_BAD_PSHARED {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the function pthread_rwlockattr_setpshared() ensures
                      that the error EINVAL because of invalid pshared will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_rwlockattr_setpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_RWLOCKATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/rwlock/rwlockattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_rwlockattr_setpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_setconcurrency_spec                     { POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/scheduler/scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setconcurrency()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/scheduler/scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setconcurrency()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_SETCONCURRENCY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/scheduler/scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_setspecific_spec                        { POSIX_PTHREAD_SETSPECIFIC_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_SETSPECIFIC_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the function pthread_setspecific() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setspecific()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setspecific()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_SETSPECIFIC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_sigmask_spec                            { POSIX_PTHREAD_SIGMASK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_SIGMASK_HAS_EXTRA_ERROR_CODES }

option POSIX_PTHREAD_SIGMASK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_sigmask()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_SIGMASK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_sigmask()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope putenv_spec                                     { POSIX_PUTENV_HAS_EXTRA_ERROR_CODES }

option POSIX_PUTENV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, then current implementation of putenv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope puts_spec                                       { POSIX_PUTS_FAILS_WITH_ENOMEM,
                                                   POSIX_PUTS_FAILS_WITH_ENXIO,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_PUTS_HAS_EXTRA_ERROR_CODES }

option POSIX_PUTS_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function puts() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTS_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function puts() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of puts()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of puts()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope putw_spec                                       { POSIX_PUTW_FAILS_WITH_ENOMEM,
                                                   POSIX_PUTW_FAILS_WITH_ENXIO,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_PUTW_HAS_EXTRA_ERROR_CODES }

option POSIX_PUTW_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function putw() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTW_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the function putw() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putw()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of putw()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope putwc_spec                                      { POSIX_PUTWC_FAILS_WITH_ENOMEM,
                                                   POSIX_PUTWC_FAILS_WITH_ENXIO,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_PUTWC_HAS_EXTRA_ERROR_CODES }

option POSIX_PUTWC_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function putwc() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTWC_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function putwc() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwc()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of putwc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope putwchar_spec                                   { POSIX_PUTWCHAR_FAILS_WITH_ENOMEM,
                                                   POSIX_PUTWCHAR_FAILS_WITH_ENXIO,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_PUTWCHAR_HAS_EXTRA_ERROR_CODES }

option POSIX_PUTWCHAR_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function putwchar() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTWCHAR_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function putwchar() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of putwchar()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTWCHAR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of putwchar()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pwrite_spec                                { POSIX_PWRITE_FAILS_WITH_EINVAL,
                                                   POSIX_PWRITE_FAILS_WITH_EIO,
                                                   POSIX_PWRITE_FAILS_WITH_ENOBUFS,
                                                   POSIX_PWRITE_FAILS_WITH_ENXIO,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_PWRITE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_WRITE_PERFORMS_ERRORS_DETECTION }

option POSIX_PWRITE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pwrite() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PWRITE_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pwrite() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PWRITE_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pwrite() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PWRITE_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function pwrite() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of pwrite()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PWRITE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of pwrite()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope read_spec                                  { POSIX_READ_FAILS_WITH_EAGAIN,
                                                   POSIX_READ_FAILS_WITH_EIO,
                                                   POSIX_READ_FAILS_WITH_ENOBUFS,
                                                   POSIX_READ_FAILS_WITH_ENOMEM,
                                                   POSIX_READ_FAILS_WITH_ENXIO,
                                                   POSIX_READ_FAILS_WITH_XSI,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EBADMSG,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_XSI,
                                                   POSIX_READ_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_READ_HAS_EXTRA_ERROR_CODES }

option POSIX_READ_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_FAILS_WITH_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function read() ensures
                      that the error XSI will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EBADMSG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EBADMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of XSI under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READ_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of read()
                      may generate error code of XSI under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}
option POSIX_READ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of read()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope readlink_spec                            { POSIX_READLINK_FAILS_WITH_EACCES,
                                                   POSIX_READLINK_FAILS_WITH_ELOOP,
                                                   POSIX_READLINK_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_READLINK_HAS_EXTRA_ERROR_CODES }

option POSIX_READLINK_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the function readlink() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READLINK_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the function readlink() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READLINK_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the function readlink() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of readlink()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READLINK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope readv_spec                                      { POSIX_READV_FAILS_WITH_EINVAL,
                                                   POSIX_READV_FAILS_WITH_EIO,
                                                   POSIX_READV_FAILS_WITH_ENOBUFS,
                                                   POSIX_READV_FAILS_WITH_ENOMEM,
                                                   POSIX_READV_FAILS_WITH_ENXIO,
                                                   POSIX_READV_FAILS_WITH_XSI,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EBADMSG,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_XSI,
                                                   POSIX_READV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_READV_HAS_EXTRA_ERROR_CODES }

option POSIX_READV_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_FAILS_WITH_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function readv() ensures
                      that the error XSI will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EBADMSG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EBADMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_XSI {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of XSI under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of readv()
                      may generate error code of XSI under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of pread()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope realloc_spec                             { POSIX_REALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_REALLOC_HAS_EXTRA_ERROR_CODES }

option POSIX_REALLOC_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, the current implementation of realloc()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REALLOC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/heap/heap_config.h"
    description     /@If this constant is set to 1, then current implementation of realloc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope recv_spec                                       { POSIX_RECV_FAILS_WITH_EIO,
                                                   POSIX_RECV_FAILS_WITH_ENOBUFS,
                                                   POSIX_RECV_FAILS_WITH_ENOMEM,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_RECV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_RECV_HAS_EXTRA_ERROR_CODES }

option POSIX_RECV_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recv() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECV_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recv() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECV_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recv() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recv()
                      may generate error code of EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of recv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope recvmsg_spec                             { POSIX_RECVMSG_FAILS_WITH_EIO,
                                                   POSIX_RECVMSG_FAILS_WITH_ENOBUFS,
                                                   POSIX_RECVMSG_FAILS_WITH_ENOMEM,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EMSGSIZE,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_RECVMSG_HAS_EXTRA_ERROR_CODES }

option POSIX_RECVMSG_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recvmsg() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECVMSG_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recvmsg() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECVMSG_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function recvmsg() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EAGAIN,EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EMSGSIZE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EMSGSIZE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of recvmsg()
                      may generate error code of EAGAIN,EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RECVMSG_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of recvmsg()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope rewind_spec                              { POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ESPIPE,
                                                   POSIX_REWIND_HAS_EXTRA_ERROR_CODES }

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_CONDITION_ON_ESPIPE {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, the current implementation of rewind()
                      may generate error code of ESPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REWIND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/fstream_config.h"
    description     /@If this constant is set to 1, then current implementation of rewind()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group rwlock                      { POSIX_RWLOCK_SCHEDULING_POLICY }

option POSIX_RWLOCK_SCHEDULING_POLICY {
    type            "int"
    kind            "var"
    destination     "pthread/rwlock/rwlock_config.h"
    description     /@If 1 - the calling thread shall not acquire the read lock if a writer holds the lock or if writers of higher or equal priority are blocked on the lock; otherwise, the calling thread shall acquire the lock. (LSB default). If  2 - the calling thread shall acquire the read lock even if there are writers blocked on the lock. If 3 - the calling thread shall not acquire the read lock if there are any writers blocked on the lock.@/
    values {
                    1  /@1@/
    default:        2  /@2@/
                    3  /@3@/
    }
}

scope Group tree                           { POSIX_SEARCH_TREE_SEARCH_BEFORE_REBALANCE }

option POSIX_SEARCH_TREE_SEARCH_BEFORE_REBALANCE {
    type            "bool"
    kind            "var"
    destination     "util/search/tree_config.h"
    description     /@If this constant is set to 1 then tdelete/tsearch always search the tree
                       for required key first and all rebalancinge-related calls to "compare" are
                       performed after the binary search is over.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope sem_close_spec                                  { POSIX_SEM_CLOSE_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_CLOSE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_CLOSE_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_CLOSE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_close() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_CLOSE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_close()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_CLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_destroy_spec                                { POSIX_SEM_DESTROY_FAILS_WITH_EBUSY,
                                                   POSIX_SEM_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_SEM_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_DESTROY_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_DESTROY_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_destroy() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_destroy()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group sem.sem                                { POSIX_SEM_GETVALUE_CHECK_FOR_EINVAL }

option POSIX_SEM_GETVALUE_CHECK_FOR_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1 testing for EINAVAL will be done otherwise such
                      testing won't be accomplished. This constant is needed because an implemenation can fail
                      with 'Segmantation fault' if 'sem' refers to an invalid semaphore.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_getvalue_spec                               { POSIX_SEM_GETVALUE_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_GETVALUE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_GETVALUE_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_GETVALUE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_getvalue() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_GETVALUE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_getvalue()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_GETVALUE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_init_spec                                   { POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SEM_INIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_init()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_init()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_INIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_init()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_open_spec                                   { POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_SEM_OPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_open()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_OPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_post_spec                                   { POSIX_SEM_POST_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_POST_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_POST_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_POST_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_post() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_POST_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_post()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_POST_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope sem_timedwait_spec                              { POSIX_SEM_TIMEDWAIT_FAILS_WITH_EDEADLK,
                                                   POSIX_SEM_TIMEDWAIT_FAILS_WITH_EINTR,
                                                   POSIX_SEM_TIMEDWAIT_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_SEM_TIMEDWAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_TIMEDWAIT_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_timedwait() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_timedwait() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_timedwait() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_timedwait()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_timedwait()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_timedwait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_timedwait()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TIMEDWAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_trywait_spec                                { POSIX_SEM_TRYWAIT_FAILS_WITH_EDEADLK,
                                                   POSIX_SEM_TRYWAIT_FAILS_WITH_EINTR,
                                                   POSIX_SEM_TRYWAIT_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_TRYWAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_TRYWAIT_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_trywait() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_trywait() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_trywait() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_trywait()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_trywait()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_trywait()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_trywait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_TRYWAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sem_wait_spec                                   { POSIX_SEM_WAIT_FAILS_WITH_EDEADLK,
                                                   POSIX_SEM_WAIT_FAILS_WITH_EINTR,
                                                   POSIX_SEM_WAIT_FAILS_WITH_EINVAL,
                                                   POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EDEADLK,
                                                   POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEM_WAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SEM_WAIT_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_wait() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_WAIT_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_wait() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEM_WAIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the function sem_wait() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_wait()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_wait()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_WAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, the current implementation of sem_wait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEM_WAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/sem/pthread_sem_config.h"
    description     /@If this constant is set to 1, then current implementation of sem_trywait()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sendmsg_spec                                    { POSIX_SENDMSG_FAILS_WITH_EACCES,
                                                   POSIX_SENDMSG_FAILS_WITH_EDESTADDRREQ,
                                                   POSIX_SENDMSG_FAILS_WITH_EHOSTUNREACH,
                                                   POSIX_SENDMSG_FAILS_WITH_EIO,
                                                   POSIX_SENDMSG_FAILS_WITH_EISCONN,
                                                   POSIX_SENDMSG_FAILS_WITH_ELOOP,
                                                   POSIX_SENDMSG_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_SENDMSG_FAILS_WITH_ENETDOWN,
                                                   POSIX_SENDMSG_FAILS_WITH_ENETUNREACH,
                                                   POSIX_SENDMSG_FAILS_WITH_ENOBUFS,
                                                   POSIX_SENDMSG_FAILS_WITH_ENOMEM,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EISCONN,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EMSGSIZE,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_SENDMSG_HAS_EXTRA_ERROR_CODES }

option POSIX_SENDMSG_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error EDESTADDRREQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error EHOSTUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error EISCONN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ENETUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendmsg() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EAGAIN,EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EDESTADDRREQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EHOSTUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EISCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EMSGSIZE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EMSGSIZE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendmsg()
                      may generate error code of EAGAIN,EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDMSG_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of sendmsg()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sendto_spec                { POSIX_SENDTO_FAILS_WITH_EACCES,
                                                   POSIX_SENDTO_FAILS_WITH_EDESTADDRREQ,
                                                   POSIX_SENDTO_FAILS_WITH_EHOSTUNREACH,
                                                   POSIX_SENDTO_FAILS_WITH_EINVAL,
                                                   POSIX_SENDTO_FAILS_WITH_EIO,
                                                   POSIX_SENDTO_FAILS_WITH_EISCONN,
                                                   POSIX_SENDTO_FAILS_WITH_ELOOP,
                                                   POSIX_SENDTO_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_SENDTO_FAILS_WITH_ENETDOWN,
                                                   POSIX_SENDTO_FAILS_WITH_ENETUNREACH,
                                                   POSIX_SENDTO_FAILS_WITH_ENOBUFS,
                                                   POSIX_SENDTO_FAILS_WITH_ENOMEM,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EISCONN,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EMSGSIZE,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_SENDTO_HAS_EXTRA_ERROR_CODES }

option POSIX_SENDTO_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EDESTADDRREQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EHOSTUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error EISCONN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ENETUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function sendto() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EDESTADDRREQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EHOSTUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EISCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EMSGSIZE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EMSGSIZE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sendto()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SENDTO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of sendto()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_setcancelstate_spec{ POSIX_SETCANCELSTATE_FAILS_WITH_EINVAL,
                                                   POSIX_SETCANCELSTATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETCANCELSTATE_HAS_EXTRA_ERROR_CODES }

option POSIX_SETCANCELSTATE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_setcancelstate() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETCANCELSTATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setcancelstate()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETCANCELSTATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pthread_setcanceltype_spec                      { POSIX_SETCANCELTYPE_FAILS_WITH_EINVAL,
                                                   POSIX_SETCANCELTYPE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETCANCELTYPE_HAS_EXTRA_ERROR_CODES }

option POSIX_SETCANCELTYPE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the function pthread_setcanceltype() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETCANCELTYPE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_setcanceltype()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETCANCELTYPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/pthread/pthread_pthread_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_setcancelstate()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setegid_spec                                    { POSIX_SETEGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETEGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETEGID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETEGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setegid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETEGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setegid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETEGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setegid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setenv_spec                                     { POSIX_SETENV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETENV_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SETENV_HAS_EXTRA_ERROR_CODES,
                                                   SETENV_NULL_ENVVAL_BEHAVIOUR }

option POSIX_SETENV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, the current implementation of setenv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETENV_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, the current implementation of setenv()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETENV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, then current implementation of setenv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SETENV_NULL_ENVVAL_BEHAVIOUR {
    type            "set"
    kind            "def"
    destination     "process/environ/environ_config.h"
    description     /@Please select one of the following:@/
    values {
    default:         1  SETENV_NULL_ENVVAL_FORBIDDEN   /@envval can not be equal to NULL@/
                     2  SETENV_NULL_ENVVAL_FAILURE   /@envval can be equal to NULL, but this means error@/
                     3  SETENV_NULL_ENVVAL_EMPTY_STRING   /@envval can be equal to NULL, and this means empty envval@/
    }
}

scope seteuid_spec                                    { POSIX_SETEUID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETEUID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETEUID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETEUID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of seteuid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETEUID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of seteuid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETEUID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of seteuid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setgid_spec                                     { POSIX_SETGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETGID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setgid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setgid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setgid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setgroups_spec                                  { POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EFAULT,
                                                   POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETGROUPS_HAS_EXTRA_ERROR_CODES }

option POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EFAULT {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setgroups()
                      may generate error code of EFAULT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setgroups()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETGROUPS_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setgroups()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETGROUPS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setgroups()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setkey_spec                                     { POSIX_SETKEY_HAS_EXTRA_CONDITION_ON_ENOSYS,
                                                   POSIX_SETKEY_HAS_EXTRA_ERROR_CODES }

option POSIX_SETKEY_HAS_EXTRA_CONDITION_ON_ENOSYS {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, the current implementation of setkey()
                      may generate error code of ENOSYS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETKEY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/crypt/crypt_config.h"
    description     /@If this constant is set to 1, then current implementation of setkey()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setpgid_spec                                    { POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_SETPGID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of setpgid()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of setpgid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of setpgid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPGID_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, the current implementation of setpgid()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/pgroup/pgroup_config.h"
    description     /@If this constant is set to 1, then current implementation of setpgid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setpriority_spec                                { POSIX_SETPRIORITY_FAILS_WITH_EACCES,
                                                   POSIX_SETPRIORITY_FAILS_WITH_EPERM,
                                                   POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_ESRCH,
                                                   POSIX_SETPRIORITY_HAS_EXTRA_ERROR_CODES }

option POSIX_SETPRIORITY_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the function setpriority() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPRIORITY_FAILS_WITH_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the function setpriority() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPRIORITY_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, the current implementation of setpriority()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPRIORITY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/nice_config.h"
    description     /@If this constant is set to 1, then current implementation of setpriority()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setpwent_spec                            { POSIX_SETPWENT_FAILS_WITH_EIO,
                                                   POSIX_SETPWENT_FAILS_WITH_EMFILE,
                                                   POSIX_SETPWENT_FAILS_WITH_ENFILE,
                                                   POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_SETPWENT_HAS_EXTRA_ERROR_CODES }

option POSIX_SETPWENT_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function setpwent() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETPWENT_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function setpwent() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETPWENT_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the function setpwent() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of setpwent()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of setpwent()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPWENT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, the current implementation of setpwent()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETPWENT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/user_config.h"
    description     /@If this constant is set to 1, then current implementation of getpwent()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setregid_spec                                   { POSIX_SETREGID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETREGID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETREGID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETREGID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setregid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETREGID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setregid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETREGID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setregid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setreuid_spec                                   { POSIX_SETREUID_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETREUID_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETREUID_HAS_EXTRA_ERROR_CODES }

option POSIX_SETREUID_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setreuid()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETREUID_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, the current implementation of setreuid()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETREUID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_user_config.h"
    description     /@If this constant is set to 1, then current implementation of setreuid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setrlimit_spec                                  { POSIX_SETRLIMIT_FAILS_WITH_EINVAL,
                                                   POSIX_SETRLIMIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETRLIMIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETRLIMIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SETRLIMIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the function setrlimit() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETRLIMIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of setrlimit()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETRLIMIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of setrlimit()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETRLIMIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of setrlimit()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope setrlimit64_spec                                { POSIX_SETRLIMIT64_FAILS_WITH_EINVAL,
                                                   POSIX_SETRLIMIT64_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETRLIMIT64_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SETRLIMIT64_HAS_EXTRA_ERROR_CODES }

option POSIX_SETRLIMIT64_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the function setrlimit64() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETRLIMIT64_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of setrlimit64()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETRLIMIT64_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of setrlimit64()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETRLIMIT64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of setrlimit64()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope resources_scenario { PROCESS_RESOURCES_SCENARIO_LONG }

option PROCESS_RESOURCES_SCENARIO_LONG {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@if this constant is set to 1 then test scenario will be more minute.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setsockopt_spec                                 { POSIX_SETSOCKOPT_FAILS_WITH_ENOBUFS,
                                                   POSIX_SETSOCKOPT_FAILS_WITH_ENOMEM,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EISCONN,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOPROTOOPT,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_SETSOCKOPT_HAS_EXTRA_ERROR_CODES }

option POSIX_SETSOCKOPT_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function setsockopt() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETSOCKOPT_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function setsockopt() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of EISCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOPROTOOPT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of ENOPROTOOPT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of setsockopt()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETSOCKOPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of setsockopt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  setbuffer_spec                                     { POSIX_SETBUFFER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SETBUFFER_FAILS_WITH_EBADF,
                                                   POSIX_SETBUFFER_HAS_EXTRA_CONDITION_ON_EBADF }

option POSIX_SETBUFFER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, then current implementation of setbuffer()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETBUFFER_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, the function setbuffer() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETBUFFER_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, the current implementation of setbuffer()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setvbuf_spec                             { POSIX_SETVBUF_FAILS_WITH_EBADF,
                                                   POSIX_SETVBUF_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SETVBUF_HAS_EXTRA_ERROR_CODES }

option POSIX_SETVBUF_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, the function setvbuf() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SETVBUF_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, the current implementation of setvbuf()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETVBUF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/buffer_config.h"
    description     /@If this constant is set to 1, then current implementation of setvbuf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope shm_open_spec                                   { POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_SHM_OPEN_HAS_EXTRA_ERROR_CODES }

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_open()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_OPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of shm_open()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope shm_unlink_spec                                 { POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SHM_UNLINK_HAS_EXTRA_ERROR_CODES }

option POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_unlink()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_unlink()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_UNLINK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, the current implementation of shm_unlink()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHM_UNLINK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/mman/mman_config.h"
    description     /@If this constant is set to 1, then current implementation of shm_unlink()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope shutdown_spec                                   { POSIX_SHUTDOWN_FAILS_WITH_ENOBUFS,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_SHUTDOWN_HAS_EXTRA_ERROR_CODES }

option POSIX_SHUTDOWN_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function shutdown() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of shutdown()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of shutdown()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of shutdown()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of shutdown()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of shutdown()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHUTDOWN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of shutdown()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigaction_spec                           { POSIX_SIGACTION_FAILS_WITH_EINVAL,
                                                   POSIX_SIGACTION_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGACTION_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_SIGACTION_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGACTION_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the function sigaction() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGACTION_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigaction()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGACTION_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigaction()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGACTION_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigaddset_spec                                  { POSIX_SIGADDSET_FAILS_WITH_EINVAL,
                                                   POSIX_SIGADDSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGADDSET_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGADDSET_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGADDSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGADDSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@POSIX_SIGADDSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigdelset_spec                                  { POSIX_SIGDELSET_FAILS_WITH_EINVAL,
                                                   POSIX_SIGDELSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGDELSET_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGDELSET_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGDELSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGDELSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@POSIX_SIGDELSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigemptyset_spec                                { POSIX_SIGEMPTYSET_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGEMPTYSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@POSIX_SIGEMPTYSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigfillset_spec                                 { POSIX_SIGFILLSET_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGFILLSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@POSIX_SIGFILLSET@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sighold_spec                                    { POSIX_SIGHOLD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGHOLD_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGHOLD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, the current implementation of sigset()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGHOLD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, then current implementation of sigset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigignore_spec                                  { POSIX_SIGIGNORE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGIGNORE_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGIGNORE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, the current implementation of sigset()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGIGNORE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, then current implementation of sigset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigismember_spec                         { POSIX_SIGISMEMBER_FAILS_WITH_EINVAL,
                                                   POSIX_SIGISMEMBER_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGISMEMBER_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGISMEMBER_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGISMEMBER_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGISMEMBER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigset/sigset_config.h"
    description     /@POSIX_SIGISMEMBER@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigpause_spec                                   { POSIX_SIGPAUSE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGPAUSE_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGPAUSE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, the current implementation of sigset()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGPAUSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, then current implementation of sigset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigprocmask_spec                                { POSIX_SIGPROCMASK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGPROCMASK_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGPROCMASK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigprocmask()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGPROCMASK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of sigprocmask()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigrelse_spec                                   { POSIX_SIGRELSE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGRELSE_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGRELSE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, the current implementation of sigset()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGRELSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, then current implementation of sigset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigset_spec                                     { POSIX_SIGSET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGSET_HAS_EXTRA_ERROR_CODES,
                                                   SIGNAL_SIGSET_INT_PAIR_GENSTATE }

option POSIX_SIGSET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, the current implementation of sigset()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGSET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@If this constant is set to 1, then current implementation of sigset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SIGNAL_SIGSET_INT_PAIR_GENSTATE {
    type            "bool"
    kind            "def"
    destination     "signal/sigctrl/sigctrl_config.h"
    description     /@Defines, if generalized state is a single integer or an
                      integer pair.Integer pair defines
                      (number of usual signals)*(number of realtime signals)
                      states, so while computational power is low, it is recommended to use
                      single integer generalized state.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigtimedwait_spec                        { POSIX_SIGTIMEDWAIT_FAILS_WITH_EINTR,
                                                   POSIX_SIGTIMEDWAIT_FAILS_WITH_EINVAL,
                                                   POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGTIMEDWAIT_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGTIMEDWAIT_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the function sigwaitinfo() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGTIMEDWAIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the function sigwaitinfo() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the current implementation of sigwaitinfo()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the current implementation of sigwaitinfo()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGTIMEDWAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the current implementation of sigwaitinfo()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGTIMEDWAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, then current implementation of sigwaitinfo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sigwait_spec                      { POSIX_SIGWAIT_FAILS_WITH_EINVAL,
                                                   POSIX_SIGWAIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGWAIT_HAS_EXTRA_ERROR_CODES,
                                                   SIGWAITINFO_FAILS_WITH_EINTR,
                                                   SIGWAITINFO_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   SIGWAITINFO_HAS_EXTRA_ERROR_CODES }

option POSIX_SIGWAIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the function sigwait() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SIGWAIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the current implementation of sigwait()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGWAIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, then current implementation of sigwait()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SIGWAITINFO_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the function sigwaitinfo() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option SIGWAITINFO_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, the current implementation of sigwaitinfo()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SIGWAITINFO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigwait/sigwait_config.h"
    description     /@If this constant is set to 1, then current implementation of sigwaitinfo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sockatmark_spec                                 { POSIX_SOCKATMARK_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SOCKATMARK_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_SOCKATMARK_HAS_EXTRA_ERROR_CODES }

option POSIX_SOCKATMARK_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockatmark()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKATMARK_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockatmark()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKATMARK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of sockatmark()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope socketpair_spec                                 { POSIX_SOCKETPAIR_FAILS_WITH_EACCES,
                                                   POSIX_SOCKETPAIR_FAILS_WITH_ENOBUFS,
                                                   POSIX_SOCKETPAIR_FAILS_WITH_ENOMEM,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EPROTONOSUPPORT,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EPROTOTYPE,
                                                   POSIX_SOCKETPAIR_HAS_EXTRA_ERROR_CODES }

option POSIX_SOCKETPAIR_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socketpair() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKETPAIR_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socketpair() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKETPAIR_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socketpair() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EPROTONOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EPROTONOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_CONDITION_ON_EPROTOTYPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socketpair()
                      may generate error code of EPROTOTYPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKETPAIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of socketpair()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope __xstat_spec                             { POSIX_STAT_FAILS_WITH_ELOOP,
                                                   POSIX_STAT_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_STAT_FAILS_WITH_EOVERFLOW,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_STAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_STAT_HAS_EXTRA_ERROR_CODES }

option POSIX_STAT_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope __xstat64_spec                                  { POSIX_STAT64_FAILS_WITH_ELOOP,
                                                   POSIX_STAT64_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_STAT64_FAILS_WITH_EOVERFLOW,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_STAT64_HAS_EXTRA_ERROR_CODES }

option POSIX_STAT64_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT64_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT64_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function stat() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of stat()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STAT64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope statvfs_spec                                    { POSIX_STATVFS_FAILS_WITH_ELOOP,
                                                   POSIX_STATVFS_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_STATVFS_HAS_EXTRA_ERROR_CODES }

option POSIX_STATVFS_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the function statvfs() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STATVFS_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the function statvfs() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope statvfs64_spec                                  { POSIX_STATVFS64_FAILS_WITH_ELOOP,
                                                   POSIX_STATVFS64_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_STATVFS64_HAS_EXTRA_ERROR_CODES }

option POSIX_STATVFS64_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the function statvfs() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STATVFS64_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the function statvfs() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, the current implementation of statvfs()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STATVFS64_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/statvfs_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strcoll_spec                                    { POSIX_STRCOLL_FAILS_WITH_EINVAL,
                                                   POSIX_STRCOLL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRCOLL_HAS_EXTRA_ERROR_CODES }

option POSIX_STRCOLL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, the function strcoll() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STRCOLL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, the current implementation of strcoll()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRCOLL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, then current implementation of strcoll()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strdup_spec                                     { POSIX_STRDUP_FAILS_WITH_ENOMEM,
                                                   POSIX_STRDUP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_STRDUP_HAS_EXTRA_ERROR_CODES }

option POSIX_STRDUP_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, the function strdup() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STRDUP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, the current implementation of strdup()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRDUP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/string/str_config.h"
    description     /@If this constant is set to 1, then current implementation of strdup()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strfmon_spec                                    { POSIX_STRFMON_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_STRFMON_HAS_EXTRA_ERROR_CODES }

option POSIX_STRFMON_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "util/format/money_config.h"
    description     /@If this constant is set to 1, the current implementation of strfmon()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRFMON_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/money_config.h"
    description     /@If this constant is set to 1, then current implementation of strfmon()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wstr                           { POSIX_STRING_WSTRINGS_MUST_BE_ALIGNED }

option POSIX_STRING_WSTRINGS_MUST_BE_ALIGNED {
    type            "bool"
    kind            "def"
    destination     "util/string/wstr_config.h"
    description     /@There are no explicit requirements for wide string alignments in
                      POSIX and LSB. ISO C standard says that int should be aligned
                      on a four-byte boundary; as wchar_t is int, it should be aligned
                      also.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope strtoimax_spec                                  { POSIX_STRTOIMAX_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOIMAX_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOIMAX_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOIMAX_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOIMAX_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoq() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOIMAX_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoq()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOIMAX_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOIMAX_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtol_spec                                     { POSIX_STRTOL_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOL_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtol() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtol()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtol()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtol()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtoll_spec                                    { POSIX_STRTOLL_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOLL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOLL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOLL_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOLL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoll() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoll()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoll()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoll()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtoq_spec                                     { POSIX_STRTOQ_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOQ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOQ_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOQ_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOQ_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoimax() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOQ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoimax()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoimax()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoimax()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtoul_spec                                    { POSIX_STRTOUL_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOUL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOUL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOUL_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOUL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoul() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoul()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoul()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoul()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtoull_spec                                   { POSIX_STRTOULL_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOULL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOULL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOULL_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOULL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoull() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOULL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoull()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOULL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoull()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOULL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoull()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtoumax_spec                                  { POSIX_STRTOUMAX_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOUMAX_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOUMAX_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOUMAX_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOUMAX_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtouq() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUMAX_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtouq()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUMAX_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtouq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUMAX_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtouq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strtouq_spec                                    { POSIX_STRTOUQ_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOUQ_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOUQ_HAS_EXTRA_ERROR_CODES }

option POSIX_STRTOUQ_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the function strtoumax() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUQ_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoumax()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoumax()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOUQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoumax()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope strxfrm_spec                                    { POSIX_STRXFRM_FAILS_WITH_EINVAL,
                                                   POSIX_STRXFRM_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRXFRM_HAS_EXTRA_ERROR_CODES }

option POSIX_STRXFRM_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, the function strxfrm() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_STRXFRM_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, the current implementation of strxfrm()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRXFRM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/collate/collate_config.h"
    description     /@If this constant is set to 1, then current implementation of strxfrm()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope swapcontext_spec                                { POSIX_SWAPCONTEXT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SWAPCONTEXT_HAS_EXTRA_ERROR_CODES }

option POSIX_SWAPCONTEXT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/context/context_config.h"
    description     /@If this constant is set to 1, the current implementation of swapcontext()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWAPCONTEXT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/context/context_config.h"
    description     /@If this constant is set to 1, then current implementation of swapcontext()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope symlink_spec                                    { POSIX_SYMLINK_FAILS_WITH_ELOOP,
                                                   POSIX_SYMLINK_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_SYMLINK_HAS_EXTRA_ERROR_CODES }

option POSIX_SYMLINK_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the function symlink() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SYMLINK_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the function symlink() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, the current implementation of symlink()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYMLINK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/symlink/symlink_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope sysconf_spec                                    { POSIX_SYSCONF_ANOTHER_MIN_VALUE_HOST_NAME_MAX,
                                                   POSIX_SYSCONF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SYSCONF_HAS_EXTRA_ERROR_CODES }

option POSIX_SYSCONF_ANOTHER_MIN_VALUE_HOST_NAME_MAX {
    type            "int"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@Behaviour config@/
    values {
    default:        64  /@64@/
    }
}

option POSIX_SYSCONF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, the current implementation of sysconf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SYSCONF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope system_sysconf_scenario                           { POSIX_SYSCONF_SCENARIO_34SKIP }

option POSIX_SYSCONF_SCENARIO_34SKIP {
    type            "bool"
    kind            "var"
    destination     "system/sysconf/sysconf_config.h"
    description     /@If this flag is set to 1, the sysconf() function will not be tested
                      with parameter 34 (may fail on some implementations)@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope tcdrain_spec                                    { POSIX_TCDRAIN_FAILS_WITH_EIO,
                                                   POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCDRAIN_HAS_EXTRA_ERROR_CODES }

option POSIX_TCDRAIN_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function tcdrain() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcdrain()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcdrain()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcdrain()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCDRAIN_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcdrain()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCDRAIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcdrain()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcflow_spec                                     { POSIX_TCFLOW_FAILS_WITH_EIO,
                                                   POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCFLOW_HAS_EXTRA_ERROR_CODES }

option POSIX_TCFLOW_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function tcflow() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflow()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflow()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflow()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLOW_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflow()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLOW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcflow()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcflush_spec                                    { POSIX_TCFLUSH_FAILS_WITH_EIO,
                                                   POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCFLUSH_HAS_EXTRA_ERROR_CODES }

option POSIX_TCFLUSH_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function tcflush() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflush()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflush()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflush()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLUSH_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcflush()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCFLUSH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcflush()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcgetattr_spec                                  { POSIX_TCGETATTR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCGETATTR_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCGETATTR_HAS_EXTRA_ERROR_CODES }

option POSIX_TCGETATTR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetattr()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETATTR_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetattr()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETATTR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcgetattr()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcgetpgrp_spec                                  { POSIX_TCGETPGRP_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCGETPGRP_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCGETPGRP_HAS_EXTRA_ERROR_CODES }

option POSIX_TCGETPGRP_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetpgrp()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETPGRP_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetpgrp()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETPGRP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcgetpgrp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcgetsid_spec                                   { POSIX_TCGETSID_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCGETSID_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCGETSID_HAS_EXTRA_ERROR_CODES }

option POSIX_TCGETSID_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetsid()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETSID_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcgetsid()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCGETSID_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcgetsid()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcsendbreak_spec                                { POSIX_TCSENDBREAK_FAILS_WITH_EIO,
                                                   POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCSENDBREAK_HAS_EXTRA_ERROR_CODES }

option POSIX_TCSENDBREAK_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function tcsendbreak() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsendbreak()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsendbreak()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSENDBREAK_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsendbreak()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSENDBREAK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcsendbreak()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcsetattr_spec                                  { POSIX_TCSETATTR_FAILS_WITH_EIO,
                                                   POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCSETATTR_HAS_EXTRA_ERROR_CODES }

option POSIX_TCSETATTR_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function tcsetattr() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetattr()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetattr()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetattr()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetattr()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetattr()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETATTR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcsetattr()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope tcsetpgrp_spec                                  { POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_TCSETPGRP_HAS_EXTRA_ERROR_CODES }

option POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetpgrp()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetpgrp()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetpgrp()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETPGRP_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of tcsetpgrp()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TCSETPGRP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of tcsetpgrp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope timer_getoverrun_spec                           { POSIX_TIMER_GETOVERRUN_FAILS_WITH_EINVAL,
                                                   POSIX_TIMER_GETOVERRUN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TIMER_GETOVERRUN_HAS_EXTRA_ERROR_CODES }

option POSIX_TIMER_GETOVERRUN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function timer_settime() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TIMER_GETOVERRUN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_GETOVERRUN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of timer_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope timer_gettime_spec                              { POSIX_TIMER_GETTIME_FAILS_WITH_EINVAL,
                                                   POSIX_TIMER_GETTIME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TIMER_GETTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_TIMER_GETTIME_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function timer_settime() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TIMER_GETTIME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_GETTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of timer_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope timer_settime_spec                              { POSIX_TIMER_SETTIME_FAILS_WITH_EINVAL,
                                                   POSIX_TIMER_SETTIME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TIMER_SETTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_TIMER_SETTIME_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function timer_settime() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TIMER_SETTIME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_settime()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_SETTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of timer_settime()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope towctrans_spec                    { POSIX_TOWCTRANS_FAILS_WITH_EINVAL,
                                                   POSIX_TOWCTRANS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TOWCTRANS_HAS_EXTRA_ERROR_CODES }

option POSIX_TOWCTRANS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, the function towctrans() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TOWCTRANS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, the current implementation of towctrans()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TOWCTRANS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, then current implementation of towctrans()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope truncate_spec                                   { POSIX_TRUNCATE_FAILS_WITH_ELOOP,
                                                   POSIX_TRUNCATE_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_TRUNCATE_HAS_EXTRA_ERROR_CODES }

option POSIX_TRUNCATE_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function truncate() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TRUNCATE_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function truncate() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of truncate()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TRUNCATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ttyname_spec                                    { POSIX_TTYNAME_FAILS_WITH_EBADF,
                                                   POSIX_TTYNAME_FAILS_WITH_ENOTTY,
                                                   POSIX_TTYNAME_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TTYNAME_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TTYNAME_HAS_EXTRA_ERROR_CODES }

option POSIX_TTYNAME_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function ttyname() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TTYNAME_FAILS_WITH_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function ttyname() ensures
                      that the error ENOTTY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TTYNAME_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyname()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TTYNAME_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyname()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TTYNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of ttyname()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ttyname_r_spec                                  { POSIX_TTYNAME_R_FAILS_WITH_EBADF,
                                                   POSIX_TTYNAME_R_FAILS_WITH_ENOTTY,
                                                   POSIX_TTYNAME_R_FAILS_WITH_ERANGE,
                                                   POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_TTYNAME_R_HAS_EXTRA_ERROR_CODES }

option POSIX_TTYNAME_R_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function ttyname_r() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TTYNAME_R_FAILS_WITH_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function ttyname_r() ensures
                      that the error ENOTTY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TTYNAME_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function ttyname_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyname_r()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyname_r()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TTYNAME_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of ttyname_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TTYNAME_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of ttyname_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope ulimit_spec                                     { POSIX_ULIMIT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ULIMIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_ULIMIT_HAS_EXTRA_ERROR_CODES }

option POSIX_ULIMIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of ulimit()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ULIMIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, the current implementation of ulimit()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ULIMIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/resources/resources_config.h"
    description     /@If this constant is set to 1, then current implementation of ulimit()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope uname_spec                                      { POSIX_UNAME_HAS_EXTRA_ERROR_CODES }

option POSIX_UNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/host/host_config.h"
    description     /@If this constant is set to 1, then current implementation of uname()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope ungetwc_spec                                    { POSIX_UNGETWC_FAILS_WITH_EILSEQ,
                                                   POSIX_UNGETWC_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_UNGETWC_HAS_EXTRA_ERROR_CODES }

option POSIX_UNGETWC_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the function ungetwc() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNGETWC_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, the current implementation of ungetwc()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNGETWC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/fstream/wstream_config.h"
    description     /@If this constant is set to 1, then current implementation of ungetwc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope unlockpt_spec                                   { POSIX_UNLOCKPT_FAILS_WITH_EBADF,
                                                   POSIX_UNLOCKPT_FAILS_WITH_EINVAL,
                                                   POSIX_UNLOCKPT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_UNLOCKPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_UNLOCKPT_HAS_EXTRA_ERROR_CODES }

option POSIX_UNLOCKPT_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function unlockpt() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLOCKPT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the function unlockpt() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLOCKPT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of unlockpt()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLOCKPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of unlockpt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLOCKPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of unlockpt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope unsetenv_spec                                   { POSIX_UNSETENV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_UNSETENV_HAS_EXTRA_ERROR_CODES }

option POSIX_UNSETENV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, the current implementation of unsetenv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNSETENV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/environ/environ_config.h"
    description     /@If this constant is set to 1, then current implementation of unsetenv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope utime_spec                                      { POSIX_UTIME_FAILS_WITH_ELOOP,
                                                   POSIX_UTIME_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_UTIME_HAS_EXTRA_ERROR_CODES }

option POSIX_UTIME_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function utime() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UTIME_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function utime() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utime()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope utimes_spec                                     { POSIX_UTIMES_FAILS_WITH_ELOOP,
                                                   POSIX_UTIMES_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_UTIMES_HAS_EXTRA_ERROR_CODES }

option POSIX_UTIMES_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function utimes() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UTIMES_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the function utimes() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, the current implementation of utimes()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UTIMES_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/meta/meta_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcrtomb_spec                                    { POSIX_WCRTOMB_FAILS_WITH_EILSEQ,
                                                   POSIX_WCRTOMB_FAILS_WITH_EINVAL,
                                                   POSIX_WCRTOMB_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_WCRTOMB_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCRTOMB_HAS_EXTRA_ERROR_CODES }

option POSIX_WCRTOMB_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function wcrtomb() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCRTOMB_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function wcrtomb() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCRTOMB_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcrtomb()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCRTOMB_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcrtomb()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCRTOMB_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of wcrtomb()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcscoll_spec                                    { POSIX_WCSCOLL_FAILS_WITH_EINVAL,
                                                   POSIX_WCSCOLL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSCOLL_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSCOLL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, the function wcscoll() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCSCOLL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, the current implementation of wcscoll()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSCOLL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, then current implementation of wcscoll()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcsrtombs_spec                                  { POSIX_WCSRTOMBS_FAILS_WITH_EILSEQ,
                                                   POSIX_WCSRTOMBS_FAILS_WITH_EINVAL,
                                                   POSIX_WCSRTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_WCSRTOMBS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSRTOMBS_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSRTOMBS_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function wcsrtombs() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCSRTOMBS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function wcsrtombs() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCSRTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcsrtombs()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSRTOMBS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcsrtombs()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSRTOMBS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of wcsrtombs()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoimax_spec                                  { POSIX_WCSTOIMAX_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOIMAX_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOIMAX_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoq() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoq()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOIMAX_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstol_spec                                     { POSIX_WCSTOL_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOL_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstol() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstol()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstol()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstol()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoll_spec                                    { POSIX_WCSTOLL_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOLL_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOLL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoll() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoll()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoll()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOLL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoll()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstombs_spec                                   { POSIX_WCSTOMBS_FAILS_WITH_EILSEQ,
                                                   POSIX_WCSTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_WCSTOMBS_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOMBS_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the function wcstomb() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCSTOMBS_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstomb()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOMBS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wchar_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstomb()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoul_spec                                    { POSIX_WCSTOUL_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOUL_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOUL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoul() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoul()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoul()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoul()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoull_spec                                   { POSIX_WCSTOULL_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOULL_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOULL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function wcstoull() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoull()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstoull()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOULL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstoull()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcstoumax_spec                                  { POSIX_WCSTOUMAX_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOUMAX_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSTOUMAX_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the function __wcstoul_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstoul_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstoul_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOUMAX_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrint_config.h"
    description     /@If this constant is set to 1, then current implementation of __wcstoul_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wcsxfrm_spec                                    { POSIX_WCSXFRM_FAILS_WITH_EINVAL,
                                                   POSIX_WCSXFRM_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCSXFRM_HAS_EXTRA_ERROR_CODES }

option POSIX_WCSXFRM_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, the function wcsxfrm() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WCSXFRM_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, the current implementation of wcsxfrm()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSXFRM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/wcollate/wcollate_config.h"
    description     /@If this constant is set to 1, then current implementation of wcsxfrm()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope wctrans_spec                                    { POSIX_WCTRANS_FAILS_WITH_EINVAL,
                                                   POSIX_WCTRANS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WCTRANS_HAS_EXTRA_ERROR_CODES }

option POSIX_WCTRANS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, the function wctrans() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCTRANS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, the current implementation of wctrans()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCTRANS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/wctrans/wctrans_config.h"
    description     /@If this constant is set to 1, then current implementation of wctrans()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Subsystem user                               { USER_FUNCTIONS_HALT_AFTER_CANCEL }

option USER_FUNCTIONS_HALT_AFTER_CANCEL {
    type            "bool"
    kind            "var"
    destination     "system/user/system_user_config.h"
    description     /@If this variable is set to 1, then user functions halts after cancel@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope wordexp_spec                                    { POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_BADCHAR,
                                                   POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_BADVAL,
                                                   POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_CMDSUB,
                                                   POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_NOSPACE,
                                                   POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_SYNTAX,
                                                   POSIX_WORDEXP_HAS_EXTRA_ERROR_CODES }

option POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_BADCHAR {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, the current implementation of wordexp()
                      may generate error code of WRDE_BADCHAR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_BADVAL {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, the current implementation of wordexp()
                      may generate error code of WRDE_BADVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_CMDSUB {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, the current implementation of wordexp()
                      may generate error code of WRDE_CMDSUB under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_NOSPACE {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, the current implementation of wordexp()
                      may generate error code of WRDE_NOSPACE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WORDEXP_HAS_EXTRA_CONDITION_ON_WRDE_SYNTAX {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, the current implementation of wordexp()
                      may generate error code of WRDE_SYNTAX under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WORDEXP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/wordexp/wordexp_config.h"
    description     /@If this constant is set to 1, then current implementation of wordexp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope write_spec                                 { POSIX_WRITE_FAILS_WITH_EACCES,
                                                   POSIX_WRITE_FAILS_WITH_EINVAL,
                                                   POSIX_WRITE_FAILS_WITH_EIO,
                                                   POSIX_WRITE_FAILS_WITH_ENETDOWN,
                                                   POSIX_WRITE_FAILS_WITH_ENETUNREACH,
                                                   POSIX_WRITE_FAILS_WITH_ENOBUFS,
                                                   POSIX_WRITE_FAILS_WITH_ENXIO,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_WRITE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_WRITE_PERFORMS_ERRORS_DETECTION }

option POSIX_WRITE_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error ENETUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function write() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of write()
                      may generate error code of EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of write()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITE_PERFORMS_ERRORS_DETECTION {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this flag is set to one, then pwrite() and write() functions
                      perform error detection, if nbyte equals to zero and the file is a regular
                      file@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope writev_spec                                     { POSIX_WRITEV_FAILS_WITH_EACCES,
                                                   POSIX_WRITEV_FAILS_WITH_EINVAL,
                                                   POSIX_WRITEV_FAILS_WITH_EIO,
                                                   POSIX_WRITEV_FAILS_WITH_ENETDOWN,
                                                   POSIX_WRITEV_FAILS_WITH_ENETUNREACH,
                                                   POSIX_WRITEV_FAILS_WITH_ENOBUFS,
                                                   POSIX_WRITEV_FAILS_WITH_ENXIO,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENXIO,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_WRITEV_HAS_EXTRA_ERROR_CODES }

option POSIX_WRITEV_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error ENETUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_FAILS_WITH_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the function writev() ensures
                      that the error ENXIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ENXIO {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ENXIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, the current implementation of writev()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WRITEV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/file/file_config.h"
    description     /@If this constant is set to 1, then current implementation of pwrite()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope chroot_spec                              { SUSV2_CHROOT_FAILS_WITH_ENAMETOOLONG,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   SUSV2_CHROOT_HAS_EXTRA_ERROR_CODES }

option SUSV2_CHROOT_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the function chroot() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, the current implementation of chroot()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SUSV2_CHROOT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/meta/meta_fs_config.h"
    description     /@If this constant is set to 1, then current implementation of chroot()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope lsearch_spec                             { UTIL_SEARCH_LFIND_RETURNS_FIRST_SUITABLE_ELEMENT }
scope lfind_spec                               { UTIL_SEARCH_LFIND_RETURNS_FIRST_SUITABLE_ELEMENT }

option UTIL_SEARCH_LFIND_RETURNS_FIRST_SUITABLE_ELEMENT {
    type            "bool"
    kind            "var"
    destination     "util/search/search_config.h"
    description     /@If this constant is set to 1 then lfind() and lsearch() functions
                      shall return the very first element matching the key (in the case when
                      the array contains several elements equal to the key). If this constant
                      is set to 0 then these functions may return any of elements equal to
                      the key.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}


scope fork_spec                                       { POSIX_FORK_HAS_EXTRA_ERROR_CODES }

option POSIX_FORK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, then current implementation of undefined() may support additional errors not included in the list described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope execvp_spec                                     { POSIX_EXECVP_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_EXECVP_FAILS_WITH_ELOOP,
                                                   POSIX_EXECVP_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_EXECVP_FAILS_WITH_ENOMEM,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_EXECVP_FAILS_WITH_ETXTBSY,
                                                   POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ETXTBSY }

option POSIX_EXECVP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, then current implementation of execvp() may support additional errors not included in the list described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of E2BIG under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of EACCES under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of EINVAL under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ELOOP under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ENAMETOOLONG under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ENOENT under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ENOTDIR under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the function execvp() ensures that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVP_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the function execvp() ensures that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVP_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the function execvp() ensures that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ENOMEM under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXECVP_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the function execvp() ensures that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_EXECVP_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "process/process/process_config.h"
    description     /@// If this constant is set to 1, the current implementation of execvp() may generate error code of ETXTBSY under circumstances other than those described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group dir                    { POSIX_DIR_ENABLE_ERROR_COVERAGE,
                                  POSIX_DIR_IMPLEMENTED_VIA_FILEDESC }

option POSIX_DIR_IMPLEMENTED_VIA_FILEDESC {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DIR_ENABLE_ERROR_COVERAGE {
    type            "bool"
    kind            "def"
    destination     "fs/dir/dir_config.h"
    description     /@set this constant to 1 if you want to enable error coverages@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope Group file             { IO_FILE_LOCKF_EQUIVALENT_TO_FCNTL }

option IO_FILE_LOCKF_EQUIVALENT_TO_FCNTL {
    type            "bool"
    kind            "var"
    destination        "io/file/file_config.h"
    description     /@TODO@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope closedir_spec                                   { POSIX_CLOSEDIR_FAILS_WITH_EBADF,
                                                   POSIX_CLOSEDIR_FAILS_WITH_EINTR,
                                                   POSIX_CLOSEDIR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_CLOSEDIR_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CLOSEDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_CLOSEDIR_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function closedir() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CLOSEDIR_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function closedir() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CLOSEDIR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of closedir()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOSEDIR_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of closedir()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CLOSEDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope mkdir_spec                                      { POSIX_MKDIR_FAILS_WITH_ELOOP,
                                                   POSIX_MKDIR_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EMLINK,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_MKDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_MKDIR_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function mkdir() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MKDIR_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function mkdir() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EMLINK {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of EMLINK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of mkdir()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MKDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  scandir_spec                                     { POSIX_SCANDIR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_SCANDIR_FAILS_WITH_ELOOP,
                                                   POSIX_SCANDIR_FAILS_WITH_EMFILE,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SCANDIR_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_SCANDIR_FAILS_WITH_ENFILE,
                                                   POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENFILE }

option POSIX_SCANDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, then current implementation of scandir() 
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of EACCES under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ELOOP under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ENAMETOOLONG under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ENOENT under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ENOMEM under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ENOTDIR under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of EOVERFLOW under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the function scandir() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the function scandir() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of EMFILE under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the function scandir() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the function scandir() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANDIR_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/scandir_config.h"
    description     /@If this constant is set to 1, the current implementation of scandir() 
                      may generate error code of ENFILE under circumstances other than those 
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope opendir_spec                                    { POSIX_OPENDIR_FAILS_WITH_ELOOP,
                                                   POSIX_OPENDIR_FAILS_WITH_EMFILE,
                                                   POSIX_OPENDIR_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_OPENDIR_FAILS_WITH_ENFILE,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_OPENDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_OPENDIR_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function opendir() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPENDIR_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function opendir() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPENDIR_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function opendir() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPENDIR_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function opendir() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of opendir()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_OPENDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope readdir_spec                                    { POSIX_READDIR_FAILS_WITH_EBADF,
                                                   POSIX_READDIR_FAILS_WITH_ENOENT,
                                                   POSIX_READDIR_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_READDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_READDIR_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_READDIR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_READDIR_SHALL_RETURN_MODIFIED_FILES }

option POSIX_READDIR_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function readdir() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READDIR_FAILS_WITH_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function readdir() ensures
                      that the error ENOENT will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READDIR_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of readdir()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of readdir()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READDIR_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of readdir()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

option POSIX_READDIR_SHALL_RETURN_MODIFIED_FILES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then in current implementation
                      If a file is removed from or added to the directory after the most recent
                      call to opendir() or rewinddir(), a subsequent call to readdir()
                      SHALL return an entry for that file
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope readdir_r_spec                                  { POSIX_READDIR_R_FAILS_WITH_EBADF,
                                                   POSIX_READDIR_R_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_READDIR_R_HAS_EXTRA_ERROR_CODES }

option POSIX_READDIR_R_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function readdir_r() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_READDIR_R_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of readdir_r()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_READDIR_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of readdir()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
     default:   1  /@True@/
    }
}

scope rmdir_spec                                      { POSIX_RMDIR_FAILS_WITH_ELOOP,
                                                   POSIX_RMDIR_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOTEMPTY,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_RMDIR_HAS_EXTRA_ERROR_CODES }

option POSIX_RMDIR_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function rmdir() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RMDIR_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function rmdir() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_ENOTEMPTY {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of ENOTEMPTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of rmdir()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RMDIR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of undefined()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope dirfd_spec                     { POSIX_DIRFD_HAS_EXTRA_ERROR_CODES,
                                       POSIX_DIRFD_HAS_EXTRA_CONDITION_ON_EBADF,
                                       POSIX_DIRFD_FAILS_WITH_EBADF }

option POSIX_DIRFD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, then current implementation of dirfd()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2008 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DIRFD_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the current implementation of dirfd()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2008 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_DIRFD_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "fs/dir/dir_config.h"
    description     /@If this constant is set to 1, the function dirfd() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope Group tls                                  { PTHREAD_TLS_MANYKEYS_SCEN,
                                                   PTHREAD_TLS_FORK_SCEN,
                                                   PTHREAD_TLS_DESTRUCTOR_SHALL_NOT_EXCEED_MAX_ITERATIONS,
                                                   PTHREAD_TLS_TEST_DELETED_KEYS }

option PTHREAD_TLS_MANYKEYS_SCEN {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, MANYKEYS scenario will be executed. It takes a long time to carry it through.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_TLS_FORK_SCEN {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@If this constant is set to 1, FORKS scenario will be executed. LSB does not specify the behaviour of realization under this succession of actions.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option PTHREAD_TLS_DESTRUCTOR_SHALL_NOT_EXCEED_MAX_ITERATIONS {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@When this parameter is positive, more than PTHREAD_DESTRUCTOR_ITERATIONS+1
                      successive calls of destructor will cause a error.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option PTHREAD_TLS_TEST_DELETED_KEYS {
    type            "bool"
    kind            "var"
    destination     "pthread/tls/tls_config.h"
    description     /@When PTHREAD_TLS_TEST_DELETED_KEYS positive, wrong keys are allowed by
                      precondition@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope getaddrinfo_spec                                     { POSIX_GETADDRINFO_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_AGAIN,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_BADFLAGS,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_FAIL,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_FAMILY,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_MEMORY,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_NONAME,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SERVICE,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SOCKTYPE,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SYSTEM,
                                                   POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_OVERFLOW }

option POSIX_GETADDRINFO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, then current implementation of getaddrinfo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
           	0  /@False@/
    default:    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_AGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_AGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_BADFLAGS {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_BADFLAGS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_FAIL {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_FAIL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_FAMILY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_FAMILY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_MEMORY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_MEMORY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_NONAME {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_NONAME under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SERVICE {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_SERVICE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SOCKTYPE {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_SOCKTYPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_SYSTEM {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_SYSTEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETADDRINFO_HAS_EXTRA_CONDITION_ON_EAI_OVERFLOW {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getaddrinfo()
                      may generate error code of EAI_OVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope getnameinfo_spec                                     { POSIX_GETNAMEINFO_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_AGAIN,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_BADFLAGS,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_FAIL,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_FAMILY,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_MEMORY,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_NONAME,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_OVERFLOW,
                                                   POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_SYSTEM,
                                                   POSIX_GETNAMEINFO_FULL_SERVICENAME_RESOLUTION }

option POSIX_GETNAMEINFO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, then current implementation of getnameinfo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_AGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_AGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_BADFLAGS {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_BADFLAGS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_FAIL {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_FAIL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_FAMILY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_FAMILY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_MEMORY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_MEMORY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_NONAME {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_NONAME under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_OVERFLOW {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_OVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_HAS_EXTRA_CONDITION_ON_EAI_SYSTEM {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of getnameinfo()
                      may generate error code of EAI_SYSTEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETNAMEINFO_FULL_SERVICENAME_RESOLUTION {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation is expected to
                      return resolved servicename in case of NI_NUMERICSERV flag not set.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gethostbyname_spec                                     { POSIX_GETHOSTBYNAME_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_HOST_NOT_FOUND,
                                                   POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_NO_DATA,
                                                   POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_NO_RECOVERY,
                                                   POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_TRY_AGAIN }

option POSIX_GETHOSTBYNAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, then current implementation of gethostbyname()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_HOST_NOT_FOUND {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyname()
                      may generate error code of HOST_NOT_FOUND under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_NO_DATA {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyname()
                      may generate error code of NO_DATA under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_NO_RECOVERY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyname()
                      may generate error code of NO_RECOVERY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYNAME_HAS_EXTRA_CONDITION_ON_TRY_AGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyname()
                      may generate error code of TRY_AGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope gethostbyaddr_spec                                     { POSIX_GETHOSTBYADDR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_HOST_NOT_FOUND,
                                                   POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_NO_DATA,
                                                   POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_NO_RECOVERY,
                                                   POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_TRY_AGAIN }

option POSIX_GETHOSTBYADDR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, then current implementation of gethostbyaddr()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_HOST_NOT_FOUND {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyaddr()
                      may generate error code of HOST_NOT_FOUND under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_NO_DATA {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyaddr()
                      may generate error code of NO_DATA under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_NO_RECOVERY {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyaddr()
                      may generate error code of NO_RECOVERY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETHOSTBYADDR_HAS_EXTRA_CONDITION_ON_TRY_AGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/netdb/netdb_config.h"
    description     /@If this constant is set to 1, the current implementation of gethostbyaddr()
                      may generate error code of TRY_AGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope accept_spec                                     { POSIX_ACCEPT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ECONNABORTED,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_ACCEPT_FAILS_WITH_ENOBUFS,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_ACCEPT_FAILS_WITH_ENOMEM,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_ACCEPT_FAILS_WITH_EPROTO,
                                                   POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EPROTO }

option POSIX_ACCEPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of accept()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ECONNABORTED {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of ECONNABORTED under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function accept() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function accept() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACCEPT_FAILS_WITH_EPROTO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function accept() ensures
                      that the error EPROTO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_ACCEPT_HAS_EXTRA_CONDITION_ON_EPROTO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of accept()
                      may generate error code of EPROTO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope bind_spec                                     { POSIX_BIND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EADDRINUSE,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EADDRNOTAVAIL,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_BIND_FAILS_WITH_EACCES,
                                                   POSIX_BIND_FAILS_WITH_EINVAL,
                                                   POSIX_BIND_FAILS_WITH_EISCONN,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_EISCONN,
                                                   POSIX_BIND_FAILS_WITH_ELOOP,
                                                   POSIX_BIND_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_BIND_FAILS_WITH_ENOBUFS,
                                                   POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOBUFS }

option POSIX_BIND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of bind()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EADDRINUSE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EADDRINUSE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EADDRNOTAVAIL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EADDRNOTAVAIL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EDESTADDRREQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error EISCONN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of EISCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function bind() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_BIND_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of bind()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope connect_spec                                     { POSIX_CONNECT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EADDRNOTAVAIL,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EALREADY,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ECONNREFUSED,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINPROGRESS,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EISCONN,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EPROTOTYPE,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_CONNECT_FAILS_WITH_EACCES,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CONNECT_FAILS_WITH_EADDRINUSE,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EADDRINUSE,
                                                   POSIX_CONNECT_FAILS_WITH_ECONNRESET,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_CONNECT_FAILS_WITH_EHOSTUNREACH,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH,
                                                   POSIX_CONNECT_FAILS_WITH_EINVAL,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CONNECT_FAILS_WITH_ELOOP,
                                                   POSIX_CONNECT_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CONNECT_FAILS_WITH_ENETDOWN,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_CONNECT_FAILS_WITH_ENOBUFS,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_CONNECT_FAILS_WITH_EOPNOTSUPP,
                                                   POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP }

option POSIX_CONNECT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of connect()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EADDRNOTAVAIL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EADDRNOTAVAIL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EALREADY {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EALREADY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ECONNREFUSED {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ECONNREFUSED under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINPROGRESS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EINPROGRESS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EISCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EISCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EPROTOTYPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EPROTOTYPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ETIMEDOUT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ETIMEDOUT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_EADDRINUSE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error EADDRINUSE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EADDRINUSE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EADDRINUSE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error ECONNRESET will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error EHOSTUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EHOSTUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EHOSTUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CONNECT_FAILS_WITH_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function connect() ensures
                      that the error EOPNOTSUPP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_CONNECT_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of connect()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope listen_spec                                     { POSIX_LISTEN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_LISTEN_FAILS_WITH_EACCES,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LISTEN_FAILS_WITH_EINVAL,
                                                   POSIX_LISTEN_FAILS_WITH_ENOBUFS,
                                                   POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_ENOBUFS }

option POSIX_LISTEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of listen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of EDESTADDRREQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function listen() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LISTEN_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function listen() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LISTEN_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function listen() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LISTEN_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of listen()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope send_spec                                     { POSIX_SEND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ECONNRESET,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EMSGSIZE,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOTCONN,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOTSOCK,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EPIPE,
                                                   POSIX_SEND_FAILS_WITH_EACCES,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SEND_FAILS_WITH_EIO,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_SEND_FAILS_WITH_ENETDOWN,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENETDOWN,
                                                   POSIX_SEND_FAILS_WITH_ENETUNREACH,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENETUNREACH,
                                                   POSIX_SEND_FAILS_WITH_ENOBUFS,
                                                   POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOBUFS }

option POSIX_SEND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of send()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EWOULDBLOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EWOULDBLOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ECONNRESET {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ECONNRESET under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EDESTADDRREQ {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EDESTADDRREQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EMSGSIZE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EMSGSIZE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOTSOCK {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ENOTSOCK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EOPNOTSUPP {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EOPNOTSUPP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EPIPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EPIPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function send() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_FAILS_WITH_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function send() ensures
                      that the error EIO will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_FAILS_WITH_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function send() ensures
                      that the error ENETDOWN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENETDOWN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ENETDOWN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_FAILS_WITH_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function send() ensures
                      that the error ENETUNREACH will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENETUNREACH {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ENETUNREACH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEND_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function send() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SEND_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of send()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope socket_spec                                     { POSIX_SOCKET_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EPROTONOSUPPORT,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EPROTOTYPE,
                                                   POSIX_SOCKET_FAILS_WITH_EACCES,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SOCKET_FAILS_WITH_ENOBUFS,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENOBUFS,
                                                   POSIX_SOCKET_FAILS_WITH_ENOMEM,
                                                   POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_SOCKET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of socket()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EAFNOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of EAFNOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EPROTONOSUPPORT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of EPROTONOSUPPORT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EPROTOTYPE {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of EPROTOTYPE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socket() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_FAILS_WITH_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socket() ensures
                      that the error ENOBUFS will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENOBUFS {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of ENOBUFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SOCKET_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the function socket() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SOCKET_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of socket()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope setitimer_spec                                     { POSIX_SETITIMER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SETITIMER_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SETITIMER_FAILS_WITH_EINVAL }

option POSIX_SETITIMER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of setitimer()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETITIMER_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of setitimer()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SETITIMER_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function setitimer() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope getitimer_spec                                     { POSIX_GETITIMER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GETITIMER_FAILS_WITH_EINVAL,
                                                   POSIX_GETITIMER_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_GETITIMER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of getitimer()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GETITIMER_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function getitimer() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GETITIMER_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of getitimer()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope timer_create_spec                                     { POSIX_TIMER_CREATE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_ENOTSUP }

option POSIX_TIMER_CREATE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of timer_create()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_create()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_create()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_CREATE_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_create()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope timer_delete_spec                                     { POSIX_TIMER_DELETE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TIMER_DELETE_FAILS_WITH_EINVAL,
                                                   POSIX_TIMER_DELETE_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_TIMER_DELETE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, then current implementation of timer_delete()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TIMER_DELETE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the function timer_delete() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_TIMER_DELETE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "time/timer/timer_config.h"
    description     /@If this constant is set to 1, the current implementation of timer_delete()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope pututxline_spec                                     { POSIX_PUTUTXLINE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PUTUTXLINE_FAILS_WITH_EPERM,
                                                   POSIX_PUTUTXLINE_HAS_EXTRA_CONDITION_ON_EPERM }

option POSIX_PUTUTXLINE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/user/account_config.h"
    description     /@If this constant is set to 1, then current implementation of pututxline()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PUTUTXLINE_FAILS_WITH_EPERM {
    type            "bool"
    kind            "var"
    destination     "system/user/account_config.h"
    description     /@If this constant is set to 1, the function pututxline() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PUTUTXLINE_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "system/user/account_config.h"
    description     /@If this constant is set to 1, the current implementation of pututxline()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope rename_spec                                     { POSIX_RENAME_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOTEMPTY,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EISDIR,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EMLINK,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EXDEV,
                                                   POSIX_RENAME_FAILS_WITH_EBUSY,
                                                   POSIX_RENAME_FAILS_WITH_ELOOP,
                                                   POSIX_RENAME_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_RENAME_FAILS_WITH_ETXTBSY,
                                                   POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ETXTBSY }

option POSIX_RENAME_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, then current implementation of rename()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOTEMPTY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ENOTEMPTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EISDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EMLINK {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EMLINK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EXDEV {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of EXDEV under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RENAME_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function rename() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RENAME_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function rename() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RENAME_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function rename() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RENAME_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function rename() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of rename()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  __xmknod_spec                                     { POSIX_XMKNOD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EIO,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_XMKNOD_FAILS_WITH_ELOOP,
                                                   POSIX_XMKNOD_FAILS_WITH_ENAMETOOLONG }

option POSIX_XMKNOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, then current implementation of __xmknod()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of __xmknod()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_XMKNOD_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function __xmknod() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_XMKNOD_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function __xmknod() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope  unlink_spec                                     { POSIX_UNLINK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_UNLINK_FAILS_WITH_EBUSY,
                                                   POSIX_UNLINK_FAILS_WITH_ELOOP,
                                                   POSIX_UNLINK_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_UNLINK_FAILS_WITH_ETXTBSY,
                                                   POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ETXTBSY,
                                                   LSB_UNLINK_HAS_EXTRA_CONDITION_ON_EISDIR }

option POSIX_UNLINK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, then current implementation of unlink()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_UNLINK_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function unlink() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLINK_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function unlink() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLINK_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function unlink() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLINK_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function unlink() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_UNLINK_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of unlink()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_UNLINK_HAS_EXTRA_CONDITION_ON_EISDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to .@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  remove_spec                                     { POSIX_REMOVE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EROFS,
												   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EIO,
												   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EINVAL,
												   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EEXIST,
												   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOTEMPTY,
                                                   POSIX_REMOVE_FAILS_WITH_EBUSY,
                                                   POSIX_REMOVE_FAILS_WITH_ELOOP,
                                                   POSIX_REMOVE_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_REMOVE_FAILS_WITH_ETXTBSY,
                                                   POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ETXTBSY }

option POSIX_REMOVE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, then current implementation of remove()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function remove() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REMOVE_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function remove() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REMOVE_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function remove() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REMOVE_FAILS_WITH_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function remove() ensures
                      that the error ETXTBSY will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ETXTBSY {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of ETXTBSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_ENOTEMPTY{
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMOVE_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of remove()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}
scope  link_spec                                     { POSIX_LINK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EMLINK,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EROFS,
                                                   POSIX_LINK_HAS_EXTRA_CONDITION_ON_EXDEV,
                                                   POSIX_LINK_FAILS_WITH_ELOOP,
                                                   POSIX_LINK_FAILS_WITH_ENAMETOOLONG }

option POSIX_LINK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, then current implementation of link()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EMLINK {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EMLINK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EROFS {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EROFS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_HAS_EXTRA_CONDITION_ON_EXDEV {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the current implementation of link()
                      may generate error code of EXDEV under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LINK_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function link() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_LINK_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "fs/fs/fs_config.h"
    description     /@If this constant is set to 1, the function link() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}



scope sched_yield_spec { POSIX_SCHED_YIELD_HAS_EXTRA_ERROR_CODES }

option POSIX_SCHED_YIELD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_yield()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  brk_spec                                  { LSB_BRK_HAS_EXTRA_ERROR_CODES,
                                                   LSB_BRK_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_BRK_FAILS_WITH_EAGAIN,
                                                   LSB_BRK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   LSB_BRK_FAILS_WITH_ENOMEM }

option LSB_BRK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, then current implementation of brk()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BRK_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the current implementation of brk()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BRK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the function brk() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_BRK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the current implementation of brk()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BRK_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the function brk() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope  sbrk_spec                                     { LSB_SBRK_HAS_EXTRA_ERROR_CODES,
                                                   LSB_SBRK_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_SBRK_FAILS_WITH_EAGAIN,
                                                   LSB_SBRK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   LSB_SBRK_FAILS_WITH_ENOMEM }

option LSB_SBRK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, then current implementation of sbrk()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SBRK_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the current implementation of sbrk()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SBRK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the function sbrk() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_SBRK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the current implementation of sbrk()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SBRK_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "memory/break/break_config.h"
    description     /@If this constant is set to 1, the function sbrk() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope  pthread_mutex_destroy_spec                 { POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEX_DESTROY_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_MUTEX_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutex_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_DESTROY_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_destroy() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_destroy()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutex_init_spec                   { POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_PTHREAD_MUTEX_INIT_FAILS_WITH_EBUSY,
                                                   POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_MUTEX_INIT_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutex_init()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_init()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_init()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_FAILS_WITH_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_init() ensures
                      that the error EBUSY will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_init()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_init() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_INIT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_init()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutex_lock_spec                   { POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EAGAIN,
                                                   POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EDEADLK,
                                                   POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EDEADLK }

option POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutex_lock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_lock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_lock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_lock() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_lock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_FAILS_WITH_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_lock() ensures
                      that the error EDEADLK will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_LOCK_HAS_EXTRA_CONDITION_ON_EDEADLK {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_lock()
                      may generate error code of EDEADLK under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutex_trylock_spec                { POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EBUSY,
                                                   POSIX_PTHREAD_MUTEX_TRYLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_TRYLOCK_FAILS_WITH_EAGAIN,
                                                   POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN }

option POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutex_trylock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_trylock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EBUSY {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_trylock()
                      may generate error code of EBUSY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_TRYLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_trylock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_TRYLOCK_FAILS_WITH_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_trylock() ensures
                      that the error EAGAIN will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_TRYLOCK_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_trylock()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutex_unlock_spec                 { POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEX_UNLOCK_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_MUTEX_UNLOCK_FAILS_WITH_EPERM,
                                                   POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_CONDITION_ON_EPERM }

option POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutex_unlock()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_UNLOCK_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_unlock() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_unlock()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_UNLOCK_FAILS_WITH_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the function pthread_mutex_unlock() ensures
                      that the error EPERM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEX_UNLOCK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutex_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutex_unlock()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_destroy_spec            { POSIX_PTHREAD_MUTEXATTR_DESTROY_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_DESTROY_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEXATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEXATTR_DESTROY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_destroy()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_DESTROY_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the function pthread_mutexattr_destroy() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_DESTROY_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_destroy()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_init_spec               { POSIX_PTHREAD_MUTEXATTR_INIT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_PTHREAD_MUTEXATTR_INIT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_init()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_INIT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_init()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_getpshared_spec         { POSIX_PTHREAD_MUTEXATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_GETPSHARED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEXATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEXATTR_GETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_getpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_GETPSHARED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the function pthread_mutexattr_getpshared() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_GETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_getpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_setpshared_spec         { POSIX_PTHREAD_MUTEXATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_SETPSHARED_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEXATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEXATTR_SETPSHARED_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_setpshared()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_SETPSHARED_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the function pthread_mutexattr_setpshared() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_SETPSHARED_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_setpshared()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_settype_spec            { POSIX_PTHREAD_MUTEXATTR_SETTYPE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_SETTYPE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PTHREAD_MUTEXATTR_SETTYPE_FAILS_WITH_EINVAL }

option POSIX_PTHREAD_MUTEXATTR_SETTYPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_settype()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_SETTYPE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_settype()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_SETTYPE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the function pthread_mutexattr_settype() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pthread_mutexattr_gettype_spec            { POSIX_PTHREAD_MUTEXATTR_GETTYPE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PTHREAD_MUTEXATTR_GETTYPE_FAILS_WITH_EINVAL,
                                                   POSIX_PTHREAD_MUTEXATTR_GETTYPE_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_PTHREAD_MUTEXATTR_GETTYPE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, then current implementation of pthread_mutexattr_gettype()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_GETTYPE_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the function pthread_mutexattr_gettype() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PTHREAD_MUTEXATTR_GETTYPE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "pthread/mutex/mutexattr_config.h"
    description     /@If this constant is set to 1, the current implementation of pthread_mutexattr_gettype()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope socket_rpc_pmap_scenario   { SOKET_RPC_PMAP_SHALL_ROOT,
                        SOCKET_RPC_PMAP_PROGNUM,
                        SOCKET_RPC_PMAP_PORT1,
                        SOCKET_RPC_PMAP_PORT4,
                        SOCKET_RPC_PMAP_PORT7 }

option SOKET_RPC_PMAP_SHALL_ROOT {
    type            "bool"
    kind            "def"
    destination     "socket/rpc/pmap_config.h"
    description     /@If this constant is set to 1, scenario requires to be started under root.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option SOCKET_RPC_PMAP_PROGNUM {
    type            "int"
    kind            "def"
    destination     "socket/rpc/pmap_config.h"
    description     /@Fake program number for testing@/
    values {
    default:        0x20000000 /@0x20000000@/
    }
}

option SOCKET_RPC_PMAP_PORT1{
    type            "int"
    kind            "def"
    destination     "socket/rpc/pmap_config.h"
    description     /@Port number for testing@/
    values {
    default:        12541 /@12541@/
    }
}

option SOCKET_RPC_PMAP_PORT4{
    type            "int"
    kind            "def"
    destination     "socket/rpc/pmap_config.h"
    description     /@Port number for testing@/
    values {
    default:        12541 /@12544@/
    }
}

option SOCKET_RPC_PMAP_PORT7{
    type            "int"
    kind            "def"
    destination     "socket/rpc/pmap_config.h"
    description     /@Port number for testing@/
    values {
    default:        12547 /@12547@/
    }
}

scope util_dl_scenario   { DL_ERROR_NO_INTERNAL_ERRORS }

option DL_ERROR_NO_INTERNAL_ERRORS {
    type            "bool"
    kind            "var"
    destination     "util/dl/dl_config.h"
    description     /@If this constant is set to 1, dlerror_spec check the return-requirements.@/
    values {
    default:    0 /@False@/
                1 /@True@/
    }
}

scope  nextafter_spec                                     { POSIX_NEXTAFTER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_NEXTAFTER_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_NEXTAFTER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of nextafter()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NEXTAFTER_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of nextafter()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}
scope  nexttoward_spec                                     { POSIX_NEXTTOWARD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_NEXTTOWARD_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_NEXTTOWARD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of nexttoward()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NEXTTOWARD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of nexttoward()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  floor_spec                                     { POSIX_FLOOR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FLOOR_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_FLOOR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of floor()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FLOOR_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of floor()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  ldexp_spec                                     { POSIX_LDEXP_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LDEXP_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_LDEXP_FAILS_WITH_ERANGE }

option POSIX_LDEXP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of ldexp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LDEXP_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of ldexp()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LDEXP_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the function ldexp() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  ilogb_spec                                     { POSIX_ILOGB_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ILOGB_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_ILOGB_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of ilogb()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ILOGB_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of ilogb()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  logb_spec                                     { POSIX_LOGB_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LOGB_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_LOGB_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of logb()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOGB_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of logb()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  scalb_spec                                     { POSIX_SCALB_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCALB_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_SCALB_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_SCALB_FAILS_WITH_ERANGE }

option POSIX_SCALB_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of scalb()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALB_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of scalb()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALB_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of scalb()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALB_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the function scalb() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  scalbln_spec                                     { POSIX_SCALBLN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCALBLN_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_SCALBLN_FAILS_WITH_ERANGE }

option POSIX_SCALBLN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of scalbln()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALBLN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of scalbln()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALBLN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the function scalbln() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  scalbn_spec                                     { POSIX_SCALBN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCALBN_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_SCALBN_FAILS_WITH_ERANGE }

option POSIX_SCALBN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, then current implementation of scalbn()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALBN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the current implementation of scalbn()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCALBN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/float/float_config.h"
    description     /@If this constant is set to 1, the function scalbn() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sin_spec                                     { POSIX_SIN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIN_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_SIN_FAILS_WITH_ERANGE,
                                                   POSIX_SIN_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_SIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of sin()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIN_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of sin()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the function sin() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of sin()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  cos_spec                                     { POSIX_COS_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_COS_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_COS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of cos()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_COS_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of cos()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  tan_spec                                     { POSIX_TAN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TAN_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_TAN_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_TAN_FAILS_WITH_ERANGE }

option POSIX_TAN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of tan()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TAN_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of tan()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TAN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of tan()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TAN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the function tan() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  acos_spec                                     { POSIX_ACOS_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ACOS_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_ACOS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of acos()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACOS_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of acos()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  asin_spec                                     { POSIX_ASIN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ASIN_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_ASIN_FAILS_WITH_ERANGE,
                                                   POSIX_ASIN_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ASIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of asin()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ASIN_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of asin()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ASIN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the function asin() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ASIN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of asin()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  atan_spec                                     { POSIX_ATAN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ATAN_FAILS_WITH_ERANGE,
                                                   POSIX_ATAN_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ATAN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of atan()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATAN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the function atan() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATAN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of atan()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  atan2_spec                                     { POSIX_ATAN2_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ATAN2_FAILS_WITH_ERANGE,
                                                   POSIX_ATAN2_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ATAN2_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, then current implementation of atan2()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATAN2_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the function atan2() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATAN2_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/trig/trig_config.h"
    description     /@If this constant is set to 1, the current implementation of atan2()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  ceil_spec                                     { POSIX_CEIL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CEIL_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_CEIL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of ceil()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CEIL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of ceil()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fdim_spec                                     { POSIX_FDIM_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FDIM_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_FDIM_FAILS_WITH_ERANGE }

option POSIX_FDIM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of fdim()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDIM_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of fdim()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FDIM_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the function fdim() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  llrint_spec                                     { POSIX_LLRINT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LLRINT_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_LLRINT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of llrint()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LLRINT_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of llrint()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  llround_spec                                     { POSIX_LLROUND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LLROUND_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_LLROUND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of llround()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LLROUND_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of llround()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  lrint_spec                                     { POSIX_LRINT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LRINT_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_LRINT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of lrint()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LRINT_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of lrint()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  lround_spec                                     { POSIX_LROUND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LROUND_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_LROUND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of lround()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LROUND_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of lround()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  nearbyint_spec                                     { POSIX_NEARBYINT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_NEARBYINT_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_NEARBYINT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of nearbyint()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_NEARBYINT_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of nearbyint()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  rint_spec                                     { POSIX_RINT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_RINT_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_RINT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of rint()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_RINT_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of rint()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  round_spec                                     { POSIX_ROUND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ROUND_FAILS_WITH_ERANGE,
                                                   POSIX_ROUND_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ROUND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of round()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ROUND_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the function round() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ROUND_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of round()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  asprintf_spec                                     { LSB_ASPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_ASPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_ASPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_ASPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_ASPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB_ASPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of asprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ASPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function asprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_ASPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of asprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ASPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function asprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_ASPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of asprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fprintf_spec                                     { POSIX_FPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FPRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_FPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of fprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function fprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of fprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function fprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of fprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function fprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of fprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  printf_spec                                     { POSIX_PRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_PRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_PRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_PRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of printf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function printf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of printf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function printf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of printf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function printf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_PRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of printf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  snprintf_spec                                     { POSIX_SNPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SNPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SNPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EOVERFLOW }

option POSIX_SNPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of snprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SNPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function snprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of snprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SNPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function snprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of snprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SNPRINTF_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of snprintf()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sprintf_spec                                     { POSIX_SPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_SPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_SPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of sprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function sprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of sprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function sprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of sprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vasprintf_spec                                     { LSB_VASPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VASPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VASPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VASPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VASPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB_VASPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vasprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VASPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vasprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VASPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vasprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VASPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vasprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VASPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vasprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vdprintf_spec                                     { LSB_VDPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VDPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VDPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VDPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VDPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB_VDPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vdprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VDPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vdprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VDPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vdprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VDPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vdprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VDPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vdprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vfprintf_spec                                     { LSB_VFPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VFPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VFPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_VFPRINTF_FAILS_WITH_ENOMEM,
                                                   LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option LSB_VFPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vfprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VFPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vfprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VFPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vfprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VFPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vfprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VFPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vprintf_spec                                     { LSB_VPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_VPRINTF_FAILS_WITH_ENOMEM,
                                                   LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option LSB_VPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vsnprintf_spec                                     { LSB_VSNPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VSNPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VSNPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EOVERFLOW }

option LSB_VSNPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vsnprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VSNPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vsnprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsnprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VSNPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vsnprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsnprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VSNPRINTF_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsnprintf()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vsprintf_spec                                     { LSB_VSPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_VSPRINTF_FAILS_WITH_EILSEQ,
                                                   LSB_VSPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   LSB_VSPRINTF_FAILS_WITH_EINVAL,
                                                   LSB_VSPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB_VSPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, then current implementation of vsprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VSPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vsprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VSPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_VSPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the function vsprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_VSPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/printf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}




scope    msgsnd_spec                                     { POSIX_MSGSEND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EIDRM,
                                                   POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_MSGSEND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, then current implementation of msgsnd()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgsnd()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgsnd()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EIDRM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgsnd()
                      may generate error code of EIDRM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgsnd()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGSEND_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgsnd()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  msgget_spec                                     { POSIX_MSGGET_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_ENOSPC }

option POSIX_MSGGET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, then current implementation of msgget()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgget()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgget()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgget()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGGET_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgget()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  ftok_spec                                     { POSIX_FTOK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FTOK_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ELOOP,
                                                   POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENOTDIR,
                                                   POSIX_FTOK_FAILS_WITH_ELOOP,
                                                   POSIX_FTOK_FAILS_WITH_ENAMETOOLONG }

option POSIX_FTOK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, then current implementation of ftok()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the current implementation of ftok()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the current implementation of ftok()
                      may generate error code of ELOOP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the current implementation of ftok()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the current implementation of ftok()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the current implementation of ftok()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FTOK_FAILS_WITH_ELOOP {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the function ftok() ensures
                      that the error ELOOP will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FTOK_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/ipc_config.h"
    description     /@If this constant is set to 1, the function ftok() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

scope  msgctl_spec                                     { POSIX_MSGCTL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EPERM }

option POSIX_MSGCTL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, then current implementation of msgctl()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgctl()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgctl()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGCTL_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgctl()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  msgrcv_spec                                     { POSIX_MSGRCV_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EIDRM,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_ENOMSG }

option POSIX_MSGRCV_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, then current implementation of msgrcv()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EIDRM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of EIDRM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_MSGRCV_HAS_EXTRA_CONDITION_ON_ENOMSG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/msg_config.h"
    description     /@If this constant is set to 1, the current implementation of msgrcv()
                      may generate error code of ENOMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  semop_spec                                     { POSIX_SEMOP_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_E2BIG,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EFBIG,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EIDRM,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_SEMOP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, then current implementation of semop()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_E2BIG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of E2BIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EFBIG {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EFBIG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EIDRM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EIDRM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMOP_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semop()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  semget_spec                                     { POSIX_SEMGET_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_ENOSPC }

option POSIX_SEMGET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, then current implementation of semget()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semget()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semget()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semget()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semget()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMGET_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semget()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  semctl_spec                                     { POSIX_SEMCTL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_SEMCTL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, then current implementation of semctl()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semctl()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semctl()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semctl()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SEMCTL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "process/ipc/sem_config.h"
    description     /@If this constant is set to 1, the current implementation of semctl()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  shmget_spec                                     { POSIX_SHMGET_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_EEXIST,
                                                   POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOSPC }

option POSIX_SHMGET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, then current implementation of shmget()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_EEXIST {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmget()
                      may generate error code of EEXIST under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmget()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmget()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmget()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMGET_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmget()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  shmat_spec                                     { POSIX_SHMAT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_SHMAT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, then current implementation of shmat()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmat()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmat()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmat()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMAT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmat()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  shmctl_spec                                     { POSIX_SHMCTL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SHMCTL_FAILS_WITH_EOVERFLOW,
                                                   POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EOVERFLOW }

option POSIX_SHMCTL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, then current implementation of shmctl()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmctl()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmctl()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmctl()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMCTL_FAILS_WITH_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the function shmctl() ensures
                      that the error EOVERFLOW will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SHMCTL_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmctl()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}




scope  shmdt_spec                                     { POSIX_SHMDT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SHMDT_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SHMDT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, then current implementation of shmdt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SHMDT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/ipc/shm_config.h"
    description     /@If this constant is set to 1, the current implementation of shmdt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fwprintf_spec                                     { POSIX_FWPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FWPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FWPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_FWPRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_FWPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of fwprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function fwprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of fwprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function fwprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of fwprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function fwprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_FWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of fwprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  swprintf_spec                                     { POSIX_SWPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SWPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_SWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SWPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_SWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SWPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of swprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function swprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of swprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function swprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_SWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of swprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vfwprintf_spec                                     { POSIX_VFWPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VFWPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VFWPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_VFWPRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_VFWPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of vfwprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vfwprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfwprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vfwprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfwprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vfwprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VFWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfwprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vswprintf_spec                                     { POSIX_VSWPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VSWPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_VSWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VSWPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_VSWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VSWPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of vswprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vswprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VSWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vswprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vswprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VSWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vswprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vwprintf_spec                                     { POSIX_VWPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VWPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VWPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_VWPRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_VWPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of vwprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vwprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vwprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vwprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vwprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function vwprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_VWPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of vwprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  wprintf_spec                                     { POSIX_WPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_WPRINTF_FAILS_WITH_EILSEQ,
                                                   POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_WPRINTF_FAILS_WITH_EINVAL,
                                                   POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_WPRINTF_FAILS_WITH_ENOMEM,
                                                   POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_WPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, then current implementation of wprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WPRINTF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function wprintf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of wprintf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WPRINTF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function wprintf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of wprintf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WPRINTF_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the function wprintf() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_WPRINTF_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "util/format/wprintf_config.h"
    description     /@If this constant is set to 1, the current implementation of wprintf()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fma_spec                                     { POSIX_FMA_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FMA_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_FMA_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_FMA_FAILS_WITH_EDOM,
                                                   POSIX_FMA_FAILS_WITH_ERANGE }

option POSIX_FMA_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of fma()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMA_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of fma()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMA_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of fma()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMA_FAILS_WITH_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the function fma() ensures
                      that the error EDOM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMA_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the function fma() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fmod_spec                                     { POSIX_FMOD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FMOD_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_FMOD_FAILS_WITH_ERANGE,
                                                   POSIX_FMOD_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_FMOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of fmod()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMOD_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of fmod()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMOD_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the function fmod() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FMOD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of fmod()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  remainder_spec                                     { POSIX_REMAINDER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_REMAINDER_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_REMAINDER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of remainder()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMAINDER_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of remainder()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  remquo_spec                                     { POSIX_REMQUO_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_REMQUO_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_REMQUO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, then current implementation of remquo()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_REMQUO_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/real/real_config.h"
    description     /@If this constant is set to 1, the current implementation of remquo()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  j0_spec                                     { POSIX_J0_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_J0_FAILS_WITH_ERANGE,
                                                   POSIX_J0_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_J0_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of j0()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_J0_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function j0() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_J0_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of j0()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  j1_spec                                     { POSIX_J1_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_J1_FAILS_WITH_ERANGE,
                                                   POSIX_J1_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_J1_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of j1()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_J1_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function j1() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_J1_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of j1()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  jn_spec                                     { POSIX_JN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_JN_FAILS_WITH_ERANGE,
                                                   POSIX_JN_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_JN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of jn()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_JN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function jn() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_JN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of jn()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  y0_spec                                     { POSIX_Y0_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_Y0_FAILS_WITH_EDOM,
                                                   POSIX_Y0_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_Y0_FAILS_WITH_ERANGE,
                                                   POSIX_Y0_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_Y0_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of y0()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y0_FAILS_WITH_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function y0() ensures
                      that the error EDOM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y0_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of y0()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_Y0_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function y0() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y0_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of y0()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  y1_spec                                     { POSIX_Y1_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_Y1_FAILS_WITH_EDOM,
                                                   POSIX_Y1_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_Y1_FAILS_WITH_ERANGE,
                                                   POSIX_Y1_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_Y1_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of y1()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y1_FAILS_WITH_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function y1() ensures
                      that the error EDOM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y1_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of y1()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_Y1_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function y1() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_Y1_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of y1()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  yn_spec                                     { POSIX_YN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_YN_FAILS_WITH_EDOM,
                                                   POSIX_YN_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_YN_FAILS_WITH_ERANGE,
                                                   POSIX_YN_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_YN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, then current implementation of yn()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_YN_FAILS_WITH_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function yn() ensures
                      that the error EDOM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_YN_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of yn()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_YN_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the function yn() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_YN_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/bessel/bessel_config.h"
    description     /@If this constant is set to 1, the current implementation of yn()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  lgamma_spec                                     { POSIX_LGAMMA_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LGAMMA_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_LGAMMA_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, then current implementation of lgamma()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LGAMMA_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the current implementation of lgamma()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  tgamma_spec                                     { POSIX_TGAMMA_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TGAMMA_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_TGAMMA_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_TGAMMA_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, then current implementation of tgamma()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TGAMMA_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the current implementation of tgamma()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TGAMMA_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the current implementation of tgamma()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  gamma_spec                                     { POSIX_GAMMA_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_GAMMA_FAILS_WITH_EDOM,
                                                   POSIX_GAMMA_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_GAMMA_FAILS_WITH_ERANGE,
                                                   POSIX_GAMMA_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_GAMMA_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, then current implementation of gamma()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GAMMA_FAILS_WITH_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the function gamma() ensures
                      that the error EDOM will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GAMMA_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the current implementation of gamma()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_GAMMA_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the function gamma() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option POSIX_GAMMA_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/gamma/gamma_config.h"
    description     /@If this constant is set to 1, the current implementation of gamma()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  erf_spec                                     { POSIX_ERF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ERF_FAILS_WITH_ERANGE,
                                                   POSIX_ERF_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ERF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, then current implementation of erf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ERF_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, the function erf() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ERF_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, the current implementation of erf()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  erfc_spec                                     { POSIX_ERFC_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ERFC_FAILS_WITH_ERANGE,
                                                   POSIX_ERFC_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ERFC_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, then current implementation of erfc()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ERFC_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, the function erfc() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ERFC_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/error/error_config.h"
    description     /@If this constant is set to 1, the current implementation of erfc()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  tempnam_spec                                     { POSIX_TEMPNAM_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TEMPNAM_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_TEMPNAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, then current implementation of tempnam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TEMPNAM_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tempnam()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  tmpfile_spec                                     { POSIX_TMPFILE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENOSPC,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EOVERFLOW,
                                                   POSIX_TMPFILE_FAILS_WITH_EMFILE,
                                                   POSIX_TMPFILE_FAILS_WITH_ENOMEM,
                                                   POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENOMEM }

option POSIX_TMPFILE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, then current implementation of tmpfile()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENOSPC {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of ENOSPC under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_EOVERFLOW {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of EOVERFLOW under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the function tmpfile() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the function tmpfile() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TMPFILE_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "fs/tmpfile/tmpfile_config.h"
    description     /@If this constant is set to 1, the current implementation of tmpfile()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

 scope  acct_spec                                     { LSB_ACCT_HAS_EXTRA_ERROR_CODES,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_ENOSYS,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_EIO,
                                                   LSB_ACCT_HAS_EXTRA_CONDITION_ON_EUSERS }

option LSB_ACCT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, then current implementation of acct()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_ENOSYS {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of ENOSYS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_EIO {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of EIO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_ACCT_HAS_EXTRA_CONDITION_ON_EUSERS {
    type            "bool"
    kind            "var"
    destination     "system/stat/stat_config.h"
    description     /@If this constant is set to 1, the current implementation of acct()
                      may generate error code of EUSERS under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  textdomain_spec                                     { LSB_TEXTDOMAIN_HAS_EXTRA_ERROR_CODES,
                                                   LSB_TEXTDOMAIN_HAS_EXTRA_CONDITION_ON_ENOMEM }

option LSB_TEXTDOMAIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, then current implementation of textdomain()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_TEXTDOMAIN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, the current implementation of textdomain()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  bindtextdomain_spec                                     { LSB_BINDTEXTDOMAIN_HAS_EXTRA_ERROR_CODES,
                                                   LSB_BINDTEXTDOMAIN_FAILS_WITH_ENOMEM,
                                                   LSB_BINDTEXTDOMAIN_HAS_EXTRA_CONDITION_ON_ENOMEM }

option LSB_BINDTEXTDOMAIN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, then current implementation of bindtextdomain()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BINDTEXTDOMAIN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, the function bindtextdomain() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_BINDTEXTDOMAIN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, the current implementation of bindtextdomain()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  bind_textdomain_codeset_spec                                     { LSB_BIND_TEXTDOMAIN_CODESET_HAS_EXTRA_ERROR_CODES,
                                                   LSB_BIND_TEXTDOMAIN_CODESET_HAS_EXTRA_CONDITION_ON_ENOMEM }

option LSB_BIND_TEXTDOMAIN_CODESET_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, then current implementation of bind_textdomain_codeset()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                    0  /@False@/
    default:        1  /@True@/
    }
}

option LSB_BIND_TEXTDOMAIN_CODESET_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/textdomain/textdomain_config.h"
    description     /@If this constant is set to 1, the current implementation of bind_textdomain_codeset()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  select_spec                                     { POSIX_SELECT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SELECT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, then current implementation of select()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of select()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of select()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SELECT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of select()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  poll_spec                                     { POSIX_POLL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_POLL_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_POLL_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_POLL_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_POLL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, then current implementation of poll()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POLL_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of poll()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POLL_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of poll()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POLL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "io/multiplex/multiplex_config.h"
    description     /@If this constant is set to 1, the current implementation of poll()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strtod_spec                                     { POSIX_STRTOD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_STRTOD_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOD_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOD_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_STRTOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, then current implementation of strtod()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtod()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOD_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the function strtod() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtod()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strtof_spec                                     { POSIX_STRTOF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_STRTOF_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOF_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_STRTOF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, then current implementation of strtof()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOF_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtof()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the function strtof() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtof()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strtold_spec                                     { POSIX_STRTOLD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_STRTOLD_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_STRTOLD_FAILS_WITH_EINVAL,
                                                   POSIX_STRTOLD_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_STRTOLD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, then current implementation of strtold()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtold()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLD_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the function strtold() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRTOLD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of strtold()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  util_search_queue_scenario                                     { QueueCreationFlag }

option QueueCreationFlag {
    type            "bool"
    kind            "var"
    destination     "util/search/queue_config.h"
    description     /@
                       Accounts for the method of queue creation. If QueueCreationFlag equals to 0
                       queues are created according to LSB specification by insque method otherwise they
                       are created by create_linear_queue_spec. This flag is needed because  many
                       implementation of Linux violate standard and do not allow to create linear
                       queue by means of passing nil second argument to insque function.
                     @/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

scope  strerror_spec                                     { POSIX_STRERROR_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_STRERROR_FAILS_WITH_EINVAL,
                                                   POSIX_STRERROR_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_STRERROR_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, then current implementation of strerror()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the function strerror() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the current implementation of strerror()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strerror_r_spec                                     { POSIX_STRERROR_R_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_STRERROR_R_FAILS_WITH_EINVAL,
                                                   POSIX_STRERROR_R_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_STRERROR_R_FAILS_WITH_ERANGE,
                                                   POSIX_STRERROR_R_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_STRERROR_R_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, then current implementation of strerror_r()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_R_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the function strerror_r() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_R_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the current implementation of strerror_r()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_R_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the function strerror_r() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_STRERROR_R_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "locale/messages/messages_config.h"
    description     /@If this constant is set to 1, the current implementation of strerror_r()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  catclose_spec                                     { POSIX_CATCLOSE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CATCLOSE_FAILS_WITH_EBADF,
                                                   POSIX_CATCLOSE_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_CATCLOSE_FAILS_WITH_EINTR,
                                                   POSIX_CATCLOSE_HAS_EXTRA_CONDITION_ON_EINTR }

option POSIX_CATCLOSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, then current implementation of catclose()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATCLOSE_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catclose() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATCLOSE_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catclose()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATCLOSE_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catclose() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATCLOSE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catclose()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  catgets_spec                                     { POSIX_CATGETS_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CATGETS_FAILS_WITH_EBADF,
                                                   POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   POSIX_CATGETS_FAILS_WITH_EBADMSG,
                                                   POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EBADMSG,
                                                   POSIX_CATGETS_FAILS_WITH_EINTR,
                                                   POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EINTR,
                                                   POSIX_CATGETS_FAILS_WITH_EINVAL,
                                                   POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_CATGETS_FAILS_WITH_ENOMSG,
                                                   POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_ENOMSG }

option POSIX_CATGETS_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, then current implementation of catgets()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_FAILS_WITH_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catgets() ensures
                      that the error EBADF will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catgets()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_FAILS_WITH_EBADMSG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catgets() ensures
                      that the error EBADMSG will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EBADMSG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catgets()
                      may generate error code of EBADMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_FAILS_WITH_EINTR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catgets() ensures
                      that the error EINTR will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catgets()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catgets() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catgets()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_FAILS_WITH_ENOMSG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catgets() ensures
                      that the error ENOMSG will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATGETS_HAS_EXTRA_CONDITION_ON_ENOMSG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catgets()
                      may generate error code of ENOMSG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  catopen_spec                                     { POSIX_CATOPEN_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_CATOPEN_FAILS_WITH_EACCES,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_EACCES,
                                                   POSIX_CATOPEN_FAILS_WITH_EMFILE,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_EMFILE,
                                                   POSIX_CATOPEN_FAILS_WITH_ENAMETOOLONG,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG,
                                                   POSIX_CATOPEN_FAILS_WITH_ENFILE,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENFILE,
                                                   POSIX_CATOPEN_FAILS_WITH_ENOENT,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOENT,
                                                   POSIX_CATOPEN_FAILS_WITH_ENOMEM,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_CATOPEN_FAILS_WITH_ENOTDIR,
                                                   POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR }

option POSIX_CATOPEN_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, then current implementation of catopen()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_EACCES {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error EACCES will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_EACCES {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of EACCES under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_EMFILE {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error EMFILE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_EMFILE {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of EMFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error ENAMETOOLONG will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of ENAMETOOLONG under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_ENFILE {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error ENFILE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENFILE {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of ENFILE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_ENOENT {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error ENOENT will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOENT {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of ENOENT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error ENOMEM will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_FAILS_WITH_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the function catopen() ensures
                      that the error ENOTDIR will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_CATOPEN_HAS_EXTRA_CONDITION_ON_ENOTDIR {
    type            "bool"
    kind            "var"
    destination     "locale/nlcat/nlcat_config.h"
    description     /@If this constant is set to 1, the current implementation of catopen()
                      may generate error code of ENOTDIR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sched_get_priority_max_spec                                     { POSIX_SCHED_GET_PRIORITY_MAX_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_GET_PRIORITY_MAX_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SCHED_GET_PRIORITY_MAX_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_get_priority_max()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


option POSIX_SCHED_GET_PRIORITY_MAX_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_get_priority_max()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  sched_getparam_spec                                     { POSIX_SCHED_GETPARAM_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_GETPARAM_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SCHED_GETPARAM_HAS_EXTRA_CONDITION_ON_ESRCH }


option POSIX_SCHED_GETPARAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_getparam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_GETPARAM_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_getparam()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_GETPARAM_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_getparam()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  sched_getscheduler_spec                                     { POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_CONDITION_ON_ESRCH }


option POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_getscheduler()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_getscheduler()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_GETSCHEDULER_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_getscheduler()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  sched_rr_get_interval_spec                                     { POSIX_SCHED_RR_GET_INTERVAL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_RR_GET_INTERVAL_HAS_EXTRA_CONDITION_ON_ESRCH }



option POSIX_SCHED_RR_GET_INTERVAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_rr_get_interval()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_RR_GET_INTERVAL_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_rr_get_interval()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  sched_setparam_spec                                     { POSIX_SCHED_SETPARAM_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_ESRCH }


option POSIX_SCHED_SETPARAM_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_setparam()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setparam()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setparam()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


option POSIX_SCHED_SETPARAM_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setparam()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  sched_setscheduler_spec                                     { POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_ESRCH }



option POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, then current implementation of sched_setscheduler()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setscheduler()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setscheduler()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



option POSIX_SCHED_SETSCHEDULER_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "process/scheduler/process_scheduler_config.h"
    description     /@If this constant is set to 1, the current implementation of sched_setscheduler()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}




scope Root global                                               { TEST_FILES_ROOT,
                                                                  AGENT_LOG,
                                                                  TEST_DATA_PATH,
                                                                  TEST_QUALITY_LEVEL,
                                                                  USER_NAME_TESTER,
                                                                  XDRREC_EXTENDED,
                                                                  BLOCKED_TARGET_OPERATION_DELAY,
                                                                    TARGET_DATA_TYPES_ARCH,
                                                                    ErrorOK,
                                                                    ErrorPERM,
                                                                    ErrorNOENT,
                                                                    ErrorSRCH,
                                                                    ErrorINTR,
                                                                    ErrorIO,
                                                                    ErrorNXIO,
                                                                    Error2BIG,
                                                                    ErrorNOEXEC,
                                                                    ErrorBADF,
                                                                    ErrorCHILD,
                                                                    ErrorNOMEM,
                                                                    ErrorACCES,
                                                                    ErrorFAULT,
                                                                    ErrorNOTBLK,
                                                                    ErrorBUSY,
                                                                    ErrorEXIST,
                                                                    ErrorXDEV,
                                                                    ErrorNODEV,
                                                                    ErrorNOTDIR,
                                                                    ErrorISDIR,
                                                                    ErrorINVAL,
                                                                    ErrorNFILE,
                                                                    ErrorMFILE,
                                                                    ErrorNOTTY,
                                                                    ErrorTXTBSY,
                                                                    ErrorFBIG,
                                                                    ErrorNOSPC,
                                                                    ErrorSPIPE,
                                                                    ErrorROFS,
                                                                    ErrorMLINK,
                                                                    ErrorPIPE,
                                                                    ErrorDOM,
                                                                    ErrorRANGE,
                                                                    ErrorDEADLK,
                                                                    ErrorNAMETOOLONG,
                                                                    ErrorNOLCK,
                                                                    ErrorNOSYS,
                                                                    ErrorNOTEMPTY,
                                                                    ErrorLOOP,
                                                                    ErrorNOMSG,
                                                                    ErrorIDRM,
                                                                    ErrorCHRNG,
                                                                    ErrorL2NSYNC,
                                                                    ErrorL3HLT,
                                                                    ErrorL3RST,
                                                                    ErrorLNRNG,
                                                                    ErrorUNATCH,
                                                                    ErrorNOANO,
                                                                    ErrorBADRQC,
                                                                    ErrorBADSLT,
                                                                    ErrorBFONT,
                                                                    ErrorNOSTR,
                                                                    ErrorNODATA,
                                                                    ErrorTIME,
                                                                    ErrorNOSR,
                                                                    ErrorNONET,
                                                                    ErrorNOPKG,
                                                                    ErrorREMOTE,
                                                                    ErrorNOLINK,
                                                                    ErrorADV,
                                                                    ErrorSRMNT,
                                                                    ErrorCOMM,
                                                                    ErrorPROTO,
                                                                    ErrorMULTIHOP,
                                                                    ErrorDOTDOT,
                                                                    ErrorBADMSG,
                                                                    ErrorOVERFLOW,
                                                                    ErrorNOTUNIQ,
                                                                    ErrorBADFD,
                                                                    ErrorREMCHG,
                                                                    ErrorLIBACC,
                                                                    ErrorLIBBAD,
                                                                    ErrorLIBSCN,
                                                                    ErrorLIBMAX,
                                                                    ErrorLIBEXEC,
                                                                    ErrorILSEQ,
                                                                    ErrorRESTART,
                                                                    ErrorSTRPIPE,
                                                                    ErrorUSERS,
                                                                    ErrorNOTSOCK,
                                                                    ErrorDESTADDRREQ,
                                                                    ErrorMSGSIZE,
                                                                    ErrorPROTOTYPE,
                                                                    ErrorNOPROTOOPT,
                                                                    ErrorPROTONOSUPPORT,
                                                                    ErrorSOCKTNOSUPPORT,
                                                                    ErrorOPNOTSUPP,
                                                                    ErrorPFNOSUPPORT,
                                                                    ErrorAFNOSUPPORT,
                                                                    ErrorADDRINUSE,
                                                                    ErrorADDRNOTAVAIL,
                                                                    ErrorNETDOWN,
                                                                    ErrorNETUNREACH,
                                                                    ErrorNETRESET,
                                                                    ErrorCONNABORTED,
                                                                    ErrorCONNRESET,
                                                                    ErrorNOBUFS,
                                                                    ErrorISCONN,
                                                                    ErrorNOTCONN,
                                                                    ErrorSHUTDOWN,
                                                                    ErrorTOOMANYREFS,
                                                                    ErrorTIMEDOUT,
                                                                    ErrorCONNREFUSED,
                                                                    ErrorHOSTDOWN,
                                                                    ErrorHOSTUNREACH,
                                                                    ErrorALREADY,
                                                                    ErrorINPROGRESS,
                                                                    ErrorSTALE,
                                                                    ErrorUCLEAN,
                                                                    ErrorNOTNAM,
                                                                    ErrorNAVAIL,
                                                                    ErrorISNAM,
                                                                    ErrorREMOTEIO,
                                                                    ErrorDQUOT,
                                                                    ErrorNOMEDIUM,
                                                                    ErrorMEDIUMTYPE,
                                                                    ErrorCANCELED,
                                                                    ErrorWOULDBLOCK,
                                                                    ErrorAGAIN,
                                                                    ErrorNOTSUP,

                                                                    SignalHUP,
                                                                    SignalUSR1,
                                                                    SignalSEGV,
                                                                    SignalUSR2,
                                                                    SignalPIPE,
                                                                    SignalALRM,
                                                                    SignalTERM,
                                                                    SignalSTKFLT,
                                                                    SignalCHLD,
                                                                    SignalCONT,
                                                                    SignalSTOP,
                                                                    SignalINT,
                                                                    SignalTSTP,
                                                                    SignalTTIN,
                                                                    SignalTTOU,
                                                                    SignalURG,
                                                                    SignalXCPU,
                                                                    SignalXFSZ,
                                                                    SignalVTALRM,
                                                                    SignalPROF,
                                                                    SignalWINCH,
                                                                    SignalIO,
                                                                    SignalQUIT,
                                                                    SignalPWR,
                                                                    SignalSYS,
                                                                    SignalUNUSED,
                                                                    SignalILL,
                                                                    SignalTRAP,
                                                                    SignalABRT,
                                                                    SignalIOT,
                                                                    SignalBUS,
                                                                    SignalFPE,
                                                                    SignalKILL,
                                                                    SignalCLD,
                                                                    SignalPOLL }

option XDRREC_EXTENDED {
    type            "bool"
    kind            "var"
    destination     "socket/rpc/xdr_config.h"
    description     /@LSB 3.1 does not contain definitions for xdrrec_skiprecord and xdrrec_endofrecord
                      while these functions are actually present on most systems. We avoiding calls to
                      these functions to let it work on pure-LSB 3.1 environment.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


option TEST_FILES_ROOT {
    type            "string"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@The directory containing files to hold temporary files used by test system.@/
    values {
    default:        1 /@/tmp/olver@/
    }
}

option AGENT_LOG {
    type            "string"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@The agent log file name on the target machine.@/
    values {
    default:        1 /@/tmp/olver-log/agent.log@/
    }
}

option TEST_DATA_PATH {
    type            "string"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@The directory containing statically generated test data.@/
    values {
    default:        1 /@../src/testdata@/
    }
}

option USER_NAME_TESTER {
    type            "string"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@The name of unprivileged user to be used in the testing process.@/
    values {
    default:        1 /@tester@/
    }
}

option TEST_QUALITY_LEVEL {
    type            "set"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@The level of quality of the testing.@/
    values {
    default:         1  CONFORMANCE_TEST_QUALITY_LEVEL   /@Conformance test quality level@/
                     2  MEDIUM_TEST_QUALITY_LEVEL        /@Medium test quality level@/
                     3  FULL_TEST_QUALITY_LEVEL          /@Full test quality level@/
    }
}

option BLOCKED_TARGET_OPERATION_DELAY {
    type            "int"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@This constant determines the number of milliseconds
                      the test system waits while blocked target operation
                      starting@/
    values {
    default:         10 /@10@/
    }
}

option TARGET_DATA_TYPES_ARCH {
    type            "set"
    kind            "var"
    destination     "config/test_system_config.h"
    description     /@Target platform architecture@/
    values {
    default:         1  LSB_ARCH_IA32       /@IA32@/
                     2  LSB_ARCH_IA64       /@IA64@/
                     3  LSB_ARCH_PPC32      /@PPC32@/
                     4  LSB_ARCH_PPC64      /@PPC64@/
                     5  LSB_ARCH_S390       /@S390@/
                     6  LSB_ARCH_S390X      /@S390X@/
                     7  LSB_ARCH_AMD64      /@AMD64@/
    }
}

option ErrorOK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 0 /@ 0 @/
    }
}

option ErrorPERM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Operation not permitted. @/
    values {
        default: 1 /@ 1 @/
    }
}

option ErrorNOENT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No such file or directory. @/
    values {
        default: 2 /@ 2 @/
    }
}

option ErrorSRCH {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No such process. @/
    values {
        default: 3 /@ 3 @/
    }
}

option ErrorINTR {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Interrupted function. @/
    values {
        default: 4 /@ 4 @/
    }
}

option ErrorIO {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ I/O error. @/
    values {
        default: 5 /@ 5 @/
    }
}

option ErrorNXIO {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No such device or address. @/
    values {
        default: 6 /@ 6 @/
    }
}

option Error2BIG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Argument list too long. @/
    values {
        default: 7 /@ 7 @/
    }
}

option ErrorNOEXEC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Executable file format error. @/
    values {
        default: 8 /@ 8 @/
    }
}

option ErrorBADF {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Bad file descriptor. @/
    values {
        default: 9 /@ 9 @/
    }
}

option ErrorCHILD {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No child processes. @/
    values {
        default: 10 /@ 10 @/
    }
}

option ErrorAGAIN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Resource unavailable, try again (may be the same value as [EWOULDBLOCK]). @/
    values {
        default: 11 /@ 11 @/
    }
}

option ErrorNOMEM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Not enough space. @/
    values {
        default: 12 /@ 12 @/
    }
}

option ErrorACCES {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Permission denied. @/
    values {
        default: 13 /@ 13 @/
    }
}

option ErrorFAULT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Bad address. @/
    values {
        default: 14 /@ 14 @/
    }
}

option ErrorNOTBLK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 15 /@ 15 @/
    }
}

option ErrorBUSY {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Device or resource busy. @/
    values {
        default: 16 /@ 16 @/
    }
}

option ErrorEXIST {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ File exists. @/
    values {
        default: 17 /@ 17 @/
    }
}

option ErrorXDEV {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Cross-device link. @/
    values {
        default: 18 /@ 18 @/
    }
}

option ErrorNODEV {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No such device. @/
    values {
        default: 19 /@ 19 @/
    }
}

option ErrorNOTDIR {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Not a directory. @/
    values {
        default: 20 /@ 20 @/
    }
}

option ErrorISDIR {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Is a directory. @/
    values {
        default: 21 /@ 21 @/
    }
}

option ErrorINVAL {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Invalid argument. @/
    values {
        default: 22 /@ 22 @/
    }
}

option ErrorNFILE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Too many files open in system. @/
    values {
        default: 23 /@ 23 @/
    }
}

option ErrorMFILE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Too many open files. @/
    values {
        default: 24 /@ 24 @/
    }
}

option ErrorNOTTY {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Inappropriate I/O control operation. @/
    values {
        default: 25 /@ 25 @/
    }
}

option ErrorTXTBSY {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Text file busy. @/
    values {
        default: 26 /@ 26 @/
    }
}

option ErrorFBIG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ File too large. @/
    values {
        default: 27 /@ 27 @/
    }
}

option ErrorNOSPC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No space left on device. @/
    values {
        default: 28 /@ 28 @/
    }
}

option ErrorSPIPE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Invalid seek. @/
    values {
        default: 29 /@ 29 @/
    }
}

option ErrorROFS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Read-only file system. @/
    values {
        default: 30 /@ 30 @/
    }
}

option ErrorMLINK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Too many links. @/
    values {
        default: 31 /@ 31 @/
    }
}

option ErrorPIPE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Broken pipe. @/
    values {
        default: 32 /@ 32 @/
    }
}

option ErrorDOM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Mathematics argument out of domain of function. @/
    values {
        default: 33 /@ 33 @/
    }
}

option ErrorRANGE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Result too large. @/
    values {
        default: 34 /@ 34 @/
    }
}

option ErrorDEADLK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Resource deadlock would occur. @/
    values {
        default: 35 /@ 35 @/
    }
}

option ErrorNAMETOOLONG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Filename too long. @/
    values {
        default: 36 /@ 36 @/
    }
}

option ErrorNOLCK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No locks available. @/
    values {
        default: 37 /@ 37 @/
    }
}

option ErrorNOSYS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Function not supported. @/
    values {
        default: 38 /@ 38 @/
    }
}

option ErrorNOTEMPTY {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Directory not empty. @/
    values {
        default: 39 /@ 39 @/
    }
}

option ErrorLOOP {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Too many levels of symbolic links. @/
    values {
        default: 40 /@ 40 @/
    }
}

option ErrorNOMSG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No message of the desired type. @/
    values {
        default: 42 /@ 42 @/
    }
}

option ErrorIDRM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Identifier removed. @/
    values {
        default: 43 /@ 43 @/
    }
}

option ErrorCHRNG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 44 /@ 44 @/
    }
}

option ErrorL2NSYNC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 45 /@ 45 @/
    }
}

option ErrorL3HLT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 46 /@ 46 @/
    }
}

option ErrorL3RST {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 47 /@ 47 @/
    }
}

option ErrorLNRNG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 48 /@ 48 @/
    }
}

option ErrorUNATCH {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 49 /@ 49 @/
    }
}

option ErrorNOANO {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 55 /@ 55 @/
    }
}

option ErrorBADRQC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 56 /@ 56 @/
    }
}

option ErrorBADSLT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 57 /@ 57 @/
    }
}

option ErrorBFONT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 59 /@ 59 @/
    }
}

option ErrorNOSTR {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Not a STREAM. @/
    values {
        default: 60 /@ 60 @/
    }
}

option ErrorNODATA {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No message is available on the STRErrorAM head read queue. @/
    values {
        default: 61 /@ 61 @/
    }
}

option ErrorTIME {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Stream ioctl() timeout. @/
    values {
        default: 62 /@ 62 @/
    }
}

option ErrorNOSR {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No STREAM resources. @/
    values {
        default: 63 /@ 63 @/
    }
}

option ErrorNONET {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 64 /@ 64 @/
    }
}

option ErrorNOPKG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 65 /@ 65 @/
    }
}

option ErrorREMOTE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 66 /@ 66 @/
    }
}

option ErrorNOLINK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Reserved. @/
    values {
        default: 67 /@ 67 @/
    }
}

option ErrorADV {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 68 /@ 68 @/
    }
}

option ErrorSRMNT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 69 /@ 69 @/
    }
}

option ErrorCOMM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 70 /@ 70 @/
    }
}

option ErrorPROTO {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Protocol error. @/
    values {
        default: 71 /@ 71 @/
    }
}

option ErrorMULTIHOP {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Reserved. @/
    values {
        default: 72 /@ 72 @/
    }
}

option ErrorDOTDOT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 73 /@ 73 @/
    }
}

option ErrorBADMSG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Bad message. @/
    values {
        default: 74 /@ 74 @/
    }
}

option ErrorOVERFLOW {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Value too large to be stored in data type. @/
    values {
        default: 75 /@ 75 @/
    }
}

option ErrorNOTUNIQ {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 76 /@ 76 @/
    }
}

option ErrorBADFD {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 77 /@ 77 @/
    }
}

option ErrorREMCHG {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 78 /@ 78 @/
    }
}

option ErrorLIBACC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 79 /@ 79 @/
    }
}

option ErrorLIBBAD {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 80 /@ 80 @/
    }
}

option ErrorLIBSCN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 81 /@ 81 @/
    }
}

option ErrorLIBMAX {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 82 /@ 82 @/
    }
}

option ErrorLIBEXEC {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 83 /@ 83 @/
    }
}

option ErrorILSEQ {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Illegal byte sequence. @/
    values {
        default: 84 /@ 84 @/
    }
}

option ErrorRESTART {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 85 /@ 85 @/
    }
}

option ErrorSTRPIPE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 86 /@ 86 @/
    }
}

option ErrorUSERS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 87 /@ 87 @/
    }
}

option ErrorNOTSOCK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Not a socket. @/
    values {
        default: 88 /@ 88 @/
    }
}

option ErrorDESTADDRREQ {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Destination address required. @/
    values {
        default: 89 /@ 89 @/
    }
}

option ErrorMSGSIZE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Message too large. @/
    values {
        default: 90 /@ 90 @/
    }
}

option ErrorPROTOTYPE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Protocol wrong type for socket. @/
    values {
        default: 91 /@ 91 @/
    }
}

option ErrorNOPROTOOPT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Protocol not available. @/
    values {
        default: 92 /@ 92 @/
    }
}

option ErrorPROTONOSUPPORT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Protocol not supported. @/
    values {
        default: 93 /@ 93 @/
    }
}

option ErrorSOCKTNOSUPPORT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 94 /@ 94 @/
    }
}

option ErrorOPNOTSUPP {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Operation not supported on socket. @/
    values {
        default: 95 /@ 95 @/
    }
}

option ErrorPFNOSUPPORT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 96 /@ 96 @/
    }
}

option ErrorAFNOSUPPORT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Address family not supported. @/
    values {
        default: 97 /@ 97 @/
    }
}

option ErrorADDRINUSE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Address in use. @/
    values {
        default: 98 /@ 98 @/
    }
}

option ErrorADDRNOTAVAIL {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Address not available. @/
    values {
        default: 99 /@ 99 @/
    }
}

option ErrorNETDOWN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Network is down. @/
    values {
        default: 100 /@ 100 @/
    }
}

option ErrorNETUNREACH {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Network unreachable. @/
    values {
        default: 101 /@ 101 @/
    }
}

option ErrorNETRESET {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection aborted by network. @/
    values {
        default: 102 /@ 102 @/
    }
}

option ErrorCONNABORTED {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection aborted. @/
    values {
        default: 103 /@ 103 @/
    }
}

option ErrorCONNRESET {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection reset. @/
    values {
        default: 104 /@ 104 @/
    }
}

option ErrorNOBUFS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ No buffer space available. @/
    values {
        default: 105 /@ 105 @/
    }
}

option ErrorISCONN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Socket is connected. @/
    values {
        default: 106 /@ 106 @/
    }
}

option ErrorNOTCONN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ The socket is not connected. @/
    values {
        default: 107 /@ 107 @/
    }
}

option ErrorSHUTDOWN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 108 /@ 108 @/
    }
}

option ErrorTOOMANYREFS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 109 /@ 109 @/
    }
}

option ErrorTIMEDOUT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection timed out. @/
    values {
        default: 110 /@ 110 @/
    }
}

option ErrorCONNREFUSED {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection refused. @/
    values {
        default: 111 /@ 111 @/
    }
}

option ErrorHOSTDOWN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 112 /@ 112 @/
    }
}

option ErrorHOSTUNREACH {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Host is unreachable. @/
    values {
        default: 113 /@ 113 @/
    }
}

option ErrorALREADY {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Connection already in progress. @/
    values {
        default: 114 /@ 114 @/
    }
}

option ErrorINPROGRESS {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Operation in progress. @/
    values {
        default: 115 /@ 115 @/
    }
}

option ErrorSTALE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Reserved. @/
    values {
        default: 116 /@ 116 @/
    }
}

option ErrorUCLEAN {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 117 /@ 117 @/
    }
}

option ErrorNOTNAM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 118 /@ 118 @/
    }
}

option ErrorNAVAIL {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 119 /@ 119 @/
    }
}

option ErrorISNAM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 120 /@ 120 @/
    }
}

option ErrorREMOTEIO {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 121 /@ 121 @/
    }
}

option ErrorDQUOT {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Reserved. @/
    values {
        default: 122 /@ 122 @/
    }
}

option ErrorNOMEDIUM {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 123 /@ 123 @/
    }
}

option ErrorMEDIUMTYPE {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ @/
    values {
        default: 124 /@ 124 @/
    }
}

option ErrorCANCELED {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Operation canceled. @/
    values {
        default: 125 /@ 125 @/
    }
}

option ErrorWOULDBLOCK {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Operation would block (may be the same value as [EAGAIN]). @/
    values {
        default: 11 /@ 11 @/
    }
}

option ErrorNOTSUP {
    type "int"
    kind "var"
    destination "data/errno_config.h"
    description /@ Not supported. @/
    values {
        default: 95 /@ 95 @/
    }
}

option SignalHUP {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Hangup. @/
    values {
        default: 1 /@ 1 @/
    }
}

option SignalUSR1 {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ User-defined signal 1. @/
    values {
        default: 10 /@ 10 @/
    }
}

option SignalSEGV {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Invalid memory reference. @/
    values {
        default: 11 /@ 11 @/
    }
}

option SignalUSR2 {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ User-defined signal 2. @/
    values {
        default: 12 /@ 12 @/
    }
}

option SignalPIPE {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Write on a pipe with no one to read it. @/
    values {
        default: 13 /@ 13 @/
    }
}

option SignalALRM {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Alarm clock. @/
    values {
        default: 14 /@ 14 @/
    }
}

option SignalTERM {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Termination signal. @/
    values {
        default: 15 /@ 15 @/
    }
}

option SignalSTKFLT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 16 /@ 16 @/
    }
}

option SignalCHLD {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Child process terminated, stopped, or continued. @/
    values {
        default: 17 /@ 17 @/
    }
}

option SignalCONT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Continue executing, if stopped. @/
    values {
        default: 18 /@ 18 @/
    }
}

option SignalSTOP {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Stop executing (cannot be caught or ignored). @/
    values {
        default: 19 /@ 19 @/
    }
}

option SignalINT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Terminal interrupt signal. @/
    values {
        default: 2 /@ 2 @/
    }
}

option SignalTSTP {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Terminal stop signal. @/
    values {
        default: 20 /@ 20 @/
    }
}

option SignalTTIN {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Background process attempting read. @/
    values {
        default: 21 /@ 21 @/
    }
}

option SignalTTOU {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Background process attempting write. @/
    values {
        default: 22 /@ 22 @/
    }
}

option SignalURG {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ High bandwidth data is available at a socket. @/
    values {
        default: 23 /@ 23 @/
    }
}

option SignalXCPU {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ CPU time limit exceeded. @/
    values {
        default: 24 /@ 24 @/
    }
}

option SignalXFSZ {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ File size limit exceeded. @/
    values {
        default: 25 /@ 25 @/
    }
}

option SignalVTALRM {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Virtual timer expired. @/
    values {
        default: 26 /@ 26 @/
    }
}

option SignalPROF {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Profiling timer expired. @/
    values {
        default: 27 /@ 27 @/
    }
}

option SignalWINCH {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 28 /@ 28 @/
    }
}

option SignalIO {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 29 /@ 29 @/
    }
}

option SignalQUIT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Terminal quit signal. @/
    values {
        default: 3 /@ 3 @/
    }
}

option SignalPWR {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 30 /@ 30 @/
    }
}

option SignalSYS {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Bad system call. @/
    values {
        default: 31 /@ 31 @/
    }
}

option SignalUNUSED {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 31 /@ 31 @/
    }
}

option SignalILL {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Illegal instruction. @/
    values {
        default: 4 /@ 4 @/
    }
}

option SignalTRAP {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Trace/breakpoint trap. @/
    values {
        default: 5 /@ 5 @/
    }
}

option SignalABRT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Process abort signal. @/
    values {
        default: 6 /@ 6 @/
    }
}

option SignalIOT {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 6 /@ 6 @/
    }
}

option SignalBUS {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Access to an undefined portion of a memory object. @/
    values {
        default: 7 /@ 7 @/
    }
}

option SignalFPE {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Erroneous arithmetic operation. @/
    values {
        default: 8 /@ 8 @/
    }
}

option SignalKILL {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Kill (cannot be caught or ignored). @/
    values {
        default: 9 /@ 9 @/
    }
}

option SignalCLD {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ @/
    values {
        default: 17 /@ 17 @/
    }
}

option SignalPOLL {
    type "int"
    kind "var"
    destination "data/signal_config.h"
    description /@ Pollable event. @/
    values {
        default: 29 /@ 29 @/
    }
}

scope  wcstod_spec                                     { POSIX_WCSTOD_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_WCSTOD_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_WCSTOD_FAILS_WITH_EINVAL,
                                                   POSIX_WCSTOD_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_WCSTOD_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, then current implementation of wcstod()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOD_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstod()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOD_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the function wcstod() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WCSTOD_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the current implementation of wcstod()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  __wcstod_internal_spec                                     { LSB___WCSTOD_INTERNAL_HAS_EXTRA_ERROR_CODES,
                                                   LSB___WCSTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB___WCSTOD_INTERNAL_FAILS_WITH_EINVAL,
                                                   LSB___WCSTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB___WCSTOD_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, then current implementation of __wcstod_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstod_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOD_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the function __wcstod_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___WCSTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/wstrreal_config.h"
    description     /@If this constant is set to 1, the current implementation of __wcstod_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  __strtod_internal_spec                                     { LSB___STRTOD_INTERNAL_HAS_EXTRA_ERROR_CODES,
                                                   LSB___STRTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   LSB___STRTOD_INTERNAL_FAILS_WITH_EINVAL,
                                                   LSB___STRTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL }

option LSB___STRTOD_INTERNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, then current implementation of __strtod_internal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___STRTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtod_internal()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___STRTOD_INTERNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the function __strtod_internal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB___STRTOD_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strreal_config.h"
    description     /@If this constant is set to 1, the current implementation of __strtod_internal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fscanf_spec                                     { POSIX_FSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_FSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_FSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_FSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of fscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function fscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of fscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function fscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of fscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  scanf_spec                                     { POSIX_SCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_SCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SCANF_FAILS_WITH_EINVAL,
                                                   POSIX_SCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of scanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function scanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of scanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function scanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of scanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sscanf_spec                                     { POSIX_SSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_SSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_SSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of sscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function sscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of sscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function sscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of sscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vfscanf_spec                                     { POSIX_VFSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VFSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VFSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VFSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VFSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VFSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vfscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vfscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vfscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vscanf_spec                                     { POSIX_VSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vsscanf_spec                                     { POSIX_VSSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VSSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VSSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VSSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VSSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VSSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vsscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vsscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the function vsscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/scanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vsscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  fwscanf_spec                                     { POSIX_FWSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_FWSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_FWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_FWSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_FWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_FWSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of fwscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function fwscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of fwscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function fwscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_FWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of fwscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  wscanf_spec                                     { POSIX_WSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_WSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_WSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_WSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_WSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_WSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of wscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function wscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of wscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function wscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_WSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of wscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  swscanf_spec                                     { POSIX_SWSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SWSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_SWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_SWSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_SWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SWSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of swscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function swscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of swscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function swscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of swscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vfwscanf_spec                                     { POSIX_VFWSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VFWSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VFWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VFWSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VFWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VFWSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vfwscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vfwscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfwscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vfwscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VFWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vfwscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vwscanf_spec                                     { POSIX_VWSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VWSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VWSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VWSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vwscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vwscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vwscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vwscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vwscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  vswscanf_spec                                     { POSIX_VSWSCANF_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_VSWSCANF_FAILS_WITH_EILSEQ,
                                                   POSIX_VSWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ,
                                                   POSIX_VSWSCANF_FAILS_WITH_EINVAL,
                                                   POSIX_VSWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_VSWSCANF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, then current implementation of vswscanf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWSCANF_FAILS_WITH_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vswscanf() ensures
                      that the error EILSEQ will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWSCANF_HAS_EXTRA_CONDITION_ON_EILSEQ {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vswscanf()
                      may generate error code of EILSEQ under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWSCANF_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the function vswscanf() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_VSWSCANF_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "util/format/wscanf_config.h"
    description     /@If this constant is set to 1, the current implementation of vswscanf()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  acosh_spec                                     { POSIX_ACOSH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ACOSH_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_ACOSH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of acosh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ACOSH_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of acosh()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  asinh_spec                                     { POSIX_ASINH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ASINH_FAILS_WITH_ERANGE,
                                                   POSIX_ASINH_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_ASINH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of asinh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ASINH_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the function asinh() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ASINH_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of asinh()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  atanh_spec                                     { POSIX_ATANH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_ATANH_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_ATANH_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_ATANH_FAILS_WITH_ERANGE }

option POSIX_ATANH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of atanh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATANH_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of atanh()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATANH_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of atanh()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_ATANH_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the function atanh() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  cosh_spec                                     { POSIX_COSH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_COSH_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_COSH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of cosh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_COSH_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of cosh()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sinh_spec                                     { POSIX_SINH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SINH_FAILS_WITH_ERANGE,
                                                   POSIX_SINH_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_SINH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of sinh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SINH_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the function sinh() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SINH_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of sinh()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  tanh_spec                                     { POSIX_TANH_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_TANH_FAILS_WITH_ERANGE,
                                                   POSIX_TANH_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_TANH_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, then current implementation of tanh()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TANH_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the function tanh() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_TANH_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/hyper/hyper_config.h"
    description     /@If this constant is set to 1, the current implementation of tanh()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  pause_spec                                     { POSIX_PAUSE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_PAUSE_HAS_EXTRA_CONDITION_ON_EINTR }

option POSIX_PAUSE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of pause()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_PAUSE_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of pause()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  sigaltstack_spec                                     { POSIX_SIGALTSTACK_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_ENOMEM,
                                                   POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_EPERM }

option POSIX_SIGALTSTACK_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of sigaltstack()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigaltstack()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_ENOMEM {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigaltstack()
                      may generate error code of ENOMEM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGALTSTACK_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigaltstack()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  siginterrupt_spec                                     { POSIX_SIGINTERRUPT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIGINTERRUPT_HAS_EXTRA_CONDITION_ON_EINVAL }

option POSIX_SIGINTERRUPT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of siginterrupt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGINTERRUPT_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of siginterrupt()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  signal_spec                                     { POSIX_SIGNAL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGNAL_FAILS_WITH_EINVAL }

option POSIX_SIGNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of signal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of signal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the function signal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  bsd_signal_spec                                     { POSIX_BSD_SIGNAL_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_BSD_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_BSD_SIGNAL_HAS_EXTRA_CONDITION_ON_ENOTSUP,
                                                   POSIX_BSD_SIGNAL_FAILS_WITH_EINVAL }

option POSIX_BSD_SIGNAL_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of bsd_signal()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BSD_SIGNAL_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of bsd_signal()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BSD_SIGNAL_HAS_EXTRA_CONDITION_ON_ENOTSUP {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of bsd_signal()
                      may generate error code of ENOTSUP under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_BSD_SIGNAL_FAILS_WITH_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the function bsd_signal() ensures
                      that the error EINVAL will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  exp_spec                                     { POSIX_EXP_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_EXP_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_EXP_FAILS_WITH_ERANGE }

option POSIX_EXP_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of exp()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXP_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of exp()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXP_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function exp() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  exp2_spec                                     { POSIX_EXP2_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_EXP2_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_EXP2_FAILS_WITH_ERANGE }

option POSIX_EXP2_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of exp2()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXP2_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of exp2()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXP2_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function exp2() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  expm1_spec                                     { POSIX_EXPM1_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_EXPM1_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_EXPM1_FAILS_WITH_ERANGE }

option POSIX_EXPM1_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of expm1()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXPM1_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of expm1()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_EXPM1_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function expm1() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  pow10_spec                                     { POSIX_POW10_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_POW10_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_POW10_FAILS_WITH_ERANGE }

option POSIX_POW10_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of exp2()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POW10_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of exp2()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POW10_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function exp2() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  log_spec                                     { POSIX_LOG_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LOG_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_LOG_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_LOG_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of log()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  log2_spec                                     { POSIX_LOG2_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LOG2_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_LOG2_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_LOG2_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of log2()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG2_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log2()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG2_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log2()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  log10_spec                                     { POSIX_LOG10_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LOG10_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_LOG10_HAS_EXTRA_CONDITION_ON_ERANGE }

option POSIX_LOG10_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of log10()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG10_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log10()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG10_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log10()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}



scope  log1p_spec                                     { POSIX_LOG1P_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_LOG1P_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_LOG1P_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_LOG1P_FAILS_WITH_ERANGE }

option POSIX_LOG1P_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of log1p()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG1P_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log1p()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG1P_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of log1p()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_LOG1P_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function log1p() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  hypot_spec                                     { POSIX_HYPOT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_HYPOT_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_HYPOT_FAILS_WITH_ERANGE }

option POSIX_HYPOT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of hypot()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_HYPOT_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of hypot()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_HYPOT_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function hypot() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  sqrt_spec                                     { POSIX_SQRT_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SQRT_HAS_EXTRA_CONDITION_ON_EDOM }

option POSIX_SQRT_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of sqrt()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SQRT_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of sqrt()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  pow_spec                                     { POSIX_POW_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_POW_HAS_EXTRA_CONDITION_ON_EDOM,
                                                   POSIX_POW_HAS_EXTRA_CONDITION_ON_ERANGE,
                                                   POSIX_POW_FAILS_WITH_ERANGE }

option POSIX_POW_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, then current implementation of pow()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POW_HAS_EXTRA_CONDITION_ON_EDOM {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of pow()
                      may generate error code of EDOM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POW_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the current implementation of pow()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_POW_FAILS_WITH_ERANGE {
    type            "bool"
    kind            "var"
    destination     "math/exp/exp_config.h"
    description     /@If this constant is set to 1, the function pow() ensures
                      that the error ERANGE will be found and correctly handled.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  sigsuspend_spec                                     { POSIX_SIGSUSPEND_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIGSUSPEND_HAS_EXTRA_CONDITION_ON_EINTR }

option POSIX_SIGSUSPEND_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, then current implementation of sigsuspend()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGSUSPEND_HAS_EXTRA_CONDITION_ON_EINTR {
    type            "bool"
    kind            "var"
    destination     "signal/sigaction/sigaction_config.h"
    description     /@If this constant is set to 1, the current implementation of sigsuspend()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope math                                                  {CHECK_EXTENDED_REQ,
                                                             COMPARE_PRECISION}

option CHECK_EXTENDED_REQ {
    type            "bool"
    kind            "var"
    destination     "math/math/math_config.h"
    description     /@If this constant is set to 1, the current implementation of sigsuspend()
                      may generate error code of EINTR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option COMPARE_PRECISION {
    type            "int"
    kind            "var"
    destination     "math/math/math_config.h"
    description     /@This constant determine the precision of comparison of floating-point
                      numbers. Value 0 means absolutly precisly comparison. Every next
                      number will decrease amount of comparign numerals. This values should
                      be in the range [0; 23] @/
    values {
    default:         15 /@0@/
    }
}

scope  sigqueue_spec                                     { POSIX_SIGQUEUE_HAS_EXTRA_ERROR_CODES,
                                                   POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EAGAIN,
                                                   POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EPERM,
                                                   POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_ESRCH }

option POSIX_SIGQUEUE_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, then current implementation of sigqueue()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EAGAIN {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of sigqueue()
                      may generate error code of EAGAIN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of sigqueue()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_EPERM {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of sigqueue()
                      may generate error code of EPERM under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option POSIX_SIGQUEUE_HAS_EXTRA_CONDITION_ON_ESRCH {
    type            "bool"
    kind            "var"
    destination     "signal/sigsend/sigsend_config.h"
    description     /@If this constant is set to 1, the current implementation of sigqueue()
                      may generate error code of ESRCH under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  pam_close_session_spec                                     {LSB_PAM_CLOSE_SESSION_HAS_EXTRA_ERROR_CODES}

option LSB_PAM_CLOSE_SESSION_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/pam/pam_config.h"
    description     /@If this constant is set to 1, then current implementation of pam_close_session()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                 0  /@False@/
    default:     1  /@True@/
    }
}

scope  pam_open_session_spec                                     {LSB_PAM_OPEN_SESSION_HAS_EXTRA_ERROR_CODES}

option LSB_PAM_OPEN_SESSION_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/pam/pam_config.h"
    description     /@If this constant is set to 1, then current implementation of pam_open_session()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
              0  /@False@/
    default:  1  /@True@/
    }
}


scope  gzprintf_spec                                     { LSB_GZPRINTF_HAS_EXTRA_ERROR_CODES,
                                                   LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_ERRNO,
                                                   LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR,
                                                   LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR,
                                                   LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR }

option LSB_GZPRINTF_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, then current implementation of gzprintf()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_ERRNO {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzprintf()
                      may generate error code of Z_ERRNO under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_STREAM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzprintf()
                      may generate error code of Z_STREAM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_BUF_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzprintf()
                      may generate error code of Z_BUF_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_GZPRINTF_HAS_EXTRA_CONDITION_ON_Z_MEM_ERROR {
    type            "bool"
    kind            "var"
    destination     "util/compress/compress_config.h"
    description     /@If this constant is set to 1, the current implementation of gzprintf()
                      may generate error code of Z_MEM_ERROR under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  sockio_spec                                     { LSB_SOCKIO_HAS_EXTRA_ERROR_CODES,
                                                   LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EBADF,
                                                   LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EFAULT,
                                                   LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_ENOTTY,
                                                   LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EINVAL,
                                                   LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_ENOTCONN }

option LSB_SOCKIO_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, then current implementation of sockio()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                  0  /@False@/
    default:      1  /@True@/
    }
}

option LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EBADF {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockio()
                      may generate error code of EBADF under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EFAULT {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockio()
                      may generate error code of EFAULT under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockio()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_EINVAL {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockio()
                      may generate error code of EINVAL under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_SOCKIO_HAS_EXTRA_CONDITION_ON_ENOTCONN {
    type            "bool"
    kind            "var"
    destination     "socket/socket/socket_config.h"
    description     /@If this constant is set to 1, the current implementation of sockio()
                      may generate error code of ENOTCONN under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}


scope  login_tty_spec                                     { LSB_LOGIN_TTY_HAS_EXTRA_ERROR_CODES,
                                                   LSB_LOGIN_TTY_HAS_EXTRA_CONDITION_ON_ENOTTY }

option LSB_LOGIN_TTY_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, then current implementation of login_tty()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
                0  /@False@/
    default:    1  /@True@/
    }
}

option LSB_LOGIN_TTY_HAS_EXTRA_CONDITION_ON_ENOTTY {
    type            "bool"
    kind            "var"
    destination     "io/term/term_config.h"
    description     /@If this constant is set to 1, the current implementation of login_tty()
                      may generate error code of ENOTTY under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strtoq_spec                                     { LSB_STRTOQ_HAS_EXTRA_ERROR_CODES,
                                                   LSB_STRTOQ_HAS_EXTRA_CONDITION_ON_ERANGE }

option LSB_STRTOQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtoq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_STRTOQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtoq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

scope  strtouq_spec                                     { LSB_STRTOUQ_HAS_EXTRA_ERROR_CODES,
                                                   LSB_STRTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE }

option LSB_STRTOUQ_HAS_EXTRA_ERROR_CODES {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, then current implementation of strtouq()
                      may support additional errors not included in the list described in the
                      IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

option LSB_STRTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE {
    type            "bool"
    kind            "var"
    destination     "util/conversion/strint_config.h"
    description     /@If this constant is set to 1, the current implementation of strtouq()
                      may generate error code of ERANGE under circumstances other than those
                      described in the IEEE Std 1003.1, 2004 Edition.@/
    values {
    default:        0  /@False@/
                    1  /@True@/
    }
}

