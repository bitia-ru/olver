/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
#ifndef CORE_SEH_
#define CORE_SEH_

/********************************************************************/
/**                  Core Model Initialization                     **/
/********************************************************************/

void initPThreadModel(void);

/********************************************************************/
/**                          Blocked Calls                         **/
/********************************************************************/

/*
 * If a call of a target function is modelled as two events
 * (call of the function and getting control from the function), 
 * that function is called 'blocking'.
 *
 * A specification function modelling a call of a blocking function 
 * is called 'blocking' too.
 * 
 * A reaction modelling a getting control from a blocking function 
 * is called a 'return reaction'. 
 *
 * If a target function calls a callback function 
 * the call of the callback function shall be modelled as a reaction.
 * That reaction is called a 'callback reaction'.
 *
 * A callback function activating a new instance of the test agent
 * is called an 'active callback'.
 * 
 * Return from the callback function shall be modelled by 
 * a special specification function called a 'callback return'.
 */

/*
 * startBlockedCall shall be called in a state block of a blocking specification function.
 */
void startBlockedCall( CallContext context, Object* params );

/*
 * finishBlockedCall shall be called in a state block of a return reaction.
 */
Object* finishBlockedCall( CallContext context );

/*
 * interruptBlockedCall shall be called in a state block of an active callback reaction.
 */
void interruptBlockedCall( CallContext context );

/*
 * resumeBlockedCall shall be called in a state block of a callback return.
 */
void resumeBlockedCall( CallContext context );

/*
 * Returns the current blocked call of the thread 
 * or NULL if the thread is not blocked.
 */
Object* getBlockedCall( CallContext context );

/*
 * Returns the blocked call of the thread in the state describing by blocked_calls
 * or NULL if the thread is not blocked in that state.
 */
Object* findBlockedCall( Map* blocked_calls, CallContext context );

/*
 * Returns all blocked calls in the current state.
 */
Map* getBlockedCalls(void);

/*
 * .
 */
void threadShouldBeRun( ThreadId threadid );

/*
 * .
 */
bool isThreadReadyToBeRun( ThreadId threadid );

/*
 * .
 */
int getNumberOfThreadsReadyToBeRun(void);

/*
 * Puts into trace all threads marked as ready to be run.
 */
void traceThreadsReadyToBeRun(void);

/*
 * Puts into trace all blocked calls.
 */
void traceBlockedCalls(Map* blocked_calls);

/*
 * Returns true iff the last blocked call in the context
 * has been interrupted by a signal.
 */
bool isBlockedCallInterruptedBySignal( CallContext context );

/********************************************************************/
/**                           Appropriate Privileges               **/
/********************************************************************/

typedef struct 
{
    bool read;
    bool write;
    bool execute;
} AccessPrivileges;

Bool3 hasAppropriatePrivileges(CallContext context, AccessPrivileges priv, FileId fileId);

extern AccessPrivileges common_AccessPrivileges;

#define rmdir_AccessPrivileges common_AccessPrivileges
#define utime_AccessPrivileges common_AccessPrivileges
#define chmod_AccessPrivileges common_AccessPrivileges
#define chown_AccessPrivileges common_AccessPrivileges
#define access_AccessPrivileges common_AccessPrivileges
#define link_AccessPrivileges common_AccessPrivileges

/********************************************************************/
/**                          Memory Blocks                         **/
/********************************************************************/

List* getMemoryBlocks_VoidTPtr(VoidTPtr address);
List* getMemoryBlocks_CallContext(CallContext context);
List* getAllMemoryBlocks();

#endif /*CORE_SEH_*/
