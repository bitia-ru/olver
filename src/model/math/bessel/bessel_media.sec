/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "math/bessel/bessel_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathBesselSubsystem(void)
{
  // Set up mediators
    set_mediator_j0_spec(j0_media);
    set_mediator_j1_spec(j1_media);
    set_mediator_jn_spec(jn_media);
    set_mediator_y0_spec(y0_media);
    set_mediator_y1_spec(y1_media);
    set_mediator_yn_spec(yn_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** j0_spec **/
//This mediator refers to: j0f, j0, j0l
mediator j0_media for specification
Unifloat* j0_spec( CallContext context, Unifloat* x, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"j0f:$(unifloat)",
                           "j0:$(unifloat)", 
                           "j0l:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** j1_spec **/
//This mediator refers to: j1f, j1, j1l
mediator j1_media for specification
Unifloat* j1_spec( CallContext context, Unifloat* x, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"j1f:$(unifloat)",
                           "j1:$(unifloat)", 
                           "j1l:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** jn_spec **/
//This mediator refers to: jnf, jn, jnl
mediator jn_media for specification
Unifloat* jn_spec( CallContext context, IntT n, Unifloat* x, 
                   IntT round, IntT* ulp, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        char st[3][100] = {"jnf:$(int)$(unifloat)",
                           "jn:$(int)$(unifloat)", 
                           "jnl:$(int)$(unifloat)"};
        
        if ((CHECK_EXTENDED_REQ == 1) && (x->type == UniDoubleT))
        {
            format_TSCommand( &command, 
                              "BesselJ:$(int)$(unifloat)$(int)", 
                              create_IntTObj(n), x, 
                              create_IntTObj(round));
        }
        else
        {
            format_TSCommand( &command, 
                              st[x->type], 
                              create_IntTObj(n), x);
        }

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** y0_spec **/
//This mediator refers to: y0f, y0, y0l
mediator y0_media for specification
Unifloat* y0_spec( CallContext context, Unifloat* x, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"y0f:$(unifloat)",
                           "y0:$(unifloat)", 
                           "y0l:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** y1_spec **/
//This mediator refers to: y1f, y1, y1l
mediator y1_media for specification
Unifloat* y1_spec( CallContext context, Unifloat* x, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"y1f:$(unifloat)",
                           "y1:$(unifloat)", 
                           "y1l:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** yn_spec **/
//This mediator refers to: ynf, yn, ynl
mediator yn_media for specification
Unifloat* yn_spec( CallContext context, IntT n, Unifloat* x, 
                   IntT round, IntT* ulp, ErrorCode *errno)
{
   call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        char st[3][100] = {"ynf:$(int)$(unifloat)",
                           "yn:$(int)$(unifloat)", 
                           "ynl:$(int)$(unifloat)"};
    
        if ((CHECK_EXTENDED_REQ == 1) && (x->type == UniDoubleT))
        {
            format_TSCommand( &command, 
                              "BesselY:$(int)$(unifloat)$(int)", 
                              create_IntTObj(n), x, 
                              create_IntTObj(round));
        }
        else
        {
            format_TSCommand( &command, 
                              st[x->type], 
                              create_IntTObj(n), x);
        }

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


