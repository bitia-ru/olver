/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/real/tests/real_scenario.seh"
#include "math/real/real_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "math/math/math_data.seh"
#include <stdio.h>

static CallContext context;
static VoidTPtr ptr;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_real_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    initReqFilters();

    ptr = allocateMemoryBlock(context, 1024);

    setFinishMode(UNTIL_END); 
    
    return true;
}
static void finish_math_real_scenario(void)
{
    deallocateMemoryBlock(context, ptr);
    TEST_SCENARIO_VERDICT_VERBOSE(real_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool ceil_floor_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i, sign;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* par[7] = { 
            clone(Nan[type]),
            clone(Inf[type]),
            convertString_Unifloat(create_CString("2"), type),
            clone(Almost_Inf[type]),
            createZero_Unifloat(type),
            clone(Almost_Inf[type]),
            clone(Almost_Zero[type])
            };
        par[5]->exp = 1;
        for(i = 0; i < 7; i++)
            for(sign = 1; sign>-2; sign = sign - 2)
            {
                ceil_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                floor_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
            }
    }
    return true;
}

scenario bool copysign_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i, sign;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* par_x[8] = { 
            clone(Nan[type]),
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type),
            clone(Almost_Inf[type]),
            clone(Almost_Zero[type]),
            convertString_Unifloat(create_CString("123"), type)
            };
        Unifloat* par_y[8] = { 
            clone(Nan[type]),
            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createZero_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type)
            };
        for(i = 0; i<8; i++)
            for(sign = 1; sign>-2; sign = sign - 2)
                copysign_spec(context, 
                    changeSign_Unifloat(
                        round_Unifloat(par_x[i], leng_num[type]), sign),
                    changeSign_Unifloat(
                        round_Unifloat(par_y[i], leng_num[type]), sign));
    }
    return true;    
}

scenario
bool fabs_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i, sign;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* par[7] = { 
            clone(Nan[type]),
            clone(Inf[type]),
            convertString_Unifloat(create_CString("2"), type),
            clone(Almost_Inf[type]),
            createZero_Unifloat(type),
            clone(Almost_Inf[type]),
            clone(Almost_Zero[type])
            };
        par[5]->exp = 1;
        for(i = 0; i<7; i++)
            for(sign = 1; sign>-2; sign = sign - 2)
            {
                fabs_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign));
            }
    }
    return true;
}

scenario bool fdim_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i, sign;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* par_x[11] = { 
            clone(Nan[type]),
            clone(Nan[type]),
            createOne_Unifloat(type),

            clone(Inf[type]),
            createOne_Unifloat(type),

            createZero_Unifloat(type),
            createOne_Unifloat(type),

            clone(Almost_Zero[type]),

            convertString_Unifloat(create_CString("123"), type),
            convertString_Unifloat(create_CString("123"), type),
            clone(Inf[type])
            };
        Unifloat* par_y[11] = { 
            clone(Nan[type]),
            createOne_Unifloat(type),
            clone(Nan[type]),

            createOne_Unifloat(type),
            clone(Inf[type]),

            createOne_Unifloat(type),
            createZero_Unifloat(type),

            createZero_Unifloat(type),
            
            convertString_Unifloat(create_CString("123"), type),
            convertString_Unifloat(create_CString("-123"), type),
            clone(Inf[type])
            };
        for(i = 0; i < 11; i++)
            for(sign = 1; sign > -2; sign = sign - 2)
                fdim_spec(context, 
                    changeSign_Unifloat(
                        round_Unifloat(par_x[i], leng_num[type]), sign),
                    changeSign_Unifloat(
                        round_Unifloat(par_y[i], leng_num[type]), sign),
                        requestErrorCode());
        
        fdim_spec(context, 
            changeSign_Unifloat(clone(Almost_Inf[type]), -1),
            clone(Almost_Inf[type]),
            requestErrorCode()
            );
    }
    return true;    
}

scenario bool fdim_overflow_scen()
{
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    int type;
    
    for(type = 0; type < 3; type++)
        fdim_spec(context, 
            clone(Almost_Inf[type]),
            changeSign_Unifloat(clone(Almost_Inf[type]), -1),
            requestErrorCode()
            );
    return true;	
}

scenario
bool llrint_llround_lrint_lround_nearbyint_rint_round_trunc_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i, sign;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* par[11] = { 
            clone(Nan[type]),
            clone(Inf[type]),
            convertString_Unifloat(create_CString("2"), type),
            clone(Almost_Inf[type]),
            createZero_Unifloat(type),
            clone(Almost_Inf[type]),
            clone(Almost_Zero[type]),
            convertString_Unifloat(create_CString("12,3"), type),
            convertString_Unifloat(create_CString("1234,5001"), type),
            convertString_Unifloat(create_CString("1234,5"), type),
            convertString_Unifloat(create_CString("1234,4999"), type)
            };
        par[5]->exp = 1;
        for(i = 0; i < 11; i++)
            for(sign = 1; sign>-2; sign = sign - 2)
            {
                llrint_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                llround_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                lrint_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                lround_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                nearbyint_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                rint_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                round_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign), requestErrorCode());
                trunc_spec(context, changeSign_Unifloat(round_Unifloat(par[i], 
                    leng_num[type]), sign));
            }
    }
    return true;
}

scenario bool fma_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[13] = { 
            createOne_Unifloat(type),
           
            clone(Nan[type]),
            clone(Nan[type]),
            createOne_Unifloat(type),

            clone(Inf[type]),
            createOne_Unifloat(type),
            
            createZero_Unifloat(type),
            clone(Inf[type]),

            createZero_Unifloat(type),
            clone(Inf[type]),

            convertString_Unifloat(create_CString("123"), type),

            clone(Almost_Inf[type]),
            clone(Almost_Zero[type])
            };
        Unifloat* y[13] = { 
            createOne_Unifloat(type),

            clone(Nan[type]),
            createOne_Unifloat(type),
            clone(Nan[type]),

            createOne_Unifloat(type),
            clone(Inf[type]),
            
            clone(Inf[type]),
            createZero_Unifloat(type),

            clone(Inf[type]),
            createZero_Unifloat(type),

            convertString_Unifloat(create_CString("321"), type),

            createOne_Unifloat(type),
            createOne_Unifloat(type)
            };
        Unifloat* z[13] = {
            createOne_Unifloat(type),

            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type),

            clone(Inf[type]),
            clone(Inf[type]),

            createOne_Unifloat(type),
            createOne_Unifloat(type),

            clone(Nan[type]),
            clone(Nan[type]),

            clone(Nan[type]),

            createOne_Unifloat(type),
            createZero_Unifloat(type)
            };
        z[4]->sign = -1;
        x[5]->sign = -1;
        for(i = 0; i<13; i++)
                fma_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                  round_Unifloat(y[i], leng_num[type]), 
                                  round_Unifloat(z[i], leng_num[type]), 
                                  requestErrorCode());
    }
    return true;    
}

scenario bool fmax_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(max_FloatT), clone(max_DoubleT), clone(max_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[5] = { 
            convertString_Unifloat(create_CString("123"), type),
           
            convertString_Unifloat(create_CString("123"), type),

            clone(Nan[type]),

            clone(Nan[type]),

            clone(Inf[type])
            };
        Unifloat* y[5] = { 
            convertString_Unifloat(create_CString("1234"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("123"), type),

            clone(Nan[type]),

            convertString_Unifloat(create_CString("123"), type)
            };
        for(i = 0; i<5; i++)
                fmax_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]));
    }
    return true;    
}

scenario bool fmin_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[5] = { 
            convertString_Unifloat(create_CString("123"), type),
           
            convertString_Unifloat(create_CString("123"), type),

            clone(Nan[type]),

            clone(Nan[type]),

            clone(Inf[type])
            };
        Unifloat* y[5] = { 
            convertString_Unifloat(create_CString("1234"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("123"), type),

            clone(Nan[type]),

            convertString_Unifloat(create_CString("123"), type)
            };
        for(i = 0; i<5; i++)
                fmin_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]));
    }
    return true;    
}

scenario bool fmod_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[8] = { 
            convertString_Unifloat(create_CString("123"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("123"), type),
            
            convertString_Unifloat(create_CString("123"), type),

            clone(Inf[type]),

            createZero_Unifloat(type),

            convertString_Unifloat(create_CString("123"), type),

            clone(Almost_Zero[type])
            };
        Unifloat* y[8] = { 
            convertString_Unifloat(create_CString("4"), type),
            
            convertString_Unifloat(create_CString("123"), type),
            
            clone(Nan[type]),

            createZero_Unifloat(type),

            convertString_Unifloat(create_CString("123"), type),

            convertString_Unifloat(create_CString("123"), type),

            clone(Inf[type]),

            convertString_Unifloat(create_CString("123"), type)
            };
        for(i = 0; i<8; i++)
                fmod_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]),  
                                   requestErrorCode());
    }
    return true;    
}

scenario bool modf_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[3] = { 
            convertString_Unifloat(create_CString("123.5"), type),
            
            clone(Nan[type]),

            clone(Inf[type])
            
            };
        Unifloat* iptr[3] = { 
            createZero_Unifloat(type),

            createZero_Unifloat(type),

            createZero_Unifloat(type)
            };
        for(i = 0; i<3; i++)
                modf_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   &iptr[i]);
    }
    return true;    
}

scenario bool nan_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        CString* x[3] = { 
            create_CString("123"),
            create_CString(""),
            create_CString("abc"),
            };

        for(i = 0; i<3; i++)
                nan_spec(context, x[i], type);
    }
    return true;    
}

scenario bool drem_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type+=2)
    {
        Unifloat* x[5] = { 
            convertString_Unifloat(create_CString("-123"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("7"), type),
            
            clone(Inf[type]),

            convertString_Unifloat(create_CString("123"), type)
            };
        Unifloat* y[5] = { 
            convertString_Unifloat(create_CString("7"), type),
            
            convertString_Unifloat(create_CString("123"), type),
            
            clone(Nan[type]),

            convertString_Unifloat(create_CString("123"), type),

            createZero_Unifloat(type)
            };
        for(i = 0; i<5; i++)
                drem_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]),  
                                   requestErrorCode());
    }
    return true;    
}

scenario bool remainder_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[5] = { 
            convertString_Unifloat(create_CString("-123"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("7"), type),
            
            clone(Inf[type]),

            convertString_Unifloat(create_CString("123"), type)
            };
        Unifloat* y[5] = { 
            convertString_Unifloat(create_CString("7"), type),
            
            convertString_Unifloat(create_CString("123"), type),
            
            clone(Nan[type]),

            convertString_Unifloat(create_CString("123"), type),

            createZero_Unifloat(type)
            };
        for(i = 0; i<5; i++)
                remainder_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]),  
                                   requestErrorCode());
    }
    return true;    
}

scenario bool remquo_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Almost_Inf[3] = { clone(min_FloatT), clone(min_DoubleT), clone(min_LongDoubleT)};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    Unifloat* Almost_Zero[3] = {createOne_Unifloat(UniFloatT),
                        createOne_Unifloat(UniDoubleT),
                        createOne_Unifloat(UniLongDoubleT)};
    int type, i;
    Almost_Zero[0]->exp = 1 - digMant_FloatT + minExp_FloatT;
    Almost_Zero[1]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    Almost_Zero[2]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    for(type = 0; type < 3; type++)
    {
        Unifloat* x[5] = { 
            convertString_Unifloat(create_CString("326546"), type),

            clone(Nan[type]),
            
            convertString_Unifloat(create_CString("7"), type),
            
            clone(Inf[type]),

            convertString_Unifloat(create_CString("7"), type)
            };
        Unifloat* y[5] = { 
            convertString_Unifloat(create_CString("3"), type),
            
            convertString_Unifloat(create_CString("123"), type),
            
            clone(Nan[type]),

            convertString_Unifloat(create_CString("123"), type),

            createZero_Unifloat(type)
            };
        Unifloat* quo[5] = { 
            createZero_Unifloat(type),

            createZero_Unifloat(type),

            createZero_Unifloat(type),

            createZero_Unifloat(type),

            createZero_Unifloat(type)
            };
        for(i = 0; i<5; i++)
                remquo_spec(context, round_Unifloat(x[i], leng_num[type]), 
                                   round_Unifloat(y[i], leng_num[type]), 
                                   &quo[i],
                                   requestErrorCode());
    }
    return true;    
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm math_real_scenario =
{
    .init = init_math_real_scenario,
    .finish = finish_math_real_scenario,
    .actions = {                
                    ceil_floor_scen,
                    copysign_scen,
                    fabs_scen,
                    llrint_llround_lrint_lround_nearbyint_rint_round_trunc_scen,
                    fdim_scen,
                    fma_scen,
                    fmax_scen,
                    fmin_scen,
                    fmod_scen,
                    modf_scen,
                    nan_scen,
                    drem_scen,
                    remainder_scen,
                    remquo_scen,
                    NULL 
                }
};

scenario dfsm math_real_fdim_overflow_scenario =
{
    .init = init_math_real_scenario,
    .finish = finish_math_real_scenario,
    .actions = {                
                    fdim_overflow_scen,
                    NULL
               }
};

bool main_math_real(int argc, char** argv)
{
    math_real_scenario(argc,argv);
    return true;
}

#include "math/real/tests/real_scenario.seh"
#include "math/math/math_data.seh"

#ifdef MATH_REAL_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/float/float_media.seh"
#include "math/math/math_data.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initMath();

    initMathRealSubsystem();
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;
    
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");

    
    start = clock();

    main_math_real(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );        
    
    
    
    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_math_real(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif
