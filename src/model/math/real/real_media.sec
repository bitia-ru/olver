/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "math/real/real_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathRealSubsystem(void)
{
  // Set up mediators
    set_mediator_ceil_spec(ceil_media);
    set_mediator_copysign_spec(copysign_media);
    set_mediator_drem_spec(drem_media);
    set_mediator_fabs_spec(fabs_media);
    set_mediator_fdim_spec(fdim_media);
    set_mediator_floor_spec(floor_media);
    set_mediator_fma_spec(fma_media);
    set_mediator_fmax_spec(fmax_media);
    set_mediator_fmin_spec(fmin_media);
    set_mediator_fmod_spec(fmod_media);
    set_mediator_llrint_spec(llrint_media);
    set_mediator_llround_spec(llround_media);
    set_mediator_lrint_spec(lrint_media);
    set_mediator_lround_spec(lround_media);
    set_mediator_modf_spec(modf_media);
    set_mediator_nan_spec(nan_media);
    set_mediator_nearbyint_spec(nearbyint_media);
    set_mediator_remainder_spec(remainder_media);
    set_mediator_remquo_spec(remquo_media);
    set_mediator_rint_spec(rint_media);
    set_mediator_round_spec(round_media);
    set_mediator_trunc_spec(trunc_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** ceil_spec **/
//This mediator refers to: ceilf, ceil, ceill
mediator ceil_media for 
specification
Unifloat* ceil_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        switch(x->type)
        {
        case 0: format_TSCommand( &command, "ceilf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "ceil:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "ceill:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** copysign_spec **/
//This mediator refers to: copysignf, copysingn, copysignl
mediator copysign_media for 
specification
Unifloat* copysign_spec(CallContext context, Unifloat* x, Unifloat* y)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "copysignf:$(unifloat)$(unifloat)", x, y);
            break;
        case 1: format_TSCommand( &command, "copysign:$(unifloat)$(unifloat)", x, y);
            break;
        case 2: format_TSCommand( &command, "copysignl:$(unifloat)$(unifloat)", x, y);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** drem_spec **/
//This mediator refers to: dremf, drem, dreml
mediator drem_media for 
specification
Unifloat* drem_spec(CallContext context, Unifloat* x, Unifloat* y, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"dremf:$(unifloat)$(unifloat)",
                           "drem:$(unifloat)$(unifloat)", 
                           "dreml:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** fabs_spec **/
//This mediator refers to: fabsf, fabs, fabsl
mediator fabs_media for
specification
Unifloat* fabs_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        switch(x->type)
        {
        case 0:  format_TSCommand( &command, "fabsf:$(unifloat)", x);
            break;
        case 1:  format_TSCommand( &command, "fabs:$(unifloat)", x);
            break;
        case 2:  format_TSCommand( &command, "fabsl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** fdim_spec **/
//This mediator refers to: fdimf, fdim, fdiml
mediator fdim_media for 
specification
Unifloat* fdim_spec(CallContext context, Unifloat* x, Unifloat* y,
                    ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "fdimf:$(unifloat)$(unifloat)", x, y);
            break;
        case 1: format_TSCommand( &command, "fdim:$(unifloat)$(unifloat)", x, y);
            break;
        case 2: format_TSCommand( &command, "fdiml:$(unifloat)$(unifloat)", x, y);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** floor_spec **/
//This mediator refers to: floorf, floor, floorl
mediator floor_media for 
specification
Unifloat* floor_spec(CallContext context, Unifloat* value, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        switch(value->type)
        {
        case 0: format_TSCommand( &command, "floorf:$(unifloat)", value);
            break;
        case 1: format_TSCommand( &command, "floor:$(unifloat)", value);
            break;
        case 2: format_TSCommand( &command, "floorl:$(unifloat)", value);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** fma_spec **/
//This mediator refers to: fmaf, fma, fmal
mediator fma_media for specification
Unifloat* fma_spec( CallContext context, Unifloat* x, Unifloat* y, Unifloat* z, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"fmaf:$(unifloat)$(unifloat)$(unifloat)",
                           "fma:$(unifloat)$(unifloat)$(unifloat)", 
                           "fmal:$(unifloat)$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y, z);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** fmax_spec **/
//This mediator refers to: fmaxf, fmax, fmaxl
mediator fmax_media for specification
Unifloat* fmax_spec( CallContext context, Unifloat* x, 
                     Unifloat* y)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"fmaxf:$(unifloat)$(unifloat)",
                           "fmax:$(unifloat)$(unifloat)", 
                           "fmaxl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** fmin_spec **/
//This mediator refers to: fminf, fmin, fminl
mediator fmin_media for specification
Unifloat* fmin_spec( CallContext context, Unifloat* x, 
                     Unifloat* y)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"fminf:$(unifloat)$(unifloat)",
                           "fmin:$(unifloat)$(unifloat)", 
                           "fminl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** fmod_spec **/
//This mediator refers to: fmodf, fmod, fmodl
mediator fmod_media for specification
Unifloat* fmod_spec( CallContext context, Unifloat* x, 
                      Unifloat* y, ErrorCode *errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"fmodf:$(unifloat)$(unifloat)",
                           "fmod:$(unifloat)$(unifloat)", 
                           "fmodl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** llrint_spec **/
//This mediator refers to: llrintf, llrint, llrintl
mediator llrint_media for 
specification
LLongT llrint_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        LLongT res;
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "llrintf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "llrint:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "llrintl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readLLong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** llround_spec **/
//This mediator refers to: llroundf, llround, llroundl
mediator llround_media for 
specification
LLongT llround_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        LLongT res;
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "llroundf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "llround:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "llroundl:$(unifloat)", x);
            break;
        }
      
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readLLong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** lrint_spec **/
//This mediator refers to: lrintf, lrint, lrintl
mediator lrint_media for 
specification
LongT lrint_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        LLongT res;
        char st[3][100] = {"lrintf:$(unifloat)",
                           "lrint:$(unifloat)", 
                           "lrintl:$(unifloat)"};
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "lrintf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "lrint:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "lrintl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readLong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** lround_spec **/
//This mediator refers to: lroundf, lround, lroundl
mediator lround_media for 
specification
LongT lround_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        LLongT res;
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "lroundf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "lround:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "lroundl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readLong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** modf_spec **/
//This mediator refers to: modff, modf, modfl
mediator modf_media for specification
Unifloat* modf_spec( CallContext context, Unifloat* x, Unifloat** iptr)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"modff:$(unifloat)",
                           "modf:$(unifloat)", 
                           "modfl:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *iptr = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** nan_spec **/
//This mediator refers to: nanf, nan, nanl
mediator nan_media for specification
Unifloat* nan_spec( CallContext context, CString* tagp, IntT type_f)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"nanf:$(str)",
                           "nan:$(str)", 
                           "nanl:$(str)"};
    
        format_TSCommand( &command, st[type_f], tagp);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** nearbyint_spec **/
//This mediator refers to: nearbyintf, nearbyint, nearbyintl
mediator nearbyint_media for
specification
Unifloat* nearbyint_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "nearbyintf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "nearbyint:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "nearbyintl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** remainder_spec **/
//This mediator refers to: remainderf, remainder, remainderl
mediator remainder_media for specification
Unifloat* remainder_spec( CallContext context, Unifloat* x, 
                          Unifloat* y, ErrorCode *errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"remainderf:$(unifloat)$(unifloat)",
                           "remainder:$(unifloat)$(unifloat)", 
                           "remainderl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** remquo_spec **/
//This mediator refers to: remquof, remquo, remquol
mediator remquo_media for specification
Unifloat* remquo_spec( CallContext context, Unifloat* x, 
                       Unifloat* y, Unifloat** quo, ErrorCode *errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"remquof:$(unifloat)$(unifloat)",
                           "remquo:$(unifloat)$(unifloat)", 
                           "remquol:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x, y);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
            *quo = convertInteger_Unifloat(
                                           readInt_TSStream(&command.response), 
                                           x->type);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** rint_spec **/
//This mediator refers to: rintf, rint, rintl
mediator rint_media for 
specification
Unifloat* rint_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        switch(x->type)
        {
        case 0: format_TSCommand( &command, "rintf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "rint:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "rintl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** round_spec **/
//This mediator refers to: roundf, round, roundl
mediator round_media for 
specification
Unifloat* round_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"roundf:$(unifloat)",
                           "round:$(unifloat)", 
                           "roundl:$(unifloat)"};
        switch(x->type)
        {
        case 0: format_TSCommand( &command, "roundf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "round:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "roundl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** trunc_spec **/
//This mediator refers to: truncf, trunc, truncl
mediator trunc_media for 
specification
Unifloat* trunc_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        switch(x->type)
        {
        case 0: format_TSCommand( &command, "truncf:$(unifloat)", x);
            break;
        case 1: format_TSCommand( &command, "trunc:$(unifloat)", x);
            break;
        case 2: format_TSCommand( &command, "truncl:$(unifloat)", x);
            break;
        }
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


