/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/common_media.seh"
#include "math/complex/complex_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathComplexSubsystem(void)
{
  // Set up mediators
    set_mediator_cabs_spec(cabs_media);
    set_mediator_carg_spec(carg_media);
    set_mediator_cimag_spec(cimag_media);
    set_mediator_conj_spec(conj_media);
    set_mediator_cproj_spec(cproj_media);
    set_mediator_creal_spec(creal_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cabs_spec **/
//This mediator refers to: cabsf, cabs, cabsl
mediator cabs_media for specification
Unifloat* cabs_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"cabsf:$(unifloat)$(unifloat)",
                           "cabs:$(unifloat)$(unifloat)", 
                           "cabsl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** carg_spec **/
//This mediator refers to: cargf, carg, cargl
mediator carg_media for specification
Unifloat* carg_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"cargf:$(unifloat)$(unifloat)",
                           "carg:$(unifloat)$(unifloat)", 
                           "cargl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** cimag_spec **/
//This mediator refers to: cimagf, cimag, cimagl
mediator cimag_media for specification
Unifloat* cimag_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"cimagf:$(unifloat)$(unifloat)",
                           "cimag:$(unifloat)$(unifloat)", 
                           "cimagl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** conj_spec **/
//This mediator refers to: cimagf, cimag, cimagl
mediator conj_media for specification
UnifloatComplex* conj_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"conjf:$(unifloat)$(unifloat)",
                           "conj:$(unifloat)$(unifloat)", 
                           "conjl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** cproj_spec **/
//This mediator refers to: cprojf, cproj, cprojl
mediator cproj_media for specification
UnifloatComplex* cproj_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"cprojf:$(unifloat)$(unifloat)",
                           "cproj:$(unifloat)$(unifloat)", 
                           "cprojl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** creal_spec **/
//This mediator refers to: crealf, creal, creal
mediator creal_media for specification
Unifloat* creal_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"crealf:$(unifloat)$(unifloat)",
                           "creal:$(unifloat)$(unifloat)", 
                           "creall:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

