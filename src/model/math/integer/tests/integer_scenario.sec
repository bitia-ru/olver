/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/integer/tests/integer_scenario.seh"
#include "math/integer/integer_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include <limits.h>

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static IntT abs_seeds[] = { INT_MAX, INT_MIN+1, 0, 15, 1685, 0x5A755AC0, -19, -543829 };
static int num_abs_seeds = sizeof(abs_seeds) / sizeof(abs_seeds[0]);


static IntT div_numer_seeds[] = {INT_MAX, INT_MIN, -12345, -1, 0, 12345};
static int num_div_numer_seeds = sizeof(div_numer_seeds) / sizeof(div_numer_seeds[0]);

static IntT div_denom_seeds[] = {INT_MAX, INT_MIN, -123, -1, 123, 123456};
static int num_div_denom_seeds = sizeof(div_denom_seeds) / sizeof(div_denom_seeds[0]);


static IntMaxT imaxabs_seeds[] = { INT_MAX, INT_MIN+1, 0, 15, 1685, 0x5A755AC0, -19, -543829 };
static int num_imaxabs_seeds = sizeof(imaxabs_seeds) / sizeof(imaxabs_seeds[0]);


static IntMaxT imaxdiv_numer_seeds[] = {INT_MAX, INT_MIN, -12345, -1, 0, 12345};
static int num_imaxdiv_numer_seeds = sizeof(imaxdiv_numer_seeds) / sizeof(imaxdiv_numer_seeds[0]);

static IntMaxT imaxdiv_denom_seeds[] = {INT_MAX, INT_MIN, -123, -1, 123, 123456};
static int num_imaxdiv_denom_seeds = sizeof(imaxdiv_denom_seeds) / sizeof(imaxdiv_denom_seeds[0]);


static LongT labs_seeds[] = { LONG_MAX, LONG_MIN+1, 0, 15, 1685, 0x5A755AC0, -19, -543829 };
static int num_labs_seeds = sizeof(labs_seeds) / sizeof(labs_seeds[0]);

static LLongT llabs_seeds[] = { LONG_MAX, LONG_MIN+1, 0, 15, 1685, 0x5A755AC0, -19, -543829 };
static int num_llabs_seeds = sizeof(llabs_seeds) / sizeof(llabs_seeds[0]);


static LongT ldiv_numer_seeds[] = {LONG_MAX, LONG_MIN, -12345, -1, 0, 12345};
static int num_ldiv_numer_seeds = sizeof(ldiv_numer_seeds) / sizeof(ldiv_numer_seeds[0]);

static LongT ldiv_denom_seeds[] = {LONG_MAX, LONG_MIN, -123, -1, 123, 123456};
static int num_ldiv_denom_seeds = sizeof(ldiv_denom_seeds) / sizeof(ldiv_denom_seeds[0]);


static LLongT lldiv_numer_seeds[] = {LONG_MAX, LONG_MIN, -12345, -1, 0, 12345};
static int num_lldiv_numer_seeds = sizeof(lldiv_numer_seeds) / sizeof(lldiv_numer_seeds[0]);

static LLongT lldiv_denom_seeds[] = {LONG_MAX, LONG_MIN, -123, -1, 123, 123456};
static int num_lldiv_denom_seeds = sizeof(lldiv_denom_seeds) / sizeof(lldiv_denom_seeds[0]);

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_integer_scenario(int argc, char** argv)
{
    /* Init test scenario data */
    context = getContext();

    abs_seeds[0] = max_IntT;
    abs_seeds[1] = min_IntT+1;

    div_numer_seeds[0] = max_IntT;
    div_numer_seeds[1] = min_IntT;
    div_denom_seeds[0] = max_IntT;
    div_denom_seeds[1] = min_IntT;

    imaxabs_seeds[0] = max_IntMaxT;
    imaxabs_seeds[1] = min_IntMaxT+1;

    imaxdiv_numer_seeds[0] = max_IntMaxT;
    imaxdiv_numer_seeds[1] = min_IntMaxT;
    imaxdiv_denom_seeds[0] = max_IntMaxT;
    imaxdiv_denom_seeds[1] = min_IntMaxT;

    labs_seeds[0] = max_LongT;
    labs_seeds[1] = min_LongT+1;

    llabs_seeds[0] = max_LLongT;
    llabs_seeds[1] = min_LLongT+1;

    ldiv_numer_seeds[0] = max_LongT;
    ldiv_numer_seeds[1] = min_LongT;
    ldiv_denom_seeds[0] = max_LongT;
    ldiv_denom_seeds[1] = min_LongT;

    lldiv_numer_seeds[0] = max_LLongT;
    lldiv_numer_seeds[1] = min_LLongT;
    lldiv_denom_seeds[0] = max_LLongT;
    lldiv_denom_seeds[1] = min_LLongT;

    return true;
}

static void finish_math_integer_scenario(void)
{
  /**/  
}


scenario
bool abs_scen()
{
    iterate(int i=0; i < num_abs_seeds; i++;)
    {
        abs_spec(context, abs_seeds[i]);
    }
    
    return true;
}

scenario
bool div_scen()
{
    iterate(int i=0; i < num_div_numer_seeds; i++;)
    iterate(int j=0; j < num_div_denom_seeds; j++;)
    {
        if( !( div_numer_seeds[i] == min_IntT && div_denom_seeds[j] == -1) )
            div_spec(context, div_numer_seeds[i], div_denom_seeds[j]);
    }
    
    return true;
}

scenario
bool imaxabs_scen()
{
    iterate(int i=0; i < num_imaxabs_seeds; i++;)
    {
        imaxabs_spec(context, imaxabs_seeds[i]);
    }
    
    return true;
}

scenario
bool imaxdiv_scen()
{

    iterate(int i=0; i < num_imaxdiv_numer_seeds; i++;)
    iterate(int j=0; j < num_imaxdiv_denom_seeds; j++;)
    {
        if( !( imaxdiv_numer_seeds[i] == min_IntMaxT && imaxdiv_denom_seeds[j] == -1) )
            imaxdiv_spec(context, imaxdiv_numer_seeds[i], imaxdiv_denom_seeds[j]);
    }
    
    return true;
}

scenario
bool labs_scen()
{
    iterate(int i=0; i < num_labs_seeds; i++;)
    {
        labs_spec(context, labs_seeds[i]);
    }
    
    return true;
}

scenario
bool llabs_scen()
{
    iterate(int i=0; i < num_llabs_seeds; i++;)
    {
        llabs_spec(context, llabs_seeds[i]);
    }
    
    return true;
}

scenario
bool ldiv_scen()
{
    iterate(int i=0; i < num_ldiv_numer_seeds; i++;)
    iterate(int j=0; j < num_ldiv_denom_seeds; j++;)
    {
        if( !( ldiv_numer_seeds[i] == min_LongT && ldiv_denom_seeds[j] == -1) )
            ldiv_spec(context, ldiv_numer_seeds[i], ldiv_denom_seeds[j]);
    }
    
    return true;
}

scenario
bool lldiv_scen()
{
    iterate(int i=0; i < num_lldiv_numer_seeds; i++;)
    iterate(int j=0; j < num_lldiv_denom_seeds; j++;)
    {
        if( !( lldiv_numer_seeds[i] == min_LLongT && lldiv_denom_seeds[j] == -1) )
            lldiv_spec(context, lldiv_numer_seeds[i], lldiv_denom_seeds[j]);
    }
    
    return true;
}

scenario dfsm math_integer_scenario =
{
    .init = init_math_integer_scenario,
    .finish = finish_math_integer_scenario,
    .actions = {
        abs_scen,
        div_scen,
        imaxabs_scen,
        imaxdiv_scen,
        labs_scen,
        llabs_scen,
        ldiv_scen,
        lldiv_scen,
        NULL
    }
};


// ----------------------------------------------

#ifdef MATH_INTEGER_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "math/integer/integer_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initMathIntegerSubsystem();
}


bool main_math_integer(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    math_integer_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_math_integer(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif
