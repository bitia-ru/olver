/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef MATH_EXP_MEDIA_SEH
#define MATH_EXP_MEDIA_SEH

#include "math/exp/exp_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathExpSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cbrt_spec **/
//This mediator refers to: cbrtf, cbrt, cbrtl
mediator cbrt_media for specification
Unifloat* cbrt_spec(CallContext context, Unifloat* x);

/** exp_spec **/
//This mediator refers to: expf, exp, expl
mediator exp_media for specification
Unifloat* exp_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno);

/** exp2_spec **/
//This mediator refers to: exp2f, exp2, exp2l
mediator exp2_media for specification
Unifloat* exp2_spec(CallContext context, Unifloat* x, ErrorCode* errno);

/** expm1_spec **/
//This mediator refers to: expm1f, expm1, expm1l
mediator expm1_media for specification
Unifloat* expm1_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno);

/** hypot_spec **/
//This mediator refers to: hypotf, hypot, hypotl
mediator hypot_media for specification
Unifloat* hypot_spec(CallContext context, Unifloat* x, Unifloat* y, ErrorCode* errno);

/** log_spec **/
//This mediator refers to: logf, log, logl
mediator log_media for specification
Unifloat* log_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno);

/** log10_spec **/
//This mediator refers to: log10f, log10, log10l
mediator log10_media for specification
Unifloat* log10_spec(CallContext context, Unifloat* x, ErrorCode* errno);

/** log1p_spec **/
//This mediator refers to: log1pf, log1p, log1pl
mediator log1p_media for specification
Unifloat* log1p_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno);

/** log2_spec **/
//This mediator refers to: log2f, log2, log2l
mediator log2_media for specification
Unifloat* log2_spec(CallContext context, Unifloat* x, ErrorCode* errno);

/** pow_spec **/
//This mediator refers to: powf, pow, powl
mediator pow_media for specification
Unifloat* pow_spec(CallContext context, Unifloat* x, Unifloat* y, ErrorCode* errno);

/** pow10_spec **/
//This mediator refers to: pow10f, pow10, pow10l
mediator pow10_media for specification
Unifloat* pow10_spec(CallContext context, Unifloat* x, ErrorCode* errno);

/** sqrt_spec **/
//This mediator refers to: sqrtf, sqrt, sqrtl
mediator sqrt_media for specification
Unifloat* sqrt_spec(CallContext context, Unifloat* x, ErrorCode* errno);




#endif

