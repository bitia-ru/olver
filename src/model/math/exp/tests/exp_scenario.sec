/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "math/exp/tests/exp_scenario.seh"
#include "math/exp/exp_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "math/math/math_data.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

#define SKIPTEST 1000

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr ptr;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_exp_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    initReqFilters();

    setFinishMode(UNTIL_END); 
    
    return true;
}
static void finish_math_exp_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(math_exp_scenario);
}

void ReadData(FILE** f, List* x)
{
    int i, exp;
    char str[100];
    Unifloat* tmp;
    
    for(i = 0; i < 5; i++)
    {
        fscanf(f[i], "%[+-01.NaInf]e%d\n", str, &exp);
        
        if(strcmp(str, "NaN") == 0)
        {
            tmp = clone(nan_DoubleT);
        }
        else
        if(strcmp(str, "+Inf") == 0)
        {
            tmp = clone(infinity_DoubleT);
        }
        else
        if(strcmp(str, "-Inf") == 0)
        {
            tmp = changeSign_Unifloat(clone(infinity_DoubleT), -1);
        }
        else
        if(strcmp(str, "0.0000000000000000000000000000000000000000000000000000") == 0
            || strcmp(str, "-0.0000000000000000000000000000000000000000000000000000") == 0)
        {
            tmp = createZero_Unifloat(UniDoubleT);
        }
        else
        {
            tmp = convertBinaryString_Unifloat(create_CString(str), UniDoubleT);
            tmp->exp = exp + 1;
        }
        
        set_List(x, i, tmp);
    }
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario bool cbrt_scen()
{
    IntT type, i, sign;

    Unifloat* testX[9] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(8.0),
        convertDouble_Unifloat(1.002001345),
        convertDouble_Unifloat(86431.5645621)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 9; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                cbrt_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign))
                    );
            }

    return true;
}

scenario bool exp_scen()
{
    IntT type, i, sign;

    Unifloat* testX[13] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(1422.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(12.000001345),
        convertDouble_Unifloat(86.569),
        convertDouble_Unifloat(0.69314718055994530941723212145818),
        convertDouble_Unifloat(2417.7143476437479682188910274186),
        convertDouble_Unifloat(11436.92847923909760538433000406),
        convertDouble_Unifloat(762.46189861593984035895533360399),
        convertDouble_Unifloat(110.90354888959124950675713943331)
    };
    
    testX[5]->exp = -140;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 13; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                exp_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    NULL,
                    0,
                    NULL,
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool exp2_scen()
{
    IntT type, i, sign;

    Unifloat* testX[12] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(1422.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(12.000001345),
        convertDouble_Unifloat(86.567),
        convertDouble_Unifloat(2.3219280948873623478703194294894),
        convertDouble_Unifloat(140.0),
        convertDouble_Unifloat(1050.0),
        convertDouble_Unifloat(16400.0)
    };
    
    testX[5]->exp = -140;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 12; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                exp2_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool expm1_scen()
{
    IntT type, i, sign;

    Unifloat* testX[12] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(1422.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(12.000001345),
        convertDouble_Unifloat(86.56),
        convertDouble_Unifloat(0.69314718055994530941723212145818),
        convertDouble_Unifloat(42050.6),
        convertDouble_Unifloat(5.635),
        convertDouble_Unifloat(5.635)
    };

    testX[5]->exp = -140;
    testX[10]->exp = -16400;
    testX[11]->exp = -1050;

    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 12; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                expm1_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    NULL,
                    0,
                    NULL,
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool hypot_scen()
{
    IntT type, i, j, signX, signY;

    Unifloat* testX[11] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(8.0),
        convertDouble_Unifloat(1.002001345),
        convertDouble_Unifloat(86431.56),
        clone(max_LongDoubleT),
        createOne_Unifloat(UniLongDoubleT)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
    {
        testX[9] = clone(max_Unifloat(type));
        testX[10]->exp = 1 - digMant_Unifloat(type) + minExp_Unifloat(type);

        for(i = 0; i < 11; i++)
            for(j = 0;j < 11; j++)
                for(signX = -1; signX < 2; signX += 2)
                    for(signY = -1; signY < 2; signY += 2)
                    {
                        testX[i]->type = type;
                        testX[j]->type = type;

                        hypot_spec(
                            context,
                            checkRange_Unifloat(changeSign_Unifloat(testX[i], signX)),
                            checkRange_Unifloat(changeSign_Unifloat(testX[j], signY)),
                            requestErrorCode()
                            );
                    }
    }
    
    return true;
}

scenario bool log_scen()
{
    IntT type, i, sign;

    Unifloat* testX[9] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.761233),
        convertDouble_Unifloat(2.7182818284590452353602874713527),
        convertDouble_Unifloat(1.00000000200134523),
        convertDouble_Unifloat(86431.561589)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 9; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                log_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    NULL,
                    0,
                    NULL,
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool log10_scen()
{
    IntT type, i, sign;

    Unifloat* testX[9] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.761233),
        convertDouble_Unifloat(10.0),
        convertDouble_Unifloat(1.00000000200134523),
        convertDouble_Unifloat(86431.561589)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 9; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                log10_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool log1p_scen()
{
    IntT type, i, sign;

    Unifloat* testX[11] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23346),
        convertDouble_Unifloat(12.761233),
        convertDouble_Unifloat(0.945),
        convertDouble_Unifloat(0.999999),
        convertDouble_Unifloat(86431.561589),
        convertDouble_Unifloat(12.761233),
        convertDouble_Unifloat(12.761233)
    };
    
    testX[4]->exp = -133;
    testX[9]->exp = -1050;
    testX[10]->exp = -16400;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 11; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                log1p_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    NULL,
                    0,
                    NULL,
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool log2_scen()
{
    IntT type, i, sign;

    Unifloat* testX[9] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.761233),
        convertDouble_Unifloat(2.0),
        convertDouble_Unifloat(1.00000000200134523),
        convertDouble_Unifloat(86431.561589)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 9; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                log2_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool pow10_scen()
{
    IntT type, i, sign;

    Unifloat* testX[12] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(1422.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(12.000001345),
        convertDouble_Unifloat(86.56),
        convertDouble_Unifloat(0.30102999566398119521373889472449),
        convertDouble_Unifloat(4966.9949284556897210266917629541),
        convertDouble_Unifloat(331.13299523037931473511278419694),
        convertDouble_Unifloat(48.164799306236991234198223155919)
    };
    
    testX[5]->exp = -140;

    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 12; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                pow10_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool pow_scen()
{
    IntT type, i, j, signX, signY;

    Unifloat* testX[16] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(8.0),
        convertDouble_Unifloat(5.0),
        convertDouble_Unifloat(1.002001345),
        convertDouble_Unifloat(2.0),
        convertDouble_Unifloat(16400.0),
        convertDouble_Unifloat(1050.0),
        convertDouble_Unifloat(140.0),
        convertDouble_Unifloat(16500.0),
        convertDouble_Unifloat(1100.0),
        convertDouble_Unifloat(160.0)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 16; i++)
            for(j = 0;j < 16; j++)
                for(signX = -1; signX < 2; signX += 2)
                    for(signY = -1; signY < 2; signY += 2)
                    {
                        testX[i]->type = type;
                        testX[j]->type = type;
                        pow_spec(
                            context,
                            checkRange_Unifloat(changeSign_Unifloat(testX[i], signX)),
                            checkRange_Unifloat(changeSign_Unifloat(testX[j], signY)),
                            requestErrorCode()
                            );
                    }

    return true;
}

scenario bool sqrt_scen()
{
    IntT type, i, sign;

    Unifloat* testX[9] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(3.23),
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(4.0),
        convertDouble_Unifloat(1.002001345),
        convertDouble_Unifloat(86431.561589)
    };
    
    testX[4]->exp = -133;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 9; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                sqrt_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool exp_adv_scen()
{
    IntT i, j, k = 0, dist;
    FILE* data[5];
    FILE* rep[4];
    FILE* sum[4];
    IntT innac[4][61];
    List* x = create_List(&type_Unifloat);
    List* p = create_List(&type_Unifloat);
    
    Unifloat* y;
    
    for(i = 0; i < 5; i++)
    {
        append_List(p, changeSign_Unifloat(clone(infinity_DoubleT), -1));
        append_List(x, createZero_Unifloat(UniDoubleT));
    }
    
    for(i = 0; i < 4; i++)
        for(j = 0; j < 61; j++)
            innac[i][j] = 0;
    
    data[0] = fopen(getTestDataFile("math.exp/exp_near.txt"), "r+");
    data[1] = fopen(getTestDataFile("math.exp/exp_ninf.txt"), "r+");
    data[2] = fopen(getTestDataFile("math.exp/exp_pinf.txt"), "r+");
    data[3] = fopen(getTestDataFile("math.exp/exp_zero.txt"), "r+");
    data[4] = fopen(getTestDataFile("math.exp/exp_data.txt"), "r+");
    
    rep[0] = fopen(getTestDataFile("math.exp/rep_exp_near.txt"), "w+");
    rep[1] = fopen(getTestDataFile("math.exp/rep_exp_ninf.txt"), "w+");
    rep[2] = fopen(getTestDataFile("math.exp/rep_exp_pinf.txt"), "w+");
    rep[3] = fopen(getTestDataFile("math.exp/rep_exp_zero.txt"), "w+");
    
    sum[0] = fopen(getTestDataFile("math.exp/sum_exp_near.txt"), "w+");
    sum[1] = fopen(getTestDataFile("math.exp/sum_exp_ninf.txt"), "w+");
    sum[2] = fopen(getTestDataFile("math.exp/sum_exp_pinf.txt"), "w+");
    sum[3] = fopen(getTestDataFile("math.exp/sum_exp_zero.txt"), "w+");
    
    while(!feof(data[4]))
    {
        ReadData(data, x);
        
        if(k % SKIPTEST == 0)
        {
	        for(i = 0; i < 4; i++)
	        {
	            dist = 0;
	            
	            y = exp_spec(
	                context,
	                checkRange_Unifloat(get_List(x, 4)),
	                get_List(x, i),
	                i,
	                &dist,
	                requestErrorCode()
	                );
	            y = get_List(x, 4);
	            fprintf(rep[i], "%d %d\n", dist, y->exp);
	            
	            innac[i][dist]++;
	            
	            //if(compare_Unifloat(y, get_List(p, i)) * compare_Unifloat(get_List(x, 4), get_List(p, 4)) == -1)
	            {
	                //fprintf(sum[i], "monotony error %d\n", i);
	                
	                //FILE* f = fopen(getTestDataFile("math.exp/test","a+");
	                //    fprintf(f, "monotony error %d\n", i);
	                //fclose(f);
	                //printExp_Unifloat(get_List(x, 4), 53);
	                //printExp_Unifloat(y, 53);
	                //printExp_Unifloat(get_List(p, 4), 53);
	                //printExp_Unifloat(get_List(p, i), 53);
	            }
	            
	            //set_List(p, i, y);
	        }
	        
        	//set_List(p, 4, get_List(p, 4));
        }
        
        k++;
    }
    
    for(i = 0; i < 4; i++)
    {
        fprintf(sum[i], "summary\n\n");
        for(j = 0; j < 61; j++)
        {
            fprintf(sum[i], "%d\n", innac[i][j]);
        }
    }
    
    fclose(data[4]);
    for(i = 0; i < 4; i++)
    {
        fclose(data[i]);
        fclose(rep[i]);
        fclose(sum[i]);
    }
    
    return true;
}

scenario bool expm1_adv_scen()
{
    IntT i, j, k = 0, dist;
    FILE* data[5];
    FILE* rep[4];
    FILE* sum[4];
    IntT innac[4][61];
    List* x = create_List(&type_Unifloat);
    List* p = create_List(&type_Unifloat);
    
    Unifloat* y;
    
    for(i = 0; i < 5; i++)
    {
        append_List(p, changeSign_Unifloat(clone(infinity_DoubleT), -1));
        append_List(x, createZero_Unifloat(UniDoubleT));
    }
    
    for(i = 0; i < 4; i++)
        for(j = 0; j < 61; j++)
            innac[i][j] = 0;
    
    data[0] = fopen(getTestDataFile("math.exp/expm1_near.txt"), "r+");
    data[1] = fopen(getTestDataFile("math.exp/expm1_ninf.txt"), "r+");
    data[2] = fopen(getTestDataFile("math.exp/expm1_pinf.txt"), "r+");
    data[3] = fopen(getTestDataFile("math.exp/expm1_zero.txt"), "r+");
    data[4] = fopen(getTestDataFile("math.exp/expm1_data.txt"), "r+");
    
    rep[0] = fopen(getTestDataFile("math.exp/rep_expm1_near.txt"), "w+");
    rep[1] = fopen(getTestDataFile("math.exp/rep_expm1_ninf.txt"), "w+");
    rep[2] = fopen(getTestDataFile("math.exp/rep_expm1_pinf.txt"), "w+");
    rep[3] = fopen(getTestDataFile("math.exp/rep_expm1_zero.txt"), "w+");
    
    sum[0] = fopen(getTestDataFile("math.exp/sum_expm1_near.txt"), "w+");
    sum[1] = fopen(getTestDataFile("math.exp/sum_expm1_ninf.txt"), "w+");
    sum[2] = fopen(getTestDataFile("math.exp/sum_expm1_pinf.txt"), "w+");
    sum[3] = fopen(getTestDataFile("math.exp/sum_expm1_zero.txt"), "w+");
   
    while(!feof(data[4]))
    {
        ReadData(data, x);
        
        if(k % SKIPTEST == 0)
        {
	        for(i = 0; i < 4; i++)
	        {
	            dist = 0;
	            
	            y = expm1_spec(
	                context,
	                checkRange_Unifloat(get_List(x, 4)),
	                get_List(x, i),
	                i,
	                &dist,
	                requestErrorCode()
	                );
	            y = get_List(x, 4);
	            fprintf(rep[i], "%d %d\n", dist, y->exp);
	            
	            innac[i][dist]++;
	            
	            //if(compare_Unifloat(y, get_List(p, i)) * compare_Unifloat(get_List(x, 4), get_List(p, 4)) == -1)
	            {
	                //fprintf(sum[i], "monotony error %d\n", i);
	                
	                //FILE* f = fopen(getTestDataFile("math.exp/test","a+");
	                //    fprintf(f, "monotony error %d\n", i);
	                //fclose(f);
	                //printExp_Unifloat(get_List(x, 4), 53);
	                //printExp_Unifloat(y, 53);
	                //printExp_Unifloat(get_List(p, 4), 53);
	                //printExp_Unifloat(get_List(p, i), 53);
	            }
	            
	            //set_List(p, i, y);
	        }
	        
	        //set_List(p, 4, get_List(p, 4));
	    }
	    
	    k++;
    }
    
    for(i = 0; i < 4; i++)
    {
        fprintf(sum[i], "summary\n\n");
        for(j = 0; j < 61; j++)
        {
            fprintf(sum[i], "%d\n", innac[i][j]);
        }
    }
    
    fclose(data[4]);
    for(i = 0; i < 4; i++)
    {
        fclose(data[i]);
        fclose(rep[i]);
        fclose(sum[i]);
    }
    
    return true;
}

scenario bool log_adv_scen()
{
    IntT i, j, k = 0, dist;
    FILE* data[5];
    FILE* rep[4];
    FILE* sum[4];
    IntT innac[4][61];
    List* x = create_List(&type_Unifloat);
    List* p = create_List(&type_Unifloat);
    
    Unifloat* y;
    
    for(i = 0; i < 5; i++)
    {
        append_List(p, changeSign_Unifloat(clone(infinity_DoubleT), -1));
        append_List(x, createZero_Unifloat(UniDoubleT));
    }
    
    for(i = 0; i < 4; i++)
        for(j = 0; j < 61; j++)
            innac[i][j] = 0;
    
    data[0] = fopen(getTestDataFile("math.exp/log_near.txt"), "r+");
    data[1] = fopen(getTestDataFile("math.exp/log_ninf.txt"), "r+");
    data[2] = fopen(getTestDataFile("math.exp/log_pinf.txt"), "r+");
    data[3] = fopen(getTestDataFile("math.exp/log_zero.txt"), "r+");
    data[4] = fopen(getTestDataFile("math.exp/log_data.txt"), "r+");

    rep[0] = fopen(getTestDataFile("math.exp/rep_log_near.txt"), "w+");
    rep[1] = fopen(getTestDataFile("math.exp/rep_log_ninf.txt"), "w+");
    rep[2] = fopen(getTestDataFile("math.exp/rep_log_pinf.txt"), "w+");
    rep[3] = fopen(getTestDataFile("math.exp/rep_log_zero.txt"), "w+");
    
    sum[0] = fopen(getTestDataFile("math.exp/sum_log_near.txt"), "w+");
    sum[1] = fopen(getTestDataFile("math.exp/sum_log_ninf.txt"), "w+");
    sum[2] = fopen(getTestDataFile("math.exp/sum_log_pinf.txt"), "w+");
    sum[3] = fopen(getTestDataFile("math.exp/sum_log_zero.txt"), "w+");
    
    while(!feof(data[4]))
    {
        ReadData(data, x);
        
        if(k % SKIPTEST == 0)
        {
	        for(i = 0; i < 4; i++)
	        {
	            dist = 0;
	            
	            y = log_spec(
	                context,
	                checkRange_Unifloat(get_List(x, 4)),
	                get_List(x, i),
	                i,
	                &dist,
	                requestErrorCode()
	                );
	            y = get_List(x, 4);
	            fprintf(rep[i], "%d %d\n", dist, y->exp);
	            
	            innac[i][dist]++;
	            
	            //if(compare_Unifloat(y, get_List(p, i)) * compare_Unifloat(get_List(x, 4), get_List(p, 4)) == -1)
	            {
	                //fprintf(sum[i], "monotony error %d\n", i);
	                
	                //FILE* f = fopen(getTestDataFile("math.exp/test","a+");
	                //    fprintf(f, "monotony error %d\n", i);
	                //fclose(f);
	                //printExp_Unifloat(get_List(x, 4), 53);
	                //printExp_Unifloat(y, 53);
	                //printExp_Unifloat(get_List(p, 4), 53);
	                //printExp_Unifloat(get_List(p, i), 53);
	            }
	            
	            //set_List(p, i, y);
	        }
	        
	        //set_List(p, 4, get_List(p, 4));
	    }
	    
	    k++;
    }
    
    for(i = 0; i < 4; i++)
    {
        fprintf(sum[i], "summary\n\n");
        for(j = 0; j < 61; j++)
        {
            fprintf(sum[i], "%d\n", innac[i][j]);
        }
    }
    
    fclose(data[4]);
    for(i = 0; i < 4; i++)
    {
        fclose(data[i]);
        fclose(rep[i]);
        fclose(sum[i]);
    }
    
    return true;
}

scenario bool log1p_adv_scen()
{
    IntT i, j, k = 0, dist;
    FILE* data[5];
    FILE* rep[4];
    FILE* sum[4];
    IntT innac[4][61];
    List* x = create_List(&type_Unifloat);
    List* p = create_List(&type_Unifloat);
    
    Unifloat* y;
    
    for(i = 0; i < 5; i++)
    {
        append_List(p, changeSign_Unifloat(clone(infinity_DoubleT), -1));
        append_List(x, createZero_Unifloat(UniDoubleT));
    }
    
    for(i = 0; i < 4; i++)
        for(j = 0; j < 61; j++)
            innac[i][j] = 0;
    
    data[0] = fopen(getTestDataFile("math.exp/log1p_near.txt"), "r+");
    data[1] = fopen(getTestDataFile("math.exp/log1p_ninf.txt"), "r+");
    data[2] = fopen(getTestDataFile("math.exp/log1p_pinf.txt"), "r+");
    data[3] = fopen(getTestDataFile("math.exp/log1p_zero.txt"), "r+");
    data[4] = fopen(getTestDataFile("math.exp/log1p_data.txt"), "r+");
    
    rep[0] = fopen(getTestDataFile("math.exp/rep_log1p_near.txt"), "w+");
    rep[1] = fopen(getTestDataFile("math.exp/rep_log1p_ninf.txt"), "w+");
    rep[2] = fopen(getTestDataFile("math.exp/rep_log1p_pinf.txt"), "w+");
    rep[3] = fopen(getTestDataFile("math.exp/rep_log1p_zero.txt"), "w+");
    
    sum[0] = fopen(getTestDataFile("math.exp/sum_log1p_near.txt"), "w+");
    sum[1] = fopen(getTestDataFile("math.exp/sum_log1p_ninf.txt"), "w+");
    sum[2] = fopen(getTestDataFile("math.exp/sum_log1p_pinf.txt"), "w+");
    sum[3] = fopen(getTestDataFile("math.exp/sum_log1p_zero.txt"), "w+");    
    
    while(!feof(data[4]))
    {
        ReadData(data, x);
        
        if(k % SKIPTEST == 0)
        {
	        for(i = 0; i < 4; i++)
	        {
	            dist = 0;
	            
	            y = log1p_spec(
	                context,
	                checkRange_Unifloat(get_List(x, 4)),
	                get_List(x, i),
	                i,
	                &dist,
	                requestErrorCode()
	                );
	            y = get_List(x, 4);
	            fprintf(rep[i], "%d %d\n", dist, y->exp);
	            
	            innac[i][dist]++;
	            
	            //if(compare_Unifloat(y, get_List(p, i)) * compare_Unifloat(get_List(x, 4), get_List(p, 4)) == -1)
	            {
	                //fprintf(sum[i], "monotony error %d\n", i);
	                
	                //FILE* f = fopen(getTestDataFile("math.exp/test","a+");
	                //    fprintf(f, "monotony error %d\n", i);
	                //fclose(f);
	                //printExp_Unifloat(get_List(x, 4), 53);
	                //printExp_Unifloat(y, 53);
	                //printExp_Unifloat(get_List(p, 4), 53);
	                //printExp_Unifloat(get_List(p, i), 53);
	            }
	            
	            //set_List(p, i, y);
	        }
	        
	        //set_List(p, 4, get_List(p, 4));
	    }
	    
	    k++;
    }
    
    for(i = 0; i < 4; i++)
    {
        fprintf(sum[i], "summary\n\n");
        for(j = 0; j < 61; j++)
        {
            fprintf(sum[i], "%d\n", innac[i][j]);
        }
    }
    
    fclose(data[4]);
    for(i = 0; i < 4; i++)
    {
        fclose(data[i]);
        fclose(rep[i]);
        fclose(sum[i]);
    }
    
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm math_exp_scenario =
{
    .init = init_math_exp_scenario,
    .finish = finish_math_exp_scenario,
    .actions = {
                    cbrt_scen,
                    exp_scen,
                    exp2_scen,
                    expm1_scen,
                    hypot_scen,
                    log_scen,
                    log10_scen,
                    log1p_scen,
                    log2_scen,
                    pow10_scen,
                    pow_scen,
                    sqrt_scen,
                    NULL 
                }
};

bool main_math_exp(int argc, char** argv)
{
    math_exp_scenario(argc,argv);
    return true;
}

#ifdef MATH_EXP_LOCAL_MAIN

#include "config/system_config.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"

#include "math/exp/exp_media.seh"
#include "math/exp/tests/exp_scenario.seh"

#include "math/math/math_data.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();
 
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initMath();
    initMathExpSubsystem();
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;

    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");

    
    start = clock();

    main_math_exp(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );        
    
    
    
    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_math_exp(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif
