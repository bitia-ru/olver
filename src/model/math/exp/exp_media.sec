/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limit ations under the License.
 */


#include "math/exp/exp_media.seh"
#include "common/common_media.seh"
#include "math/math/math_config.h"
#include "config/type_config.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathExpSubsystem(void)
{
    // Set up mediators
    set_mediator_cbrt_spec(cbrt_media);
    set_mediator_exp_spec(exp_media);
    set_mediator_exp2_spec(exp2_media);
    set_mediator_expm1_spec(expm1_media);
    set_mediator_hypot_spec(hypot_media);
    set_mediator_log_spec(log_media);
    set_mediator_log10_spec(log10_media);
    set_mediator_log1p_spec(log1p_media);
    set_mediator_log2_spec(log2_media);
    set_mediator_pow_spec(pow_media);
    set_mediator_pow10_spec(pow10_media);
    set_mediator_sqrt_spec(sqrt_media);

}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cbrt_spec **/
//This mediator refers to: cbrtf, cbrt, cbrtl
mediator cbrt_media for specification
Unifloat* cbrt_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"cbrtf:$(unifloat)",
                           "cbrt:$(unifloat)", 
                           "cbrtl:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** exp_spec **/
//This mediator refers to: expf, exp, expl
mediator exp_media for specification
Unifloat* exp_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"expf:$(unifloat)",
                           "exp:$(unifloat)", 
                           "expl:$(unifloat)"};

        if((x->type == UniDoubleT) && (CHECK_EXTENDED_REQ))
            format_TSCommand(&command, "exp_adv:$(unifloat)$(int)", x, create_IntTObj(rounding));
        else
            format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** exp2_spec **/
//This mediator refers to: exp2f, exp2, exp2l
mediator exp2_media for specification
Unifloat* exp2_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"exp2f:$(unifloat)",
                           "exp2:$(unifloat)", 
                           "exp2l:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** expm1_spec **/
//This mediator refers to: expm1f, expm1, expm1l
mediator expm1_media for specification
Unifloat* expm1_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"expm1f:$(unifloat)",
                           "expm1:$(unifloat)", 
                           "expm1l:$(unifloat)"};

        if((x->type == UniDoubleT) && (CHECK_EXTENDED_REQ))
            format_TSCommand(&command, "expm1_adv:$(unifloat)$(int)", x, create_IntTObj(rounding));
        else
            format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** hypot_spec **/
//This mediator refers to: hypotf, hypot, hypotl
mediator hypot_media for specification
Unifloat* hypot_spec(CallContext context, Unifloat* x, Unifloat* y, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][50] = {"hypotf:$(unifloat)$(unifloat)",
                           "hypot:$(unifloat)$(unifloat)", 
                           "hypotl:$(unifloat)$(unifloat)"};

        format_TSCommand(&command, par[x->type], x, y);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** log_spec **/
//This mediator refers to: logf, log, logl
mediator log_media for specification
Unifloat* log_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"logf:$(unifloat)",
                           "log:$(unifloat)", 
                           "logl:$(unifloat)"};

        if((x->type == UniDoubleT) && (CHECK_EXTENDED_REQ))
            format_TSCommand(&command, "log_adv:$(unifloat)$(int)", x, create_IntTObj(rounding));
        else
            format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** log10_spec **/
//This mediator refers to: log10f, log10, log10l
mediator log10_media for specification
Unifloat* log10_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"log10f:$(unifloat)",
                           "log10:$(unifloat)", 
                           "log10l:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** log1p_spec **/
//This mediator refers to: log1pf, log1p, log1pl
mediator log1p_media for specification
Unifloat* log1p_spec(CallContext context, Unifloat* x, Unifloat* standart, IntT rounding, IntT* dist, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"log1pf:$(unifloat)",
                           "log1p:$(unifloat)", 
                           "log1pl:$(unifloat)"};

        if((x->type == UniDoubleT) && (CHECK_EXTENDED_REQ))
            format_TSCommand(&command, "log1p_adv:$(unifloat)$(int)", x, create_IntTObj(rounding));
        else
            format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** log2_spec **/
//This mediator refers to: log2f, log2, log2l
mediator log2_media for specification
Unifloat* log2_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"log2f:$(unifloat)",
                           "log2:$(unifloat)", 
                           "log2l:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** pow_spec **/
//This mediator refers to: powf, pow, powl
mediator pow_media for specification
Unifloat* pow_spec(CallContext context, Unifloat* x, Unifloat* y, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][50] = {"powf:$(unifloat)$(unifloat)",
                           "pow:$(unifloat)$(unifloat)", 
                           "powl:$(unifloat)$(unifloat)"};

        format_TSCommand(&command, par[x->type], x, y);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** pow10_spec **/
//This mediator refers to: pow10f, pow10, pow10l
mediator pow10_media for specification
Unifloat* pow10_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"pow10f:$(unifloat)",
                           "pow10:$(unifloat)", 
                           "pow10l:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** sqrt_spec **/
//This mediator refers to: sqrtf, sqrt, sqrtl
mediator sqrt_media for specification
Unifloat* sqrt_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
    
        char par[3][30] = {"sqrtf:$(unifloat)",
                           "sqrt:$(unifloat)", 
                           "sqrtl:$(unifloat)"};

        format_TSCommand(&command, par[x->type], x);

        executeCommandInContext(context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}

