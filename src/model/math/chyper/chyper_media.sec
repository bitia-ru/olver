/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/chyper/chyper_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathChyperSubsystem(void)
{
  // Set up mediators
    set_mediator_cacosh_spec(cacosh_media);
    set_mediator_casinh_spec(casinh_media);
    set_mediator_catanh_spec(catanh_media);
    set_mediator_ccosh_spec(ccosh_media);
    set_mediator_csinh_spec(csinh_media);
    set_mediator_ctanh_spec(ctanh_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cacosh_spec **/
//This mediator refers to: cacoshf, cacosh, cacoshl
mediator cacosh_media for specification
UnifloatComplex* cacosh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"cacoshf:$(unifloat)$(unifloat)",
                           "cacosh:$(unifloat)$(unifloat)", 
                           "cacoshl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** casinh_spec **/
//This mediator refers to: casinhf, casinh, casinhl
mediator casinh_media for specification
UnifloatComplex* casinh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"casinhf:$(unifloat)$(unifloat)",
                           "casinh:$(unifloat)$(unifloat)", 
                           "casinhl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** catanh_spec **/
//This mediator refers to: catanhf, catanh, catanhl
mediator catanh_media for specification
UnifloatComplex* catanh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"catanhf:$(unifloat)$(unifloat)",
                           "catanh:$(unifloat)$(unifloat)", 
                           "catanhl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** ccosh_spec **/
//This mediator refers to: ccoshf, ccosh, ccoshl
mediator ccosh_media for specification
UnifloatComplex* ccosh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"ccoshf:$(unifloat)$(unifloat)",
                           "ccosh:$(unifloat)$(unifloat)", 
                           "ccoshl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** csinh_spec **/
//This mediator refers to: csinhf, csinh, csinhl
mediator csinh_media for specification
UnifloatComplex* csinh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"csinhf:$(unifloat)$(unifloat)",
                           "csinh:$(unifloat)$(unifloat)", 
                           "csinhl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** ctanh_spec **/
//This mediator refers to: ctanhf, ctanh, ctanhl
mediator ctanh_media for specification
UnifloatComplex* ctanh_spec( CallContext context, UnifloatComplex* x )
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, * imag;
        UnifloatComplex* res;
        char st[3][100] = {"ctanhf:$(unifloat)$(unifloat)",
                           "ctanh:$(unifloat)$(unifloat)", 
                           "ctanhl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[(x->Re)->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

