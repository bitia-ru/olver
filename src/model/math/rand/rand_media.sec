/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "math/rand/rand_media.seh"
#include <atl/integer.h>

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathRandSubsystem(void)
{
  // Set up mediators
    set_mediator_drand48_spec(drand48_media);
    set_mediator_erand48_spec(erand48_media);
    set_mediator_jrand48_spec(jrand48_media);
    set_mediator_lcong48_spec(lcong48_media);
    set_mediator_lrand48_spec(lrand48_media);
    set_mediator_mrand48_spec(mrand48_media);
    set_mediator_nrand48_spec(nrand48_media);
    set_mediator_seed48_spec(seed48_media);
    set_mediator_srand48_spec(srand48_media);

    set_mediator_initstate_spec(initstate_media);
    set_mediator_random_spec(random_media);
    set_mediator_setstate_spec(setstate_media);
    set_mediator_srandom_spec(srandom_media);

    set_mediator_rand_spec(rand_media);
    set_mediator_rand_r_spec(rand_r_media);
    set_mediator_srand_spec(srand_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** drand48_spec **/
mediator drand48_media for specification
Unifloat* drand48_spec(CallContext context)
{
    call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "drand48:");
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
    state
    {
        IntT i;
        Unifloat* m, * int_part, * mod_m;
        m = convertString_Unifloat(create_CString("281474976710656"), 1);
        mod_m = mul_Unifloat(Rand48State->a_model, Rand48State->seed_model);
        mod_m = add_Unifloat(mod_m, Rand48State->c_model);
        int_part = div_Unifloat(mod_m, m);
        if(int_part->exp>0)
            for(i = int_part->exp + 1; i < PRECISION + 1; i++)
                setMant_Unifloat(int_part, i, 0);
        else int_part = createZero_Unifloat(1);
        mod_m = sub_Unifloat(mod_m, mul_Unifloat(int_part, m));
        Rand48State->seed_model = clone(mod_m);
    }
}

/** erand48_spec **/
mediator erand48_media for specification
Unifloat* erand48_spec(CallContext context, UShortT* xsubi)
{
    call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();
        format_TSCommand( &command, "erand48:$(ushort)$(ushort)$(ushort)", 
                                     create_UShortTObj(xsubi[0]),
                                     create_UShortTObj(xsubi[1]),
                                     create_UShortTObj(xsubi[2]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}


/** jrand48_spec **/
mediator jrand48_media for specification
Unifloat* jrand48_spec(CallContext context, UShortT* xsubi)
{
    call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();
        format_TSCommand(&command, "jrand48:$(ushort)$(ushort)$(ushort)", 
                                    create_UShortTObj(xsubi[0]),
                                    create_UShortTObj(xsubi[1]),
                                    create_UShortTObj(xsubi[2]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertLong_Unifloat(readLong_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
    }
}


/** lcong48_spec **/
mediator lcong48_media for specification
void lcong48_spec( CallContext context, UShortT *param)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "lcong48:$(ushort)$(ushort)$(ushort)"
                                   "$(ushort)$(ushort)$(ushort)$(ushort)",
                                    create_UShortTObj(param[0]),
                                    create_UShortTObj(param[1]),
                                    create_UShortTObj(param[2]),
                                    create_UShortTObj(param[3]),
                                    create_UShortTObj(param[4]),
                                    create_UShortTObj(param[5]),
                                    create_UShortTObj(param[6]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        destroy_TSCommand(&command);
    }
    state
    {
        Unifloat* tmp;
        Rand48State->seed_model = convertInteger_Unifloat(param[0], 1);
        tmp = convertInteger_Unifloat(param[1], 1);
        tmp->exp += 16;
        Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
        tmp = convertInteger_Unifloat(param[2], 1);
        tmp->exp += 32;
        Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
        Rand48State->a_model = convertInteger_Unifloat(param[3], 1);
        tmp = convertInteger_Unifloat(param[4], 1);
        tmp->exp += 16;
        Rand48State->a_model = add_Unifloat(Rand48State->a_model, tmp);
        tmp = convertInteger_Unifloat(param[5], 1);
        tmp->exp += 32;
        Rand48State->a_model = add_Unifloat(Rand48State->a_model, tmp);
        Rand48State->c_model = convertInteger_Unifloat(param[6], 1);
    }
}


/** lrand48_spec **/
mediator lrand48_media for specification
Unifloat* lrand48_spec(CallContext context)
{
    call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "lrand48:");
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertLong_Unifloat(readLong_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
    }
    state
    {
        IntT i;
        Unifloat* m, * int_part, * mod_m;
        m = convertString_Unifloat(create_CString("281474976710656"), 1);
        mod_m = mul_Unifloat(Rand48State->a_model, Rand48State->seed_model);
        mod_m = add_Unifloat(mod_m, Rand48State->c_model);
        int_part = div_Unifloat(mod_m, m);
        if(int_part->exp>0)
            for(i = int_part->exp + 1; i < PRECISION + 1; i++)
                setMant_Unifloat(int_part, i, 0);
        else int_part = createZero_Unifloat(1);
        mod_m = sub_Unifloat(mod_m, mul_Unifloat(int_part, m));
        Rand48State->seed_model = clone(mod_m);
    }
}


/** mrand48_spec **/
mediator mrand48_media for specification
Unifloat* mrand48_spec(CallContext context)
{
    call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mrand48:");
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertLong_Unifloat(readLong_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
    }
    state
    {
        IntT i;
        Unifloat* m, * int_part, * mod_m;
        m = convertString_Unifloat(create_CString("281474976710656"), 1);
        mod_m = mul_Unifloat(Rand48State->a_model, Rand48State->seed_model);
        mod_m = add_Unifloat(mod_m, Rand48State->c_model);
        int_part = div_Unifloat(mod_m, m);
        if(int_part->exp>0)
            for(i = int_part->exp + 1; i < PRECISION + 1; i++)
                setMant_Unifloat(int_part, i, 0);
        else int_part = createZero_Unifloat(1);
        mod_m = sub_Unifloat(mod_m, mul_Unifloat(int_part, m));
        Rand48State->seed_model = clone(mod_m);
    }
}


/** nrand48_spec **/
mediator nrand48_media for specification
Unifloat* nrand48_spec(CallContext context, UShortT* xsubi)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;

        format_TSCommand( &command, "nrand48:$(ushort)$(ushort)$(ushort)", 
                                     create_UShortTObj(xsubi[0]),
                                     create_UShortTObj(xsubi[1]),
                                     create_UShortTObj(xsubi[2]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertLong_Unifloat(readLong_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** seed48_spec **/
mediator seed48_media for specification
Seed48ReturnType* seed48_spec(CallContext context, UShortT* seed16v3)
{
   call
    {
       UShortT res[3];

       TSCommand command = create_TSCommand();

        format_TSCommand( &command, "seed48:$(ushort)$(ushort)$(ushort)", 
                                     create_UShortTObj(seed16v3[0]),
                                     create_UShortTObj(seed16v3[1]),
                                     create_UShortTObj(seed16v3[2]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res[0] = readUShort_TSStream(&command.response);
            res[1] = readUShort_TSStream(&command.response);
            res[2] = readUShort_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return create_Seed48ReturnType(res);
    }
    state
    {
        Unifloat* tmp;
        Rand48State->a_model = convertString_Unifloat(create_CString("25214903917"), 1);
        Rand48State->c_model = convertString_Unifloat(create_CString("11"), 1);
        Rand48State->seed_model = convertInteger_Unifloat(seed16v3[0], 1);
        tmp = convertInteger_Unifloat(seed16v3[1], 1);
        tmp->exp += 16;
        Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
        tmp = convertInteger_Unifloat(seed16v3[2], 1);
        tmp->exp += 32;
        Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
    }
}

/** srand_spec **/
mediator srand48_media for specification
void srand48_spec(CallContext context, LongT seedval)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "srand48:$(long)", create_LongTObj(seedval));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        destroy_TSCommand(&command);
    }
    state
    {
        IntT i;
        Unifloat* One, * tmp;
        One = convertInteger_Unifloat(1, 1);
        Rand48State->a_model = convertString_Unifloat(create_CString("25214903917"), 1);
        Rand48State->c_model = convertString_Unifloat(create_CString("11"), 1);

        Rand48State->seed_model = abs_Unifloat(convertLong_Unifloat(seedval, 1));
    
        if(seedval >= 0)
        {
            Rand48State->seed_model->exp += 16;
            tmp = convertInteger_Unifloat(13070, 1);
            Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
        }
        else
        {
            for(i = Rand48State->seed_model->exp; i > 0; i--)
                setMant_Unifloat(Rand48State->seed_model, i + 32 - Rand48State->seed_model->exp, 
                                 getMant_Unifloat(Rand48State->seed_model, i));
            for(i = 1; i < 32 - Rand48State->seed_model->exp + 1; i++)
                setMant_Unifloat(Rand48State->seed_model, i, 0);
        
            Rand48State->seed_model->exp = 32;
    
            //inversion
            for(i = 1; i < Rand48State->seed_model->exp + 1; i++)
                if(getMant_Unifloat(Rand48State->seed_model, i) == 0)
                    setMant_Unifloat(Rand48State->seed_model, i, 1);
                else
                    setMant_Unifloat(Rand48State->seed_model, i, 0);
        
            Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, One);
            Rand48State->seed_model->exp += 16;
            tmp = convertInteger_Unifloat(13070, 1);
            Rand48State->seed_model = add_Unifloat(Rand48State->seed_model, tmp);
        }
    }
}


/** initstate_spec **/
mediator initstate_media for specification
InitstateReturnType* initstate_spec( CallContext context, UIntT seed, IntT size)
{
   call
   {
       VoidTPtr res;
       VoidTPtr CurStatePointer;
       TSCommand command = create_TSCommand();
       format_TSCommand( &command, "initstate:$(uint)$(int)",
                                    create_UIntTObj(seed),
                                    create_IntTObj(size));
       executeCommandInContext( context, &command );
       if (!isBadVerdict())
       {
           timestamp = command.meta.timestamp;
           res = readPointer_TSStream(context, &command.response);
           CurStatePointer = readPointer_TSStream(context, &command.response);
       }
       destroy_TSCommand(&command);
       return create_InitstateReturnType(res, CurStatePointer);
   }
   state
   {
       if(isEmpty_List(RandState->StatePointer) == true)
       {
           append_List(RandState->StatePointer, (Object*)create_VoidTPtrObj(initstate_spec->res));
           append_List(RandState->StatePointer, (Object*)create_VoidTPtrObj(initstate_spec->CurStatePointer));
           RandState->CurrentStatePointer = initstate_spec->CurStatePointer;
       }
       else
       {
           append_List(RandState->StatePointer, (Object*)create_VoidTPtrObj(initstate_spec->CurStatePointer));
           RandState->CurrentStatePointer = initstate_spec->CurStatePointer;
       }
   }
}

/** random_spec **/
mediator random_media for specification
Unifloat* random_spec(CallContext context)
{
   call
   {
       Unifloat* res;
       TSCommand command = create_TSCommand();
       format_TSCommand( &command, "random:");
       executeCommandInContext( context, &command );
       if (!isBadVerdict())
       {
           timestamp = command.meta.timestamp;
           res = convertLong_Unifloat(readLong_TSStream(&command.response), 1);
       }
       destroy_TSCommand(&command);
       return res;
   }
}

mediator setstate_media for specification
VoidTPtr setstate_spec(CallContext context, VoidTPtr StatePointer)
{
   call
   {
       VoidTPtr res;
       TSCommand command = create_TSCommand();

       format_TSCommand( &command, "setstate:$(ptr)", create_VoidTPtrObj(StatePointer));
       executeCommandInContext( context, &command );
       
       if (!isBadVerdict())
       {
           timestamp = command.meta.timestamp;
           res = readPointer_TSStream(context, &command.response);
       }
       destroy_TSCommand(&command);
       return res;
   }
   state
   {
       RandState->CurrentStatePointer = StatePointer;
   }
}

/** srandom_spec **/
mediator srandom_media for specification
void srandom_spec(CallContext context, UIntT seed)
{
   call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "srandom:$(uint)", create_UIntTObj(seed));
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        destroy_TSCommand(&command);
    }
}

/** rand_spec **/
mediator rand_media for specification
Unifloat* rand_spec(CallContext context)
{
     call
     {
        Unifloat* res;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "rand:");
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertInteger_Unifloat(readInt_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
     }
}


/** rand_r_spec **/
mediator rand_r_media for specification
Unifloat* rand_r_spec(CallContext context, UIntT seed)
{
     call
    {
        Unifloat* res;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "rand_r:$(uint)", create_UIntTObj(seed));

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = convertInteger_Unifloat(readInt_TSStream(&command.response), 1);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** srand_spec **/
mediator srand_media for specification
void srand_spec(CallContext context, UIntT seed)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "srand:$(uint)", create_UIntTObj(seed));

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        destroy_TSCommand(&command);
    }
}
