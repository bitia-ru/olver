/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef MATH_RAND_MEDIA_SEH
#define MATH_RAND_MEDIA_SEH

#include "math/rand/rand_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathRandSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
/** rand48_spec **/
mediator drand48_media for specification
Unifloat* drand48_spec(CallContext context);

/** erand48_spec **/
mediator erand48_media for specification
Unifloat* erand48_spec(CallContext context, UShortT* xsubi);

/** jrand48_spec **/
mediator jrand48_media for specification
Unifloat* jrand48_spec(CallContext context, UShortT* xsubi);

/** lcong48_spec **/
mediator lcong48_media for specification
void lcong48_spec( CallContext context, UShortT *param);

/** lrand48_spec **/
mediator lrand48_media for specification
Unifloat* lrand48_spec(CallContext context);

/** mrand48_spec **/
mediator mrand48_media for specification
Unifloat* mrand48_spec(CallContext context);

/** nrand48_spec **/
mediator nrand48_media for specification
Unifloat* nrand48_spec( CallContext context, UShortT* xsubi);

/** seed48_spec **/
mediator seed48_media for specification
Seed48ReturnType* seed48_spec(CallContext context, UShortT* seed16v3);

/** srand_spec **/
mediator srand48_media for specification
void srand48_spec( CallContext context, LongT seedval);

/** initstate_spec **/
mediator initstate_media for specification
InitstateReturnType* initstate_spec( CallContext context, UIntT seed, IntT size);

/** random_spec **/
mediator random_media for specification
Unifloat* random_spec(CallContext context);

/** setstate_spec **/
mediator setstate_media for specification
VoidTPtr setstate_spec(CallContext context, VoidTPtr StatePointer);

/** srandom_spec **/
mediator srandom_media for specification
void srandom_spec(CallContext context, UIntT seed);

/** rand_spec **/
mediator rand_media for specification
Unifloat* rand_spec(CallContext context);

/** rand_r_spec **/
mediator rand_r_media for specification
Unifloat* rand_r_spec(CallContext context, UIntT seed);

/** srand_spec **/
mediator srand_media for specification
void srand_spec(CallContext context, UIntT seed);


#endif
