/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef MATH_RAND_MODEL_SEH
#define MATH_RAND_MODEL_SEH

#include "common/common_model.seh"
#include "math/math/math_data.seh"
#include "math/rand/tests/rand_scenario.seh"

/********************************************************************/
/**                           Rand48 State                         **/
/********************************************************************/

//for drand48, erand48, lrand48, jrand48, mrand48, nrand48 functions
specification typedef struct Random48State
{
    Unifloat* seed_model;
    Unifloat* a_model;
    Unifloat* c_model;
}Random48State;
Random48State* create_Random48State(Unifloat* seed_model, Unifloat* a_model, Unifloat* c_model);
Random48State* Rand48State;

specification typedef struct Seed48ReturnType
{
    UShortT res[3];
}Seed48ReturnType;

Seed48ReturnType* create_Seed48ReturnType(UShortT res[3]);

specification typedef struct InitstateReturnType
{
    VoidTPtr res;
    VoidTPtr CurStatePointer;
}InitstateReturnType;

InitstateReturnType* create_InitstateReturnType(VoidTPtr res, VoidTPtr CurStatePointer);

//for initstate, setstate, random, srandom functions
specification typedef struct RandomState
{
    List* StatePointer;
    VoidTPtr CurrentStatePointer;
}RandomState;
RandomState* create_RandomState();
RandomState* RandState;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
specification
Unifloat* drand48_spec(CallContext context);
Unifloat* drand48_model();

/** erand48_spec **/
specification
Unifloat* erand48_spec(CallContext context, UShortT* xsubi);
Unifloat* erand48_model(UShortT* xsubi);

/** jrand48_spec **/
specification
Unifloat* jrand48_spec( CallContext context, UShortT* xsubi);
Unifloat* jrand48_model(UShortT* xsubi);

/** lcong48_spec **/
specification
void lcong48_spec(CallContext context, UShortT *param);

/** lrand48_spec **/
specification
Unifloat* lrand48_spec(CallContext context);
Unifloat* lrand48_model();

/** mrand48_spec **/
specification
Unifloat* mrand48_spec(CallContext context);
Unifloat* mrand48_model();

/** nrand48_spec **/
specification
Unifloat* nrand48_spec( CallContext context, UShortT* xsubi);
Unifloat* nrand48_model(UShortT* xsubi);

/** seed48_spec **/
specification
Seed48ReturnType* seed48_spec( CallContext context, UShortT* seed16v3);

/** srand_spec **/
specification
void srand48_spec( CallContext context, LongT seedval);

/** initstate_spec **/
specification
InitstateReturnType* initstate_spec( CallContext context, UIntT seed, IntT size);

/** random_spec **/
specification
Unifloat* random_spec(CallContext context);

/** setstate_spec **/
specification
VoidTPtr setstate_spec(CallContext context, VoidTPtr StatePointer);

/** srandom_spec **/
specification
void srandom_spec( CallContext context, UIntT seed);

/** rand_spec **/
specification
Unifloat* rand_spec(CallContext context);

/** rand_r_spec **/
specification
Unifloat* rand_r_spec(CallContext context, UIntT seed);

/** srand_spec **/
specification
void srand_spec(CallContext context, UIntT seed);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

Map* bubblesort(Map* RandomSample);

/********************************************************************/
/**                      Unifloat Random Functions                 **/
/********************************************************************/

BoolT Kolmogorov_drand48(Map* RandomSample);
BoolT Kolmogorov_lrand48(Map* RandomSample);
BoolT Kolmogorov_mrand48(Map* RandomSample);


#endif



