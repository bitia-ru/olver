/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/ctrig/tests/ctrig_scenario.seh"
#include "math/ctrig/ctrig_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "math/math/math_data.seh"
#include <stdio.h>

static CallContext context;
static VoidTPtr ptr;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_ctrig_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    initReqFilters();

    setFinishMode(UNTIL_END); 
    
    return true;
}
static void finish_math_ctrig_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(math_ctrig_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario 
bool cacos_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2;
    char st[3][10] = {"cacosf", "cacos", "cacosl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(cacos_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(cacos_spec(context, x));
                    FILTER(st[type]);
                    /*
                     * cacos(conj(z)) = conj(cacos(z)), where conj(z) is the complex conjugate of z.
                     */
                    REQ_SCEN("cacos.ext.03;cacosf.ext.03;cacosl.ext.03", 
                        "cacos(conj(z)) = conj(cacos(z)), where conj(z) is the complex conjugate of z",
                        compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                    FILTER_CLEAN;
                }
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(cacos_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(cacos_spec(context, x));
                    FILTER(st[type]);
                    /*
                     * cacos(conj(z)) = conj(cacos(z)), where conj(z) is the complex conjugate of z.
                     */
                    REQ_SCEN("cacos.ext.03;cacosf.ext.03;cacosl.ext.03", 
                        "cacos(conj(z)) = conj(cacos(z)), where conj(z) is the complex conjugate of z",
                        compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                    FILTER_CLEAN;
                }
    }
    return true;
}


scenario 
bool casin_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2, *res3, *res4;
    char st[3][10] = {"casinf", "casin", "casinl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                res1 = casin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = casin_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = casin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = casin_spec(context, x);
                FILTER(st[type]);
                /*
                 * casin(conj(z)) = conj(casin(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("casin.ext.04;casinf.ext.04;casinl.ext.04", 
                    "casin(conj(z)) = conj(casin(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and casin is odd
                 */
                REQ_SCEN("casin.ext.05;casinf.ext.05;casinl.ext.05", 
                    "casin is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }

        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                res1 = casin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = casin_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = casin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = casin_spec(context, x);
                FILTER(st[type]);
                /*
                 * casin(conj(z)) = conj(casin(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("casin.ext.04;casinf.ext.04;casinl.ext.04", 
                    "casin(conj(z)) = conj(casin(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and casin is odd
                 */
                REQ_SCEN("casin.ext.05;casinf.ext.05;casinl.ext.05", 
                    "casin is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }
    }
    return true;
}

scenario 
bool catan_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2, *res3, *res4;
    char st[3][10] = {"catanf", "catan", "catanl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                res1 = catan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = catan_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = catan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = catan_spec(context, x);
                FILTER(st[type]);
                /*
                 * catan(conj(z)) = conj(catan(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("catan.ext.04;catanf.ext.04;catanl.ext.04", 
                    "catan(conj(z)) = conj(catan(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and catan is odd
                 */
                REQ_SCEN("catan.ext.05;catanf.ext.05;catanl.ext.05", 
                    "catan is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }

        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                res1 = catan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = catan_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = catan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = catan_spec(context, x);
                FILTER(st[type]);
                /*
                 * catan(conj(z)) = conj(catan(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("catan.ext.04;catanf.ext.04;catanl.ext.04", 
                    "catan(conj(z)) = conj(catan(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and catan is odd
                 */
                REQ_SCEN("catan.ext.05;catanf.ext.05;catanl.ext.05", 
                    "catan is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }
    }
    return true;
}

scenario 
bool ccos_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2, *res3, *res4;
    char st[3][10] = {"ccosf", "ccos", "ccosl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(par[i1], par[i2]);
                res1 = ccos_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = ccos_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = ccos_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = ccos_spec(context, x);
                FILTER(st[type]);                
                /*
                 * ccos(conj(z)) = conj(ccos(z)), where conj(z) is the complex conjugate of z
                 */
                REQ_SCEN("ccos.ext.04;ccosf.ext.04;ccosl.ext.04", 
                    "ccos(conj(z)) = conj(ccos(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));
                /*
                 * and ccos is even.
                 */
                REQ_SCEN("ccos.ext.05;ccosf.ext.05;ccosl.ext.05", 
                    "ccos is even",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }

        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(finite_par[i1], finite_par[i2]);
                res1 = ccos_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = ccos_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = ccos_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = ccos_spec(context, x);
                FILTER(st[type]);                
                /*
                 * ccos(conj(z)) = conj(ccos(z)), where conj(z) is the complex conjugate of z
                 */
                REQ_SCEN("ccos.ext.04;ccosf.ext.04;ccosl.ext.04", 
                    "ccos(conj(z)) = conj(ccos(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));
                /*
                 * and ccos is even.
                 */
                REQ_SCEN("ccos.ext.05;ccosf.ext.05;ccosl.ext.05", 
                    "ccos is even",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }
    }
    return true;
}

scenario 
bool csin_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2, *res3, *res4;
    char st[3][10] = {"csinf", "csin", "csinl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                res1 = csin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = csin_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = csin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = csin_spec(context, x);
                if (!(isInfinity_Unifloat(x->Re) && isInfinity_Unifloat(x->Im) || 
                    isNan_Unifloat(x->Re) && isInfinity_Unifloat(x->Im)))
                {
                    FILTER(st[type]);
                    /*
                     * csin(conj(z)) = conj(csin(z)), where conj(z) is the complex conjugate of z.
                     */
                    REQ_SCEN("csin.ext.04;csinf.ext.04;csinl.ext.04", 
                        "csin(conj(z)) = conj(csin(z)), where conj(z) is the complex conjugate of z",
                        (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                        (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                    res1->Re->sign = (-1) * res1->Re->sign;
                    res1->Im->sign = (-1) * res1->Im->sign;
                    res2->Re->sign = (-1) * res2->Re->sign;
                    res2->Im->sign = (-1) * res2->Im->sign;
                    /*
                     * and csin is odd
                     */
                    REQ_SCEN("csin.ext.05;csinf.ext.05;csinl.ext.05", 
                        "csin is odd",
                        (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                        (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                    FILTER_CLEAN;
                }
            }

        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                res1 = csin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = csin_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = csin_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = csin_spec(context, x);
                FILTER(st[type]);
                /*
                 * csin(conj(z)) = conj(csin(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("csin.ext.04;csinf.ext.04;csinl.ext.04", 
                    "csin(conj(z)) = conj(csin(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and csin is odd
                 */
                REQ_SCEN("csin.ext.05;csinf.ext.05;csinl.ext.05", 
                    "csin is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }
    }
    return true;
}


scenario 
bool ctan_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2, *res3, *res4;
    char st[3][10] = {"ctanf", "ctan", "ctanl"};

    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                res1 = ctan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = ctan_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = ctan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = ctan_spec(context, x);
                FILTER(st[type]);
                /*
                 * ctan(conj(z)) = conj(ctan(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("ctan.ext.04;ctanf.ext.04;ctanl.ext.04", 
                    "ctan(conj(z)) = conj(ctan(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and ctan is odd
                 */
                REQ_SCEN("ctan.ext.05;ctanf.ext.05;ctanl.ext.05", 
                    "ctan is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }

        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
            {
                x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                res1 = ctan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res2 = ctan_spec(context, x);
                x->Re->sign = (-1) * x->Re->sign;
                res3 = ctan_spec(context, x);
                x->Im->sign = (-1) * x->Im->sign;
                res4 = ctan_spec(context, x);
                FILTER(st[type]);
                /*
                 * ctan(conj(z)) = conj(ctan(z)), where conj(z) is the complex conjugate of z.
                 */
                REQ_SCEN("ctan.ext.04;ctanf.ext.04;ctanl.ext.04", 
                    "ctan(conj(z)) = conj(ctan(z)), where conj(z) is the complex conjugate of z",
                    (compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, conj_model(res3), mant) == 0));

                res1->Re->sign = (-1) * res1->Re->sign;
                res1->Im->sign = (-1) * res1->Im->sign;
                res2->Re->sign = (-1) * res2->Re->sign;
                res2->Im->sign = (-1) * res2->Im->sign;
                /*
                 * and ctan is odd
                 */
                REQ_SCEN("ctan.ext.05;ctanf.ext.05;ctanl.ext.05", 
                    "ctan is odd",
                    (compareWithPrecision_UnifloatComplex(res3, res1, mant) == 0) &&
                    (compareWithPrecision_UnifloatComplex(res4, res2, mant) == 0));
                FILTER_CLEAN;
            }
    }
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm math_ctrig_scenario =
{
    .init = init_math_ctrig_scenario,
    .finish = finish_math_ctrig_scenario,
    .actions = {     
                    cacos_scen,
                    casin_scen,
                    catan_scen,
                    ccos_scen,
                    csin_scen,
                    ctan_scen,
                    NULL 
                }
};

bool main_math_ctrig(int argc, char** argv)
{
    math_ctrig_scenario(argc,argv);
    return true;
}

#include "math/ctrig/tests/ctrig_scenario.seh"
#include "math/math/math_data.seh"

#ifdef MATH_CTRIG_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/float/float_media.seh"
#include "math/math/math_data.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initMath();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initMathCtrigSubsystem();
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;
    
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");

    
    start = clock();

    main_math_ctrig(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );        
    
    
    
    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_math_ctrig(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif

