/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/ctrig/ctrig_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathCtrigSubsystem(void)
{
  // Set up mediators
    set_mediator_cacos_spec(cacos_media);
    set_mediator_casin_spec(casin_media);
    set_mediator_catan_spec(catan_media);
    set_mediator_ccos_spec(ccos_media);
    set_mediator_csin_spec(csin_media);
    set_mediator_ctan_spec(ctan_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cacos_spec **/
//This mediator refers to: cacosf, cacos, cacosl
mediator cacos_media for 
specification
UnifloatComplex* cacos_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"cacosf:$(unifloat)$(unifloat)",
                           "cacos:$(unifloat)$(unifloat)", 
                           "cacosl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** casin_spec **/
//This mediator refers to: casinf, casin, casinl
mediator casin_media for 
specification
UnifloatComplex* casin_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"casinf:$(unifloat)$(unifloat)",
                           "casin:$(unifloat)$(unifloat)", 
                           "casinl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** catan_spec **/
//This mediator refers to: catanf, catan, catanl
mediator catan_media for 
specification
UnifloatComplex* catan_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"catanf:$(unifloat)$(unifloat)",
                           "catan:$(unifloat)$(unifloat)", 
                           "catanl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** ccos_spec **/
//This mediator refers to: ccosf, ccos, ccosl
mediator ccos_media for 
specification
UnifloatComplex* ccos_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"ccosf:$(unifloat)$(unifloat)",
                           "ccos:$(unifloat)$(unifloat)", 
                           "ccosl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** csin_spec **/
//This mediator refers to: csinf, csin, csinl
mediator csin_media for 
specification
UnifloatComplex* csin_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"csinf:$(unifloat)$(unifloat)",
                           "csin:$(unifloat)$(unifloat)", 
                           "csinl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** ctan_spec **/
//This mediator refers to: ctanf, ctan, ctanl
mediator ctan_media for 
specification
UnifloatComplex* ctan_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"ctanf:$(unifloat)$(unifloat)",
                           "ctan:$(unifloat)$(unifloat)", 
                           "ctanl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}


