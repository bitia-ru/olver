/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "math/gamma/gamma_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathGammaSubsystem(void)
{
  // Set up mediators
    set_mediator_lgamma_spec(lgamma_media);
    set_mediator_gamma_spec(gamma_media);
    set_mediator_lgamma_r_spec(lgamma_r_media);
    set_mediator_tgamma_spec(tgamma_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
/** gamma_spec **/
//This mediator refers to: gammaf, gamma, gammal
mediator gamma_media for specification
Unifloat* gamma_spec(CallContext context, Unifloat* x, 
                      IntT* signgam,  ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"gammaf:$(unifloat)",
                           "gamma:$(unifloat)", 
                           "gammal:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
            *signgam = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** lgamma_spec **/
//This mediator refers to: lgammaf, lgamma, lgammal
mediator lgamma_media for specification
Unifloat* lgamma_spec(CallContext context, Unifloat* x, 
                      IntT* signgam,  ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"lgammaf:$(unifloat)",
                           "lgamma:$(unifloat)", 
                           "lgammal:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
            *signgam = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** lgamma_r_spec **/
//This mediator refers to: lgammaf_r, lgamma_r, lgammal_r
mediator lgamma_r_media for 
specification
Unifloat* lgamma_r_spec(CallContext context, Unifloat* x, 
                      IntT* signp,  ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"lgammaf_r:$(unifloat)",
                           "lgamma_r:$(unifloat)", 
                           "lgammal_r:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
            *signp = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** tgamma_spec **/
//This mediator refers to: tgammaf, tgamma, tgammal
mediator tgamma_media for specification
Unifloat* tgamma_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"tgammaf:$(unifloat)",
                           "tgamma:$(unifloat)", 
                           "tgammal:$(unifloat)"};
    
        format_TSCommand( &command, st[x->type], x);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

