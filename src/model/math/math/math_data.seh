/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef MATH_DATA_SEH
#define MATH_DATA_SEH

#include "common/common_media.seh"
#include "process/fenv/fenv_common.seh"
#include "config/test_system_config.h" 

#define SUT_MATH_DOMAIN         1
#define SUT_MATH_SING           2

#define SUT_MATH_FP_NAN         0
#define SUT_MATH_FP_INFINITE    1
#define SUT_MATH_FP_ZERO        2
#define SUT_MATH_FP_SUBNORMAL   3
#define SUT_MATH_FP_NORMAL      4

#define SUT_MATH_HUGE_VAL   0x1.0p2047
#define SUT_MATH_HUGE_VALF  0x1.0p255f
#define SUT_MATH_HUGE_VALL  0x1.0p32767L

#define SUT_MATH_NAN        ((float)0x7fc00000UL)
#define SUT_MATH_M_1_PI     0.31830988618379067154
#define SUT_MATH_M_LOG10E   0.43429448190325182765
#define SUT_MATH_M_2_PI     0.63661977236758134308
#define SUT_MATH_M_LN2      0.69314718055994530942
#define SUT_MATH_M_SQRT1_2  0.70710678118654752440
#define SUT_MATH_M_PI_4     0.78539816339744830962
#define SUT_MATH_M_2_SQRTPI 1.12837916709551257390
#define SUT_MATH_M_SQRT2    1.41421356237309504880
#define SUT_MATH_M_LOG2E    1.4426950408889634074
#define SUT_MATH_M_PI_2     1.57079632679489661923
#define SUT_MATH_M_LN10     2.30258509299404568402
#define SUT_MATH_M_E        2.7182818284590452354
#define SUT_MATH_M_PI       3.14159265358979323846
#define SUT_MATH_INFINITY   SUT_MATH_HUGE_VALF

#define SUT_INT_MIN     (-2147483647 - 1) /* minimum (signed) int value */
#define SUT_INT_MAX       2147483647    /* maximum (signed) int value */
#define SUT_LONG_MIN    (-2147483647L - 1) /* minimum (signed) long value */
#define SUT_LONG_MAX      2147483647L   /* maximum (signed) long value */

#define SUT_MATH_MATH_ERRNO         1
#define SUT_MATH_MATH_ERREXCEPT     2

int SUT_FP_ILOGB0;
int SUT_FP_ILOGBNAN;


#define ZERO_SUPPORTED  1
#define NAN_SUPPORTED  1

#define PRECISION 160

#define ROUND TO_NEAREST
#define MAX_SIZE_UNIFLOAT 11

// NaN supporting
#define NAN_SUPPORT 1

// constants of rounding
#define TOWARD_ZERO 0
#define TO_NEAREST 1
#define POSITIVE_INFINITY 2
#define NEGATIVE_INFINITY 3


//#define PI       "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564"//856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019";
#define PI       "11.0010010000111111011010101000100010000101101000110000100011010011000100110001100110001010001011100000001101110000011100110100010010100100000010010011100000100010001010011001111100110001110100000000100000101110111110101001100011101100010011100110110010001001010001010010100000100001111001100011100011"
#define GAMMA    "0.57721566490153286060651209008240243104215933593992359880576723488486772677766467093694706329174674951463144724980708248096050401448654283622417399764492353625350033374293733773767394279259525824709491600873520394816567"
#define E        "2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226"//480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503";
#define EPSILON  "0.0000000000000000000000000000001"
//#define LN_2     "0.69314718055994530941723212145818"
#define LN_2     "0.101100010111001000010111111101111101000111001111011110011010101111001001111000111011001110011000000000111111001011110110101011110100000011110011010000110010011001110010100110001011011000101101100010100000110100010111010110111000101110101010111110100010101111100111101110000111011000100000011011011110101110101100100110000101010110010101010100101111101101001010111110100001101100010000"
//#define LOG2_E   "1,4426950408889634073599246810019"
#define LOG2_E   "1.01110001010101000111011001010010101110000010111111100001011101110111110100001111111111011010000011010010001110100111110100010001110101101010111011110101010100011011101011010010101101001011000100010110010010100010110011011001101000110100001001100100100011111011110000111000100001111110111010101010001011101101100110101100010010011011001001011110111010111000001011010111110000010110011"
//#define LOG10_E  "0,43429448190325182765112891891661"
#define LOG10_E  "0.0110111100101101111011000101010010011011100101000011100011001010100110101010110111010101010101111101011010011001111011100001100100011111011100011010001100000001001000101110010011010001000000010001110100011111100101101010001001111011110001110101001010011110001110101010000100100111011111010000101000000001011110011111100101001001000100011010101011001001011000110010001100100101000010101"
//#define LOG2_10  "3,3219280948873623478703194294894"
#define LOG2_10  "11.0101001001101001111000010010111100110100011011100010101111111001001001001010111111011011111111010011011010111111011011010011001101100101101100010101011111111000110111101100111010110101001110100100011011011010101100100000001000001011100111100001011001110100000110011001010000111111011110100111011101010100011111001110100011111000100100101111101010101101100011101011010000101111010110"

#define RESEARCH 1

typedef enum UnifloatType
{
    UniFloatT,
    UniDoubleT,
    UniLongDoubleT
}
UnifloatType;

typedef enum UnifloatKind
{
    Infinity,
    NaN,
    Normal
} 
UnifloatKind;

specification invariant typedef struct Unifloat
{
    IntT  sign;                        /* sign */
    IntT  exp;                          /* exponent */
    UIntT mant[MAX_SIZE_UNIFLOAT];  /* max length of mantissa of a number */
    UnifloatKind kind;              /* kind of floating point number (Normal, Infinity, NaN) */
    UnifloatType type;              /* type */
} Unifloat;

String* to_string_Unifloat(struct Unifloat* x);

Unifloat * create_UnifloatFull(
    IntT  sign,
    IntT  exp,
    UIntT mant[MAX_SIZE_UNIFLOAT],
    UnifloatKind kind,
    UnifloatType type
);

specification typedef struct UnifloatComplex
{
    Unifloat* Re;
    Unifloat* Im;
}UnifloatComplex;

static String* to_string_UnifloatComplex(struct UnifloatComplex* x);

UnifloatComplex * create_UnifloatComplex(
    Unifloat* Re,
    Unifloat* Im
);

/*
 * Maximum and minimum values of integer types on the only target 
 * platform.
 */


extern Unifloat* maxLongLongT;
extern Unifloat* maxLongT;

/*
 * Maximum and minimum values of floating point types on the only target 
 * platform.
 */

extern Map* max_Unifloat;
extern Map* min_Unifloat;
extern Map* infinity_Unifloat;
extern Map* nan_Unifloat;

extern Map* maxExp_Unifloat;
extern Map* minExp_Unifloat;
extern Map* digMant_Unifloat;
extern Map* digExp_Unifloat;
extern Map* size_Unifloat;
extern Map* sizeInLongs_Unifloat;

#define max_FloatT get_Unifloat(max_Unifloat, UniFloatT)
#define min_FloatT get_Unifloat(min_Unifloat, UniFloatT)
#define infinity_FloatT get_Unifloat(infinity_Unifloat, UniFloatT)
#define nan_FloatT get_Unifloat(nan_Unifloat, UniFloatT)

#define max_DoubleT get_Unifloat(max_Unifloat, UniDoubleT)
#define min_DoubleT get_Unifloat(min_Unifloat, UniDoubleT)
#define infinity_DoubleT get_Unifloat(infinity_Unifloat, UniDoubleT)
#define nan_DoubleT get_Unifloat(nan_Unifloat, UniDoubleT)

#define max_LongDoubleT get_Unifloat(max_Unifloat, UniLongDoubleT)
#define min_LongDoubleT get_Unifloat(min_Unifloat, UniLongDoubleT)
#define infinity_LongDoubleT get_Unifloat(infinity_Unifloat, UniLongDoubleT)
#define nan_LongDoubleT get_Unifloat(nan_Unifloat, UniLongDoubleT)

#define max_Unifloat(X) get_Unifloat(max_Unifloat, X)
#define min_Unifloat(X) get_Unifloat(min_Unifloat, X)
#define infinity_Unifloat(X) get_Unifloat(infinity_Unifloat, X)
#define nan_Unifloat(X) get_Unifloat(nan_Unifloat, X)


#define maxExp_FloatT getProperty_Unifloat(maxExp_Unifloat, UniFloatT)
#define minExp_FloatT getProperty_Unifloat(minExp_Unifloat, UniFloatT)
#define digMant_FloatT getProperty_Unifloat(digMant_Unifloat, UniFloatT)
#define digExp_FloatT getProperty_Unifloat(digExp_Unifloat, UniFloatT)
#define size_FloatT getProperty_Unifloat(size_Unifloat, UniFloatT)
#define sizeInLongs_FloatT getProperty_Unifloat(sizeInLongs_Unifloat, UniFloatT)

#define maxExp_DoubleT getProperty_Unifloat(maxExp_Unifloat, UniDoubleT)
#define minExp_DoubleT getProperty_Unifloat(minExp_Unifloat, UniDoubleT)
#define digMant_DoubleT getProperty_Unifloat(digMant_Unifloat, UniDoubleT)
#define digExp_DoubleT getProperty_Unifloat(digExp_Unifloat, UniDoubleT)
#define size_DoubleT getProperty_Unifloat(size_Unifloat, UniDoubleT)
#define sizeInLongs_DoubleT getProperty_Unifloat(sizeInLongs_Unifloat, UniDoubleT)

#define maxExp_LongDoubleT getProperty_Unifloat(maxExp_Unifloat, UniLongDoubleT)
#define minExp_LongDoubleT getProperty_Unifloat(minExp_Unifloat, UniLongDoubleT)
#define digMant_LongDoubleT getProperty_Unifloat(digMant_Unifloat, UniLongDoubleT)
#define digExp_LongDoubleT getProperty_Unifloat(digExp_Unifloat, UniLongDoubleT)
#define size_LongDoubleT getProperty_Unifloat(size_Unifloat, UniLongDoubleT)
#define sizeInLongs_LongDoubleT getProperty_Unifloat(sizeInLongs_Unifloat, UniLongDoubleT)

#define maxExp_Unifloat(X) getProperty_Unifloat(maxExp_Unifloat, X)
#define minExp_Unifloat(X) getProperty_Unifloat(minExp_Unifloat, X)
#define digMant_Unifloat(X) getProperty_Unifloat(digMant_Unifloat, X)
#define digExp_Unifloat(X) getProperty_Unifloat(digExp_Unifloat, X)
#define size_Unifloat(X) getProperty_Unifloat(size_Unifloat, X)
#define sizeInLongs_Unifloat(X) getProperty_Unifloat(sizeInLongs_Unifloat, X)


extern Unifloat* Pi[3];
extern Unifloat* Ln_2[3];
extern Unifloat* Log2_e[3];
extern Unifloat* Log10_e[3];
extern Unifloat* Log2_10[3];

const char* getTestDataFile(const char *);

/************************************************************************/
/*                          UNIFLOAT FUNCTIONS                          */
/************************************************************************/

Unifloat* create_Unifloat(IntT sign, IntT exponent, UIntT kind, UnifloatType type);
Unifloat* createZero_Unifloat(UnifloatType type);
Unifloat* createOne_Unifloat(UnifloatType type);

IntT compare_Unifloat(Unifloat* x, Unifloat* y);
IntT compareWithPrecision_Unifloat(Unifloat* x, Unifloat* y, IntT amount);
IntT compareWithPrecision_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y, IntT amount);

bool isNormal_Unifloat(Unifloat* x);
bool isInfinity_Unifloat(Unifloat* x);
bool isNan_Unifloat(Unifloat* x);
bool isZero_Unifloat(Unifloat* x);
bool isOverflow_Unifloat(Unifloat* x);
bool isUnderflow_Unifloat(Unifloat* x);
bool isRepresentable_Unifloat(Unifloat* x);
bool isSubnormal_Unifloat(Unifloat* x);
bool isInteger_Unifloat(Unifloat* x);

Unifloat* add_Unifloat(Unifloat* x, Unifloat* y);
Unifloat* sub_Unifloat(Unifloat* x, Unifloat* y);
Unifloat* mul_Unifloat(Unifloat* x, Unifloat* y);
Unifloat* div_Unifloat(Unifloat* x, Unifloat* y);
Unifloat* abs_Unifloat(Unifloat* x);


Unifloat* round_Unifloat(Unifloat* x, UIntT precision); /* round x with precision depending on type */
Unifloat* checkRange_Unifloat(Unifloat* x);             /* check for range exceptions */
Unifloat* changeSign_Unifloat(Unifloat* x, IntT sign);  /* set sign equal s. If s = 0 then invert sign */

Unifloat* convertFloat_Unifloat(FloatT x);                              /* from float to Unifloat */
Unifloat* convertDouble_Unifloat(DoubleT x);                            /* from double to Unifloat */
Unifloat* convertLongDouble_Unifloat(LongDoubleT x);                    /* from long double to Unifloat */
Unifloat* convertFloatPoint_Unifloat(LongDoubleT x, UnifloatType type); /* from any floating point to Unifloat */
Unifloat* convertString_Unifloat(CString* str, UnifloatType type);
Unifloat* convertBinaryString_Unifloat(CString* number, UnifloatType type);
Unifloat* convertHexString_Unifloat(CString* number, UnifloatType type);
Unifloat* convertInteger_Unifloat(IntT x, UnifloatType type);
Unifloat* convertLong_Unifloat(LongT number, UnifloatType type);

IntT convertUnifloat_Integer(Unifloat* x, IntT* error);
LLongT convertUnifloat_LongLong(Unifloat* x, IntT* error);

Unifloat* get_Unifloat(Map* x, UnifloatType type);
IntT getProperty_Unifloat(Map* property, UnifloatType type);

/************************************************************************/
/*                    UNIFLOAT COMPLEX FUNCTIONS                        */
/************************************************************************/

UnifloatComplex* create_UnifloatComplex(Unifloat* x, Unifloat* y);
IntT compare_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y);

Unifloat* abs_UnifloatComplex(UnifloatComplex* x);
Unifloat* carg_Unifloat(UnifloatComplex* x);

UnifloatComplex* add_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y);
UnifloatComplex* sub_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y);
UnifloatComplex* mul_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y);
UnifloatComplex* div_UnifloatComplex(UnifloatComplex* x, UnifloatComplex* y);

/************************************************************************/
/*                  UNIFLOAT AUXILIARY FUNCTIONS                        */
/************************************************************************/

UIntT getMant_Unifloat(Unifloat* x, UIntT index);            /* get bit in mantissa */
void setMant_Unifloat(Unifloat* x, UIntT index, UIntT bit);    /* set bit in mantissa */

Unifloat* normalize_Unifloat(Unifloat* x);

UIntT newPrecision_Unifloat(UIntT oldBase, UIntT precision, UIntT newBase);    /* evaluation of newFloat precision(nfp), namely log_newBase(oldBase) */

void print_Unifloat(Unifloat* x);                    
void printExp_Unifloat(Unifloat* x, IntT amount);    /* print x in exponent form with amount of digits */

/************************************************************************/
/*                     UNIFLOAT TRIG FUNCTIONS                          */
/************************************************************************/

Unifloat* sin_Unifloat(Unifloat* x);
Unifloat* cos_Unifloat(Unifloat* x);
Unifloat* tan_Unifloat(Unifloat* x);
void sincos_Unifloat(Unifloat* x, Unifloat* s, Unifloat* c);

Unifloat* asin_Unifloat(Unifloat* x);
Unifloat* acos_Unifloat(Unifloat* x);
Unifloat* atan_Unifloat(Unifloat* x);
Unifloat* atan2_Unifloat(Unifloat* x, Unifloat* y);

IntT compareWithError_Unifloat(Unifloat* x);
Unifloat* arrangeArgument_Unifloat(Unifloat* x);
Unifloat* calcAtan_Unifloat(Unifloat* x, Unifloat* y, IntT i);
Unifloat* calcTan_Unifloat(Unifloat* x, IntT i);

/************************************************************************/
/*                    UNIFLOAT EXPONENTIAL FUNCTIONS                    */
/************************************************************************/

Unifloat* exp_Unifloat(Unifloat* x);
Unifloat* exp2_Unifloat(Unifloat* x);
Unifloat* expm1_Unifloat(Unifloat* x);
Unifloat* log_Unifloat(Unifloat* x);
Unifloat* log1p_Unifloat(Unifloat* x);
Unifloat* sqrt_Unifloat(Unifloat* x);

Unifloat* powInt_Unifloat(Unifloat* x, UIntT n);

/********************************************************************/
/**                    UNIFLOAT COMPLEX FUNCTIONS                  **/
/********************************************************************/
Unifloat* cabs_model(UnifloatComplex* x);
Unifloat* carg_model(UnifloatComplex* x);
Unifloat* cimag_model(UnifloatComplex* x);
UnifloatComplex* conj_model(UnifloatComplex* x);
UnifloatComplex* cproj_model(UnifloatComplex* x);
Unifloat* creal_model(UnifloatComplex* x);
/********************************************************************/
/**                     UNIFLOAT CHYPER FUNCTIONS                  **/
/********************************************************************/
UnifloatComplex* cacosh_model(UnifloatComplex* x);
UnifloatComplex* casinh_model(UnifloatComplex* x);
UnifloatComplex* catanh_model(UnifloatComplex* x);
UnifloatComplex* ccosh_model(UnifloatComplex* x);
UnifloatComplex* csinh_model(UnifloatComplex* x);
UnifloatComplex* ctanh_model(UnifloatComplex* x);

/************************************************************************/
/*               UNIFLOAT COMPLEX EXPONENTIAL FUNCTIONS                 */
/************************************************************************/

UnifloatComplex* cexp_Unifloat(UnifloatComplex* x);
UnifloatComplex* clog_Unifloat(UnifloatComplex* x);
UnifloatComplex* clog10_Unifloat(UnifloatComplex* x);
UnifloatComplex* cpow_Unifloat(UnifloatComplex* x, UnifloatComplex* y);
UnifloatComplex* csqrt_Unifloat(UnifloatComplex* x);

/************************************************************************/
/*                          UNIFLOAT FORMATTERS                         */
/************************************************************************/

void initMathMedia(void);
static void unifloat_formatter(TSStream* stream, Unifloat* value);
void writeUnifloat_TSStream(TSStream* stream, Unifloat* value);
Unifloat* readUnifloat_TSStream(TSStream* stream);
void writeBit_TSStream(TSStream* stream, UIntT bit);
UIntT readBit_TSStream(TSStream* stream);

/************************************************************************/
/*                          GLOBAL INIT FUNCTION                        */
/************************************************************************/

void initMath(void);

/************************************************************************/
/*                          END UNIFLOAT FUNCTIONS                      */
/************************************************************************/





/************************************************************************/
/* Commands copied from fenv_media.sec, may need update...              */
/************************************************************************/
//FEnvExceptions readFEnvExceptions_TSStream_command(TSStream* stream);

/** feclearexcept_command **/
IntT feclearexcept_command(CallContext context, FEnvExceptions excepts);

/** fegetenv_command **/
IntT fegetenv_command(CallContext context, VoidTPtr envp);

/** fegetexceptflag_command **/
IntT fegetexceptflag_command(CallContext context, VoidTPtr flagp, FEnvExceptions excepts);

/** fegetround_command **/
IntT fegetround_command(CallContext context);

/** feholdexcept_command **/
IntT feholdexcept_command(CallContext context, VoidTPtr envp);

/** feraiseexcept_command **/
IntT feraiseexcept_command(CallContext context, FEnvExceptions excepts);

/** fesetenv_command **/
IntT fesetenv_command(CallContext context, FEnvTPtr envp);

/** fesetexceptflag_command **/
IntT fesetexceptflag_command(CallContext context, FExceptTPtr flagp, FEnvExceptions excepts);

/** fesetround_command **/
IntT fesetround_command(CallContext context, IntT round);

/** fetestexcept_command **/
FEnvExceptions fetestexcept_command(CallContext context, FEnvExceptions excepts);

/** feupdateenv_command **/
IntT feupdateenv_command(CallContext context, FEnvTPtr envp);
/************************************************************************/
/*                   End of copied commands                             */
/************************************************************************/
IntT get_math_errhandling_command(CallContext context);

#endif
