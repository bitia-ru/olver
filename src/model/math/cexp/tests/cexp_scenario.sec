/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/cexp/tests/cexp_scenario.seh"
#include "math/cexp/cexp_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "math/math/math_data.seh"
#include "math/math/math_config.h"
#include <stdio.h>

static CallContext context;
static VoidTPtr ptr;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_cexp_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    initReqFilters();

    setFinishMode(UNTIL_END); 
    
    return true;
}

static void finish_math_cexp_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(math_cexp_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario 
bool cexp_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2;
    char st[3][10] = {"cexpf", "cexp", "cexpl"};

    INIT_REQ_SCEN
    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(cexp_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(cexp_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * cexp(conj(z)) = conj(cexp(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("cexp.ext.03;cexpf.ext.03;cexpl.ext.03", 
                            "cexp(conj(z)) = conj(cexp(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(cexp_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(cexp_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * cexp(conj(z)) = conj(cexp(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("cexp.ext.03;cexpf.ext.03;cexpl.ext.03", 
                            "cexp(conj(z)) = conj(cexp(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
    }
    VERDICT_REQ_SCEN
    return true;
}

scenario 
bool clog_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2;
    char st[3][10] = {"clogf", "clog", "clogl"};

    INIT_REQ_SCEN
    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(clog_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(clog_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * clog(conj(z)) = conj(clog(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("clog.ext.03;clogf.ext.03;clogl.ext.03", 
                            "clog(conj(z)) = conj(clog(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(clog_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(clog_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * clog(conj(z)) = conj(clog(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("clog.ext.03;clogf.ext.03;clogl.ext.03", 
                            "clog(conj(z)) = conj(clog(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
    }
    VERDICT_REQ_SCEN
    return true;
}

scenario 
bool clog10_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2;
    char st[3][10] = {"clog10f", "clog10", "clog10l"};

    INIT_REQ_SCEN
    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(clog10_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(clog10_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * clog10(conj(z)) = conj(clog10(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("clog10.ext.03;clog10f.ext.03;clog10l.ext.03", 
                            "clog10(conj(z)) = conj(clog10(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(clog10_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(clog10_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * clog10(conj(z)) = conj(clog10(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("clog10.ext.03;clog10f.ext.03;clog10l.ext.03", 
                            "clog10(conj(z)) = conj(clog10(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
    }
    VERDICT_REQ_SCEN
    return true;
}

scenario
bool cpow_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type, i;
    UnifloatComplex* x;
    UnifloatComplex* y;
    for(type = 0; type < 3; type++)
    {
        Unifloat* RE_X[16] = { 
            clone(Nan[type]),
            clone(Nan[type]),
            clone(Nan[type]),
            clone(Inf[type]),
            createOne_Unifloat(type),
            createZero_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type),

            clone(Inf[type]),
            clone(Inf[type]),
            createOne_Unifloat(type),

            createOne_Unifloat(type),
            createZero_Unifloat(type),
            createOne_Unifloat(type),

            convertInteger_Unifloat(123, type),
            convertInteger_Unifloat(10, type)
            };
        Unifloat* IM_X[16] = { 
            clone(Nan[type]),
            clone(Inf[type]),
            createOne_Unifloat(type),
            clone(Nan[type]),
            clone(Nan[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type),
            createOne_Unifloat(type),

            clone(Inf[type]),
            createOne_Unifloat(type),
            clone(Inf[type]),
            
            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createZero_Unifloat(type),

            convertInteger_Unifloat(123, type),
            convertString_Unifloat(create_CString("0.001"), type)
            };
        Unifloat* RE_Y[16] = { 
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            clone(Nan[type]),
            clone(Nan[type]),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),
            convertInteger_Unifloat(2, type),

            createOne_Unifloat(type),
            createZero_Unifloat(type),
            createOne_Unifloat(type),

            convertInteger_Unifloat(123, type),
            convertInteger_Unifloat(10, type)
            };
        Unifloat* IM_Y[16] = { 
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            clone(Nan[type]),
            createOne_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),
            createZero_Unifloat(type),

            createOne_Unifloat(type),
            createOne_Unifloat(type),
            createZero_Unifloat(type),     
            convertInteger_Unifloat(10, type),
            convertString_Unifloat(create_CString("0.001"), type)
        };
        for(i = 0; i < 8; i++)
        {
            round_Unifloat(RE_X[i], leng_num[type]);
            round_Unifloat(IM_X[i], leng_num[type]);
            round_Unifloat(RE_Y[i], leng_num[type]);
            round_Unifloat(IM_Y[i], leng_num[type]);
            x = create_UnifloatComplex(RE_X[i], IM_X[i]);
            y = create_UnifloatComplex(RE_Y[i], IM_Y[i]);

            cpow_spec(context, x, y);
        }

        for (i = 8; i < 16; i++)
        {
            round_Unifloat(RE_X[i], leng_num[type]);
            round_Unifloat(IM_X[i], leng_num[type]);
            x = create_UnifloatComplex(RE_X[i], IM_X[i]);
            round_Unifloat(RE_Y[i], leng_num[type]);
            round_Unifloat(IM_Y[i], leng_num[type]);
            y = create_UnifloatComplex(RE_Y[i], IM_Y[i]);
            cpow_spec(context, x, y);
            x->Im->sign = (-1)*x->Im->sign;
            y->Im->sign = (-1)*y->Im->sign;
            cpow_spec(context, x, y);
            x->Re->sign = (-1)*x->Re->sign;
            y->Re->sign = (-1)*y->Re->sign;
            cpow_spec(context, x, y);
            x->Im->sign = (-1)*x->Im->sign;
            y->Im->sign = (-1)*y->Im->sign;
            cpow_spec(context, x, y);
        }
    }
    return true;
}

scenario 
bool csqrt_scen()
{
    int leng_num[3] = {digMant_FloatT, digMant_DoubleT, digMant_LongDoubleT};
    Unifloat* Nan[3] = {clone(nan_FloatT), clone(nan_DoubleT), clone(nan_LongDoubleT)};
    Unifloat* Inf[3] = {clone(infinity_FloatT), clone(infinity_DoubleT), clone(infinity_LongDoubleT)};
    int type;
    int i1, i2, sign;
    UnifloatComplex* x, *res1, *res2;
    char st[3][10] = {"csqrtf", "csqrt", "csqrtl"};

    INIT_REQ_SCEN
    for(type = 0; type < 3; type++)
    {
        int mant = digMant_Unifloat(type);
        Unifloat* par[4] = {
            clone(Nan[type]),
            clone(Inf[type]),
            createZero_Unifloat(type),
            createOne_Unifloat(type)
        };
        Unifloat* finite_par[4] = 
        {
            convertString_Unifloat(create_CString("0,5"), type),
            convertInteger_Unifloat(10, type),
            convertInteger_Unifloat(123, type),
            createOne_Unifloat(type)
        };
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(par[i1]), clone(par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(csqrt_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(csqrt_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * csqrt(conj(z)) = conj(csqrt(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("csqrt.ext.03;csqrtf.ext.03;csqrtl.ext.03", 
                            "csqrt(conj(z)) = conj(csqrt(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
        for (i1 = 0; i1 < 4; i1++)
            for (i2 = 0; i2 < 4; i2++)
                for (sign = 1; sign > -2; sign-=2)
                {
                    x = create_UnifloatComplex(clone(finite_par[i1]), clone(finite_par[i2]));
                    x->Re->sign = sign * x->Re->sign;
                    res1 = clone(csqrt_spec(context, x));
                    x->Im->sign = (-1) * x->Im->sign;
                    res2 = clone(csqrt_spec(context, x));
                    if(CHECK_EXTENDED_REQ)
                    {
                        FILTER(st[type]);
                        /*
                         * csqrt(conj(z)) = conj(csqrt(z)), where conj(z) is the complex conjugate of z.
                         */
                        REQ_SCEN("csqrt.ext.03;csqrtf.ext.03;csqrtl.ext.03", 
                            "csqrt(conj(z)) = conj(csqrt(z)), where conj(z) is the complex conjugate of z",
                            compareWithPrecision_UnifloatComplex(res2, conj_model(res1), mant) == 0);
                        FILTER_CLEAN;
                    }
                }
    }
    VERDICT_REQ_SCEN
    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm math_cexp_scenario =
{
    .init = init_math_cexp_scenario,
    .finish = finish_math_cexp_scenario,
    .actions = {     
                    cexp_scen,
                    clog_scen,
                    clog10_scen,
                    cpow_scen,
                    csqrt_scen,
                    NULL 
                }
};

bool main_math_cexp(int argc, char** argv)
{
    math_cexp_scenario(argc,argv);
    return true;
}

#include "math/cexp/tests/cexp_scenario.seh"
#include "math/math/math_data.seh"

#ifdef MATH_CEXP_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/float/float_media.seh"
#include "math/math/math_data.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initMath();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initMathCexpSubsystem();
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;
    
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");

    
    start = clock();

    main_math_cexp(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );        
    
    
    
    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_math_cexp(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif
