/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/cexp/cexp_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMathCexpSubsystem(void)
{
  // Set up mediators
    set_mediator_cexp_spec(cexp_media);
    set_mediator_clog_spec(clog_media);
    set_mediator_clog10_spec(clog10_media);
    set_mediator_cpow_spec(cpow_media);
    set_mediator_csqrt_spec(csqrt_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cexp_spec **/
//This mediator refers to: cexpf, cexp, cexpl
mediator cexp_media for 
specification
UnifloatComplex* cexp_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"cexpf:$(unifloat)$(unifloat)",
                           "cexp:$(unifloat)$(unifloat)", 
                           "cexpl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** clog_spec **/
//This mediator refers to: clogf, clog, clogl
mediator clog_media for 
specification
UnifloatComplex* clog_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"clogf:$(unifloat)$(unifloat)",
                           "clog:$(unifloat)$(unifloat)", 
                           "clogl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** clog10_spec **/
//This mediator refers to: clog10f, clog10, clog10l
mediator clog10_media for 
specification
UnifloatComplex* clog10_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"clog10f:$(unifloat)$(unifloat)",
                           "clog10:$(unifloat)$(unifloat)", 
                           "clog10l:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** cpow_spec **/
//This mediator refers to: cpowf, cpow, cpowl
mediator cpow_media for 
specification
UnifloatComplex* cpow_spec(CallContext context, UnifloatComplex* x, UnifloatComplex* y)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"cpowf:$(unifloat)$(unifloat)$(unifloat)$(unifloat)",
                           "cpow:$(unifloat)$(unifloat)$(unifloat)$(unifloat)", 
                           "cpowl:$(unifloat)$(unifloat)$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im, y->Re, y->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

/** csqrt_spec **/
//This mediator refers to: csqrtf, csqrt, csqrtl
mediator csqrt_media for 
specification
UnifloatComplex* csqrt_spec(CallContext context, UnifloatComplex* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* real, *imag;
        UnifloatComplex* res;
        char st[3][100] = {"csqrtf:$(unifloat)$(unifloat)",
                           "csqrt:$(unifloat)$(unifloat)", 
                           "csqrtl:$(unifloat)$(unifloat)"};
    
        format_TSCommand( &command, st[x->Im->type], x->Re, x->Im);
        
        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            real = readUnifloat_TSStream(&command.response);
            imag = readUnifloat_TSStream(&command.response);
            res = create_UnifloatComplex(real, imag);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
}

