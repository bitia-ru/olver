/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "math/hyper/tests/hyper_scenario.seh"
#include "math/hyper/hyper_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "math/math/math_data.seh"
#include <stdio.h>

static CallContext context;
static VoidTPtr ptr;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_math_hyper_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    initReqFilters();

    ptr = allocateMemoryBlock(context, 1024);

    setFinishMode(UNTIL_END);     

    return true;
}
static void finish_math_hyper_scenario(void)
{
    deallocateMemoryBlock(context, ptr);
    TEST_SCENARIO_VERDICT_VERBOSE(hyper_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario bool acosh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[7] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345)
    };
    
    testX[5]->exp = -140;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 7; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                acosh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool asinh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[10] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345),
        createOne_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniDoubleT),
        createOne_Unifloat(UniFloatT)
    };
    
    testX[5]->exp = -140;
    testX[7]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    testX[8]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    testX[9]->exp = 1 - digMant_FloatT + minExp_FloatT;
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 10; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                asinh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool atanh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[10] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345),
        createOne_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniDoubleT),
        createOne_Unifloat(UniFloatT)
    };
    
    testX[5]->exp = -140;
    testX[7]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    testX[8]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    testX[9]->exp = 1 - digMant_FloatT + minExp_FloatT;
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 10; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                atanh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool cosh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[8] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345),
        createOne_Unifloat(UniLongDoubleT)
    };
    
    testX[5]->exp = -140;
    testX[7]->exp = 15;

    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 8; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                cosh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool sinh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[11] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345),
        createOne_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniDoubleT),
        createOne_Unifloat(UniFloatT)
    };
    
    testX[5]->exp = -140;
    testX[7]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    testX[8]->exp = 15;
    testX[9]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    testX[10]->exp = 1 - digMant_FloatT + minExp_FloatT;
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 11; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                sinh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

scenario bool tanh_scen()
{
    IntT type, i, sign;

    Unifloat* testX[10] = 
    {
        clone(nan_LongDoubleT),
        clone(infinity_LongDoubleT),
        createZero_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniLongDoubleT),
        convertDouble_Unifloat(2.783),
        convertDouble_Unifloat(6.51),
        convertDouble_Unifloat(0.1345),
        createOne_Unifloat(UniLongDoubleT),
        createOne_Unifloat(UniDoubleT),
        createOne_Unifloat(UniFloatT)
    };
    
    testX[5]->exp = -140;
    testX[7]->exp = 1 - digMant_LongDoubleT + minExp_LongDoubleT;
    testX[8]->exp = 1 - digMant_DoubleT + minExp_DoubleT;
    testX[9]->exp = 1 - digMant_FloatT + minExp_FloatT;
    
    for(type = 2; type >= 0 ; type--)
        for(i = 0; i < 10; i++)
            for(sign = -1; sign < 2; sign += 2)
            {
                testX[i]->type = type;
                tanh_spec(
                    context,
                    checkRange_Unifloat(changeSign_Unifloat(testX[i], sign)),
                    requestErrorCode()
                    );
            }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm math_hyper_scenario =
{
    .init = init_math_hyper_scenario,
    .finish = finish_math_hyper_scenario,
    .actions = { 
                    acosh_scen,
                    asinh_scen,
                    atanh_scen,
                    cosh_scen,
                    sinh_scen,
                    tanh_scen,
                    NULL 
                }
};

bool main_math_hyper(int argc, char** argv)
{
    math_hyper_scenario(argc,argv);
    return true;
}

#include "math/math/math_data.seh"

#ifdef MATH_HYPER_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "math/hyper/hyper_media.seh"
#include "math/math/math_data.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initMath();

    initMathHyperSubsystem();
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;

    initTestSystem();

    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");

    
    start = clock();


    main_math_hyper(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );        
    
    
    
    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_math_hyper(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif


