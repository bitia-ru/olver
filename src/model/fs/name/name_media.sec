/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "fs/name/name_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initFsNameSubsystem(void)
{
  // Set up mediators
    set_mediator_basename_spec(basename_media);
    set_mediator_dirname_spec(dirname_media);
    set_mediator_realpath_spec(realpath_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** basename_spec **/

mediator basename_media for specification
CString* basename_spec( CallContext context, CString* path )
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res=NULL;;
        format_TSCommand( &command, "basename:$(str)", path);

        DUMP("Bef exec\n");
        executeCommandInContext( context, &command );
        DUMP("Aft exec\n");
        if (!isBadVerdict())
        {
            DUMP("Good exec\n");
            timestamp = command.meta.timestamp;
            res=readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}

/** dirname_spec **/

mediator dirname_media for specification
CString* dirname_spec( CallContext context, CString* path )
{
   call
    {
        TSCommand command = create_TSCommand();
        CString* res = NULL;
        format_TSCommand( &command, "dirname:$(str)",  path);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}
/** realpath_spec **/

mediator realpath_media for specification
CString* realpath_spec( CallContext context, CString* file_name,
                       StringTPtr resolved_name, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
    
        format_TSCommand( &command, "realpath:$(str)$(ptr)",
            file_name, create_VoidTPtrObj(resolved_name));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}




