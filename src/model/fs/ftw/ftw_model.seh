/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FS_FTW_MODEL_SEH
#define FS_FTW_MODEL_SEH

#include "common/common_model.seh"
#include "fs/fs/fs_model.seh"

/*****************************************************************************/
/**                            FTWStructure Type                            **/
/*****************************************************************************/

/*
 * This type represents FTW structure.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <ftw.h>'
 */
specification typedef struct FTWStructure
{
    IntT base;
    IntT level;
} FTWStructure;

FTWStructure* create_FTWStructure(IntT base, IntT level);

/*****************************************************************************/
/**                          FTWFunctionFlag Type                           **/
/*****************************************************************************/

/*
 * This type represents possible values of the third argument of the
 * application-supplied function that is passed as the second argument to
 * ftw(), nftw() (ftw64() and nftw64()) functions.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <ftw.h>'
 */
typedef enum FTWFunctionFlag
{
    SUT_FTW_F       =  0,   /* FTW_F */
    SUT_FTW_D       =  1,   /* FTW_D */
    SUT_FTW_DNR     =  2,   /* FTW_DNR */
    SUT_FTW_DP      =  3,   /* FTW_DP */
    SUT_FTW_NS      =  4,   /* FTW_NS */
    SUT_FTW_SL      =  5,   /* FTW_SL */
    SUT_FTW_SLN     =  6,   /* FTW_SLN */
    SUT_FTW_UNKNOWN = -1
} FTWFunctionFlag;

/*****************************************************************************/
/**                              NFTWFlags Type                             **/
/*****************************************************************************/

/*
 * This type represents flags used as forth argument to nftw() (and nftw64())
 * functions.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <ftw.h>'
 */
typedef struct NFTWFlags
{
    bool phys;          /* FTW_PHYS */
    bool mount;         /* FTW_MOUNT */
    bool depth;         /* FTW_DEPTH */
    bool chdir;         /* FTW_CHDIR */
} NFTWFlags;
 
NFTWFlags default_NFTWFlags(void);

specification typedef NFTWFlags NFTWFlagsObj;

NFTWFlagsObj* create_NFTWFlagsObj(NFTWFlags flags);

NFTWFlagsObj* default_NFTWFlagsObj(void);

/*****************************************************************************/
/**                            FTWFunction Type                             **/
/*****************************************************************************/
specification typedef struct FTWFunctionCall
{
    CString *path;
    FileStatus *file_stat;
    FTWFunctionFlag flag;
    FTWStructure *ftw_struct;
    CString *cwd;
    IntT result;
} FTWFunctionCall;

FTWFunctionCall* create_FTWFunctionCall
(
    CString *path,
    FileStatus *file_stat,
    FTWFunctionFlag flag,
    FTWStructure *ftw_struct,
    CString *cwd,
    IntT result
);

FTWFunctionCall* default_FTWFunctionCall(void);

typedef enum FTWFunctionType
{
    ConstFTWFunction = 0,
    StairFTWFunction = 1
} FTWFunctionType;

specification typedef struct FTWFunction
{
    bool nftw;
    FTWFunctionType type;
    IntT param;
    IntT result;
    List *calls;
} FTWFunction;

FTWFunction* create_FTWFunction(bool nftw, FTWFunctionType type, IntT param, IntT result);

FTWFunction* default_FTWFunction(void);
FTWFunction* default_NFTWFunction(void);

void reset_FTWFunction(FTWFunction *fn);

int getCallsNumber_FTWFunction(FTWFunction *fn);
FTWFunctionCall* getCall_FTWFunction(FTWFunction *fn, int i);

bool returnedNonZero_FTWFunction(FTWFunction *fn);
int getNonZeroCallNumber_FTWFunction(FTWFunction *fn);

Set* getProcessedFileTree_FTWFunction(FTWFunction *fn);
Set* getNonProcessedFileTree_FTWFunction(CallContext context, FTWFunction *fn);

bool checkCallsFlags_FTWFunction(CallContext context, FTWFunction *fn);
bool checkCallsFlags_NFTWFunction(CallContext context, CString *path, FTWFunction *fn,
                                  NFTWFlags flags, CString *cwd, bool isAccessDenied);

bool checkCallsOrder_FTWFunction(CallContext context, FTWFunction *fn);
bool checkCallsOrder_NFTWFunction(CallContext context, FTWFunction *fn, NFTWFlags flags);

/*****************************************************************************/
/**                           Interface Functions                           **/
/*****************************************************************************/

/** ftw_spec **/
specification
IntT ftw_spec(CallContext context, CString *path, FTWFunction *fn, IntT ndirs,
              ErrorCode *errno);

void onFTW(CallContext context, CString *path, FTWFunction *fn, IntT ndirs,
           ErrorCode *errno, IntT ftw_spec);

/** ftw64_spec **/
specification
IntT ftw64_spec(CallContext context, CString *path, FTWFunction *fn, IntT ndirs,
                ErrorCode *errno);

void onFTW64(CallContext context, CString *path, FTWFunction *fn, IntT ndirs,
             ErrorCode *errno, IntT ftw64_spec);

/** nftw_spec **/
specification
IntT nftw_spec(CallContext context, CString *path, FTWFunction *fn, IntT fd_limit,
               NFTWFlags flags, ErrorCode *errno);

void onNFTW(CallContext context, CString *path, FTWFunction *fn, IntT fd_limit,
            NFTWFlags flags, ErrorCode *errno, IntT nftw_spec);

/** nftw64_spec **/
specification
IntT nftw64_spec(CallContext context, CString *path, FTWFunction *fn, IntT fd_limit,
                 NFTWFlags flags, ErrorCode *errno);

void onNFTW64(CallContext context, CString *path, FTWFunction *fn, IntT fd_limit,
              NFTWFlags flags, ErrorCode *errno, IntT nftw64_spec);

/*****************************************************************************/
/**                            Helper Functions                             **/
/*****************************************************************************/
Bool3 checkFileDescriptorsLimit(CallContext context, IntT fd_limit);

Set* getFileTree_FTW_Path(CallContext context, CString *path, bool *uptodate);
Set* getFileTree_NFTW_Path(CallContext context, CString *path, NFTWFlags flags, bool *uptodate);

int getBase_Path(CString *path);
int getLevel_Path(CString *root, CString *path);

#endif

