/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef FS_META_STATVFS_MODEL_SEH
#define FS_META_STATVFS_MODEL_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
typedef ULLongT FsBlkcntT;
typedef ULLongTObj FsBlkcntTObj;
#define type_FsBlkcntTObj   type_ULLongTObj
#define create_FsBlkcntTObj create_ULLongTObj

typedef ULLongT FsFilcntT;
typedef ULLongTObj FsFilcntTObj;
#define type_FsFilcntTObj   type_ULLongTObj
#define create_FsFilcntTObj create_ULLongTObj

specification typedef struct MountPointStatus
{
    ULongT      bsize;      //  File system block size. 
    ULongT      frsize;     //  Fundamental file system block size. 
    FsBlkcntT   blocks;     //  Total number of blocks on file system in units
                            //      of f_frsize. 
    FsBlkcntT   bfree;      //  Total number of free blocks. 
    FsBlkcntT   bavail;     //  Number of free blocks available to 
                            //      non-privileged process. 
    FsFilcntT   files;      //  Total number of file serial numbers. 
    FsFilcntT   ffree;      //  Total number of free file serial numbers. 
    FsFilcntT   favail;     //  Number of file serial numbers available to 
                            //      non-privileged process. 
    ULLongT     f_fsid;     //  File system ID. 
    Bool3        isReadOnly; //  Bit mask of f_flag values. 
    Bool3        isNoSUID;   //  Bit mask of f_flag values. 
    ULLongT     f_namemax;  //  Maximum filename length.   
} MountPointStatus;

MountPointStatus* create_MountPointStatus(
    ULongT      bsize,      //  File system block size. 
    ULongT      frsize,     //  Fundamental file system block size. 
    FsBlkcntT   blocks,     //  Total number of blocks on file system in units
                            //      of f_frsize. 
    FsBlkcntT   bfree,      //  Total number of free blocks. 
    FsBlkcntT   bavail,     //  Number of free blocks available to 
                            //      non-privileged process. 
    FsFilcntT   files,      //  Total number of file serial numbers. 
    FsFilcntT   ffree,      //  Total number of free file serial numbers. 
    FsFilcntT   favail,     //  Number of file serial numbers available to 
                            //      non-privileged process. 
    ULLongT     fsid,     //  File system ID. 
    Bool3       isReadOnly, //  Bit mask of f_flag values. 
    Bool3       isNoSUID,   //  Bit mask of f_flag values. 

    ULLongT     namemax  //  Maximum filename length.   
                                          );
MountPointStatus* create_emptyMountPointStatus();
/** fstatvfs_spec **/
specification
IntT fstatvfs_spec( CallContext context, FileDescId fildes, MountPointStatus* buf, ErrorCode* errno);

/** fstatvfs64_spec **/
specification
IntT fstatvfs64_spec( CallContext context, FileDescId fildes, MountPointStatus* buf, ErrorCode* errno);

/** statvfs_spec **/
specification
IntT statvfs_spec( CallContext context, CString* path, MountPointStatus* buf, ErrorCode* errno);

/** statvfs64_spec **/
specification
IntT statvfs64_spec( CallContext context, CString* path, MountPointStatus* buf, ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
Bool3 shall_isEBADF_fstatvfs(CallContext context, FileDescId fildes,
                                                            ErrorCode* errno);

#endif

