/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef FS_META_MODEL_SEH
#define FS_META_MODEL_SEH

#include "common/common_model.seh"
#include "fs/fs/fs_model.seh"
#include "data/sys/time_model.seh"

#define FEDORA 1
extern int SKIP_LXSTAT_CHECK;

/********************************************************************/
/** Defines                                                        **/
/********************************************************************/

#define may_isENAMETOOLONG_xstat shall_isENAMETOOLONG_xstat
#define may_isEOVERFLOW_xstat shall_isEOVERFLOW_xstat
#define shall_isEACCES_xstat64 shall_isEACCES_xstat
#define shall_isENAMETOOLONG_xstat64 shall_isENAMETOOLONG_xstat
#define shall_isENOTDIR_xstat64 shall_isENOTDIR_xstat
#define shall_isENOENT_xstat64 shall_isENOENT_xstat
#define may_isENAMETOOLONG_xstat64 shall_isENAMETOOLONG_xstat
#define may_isEOVERFLOW_xstat64 shall_isEOVERFLOW_xstat64
#define shall_isEACCES_lxstat shall_isEACCES_xstat
#define shall_isENAMETOOLONG_lxstat shall_isENAMETOOLONG_xstat
#define shall_isENOTDIR_lxstat shall_isENOTDIR_xstat
#define shall_isENOENT_lxstat shall_isENOENT_xstat
#define shall_isEOVERFLOW_lxstat shall_isEOVERFLOW_xstat
#define may_isENAMETOOLONG_lxstat may_isENAMETOOLONG_xstat
#define may_isEOVERFLOW_lxstat may_isEOVERFLOW_xstat
#define shall_isEACCES_lxstat64 shall_isEACCES_xstat64
#define shall_isENAMETOOLONG_lxstat64 shall_isENAMETOOLONG_xstat64
#define shall_isENOTDIR_lxstat64 shall_isENOTDIR_xstat64
#define shall_isENOENT_lxstat64 shall_isENOENT_xstat64
#define shall_isEOVERFLOW_lxstat64 shall_isEOVERFLOW_xstat64
#define may_isENAMETOOLONG_lxstat64 may_isENAMETOOLONG_xstat64
#define may_isEOVERFLOW_lxstat64 may_isEOVERFLOW_xstat64
#define shall_isEBADF_fxstat64 shall_isEBADF_fxstat
#define shall_isENAMETOOLONG_utime  shall_isENAMETOOLONG_xstat
#define shall_isENOENT_utime  shall_isENOENT_xstat
#define shall_isENOTDIR_utime  shall_isENOTDIR_xstat
#define may_isENAMETOOLONG_utime may_isENAMETOOLONG_xstat
#define shall_isEACCES_utimes shall_isEACCES_utime
#define shall_isENAMETOOLONG_utimes shall_isENAMETOOLONG_utime
#define shall_isENOENT_utimes shall_isENOENT_utime
#define shall_isENOTDIR_utimes shall_isENOTDIR_utime
#define may_isENAMETOOLONG_utimes may_isENAMETOOLONG_utime
#define shall_isEPERM_utimes shall_isEPERM_utime

/********************************************************************/
/**                Specification types definitions                 **/
/********************************************************************/
specification typedef
struct __XStatReturnType
{
    CallContext context;
    IntT someArg;
} __XStatReturnType;

specification typedef
struct UTimBuf
{
    TimeT actime;
    TimeT modtime;
} UTimBuf;

/********************************************************************/
/**                Functions for specification types               **/
/********************************************************************/

__XStatReturnType* create___XStatReturnType(CallContext context, IntT val);
FileStatus* create_FileStatus(DevT dev,
                              InoT ino,
                              FileKind kind,
                              FilePermissions* permissions,
                              NLinkT nlink,
                              UidT uid,
                              GidT gid,
                              DevT rdev,
                              OffT size,
                              TimeT atime,
                              TimeT mtime,
                              TimeT ctime,
                              BlksizeT blksize,
                              BlkcntT blocks);
FileStatus* create_emptyFileStatus();
/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __fxstat_spec **/
specification
IntT __fxstat_spec( CallContext context, IntT ver, FileDescId fildes, FileStatus * buff, ErrorCode * errno );
void on__FXStat( CallContext context, FileDescId fildes,
                            FileStatus* buff, IntT ret);
/** __fxstat64_spec **/
specification
IntT __fxstat64_spec( CallContext context, IntT ver, FileDescId fildes, FileStatus * buff, ErrorCode * errno );

/** __lxstat_spec **/
specification
IntT __lxstat_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

void on__LXStat( CallContext context, CString* path,
                            FileStatus* buff, IntT ret);
/** __lxstat64_spec **/
specification
IntT __lxstat64_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

/** __xstat_spec **/
specification
IntT __xstat_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

void on__XStat( CallContext context, CString* path,
                            FileStatus* buff, IntT ret);

reaction __XStatReturnType* __xstat_return(void);

void on__XStatReturn(CallContext context, IntT arg);

/** __xstat64_spec **/
specification
IntT __xstat64_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

/** utime_spec **/
specification
IntT utime_spec( CallContext context, CString* path, UTimBuf* times,
                                                            ErrorCode* errno);
void onUtime( CallContext context, CString* path,
                            UTimBuf* times, IntT ret);

/** utimes_spec **/
specification
IntT utimes_spec( CallContext context, CString* path, List* times,
                                                            ErrorCode* errno);

void onUtimes( CallContext context, CString* path,
                            List* times, IntT ret);
/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool checkFileStatusEqualityFXStat(CallContext context, FileStatus* first,
                                                                File* file);
void updateFile_FromFileStatusFXStat(CallContext context, File* file,
                                                        FileStatus* status);
FileStatus* create_FileStatus_FromFile(CallContext context, File* file);
void updateFile_FromFileStatus(CallContext context, File* file,
                                                        FileStatus* status);
bool checkFileStatusEquality(CallContext context, FileStatus* first,
                                                                File* file);
void printKind(FileKind sw);

UTimBuf* create_UTimBuf(TimeT atime, TimeT mtime);
void updateFile_FromUtimBuf( CallContext context, File* file,
                                                            UTimBuf* times);
bool checkUTimBufEquality(CallContext context, UTimBuf* first, File* second);
UTimBuf* create_UTimBuf_FromFile(CallContext context, File* file);

bool equals_Perms(CallContext context, FilePermissions* first, FilePermissions* second);

//TimeVal* create_TimeVal(TimeT tv_sec, TimeT tv_usec);
List* create_TimeValList_FromFile(CallContext context, File* file);
bool checkTimeValEquality(TimeVal* first, TimeVal* second);
bool checkTimeValListEquality(CallContext context, List* first, File* file);
void updateFile_FromTimeValList( CallContext context, File* file,
                                                            List* times);
Bool3 shall_isEACCES_xstat(CallContext context, FileSystem* fs, CString* path);
Bool3 shall_isENAMETOOLONG_xstat(CallContext context, CString* path);
Bool3 shall_isENOENT_xstat(CallContext context, FileSystem* fs, CString* path);
Bool3 shall_isENOTDIR_xstat(CallContext context, FileSystem* fs, CString* path);
Bool3 shall_isEIO_xstat(CallContext context, CString* path, ErrorCode *errno);
Bool3 shall_isELOOP_xstat(CallContext context, FileSystem* fs, CString* path);
Bool3 shall_isEOVERFLOW_xstat(CallContext context, FileSystem* fs, CString* path);
Bool3 shall_isEBADF_fxstat(CallContext context, FileDescId fildes, ErrorCode* errno);
Bool3 shall_isEOVERFLOW_fxstat(CallContext context, FileDescId fildes);
Bool3 may_isEOVERFLOW_fxstat(CallContext context, FileDescId fildes);
Bool3 shall_isEOVERFLOW_xstat64(CallContext context, FileSystem* fs, CString* path);

#endif

