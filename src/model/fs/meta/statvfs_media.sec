/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "fs/meta/statvfs_media.seh"
#include "common/common_media.seh"

void readMountPointStatus(TSStream* stream, MountPointStatus* ret)
{
    ret->bsize=readULong_TSStream(stream);
    ret->frsize=readULong_TSStream(stream);

    ret->blocks=readULLong_TSStream(stream);
    ret->bfree=readULLong_TSStream(stream);
    ret->bavail=readULLong_TSStream(stream);
    ret->files=readULLong_TSStream(stream);
    ret->ffree=readULLong_TSStream(stream);
    ret->favail=readULLong_TSStream(stream);

    ret->f_fsid=readULong_TSStream(stream);
    ret->isReadOnly=readInt_TSStream(stream);
    ret->isNoSUID=readInt_TSStream(stream);
    ret->f_namemax=readULong_TSStream(stream);
}
/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initFsMetaStatvfsSubsystem(void)
{
  // Set up mediators
    set_mediator_fstatvfs_spec(fstatvfs_media);
    set_mediator_fstatvfs64_spec(fstatvfs64_media);
    set_mediator_statvfs_spec(statvfs_media);
    set_mediator_statvfs64_spec(statvfs64_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/


/** fstatvfs_spec **/

mediator fstatvfs_media for specification
IntT fstatvfs_spec( CallContext context, FileDescId fildes, MountPointStatus* buf, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();    
        
        format_TSCommand( &command, "fstatvfs:$(int)",
                                            create_IntTObj(fildes.filedesc));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res     =   readInt_TSStream(&command.response);
            *errno  =   readInt_TSStream(&command.response);  
            readMountPointStatus(&command.response, buf);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** fstatvfs64_spec **/
mediator fstatvfs64_media for specification
IntT fstatvfs64_spec( CallContext context, FileDescId fildes, MountPointStatus* buf, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();    
        
        format_TSCommand( &command, "fstatvfs64:$(int)",
                                            create_IntTObj(fildes.filedesc));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res     =   readInt_TSStream(&command.response);
            *errno  =   readInt_TSStream(&command.response);  
            readMountPointStatus(&command.response, buf);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** statvfs_spec **/
mediator statvfs_media for specification
IntT statvfs_spec( CallContext context, CString* path, MountPointStatus* buf, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();    
        
        format_TSCommand( &command, "statvfs:$(str)", path);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res     =   readInt_TSStream(&command.response);
            *errno  =   readInt_TSStream(&command.response);  
            readMountPointStatus(&command.response, buf);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** statvfs64_spec **/
mediator statvfs64_media for specification
IntT statvfs64_spec( CallContext context, CString* path, MountPointStatus* buf, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();    
        
        format_TSCommand( &command, "statvfs64:$(str)", path);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res     =   readInt_TSStream(&command.response);
            *errno  =   readInt_TSStream(&command.response);  
            readMountPointStatus(&command.response, buf);
        }
        destroy_TSCommand(&command);
        
        return res;
    }
}



