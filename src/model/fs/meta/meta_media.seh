/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef FS_META_MEDIA_SEH
#define FS_META_MEDIA_SEH

#include "fs/meta/meta_model.seh"

/********************************************************************/
/**                 Deferred Reactions Processors                  **/
/********************************************************************/
static void __xstat_return_processor(ThreadId threadId,
                                         TSStream* stream, TSMetaData* meta);
/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initFsMetaSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __fxstat_spec **/
mediator __fxstat_media for specification
IntT __fxstat_spec( CallContext context, IntT ver, FileDescId fildes, FileStatus * buff, ErrorCode * errno );

/** __fxstat64_spec **/
mediator __fxstat64_media for specification
IntT __fxstat64_spec( CallContext context, IntT ver, FileDescId fildes, FileStatus * buff, ErrorCode * errno );

/** __lxstat_spec **/
mediator __lxstat_media for specification
IntT __lxstat_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

/** __lxstat64_spec **/
mediator __lxstat64_media for specification
IntT __lxstat64_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

/** __xstat_spec **/
mediator __xstat_media for specification
IntT __xstat_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

void readFileStatus(TSStream* stream, FileStatus* buff);

mediator __xstat_return_media for reaction
__XStatReturnType* __xstat_return(void);

/** __xstat64_spec **/
mediator __xstat64_media for specification
IntT __xstat64_spec( CallContext context, IntT ver, CString * path, FileStatus * buff, ErrorCode * errno );

/** utime_spec **/
mediator utime_media for specification
IntT utime_spec( CallContext context, CString* path,
                            UTimBuf* times, ErrorCode* errno);

/** utimes_spec **/
mediator utimes_media for specification
IntT utimes_spec( CallContext context, CString* path,
                            List* times, ErrorCode* errno);




#endif

