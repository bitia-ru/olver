/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef FS_META_ACCESS_MODEL_SEH
#define FS_META_ACCESS_MODEL_SEH

#include "common/common_model.seh"
#include "fs/fs/fs_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/** Defines                                                        **/
/********************************************************************/
#define shall_isENAMETOOLONG_access shall_isENAMETOOLONG_xstat
#define shall_isENOENT_access shall_isENOENT_xstat
#define shall_isENOTDIR_access shall_isENOTDIR_xstat
#define may_isENAMETOOLONG_access shall_isENAMETOOLONG_access

#define shall_isEACCES_chmod shall_isEACCES_xstat
#define shall_isENAMETOOLONG_chmod shall_isENAMETOOLONG_xstat
#define shall_isENOTDIR_chmod shall_isENOTDIR_xstat
#define shall_isENOENT_chmod shall_isENOENT_xstat
#define may_isENAMETOOLONG_chmod shall_isENAMETOOLONG_chmod

#define shall_isEACCES_chown shall_isEACCES_xstat
#define shall_isENAMETOOLONG_chown shall_isENAMETOOLONG_xstat
#define shall_isENOTDIR_chown shall_isENOTDIR_xstat
#define shall_isENOENT_chown shall_isENOENT_xstat
#define may_isENAMETOOLONG_chown shall_isENAMETOOLONG_chown

#define shall_isEBADF_fchown shall_isEBADF_fchmod

#define shall_isEACCES_lchown shall_isEACCES_chown
#define shall_isENAMETOOLONG_lchown shall_isENAMETOOLONG_chown
#define shall_isENOTDIR_lchown shall_isENOTDIR_chown
#define shall_isENOENT_lchown shall_isENOENT_chown
#define shall_isEPERM_lchown shall_isEPERM_chown
#define may_isENAMETOOLONG_lchown may_isENAMETOOLONG_chown
#define shall_isEROFS_lchown shall_isEROFS_chown
#define shall_isEINVAL_lchown may_isEINVAL_chown

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
specification typedef
struct AccessModeAccess
{
    bool isR_OK;
    bool isW_OK;
    bool isX_OK;
    bool isF_OK;
} AccessModeAccess;

AccessModeAccess* create_AccessModeAccess(bool isR_OK, bool isW_OK,
                                                    bool isX_OK, bool isF_OK);
/** access_spec **/
specification
IntT access_spec( CallContext context, CString* path, AccessModeAccess* amode,
                                                            ErrorCode* errno);

/** chmod_spec **/
specification
IntT chmod_spec( CallContext context, CString* path, FilePermissions* mode,
                                                            ErrorCode* errno);
void OnChmod( CallContext context, CString* path, FilePermissions* mode,
                                                ErrorCode* errno, IntT ret);

/** chown_spec **/
specification
IntT chown_spec( CallContext context, CString* path, UidT owner, GidT group,
                                                            ErrorCode* errno);
void OnChown( CallContext context, CString* path, UidT owner, GidT group,
                                                ErrorCode* errno, IntT ret);
/** fchmod_spec **/
specification
IntT fchmod_spec( CallContext context, FileDescId fildes,
                                    FilePermissions* mode, ErrorCode* errno);
void OnFchmod( CallContext context, FileDescId fildes, FilePermissions* mode,
                                                ErrorCode* errno, IntT ret);
/** fchown_spec **/
specification
IntT fchown_spec( CallContext context, FileDescId fildes, UidT owner,
                                                GidT group, ErrorCode* errno);
void OnFchown( CallContext context, FileDescId fildes, UidT owner, GidT group,
                                                ErrorCode* errno, IntT ret);
/** lchown_spec **/
specification
IntT lchown_spec( CallContext context, CString* path, UidT owner, GidT group,
                                                            ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

CString* createCString_Bool3(Bool3 par);
bool chmod_isFileOpened(CallContext context, CString* path);
bool chmod_BadGroupId(ProcessState* ps, File* file);
bool chmod_PermissionsEquals(CallContext context, FilePermissions* fp1,
                                FilePermissions* fp2, FilePermissions* res);
bool S_IS_check(CallContext context, FilePermissions* fp1,
                                FilePermissions* fp2, FilePermissions* res);
bool Set_gid_cleared(CallContext context, ProcessState* ps, File* file);
bool restr_change(File* file,ProcessState* ps,UidT owner,GidT group);
bool CtimeUpdateCheck(UidT owner, GidT group, File* file);
bool fchmod_shm_check(File* file_pre, File* file_post, FilePermissions* mode);

#endif

