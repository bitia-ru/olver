/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "common/common_model.seh"
#include "fs/dir/dir_model.seh"
#include "fs/dir/tests/fs_dump.seh"
#include "atl/integer.h"

/********************************************************************/
/** Formatting                                                     **/
/********************************************************************/

static char* formatPerm(char *buf, FilePermission *perm)
{
    if(perm)
    {
        *buf++=perm->read?'r':'-';
        *buf++=perm->write?'w':'-';
        *buf++=perm->execute?'x':'-';
    }else
    {
        *buf++='?';
        *buf++='?';
        *buf++='?';
    }
    return buf;
}

static char *formatPerms(FilePermissions *perms)
{
    static char buf[10];
    char *p = &buf[0];
    memset(buf,' ', 9);
    buf[9]=0;
    if(perms)
    {
        p = formatPerm(p, perms->owner);
        p = formatPerm(p, perms->group);
        p = formatPerm(p, perms->other); 
    }else
    {
        strcpy(buf,"null");
    }
    return buf;
}

CString *format_FileSystem(FileSystem *fs, FileId root)
{
    static int tab=0;
    int i;
    DirectoryDescriptor *dd;
    FileIdObj *fileid;
    File *file;
    CString *name;
    CString *res;
    File *dir;
    int files_count;
    CString *file_str;
    static char tabs[1024];
    char *sperm;
    
    res = create_CString("");
    
    dir = get_Map( fs->files, create_FileIdObj(root) );
    
    if(dir->kind!=DirectoryFile)
        return res;
    
    dd = dir->descriptor;
    
    files_count = size_Map(dd->files);


    for(i=0;i<files_count;i++)
    {
        name = key_Map(dd->files, i); 
        fileid = get_Map(dd->files, name);
        file = get_Map(fs->files, fileid);

        memset(tabs,' ',tab);
        tabs[tab]=0; 
        
        sperm = formatPerms(file->permissions);

        res = concat_CString(res, format_CString("$(obj)'$(obj)' '$(obj)'\n",create_CString(tabs), name, create_CString(sperm)));
        
        tab++;
        res=concat_CString(res, format_FileSystem(fs, *fileid));
        tab--;
    }
    return res;
}

void dump_FileSystem(FileSystem *fs, FileId root)
{
    //dump("$(obj)",format_FileSystem(fs,root));

    static int tab=0;
    int i;
    DirectoryDescriptor *dd;
    FileIdObj *fileid;
    File *file;
    CString *name;
    CString *res;
    File *dir;
    int files_count;
    CString *file_str;
    static char tabs[1024];
    char *sperm;
    
    res = create_CString("");
    
    dir = get_Map( fs->files, create_FileIdObj(root) );
    
    if(dir->kind!=DirectoryFile)
        return;
    
    dd = dir->descriptor;
    
    files_count = size_Map(dd->files);


    for(i=0;i<files_count;i++)
    {
        name = key_Map(dd->files, i); 
        fileid = get_Map(dd->files, name);
        file = get_Map(fs->files, fileid);

        memset(tabs,' ',tab);
        tabs[tab]=0; 
        
        sperm = formatPerms(file->permissions);

        //res = concat_CString(res, format_CString("$(obj)'$(obj)' '$(obj)'\n",create_CString(tabs), name, create_CString(sperm)));
        dump("$(obj)'$(obj)' '$(obj)' $(obj)\n",create_CString(tabs), name, create_CString(sperm), create_Integer(size_Set(file->parents)));
        
        tab++;
        //res=concat_CString(res, format_FileSystem(fs, *fileid));
        if(!isDirectoryUplink_Name(fs,  name))
            dump_FileSystem(fs, *fileid);
        tab--;
    }
    return;
}
