/*
 * Copyright (c) 2014 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2008 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 7, Copyright (C) 2001-2008 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#define DUMPREQ

#include "common/common_model.seh"

#include "fs/dir/dir_config.h"
#include "fs/dir/scandir_config.h"
#include "fs/dir/scandir_model.seh"
#include "fs/dir/dir_model.seh"
#include "config/interpretation.seh"

#include "fs/name/name_model.seh"
#include "fs/fs/fs_model.seh"
#include "system/system/system_model.seh"
#include "data/errno_model.seh"
#include "process/process/process_model.seh"
#include "process/process/process_common.seh"
#include "io/file/file_model.seh"
#include <atl/integer.h>
#include "common/common_media.seh"  // Tmp: timestamp

#pragma SEC subsystem dir "fs.dir"

/*
Linux Standard Base Core Specification 4.0 
Copyright (c) 2008 Free Standards Group
    refers

The Open Group Base Specifications Issue 7
IEEE Std 1003.1, 2008 Edition
Copyright (c) 2001-2008 The IEEE and The Open Group

NAME

alphasort, scandir - scan a directory 

SYNOPSIS

#include <dirent.h>

int alphasort(const struct dirent **d1, const struct dirent **d2);

int scandir(const char *dir, struct dirent ***namelist,

int (*sel)(const struct dirent *),

int (*compar)(const struct dirent **, const struct dirent **));

DESCRIPTION

The alphasort() function can be used as the comparison function for the 
scandir() function to sort the directory entries, d1 and d2, into alphabetical 
order. Sorting happens as if by calling the strcoll() function on the d_name 
element of the dirent structures passed as the two parameters. If the strcoll() 
function fails, the return value of alphasort() is unspecified.

The alphasort() function shall not change the setting of errno if successful. 
Since no return value is reserved to indicate an error, an application wishing 
to check for error situations should set errno to 0, then call alphasort(), 
then check errno.

The scandir() function shall scan the directory dir, calling the function 
referenced by sel on each directory entry. Entries for which the function 
referenced by sel returns non-zero shall be stored in strings allocated as if 
by a call to malloc(), and sorted as if by a call to qsort() with the 
comparison function compar, except that compar need not provide total ordering. 
The strings are collected in array namelist which shall be allocated as if by a 
call to malloc(). If sel is a null pointer, all entries shall be selected. If 
the comparison function compar does not provide total ordering, the order in 
which the directory entries are stored is unspecified.

RETURN VALUE

Upon successful completion, the alphasort() function shall return an integer 
greater than, equal to, or less than 0, according to whether the name of the 
directory entry pointed to by d1 is lexically greater than, equal to, or less 
than the directory pointed to by d2 when both are interpreted as appropriate to 
the current locale. There is no return value reserved to indicate an error.

Upon successful completion, the scandir() function shall return the number of 
entries in the array and a pointer to the array through the parameter namelist. 
Otherwise, the scandir() function shall return -1.

ERRORS

The scandir() function shall fail if:

[EACCES] Search permission is denied for the component of the path prefix of 
dir or read permission is denied for dir.

[ELOOP] A loop exists in symbolic links encountered during resolution of the 
dir argument.

[ENAMETOOLONG] 

The length of a component of a pathname is longer than {NAME_MAX}.

[ENOENT] A component of dir does not name an existing directory or dir is an 
empty string.

[ENOMEM] Insufficient storage space is available.

[ENOTDIR] A component of dir names an existing file that is neither a directory 
nor a symbolic link to a directory.

[EOVERFLOW] One of the values to be returned or passed to a callback function 
cannot be represented correctly.

The scandir() function may fail if:

[ELOOP] More than {SYMLOOP_MAX} symbolic links were encountered during 
resolution of the dir argument.

[EMFILE] All file descriptors available to the process are currently open.

[ENAMETOOLONG] 

The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a 
symbolic link produced an intermediate result with a length that 
exceeds {PATH_MAX}.

[ENFILE] Too many files are currently open in the system.
*/

specification
IntT alphasort_spec( CallContext context, DirEntT* d1, DirEntT* d2, ErrorCode *errno)
{
    int errno_pre;

    pre
    {
        errno_pre = *errno;

        /*
         * The alphasort() function can be used as the comparison function for the 
         * scandir() function to sort the directory entries, d1 and d2, into alphabetical 
         * order.
         */
        REQ_UNCHECKABLE("app.alphasort.01", "");

        /*
         * Since no return value is reserved to indicate an error, an application wishing 
         * to check for error situations should set errno to 0, then call alphasort(), 
         * then check errno.
         */
        REQ_UNCHECKABLE("app.alphasort.02", "");

        return true;
    }
    post
    {

        /*
         * The alphasort() function shall not change the setting of errno if successful.
         */
        REQ("alphasort.02", "change errno", *errno==errno_pre);

        /*
         * Sorting happens as if by calling the strcoll() function on the d_name element 
         * of the dirent structures passed as the two parameters.
         */
        /*
         * Upon successful completion, the alphasort() function shall return an integer 
         * greater than, equal to, or less than 0, according to whether the name of the 
         * directory entry pointed to by d1 is lexically greater than, equal to, or less 
         * than the directory pointed to by d2 when both are interpreted as appropriate to 
         * the current locale.
         */
        int comp_sign = sign(safeCompare_CString(d1->name, d2->name));
        REQ("alphasort.04;alphasort.01", "wrong sort", sign(alphasort_spec)==comp_sign);

        return true;
    }
}


specification
IntT scandir_spec( CallContext context, CString *dir, List* namelist, IntT sel_type, IntT compar_type, ErrorCode *errno)
{
    Bool3 isELOOP;
    FileSystem* file_system = getFileSystem(context);
    CString *abspath = resolvePath_Ext(context, file_system, dir, &isELOOP);

    pre
    {
        return true;
    }

    coverage COMPAR_ALPHA_C{
        if (compar_type == SCANDIR_COMP_NORMAL)
            switch(sel_type){
                case SCANDIR_SELECT_EVERYTHING: 
                    return{Normal_NoSel, "normal order, without selection"};
                case SCANDIR_SELECT_START_NUM:
                    return{Normal_StNum, "normal order, select starting with number"};
                case SCANDIR_SELECT_LENGTH_MORE_3:
                    return{Normal_Len3, "normal order, select having length>3"};
            }
        else if (compar_type ==  SCANDIR_COMP_REVERSE)
            switch(sel_type){
                case SCANDIR_SELECT_EVERYTHING: 
                    return{Reverse_NoSel, "reverse order, without selection"};
                case SCANDIR_SELECT_START_NUM:
                    return{Reverse_StNum, "reverse order, select starting with number"};
                case SCANDIR_SELECT_LENGTH_MORE_3:
                    return{Reverse_Len3, "reverse order, select having length>3"};
            }
    }

    post
    {

        /*
         * Otherwise, the scandir() function shall return -1.
         */
        ERROR_BEGIN(POSIX_SCANDIR, "scandir.07.02;scandir.08;scandir.09", scandir_spec == -1, *errno)
            /*
             * The scandir() function shall fail if:
             *
             * [EACCES] Search permission is denied for the component of the path prefix of 
             * dir or read permission is denied for dir.
             */
            ERROR_SHALL3(POSIX_SCANDIR, EACCES, "scandir.08.01",
                    isEACCES_scandir(context, file_system, abspath))

            /*
             * The scandir() function shall fail if:
             *
             * [ELOOP] A loop exists in symbolic links encountered during resolution of the 
             * dir argument.
             */
            ERROR_SHALL3(POSIX_SCANDIR, ELOOP, "scandir.08.02", isELOOP )

            /*
             * The scandir() function shall fail if:
             *
             * [ENAMETOOLONG] The length of a component of a pathname is longer 
             * than {NAME_MAX}.
             */
            ERROR_SHALL3(POSIX_SCANDIR, ENAMETOOLONG, "scandir.08.03",
                isENAMETOOLONG(context, dir))

            /*
             * The scandir() function shall fail if:
             *
             * [ENOENT] A component of dir does not name an existing directory or dir is an 
             * empty string.
             */
            ERROR_SHALL3(POSIX_SCANDIR, ENOENT, "scandir.08.04", 
                    isENOENT_dir(context, file_system, abspath))

            /*
             * The scandir() function shall fail if:
             *
             * [ENOMEM] Insufficient storage space is available.
             */
            ERROR_UNCHECKABLE(POSIX_SCANDIR, ENOMEM, "scandir.08.05", 
                "ENOMEM UNCHECKABLE")

            /*
             * The scandir() function shall fail if:
             *
             * [ENOTDIR] A component of dir names an existing file that is neither a directory 
             * nor a symbolic link to a directory.
             */
            ERROR_SHALL3(POSIX_SCANDIR, ENOTDIR, "scandir.08.06",
                isENOTDIR_dir(context, file_system, abspath))


            /*
             * The scandir() function shall fail if:
             *
             * [EOVERFLOW] One of the values to be returned or passed to a callback function 
             * cannot be represented correctly.
             */
            ERROR_UNCHECKABLE(POSIX_SCANDIR, EOVERFLOW, "scandir.08.07", 
                    "EOVERFLOW not checked")

            /*
             * The scandir() function may fail if:
             *
             * [ELOOP] More than {SYMLOOP_MAX} symbolic links were encountered during 
             * resolution of the dir argument.
             */
            ERROR_MAY(POSIX_SCANDIR, ELOOP, "scandir.09.01", isELOOP)

            /*
             * The scandir() function may fail if:
             *
             * [EMFILE] All file descriptors available to the process are currently open.
             */
            ERROR_MAY3(POSIX_SCANDIR, EMFILE, "scandir.09.02",
                    isOpenFileDescNumberExceedMax(context))

            /*
             * The scandir() function may fail if:
             *
             * [ENAMETOOLONG] The length of a pathname exceeds {PATH_MAX}, or pathname 
             * resolution of a symbolic link produced an intermediate result with a length 
             * that exceeds {PATH_MAX}.
             */
            ERROR_MAY3(POSIX_SCANDIR, ENAMETOOLONG, "scandir.09.03",
                    isENAMETOOLONG(context, dir))

            /*
             * The scandir() function may fail if:
             *
             * [ENFILE] Too many files are currently open in the system.
             */
            ERROR_UNCHECKABLE(POSIX_SCANDIR, ENFILE, "scandir.09.04",
                "ENFILE couldn't be checked")

        ERROR_END()

        /*
         * Upon successful completion, the scandir() function shall return the number of 
         * entries in the array and a pointer to the array through the parameter namelist.
         */
        REQ("scandir.07.01", "result doesn't match size of namelist", scandir_spec == size_List(namelist));

        /*
         * and sorted as if by a call to qsort() with the comparison function compar, 
         * except that compar need not provide total ordering.
         */
        REQ("scandir.03", "sort of strings doesn't match compar function",      
            checkCompareByType(scandir_spec, namelist, compar_type));

        /*
         * If sel is a null pointer, all entries shall be selected.
         */
        /*
         * Entries for which the function referenced by sel returns non-zero shall be 
         * stored in strings allocated as if by a call to malloc(),
         */
        REQ("scandir.02;scandir.05", "return strings doesn't match selector", 
            checkSelectorByType(file_system, abspath, namelist, sel_type));

        /*
         * The strings are collected in array namelist which shall be allocated as if by a 
         * call to malloc().
         */
        REQ("scandir.01","strings shall be allocated as if by a call to malloc()", 
            TODO_REQ());

        /*
         * The scandir() function shall scan the directory dir, calling the function 
         * referenced by sel on each directory entry.
         */
        REQ_UNCHECKABLE("scandir.04", "already checked in selector selection");

        return true;
    }
}
/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
void dump_FileSystem(FileSystem *fs, FileId root);
CString *format_FileSystem(FileSystem *fs, FileId root);

int sign(int x)
{
    if (x>0) return 1;
    if (x<0) return -1;
    return 0;
}

int comparFuncByType(DirEntT* dirent, DirEntT* direntNext, int compar_type)
{
    switch (compar_type){
        case SCANDIR_COMP_NORMAL: 
            return safeCompare_CString(dirent->name, direntNext->name);
        case SCANDIR_COMP_REVERSE: 
            return -safeCompare_CString(dirent->name, direntNext->name);
    }
}

bool checkCompareByType(int num, List* namelist, IntT compar_type)
{
    int i;
    DirEntT *dirent;
    DirEntT *direntNext;
    for (i=0; i<num-1; i++){
        dirent = get_List(namelist, i);
        direntNext = get_List(namelist, i+1);
        if (comparFuncByType(dirent, direntNext, compar_type)>0)
            return false;
    } 
    return true;
}

Bool3 isEACCES_scandir(CallContext context, FileSystem *fs, CString *path)
{
    Bool3 res = False_Bool3;

    if(!isAbsolute_Path(path))
        return Unknown_Bool3;

    path = getParentDir_Path(path);

    if(NULL==path)  // is child of root
        return Unknown_Bool3;

    res = or_Bool3(res, isNoPermOnPath(context, fs, path, true, false, true)); // check read

    res = or_Bool3(res, isNoPermOnPathComponents(context, fs, path, false, false, true)); // check search

    return res;
} 

bool selectByType(CString *name, IntT sel_type)
{
    CharT ch; 
    switch(sel_type){
        case SCANDIR_SELECT_EVERYTHING: 
            return true;
        case SCANDIR_SELECT_START_NUM:
            ch = charAt_CString(name, 0);
            if (ch>='0' && ch<='9')
                return true;
            break;
        case SCANDIR_SELECT_LENGTH_MORE_3:
            if (length_CString( name)>3)
                return true;
            break;
    }
    return false;
}

bool checkSelectorByType(FileSystem* file_system, CString* abspath, List* namelist, IntT sel_type)
{
    File *dir_f = getDirectory_FileSystem(file_system, abspath);
    DirectoryDescriptor *dd = dir_f->descriptor;

    int i;
    CString *name;
    Set* sel_name_set = create_Set(&type_CString);
    for(i=0; i<size_Map(dd->files); i++){
        name = key_Map(dd->files, i); 
        if (selectByType(name, sel_type))
            add_Set(sel_name_set, name);
    }

    DirEntT *dirent;
    Set* res_name_set = create_Set(&type_CString);
    for(i=0; i<size_List(namelist); i++){
        dirent = get_List(namelist, i); 
        add_Set(res_name_set, dirent->name);
    }

    int res=compare(res_name_set, sel_name_set);
    if (res<0){
        if(removeAll_Set(sel_name_set, res_name_set))
            traceFormattedExceptionValue("add info", "$(obj) not in scandir, but should", sel_name_set); 
        else 
            traceFormattedExceptionValue("add info", "select problem model result: $(obj), real: $(obj)", sel_name_set, res_name_set); 
    }
    else if (res>0){
        if (removeAll_Set(res_name_set, sel_name_set))
            traceFormattedExceptionValue("add info", "$(obj) in scandir , but shouldn't", res_name_set);
        else 
            traceFormattedExceptionValue("add info", "select problem model result: $(obj), real: $(obj)", sel_name_set, res_name_set); 
    } 
    else 
        return 1;

    return 0;
}
