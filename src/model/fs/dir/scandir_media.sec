/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "fs/dir/scandir_media.seh"
#include "fs/fs/fs_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initFsScandirSubsystem(void)
{
  // Set up mediators
    set_mediator_alphasort_spec(alphasort_media);
    set_mediator_scandir_spec(scandir_media);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** alphasort **/
mediator alphasort_media for specification
IntT alphasort_spec( CallContext context, DirEntT* d1, DirEntT* d2, ErrorCode *errno)
{
    call
    {
       IntT res;
       TSCommand command = create_TSCommand();
       format_TSCommand( &command, "alphasort:$(ptr)$(ptr)$(int)", create_VoidTPtrObj(d1->pdirent), create_VoidTPtrObj(d2->pdirent), create_IntTObj(*errno));
       executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res; 
    }
}

/** scandir  **/
mediator scandir_media for specification
IntT scandir_spec( CallContext context, CString *dir, List* namelist, IntT sel_type, IntT compar_type, ErrorCode *errno)
{
    call
    {
        IntT num;

        TSCommand command = create_TSCommand();
        format_TSCommand( &command, "scandir:$(str)$(int)$(int)", dir, create_IntTObj(sel_type), create_IntTObj(compar_type));
        executeCommandInContext( context, &command );

        DirEntT *dirent=NULL;
        DirEntTPtr pdirent;
        int i;

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            num = readInt_TSStream(&command.response);

            for (i=0; i<num; i++) {
                pdirent = readPointer_TSStream(context, &command.response);
                ULLongT ino = readULLong_TSStream(&command.response);
                CString *name = readCString_TSStream(&command.response);
                dirent = create_DirEnt(
                        pdirent,
                        ino,       
                        name    
                        ) ;
                append_List(namelist, dirent);
            }

            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        return num; 
    }
}
