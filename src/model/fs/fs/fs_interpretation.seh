/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * POSIX_RENAME
 */
/*
 * If this constant is set to 1, then current implementation of rename()
 * may support additional errors not included in the list described in the
 * IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_ERROR_CODES 0

/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EACCES under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EACCES 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EBUSY under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EBUSY 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EEXIST under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EEXIST 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EINVAL under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EINVAL 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EIO under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EIO 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EISDIR under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EISDIR 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ELOOP under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ELOOP 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EMLINK under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EMLINK 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ENAMETOOLONG under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ENOENT under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOENT 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ENOSPC under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOSPC 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ENOTDIR under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENOTDIR 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EPERM under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EPERM 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EROFS under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EROFS 0
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EXDEV under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EXDEV 0
/*
 * If this constant is set to 1, the function rename() ensures
 * that the error EBUSY will be found and correctly handled.
 */
#define POSIX_RENAME_FAILS_WITH_EBUSY 1
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of EBUSY under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_EBUSY 0
/*
 * If this constant is set to 1, the function rename() ensures
 * that the error ELOOP will be found and correctly handled.
 */
#define POSIX_RENAME_FAILS_WITH_ELOOP 1
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ELOOP under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ELOOP 0
/*
 * If this constant is set to 1, the function rename() ensures
 * that the error ENAMETOOLONG will be found and correctly handled.
 */
#define POSIX_RENAME_FAILS_WITH_ENAMETOOLONG 1
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ENAMETOOLONG under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ENAMETOOLONG 0
/*
 * If this constant is set to 1, the function rename() ensures
 * that the error ETXTBSY will be found and correctly handled.
 */
#define POSIX_RENAME_FAILS_WITH_ETXTBSY 1
/*
 * If this constant is set to 1, the current implementation of rename()
 * may generate error code of ETXTBSY under circumstances other than those
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_RENAME_HAS_EXTRA_CONDITION_ON_ETXTBSY 0
