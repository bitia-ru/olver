/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "fs/tmpfile/tmpfile_media.seh"
#include "io/file/file_model.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

CString * rootForTempl;

void initFsTmpfileSubsystem(void)
{
    rootForTempl = NULL;

    // Set up mediators
    set_mediator_mkstemp_spec(mkstemp_media);
    set_mediator_mktemp_spec(mktemp_media);
    set_mediator_tempnam_spec(tempnam_media);
    set_mediator_tmpfile_spec(tmpfile_media);
//    set_mediator_tmpfile64_spec(tmpfile64_media);
    set_mediator_tmpnam_spec(tmpnam_media);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** mkstemp_spec **/
//This mediator refers to: mkstemp, mkstemp64
mediator mkstemp_media for specification
FileDescId mkstemp_spec( CallContext context, CString * templ, bool is64bits )
{
    call
    {
        FileDescId res = create_FileDescId( context.system, context.process, -1 );
        TSCommand command = create_TSCommand();

        if ( is64bits ) { format_TSCommand( & command, "mkstemp64:$(str)", templ ); }
                   else { format_TSCommand( & command, "mkstemp:$(str)"  , templ ); }
        executeCommandInContext( context, &command );
        if ( ! isBadVerdict() )
        {
            timestamp = command.meta.timestamp;
            res.filedesc = readInt_TSStream( & command.response );
            copy( readCString_TSStream( & command.response ), templ );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        CString * path = ( rootForTempl != NULL ? concat_Path( rootForTempl, templ ) : templ );
        OpenFlags oflag = { ReadWrite, Blocking, false, true, false, false, false, false };
        FilePermission * m4 = create_FilePermission( true, false, false );
        FilePermissions * mode444 = create_FilePermissions( m4, m4, m4, Unknown_Bool3, Unknown_Bool3, Unknown_Bool3 );
        onOpen( context, path, oflag, mode444, mkstemp_spec, is64bits );
    }
}

/** mktemp_spec **/
mediator mktemp_media for specification
CString * mktemp_spec( CallContext context, CString * templ )
{
    call
    {
        CString* res = NULL;
        bool isNullPointer;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mktemp:$(str)", templ);

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            isNullPointer=readInt_TSStream(&command.response);
            if (!isNullPointer)
            {
                res = readCString_TSStream( & command.response );
                copy( readCString_TSStream( & command.response ), templ );
            }
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** tempnam_spec **/
mediator tempnam_media for specification
CString * tempnam_spec( CallContext context, CString * dir, CString * pfx, ErrorCode * errno )
{
    call
    {
        CString * res = NULL;
        bool      isNullPointer;
        TSCommand command = create_TSCommand();


        format_TSCommand( &command, "tempnam:$(int)$(int)", create_IntTObj(dir==NULL), create_IntTObj(pfx==NULL));

        if (dir!=NULL)
        {
            writeCString_TSStream(&(command.command), dir);
        }

        if (pfx!=NULL)
        {
            writeCString_TSStream(&(command.command), pfx);
        }

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            isNullPointer=readInt_TSStream(&command.response);
            if (!isNullPointer)
            {
                res = readCString_TSStream(&command.response);
            }

            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** tmpfile_spec **/
//This mediator refers to: tmpfile, tmpfile64
mediator tmpfile_media for specification
FILETPtr tmpfile_spec( CallContext context, ErrorCode * errno, bool is64bits )
{
    call
    {
        VoidTPtr res;
        TSCommand command = create_TSCommand();

        if ( is64bits ) { format_TSCommand( & command, "tmpfile64" ); }
                   else { format_TSCommand( & command, "tmpfile"   ); }

        executeCommandInContext( context, &command );
        if ( ! isBadVerdict() )
        {
            timestamp = command.meta.timestamp;
            res     = readPointer_TSStream( context, & command.response );
            * errno = readInt_TSStream    (          & command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        if ( ! isNULL_VoidTPtr( tmpfile_spec ) ) {
            CString * templName = create_CString( "templName" );
            CString * path = ( rootForTempl != NULL ? concat_Path( rootForTempl, templName ) : templName );
            FileDescId        fileId = a_fileno       ( context, tmpfile_spec           );
            OpenFlags         oflags = convertToOflag (          create_CString( "w+" ) );
            FilePermissions * perm   = currentFilePerm( context                         );
            onOpen( context, path, oflags, perm, fileId, is64bits );
        }
    }
}

/** tmpnam_spec **/
mediator tmpnam_media for specification
CString* tmpnam_spec( CallContext context, IntT array_length )
{
    call
    {
        CString*  res = NULL;
        bool      isNullPointer;
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "tmpnam:$(int)", create_IntTObj(array_length));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;


            isNullPointer=readInt_TSStream(&command.response);
            if (!isNullPointer)
            {
                res = readCString_TSStream(&command.response);
            }

        }

        destroy_TSCommand(&command);

        return res;
    }
}
