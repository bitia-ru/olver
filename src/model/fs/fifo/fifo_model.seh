/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef FS_FIFO_MODEL_SEH
#define FS_FIFO_MODEL_SEH

#include "common/common_model.seh"
#include "fs/fs/fs_model.seh"
#include "io/file/file_model.seh"


/********************************************************************/
/**                      Helper Data Types                         **/
/********************************************************************/

specification typedef struct WriteFIFOCall
{
    FileDescId fildes;
    VoidTPtr   buf;
    SizeT      nbyte;
    SSizeT     oldSize;
} WriteFIFOCall;

WriteFIFOCall * create_WriteFIFOCall(
    FileDescId fildes,
    VoidTPtr   buf,
    SizeT      nbyte,
    SSizeT     oldSize
);

specification typedef struct WritevFIFOCall
{
    FileDescId fildes;
    List*      iov;
    SSizeT     oldSize;
} WritevFIFOCall ;

WritevFIFOCall * create_WritevFIFOCall(
    FileDescId fildes,
    List*      iov,
    SSizeT     oldSize
);

specification typedef struct WriteFIFOReturnType 
{
    CallContext context;
    SSizeT      functionResult;
    ErrorCode*  errno;
}WriteFIFOReturnType;

WriteFIFOReturnType * create_WriteFIFOReturnType(
    CallContext context,
    SSizeT      functionResult,
    ErrorCode*  errno
);

specification typedef struct ReadFIFOCall
{
    FileDescId fildes;
    VoidTPtr buf;
    SizeT nbyte;
    FIFOFileDescriptor*  fifoDescr;
} ReadFIFOCall;

ReadFIFOCall * create_ReadFIFOCall(
    FileDescId fildes,
    VoidTPtr buf,
    SizeT nbyte,
    FIFOFileDescriptor*  fifoDescr
);

specification typedef struct ReadvFIFOCall
{
    FileDescId fildes;
    List*      iov;
    FIFOFileDescriptor*  fifoDescr;
} ReadvFIFOCall;

ReadvFIFOCall * create_ReadvFIFOCall(
    FileDescId fildes,
    List*      iov,
    FIFOFileDescriptor*  fifoDescr
);

specification typedef struct ReadFIFOReturnType 
{
    CallContext context;
    SSizeT      functionResult;
    ErrorCode*  errno;
    CByteArray* oldArray;
}ReadFIFOReturnType;

ReadFIFOReturnType * create_ReadFIFOReturnType(
    CallContext context,
    SSizeT      functionResult,
    ErrorCode*  errno,
    CByteArray* oldArray
);

specification typedef struct OpenFIFOCall
{
    CString* path;
    OpenFlags oflag;
    FilePermissions* mode;
    bool is64bits; 
    Bool3 fileExists;
    FileSystem *pre_fs;
    File* oldFile;
} OpenFIFOCall;

OpenFIFOCall * create_OpenFIFOCall(
    CString* path,
    OpenFlags oflag,
    FilePermissions* mode,
    bool is64bits, 
    Bool3 fileExists,
    FileSystem *pre_fs,
    File* oldFile
);

specification typedef struct OpenFIFOReturnType
{
    CallContext context;
    FileDescId filedesc;
    ErrorCode* errno;
} OpenFIFOReturnType;

OpenFIFOReturnType * create_OpenFIFOReturnType(
    CallContext context,
    FileDescId filedesc,
    ErrorCode* errno
);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** mkfifo_spec **/
specification
IntT mkfifo_spec( CallContext context, CString* path, FilePermissions* mode, ErrorCode* errno);

void OnFIFO(CallContext context, CString* path, FilePermissions* mode, IntT mkfifo_spec);

void mkfifo_model( CallContext context, CString* path, FilePermissions* mode);

/** close_fifo_spec **/
specification
IntT close_fifo_spec( CallContext context,  FileDescId  fildes, ErrorCode* errno);

void onFIFOClose( CallContext context,  FileDescId  fildes, IntT close_spec);


/** write_fifo_spec **/
specification
void write_fifo_spec(CallContext context, FileDescId fildes, VoidTPtr buf, 
                       SizeT nbyte, ErrorCode* errno);

void onWriteFIFO(CallContext context, FileDescId fildes, VoidTPtr buf, SizeT nbyte);

void onWriteFIFOReturn(CallContext context, SSizeT write_fifo_spec);

reaction WriteFIFOReturnType* write_fifo_return(void);

void write_fifo_model(CallContext context, SSizeT write_fifo_spec);

/** read_fifo_spec **/
specification
void read_fifo_spec(CallContext context, FileDescId fildes, VoidTPtr buf, 
                      SizeT nbyte, ErrorCode* errno);

void onReadFIFO(CallContext context, FileDescId fildes, VoidTPtr buf, SizeT nbyte);

reaction ReadFIFOReturnType* read_fifo_return(void);

void onReadFIFOReturn(CallContext context, SSizeT read_fifo_spec, ReadFIFOReturnType* read_fifo_return);

/** writev_fifo_spec **/
specification
void writev_fifo_spec( CallContext context, FileDescId fildes, List* iov, 
                      ErrorCode* errno);
void onWritevFIFO(CallContext context, FileDescId fildes, List* iov);
void onWritevFIFOReturn(CallContext context, SSizeT writev_fifo_spec);
reaction WriteFIFOReturnType* writev_fifo_return(void);

void writev_fifo_model(CallContext context, SSizeT writev_fifo_spec);


/** readv_fifo_spec **/
specification
void readv_fifo_spec(CallContext context, FileDescId fildes, List* iov, 
                ErrorCode* errno);

void onReadvFIFO(CallContext context, FileDescId fildes, List* iov);

void onReadvFIFOReturn(CallContext context, SSizeT readv_fifo_spec, ReadFIFOReturnType* readv_fifo_return);

reaction ReadFIFOReturnType* readv_fifo_return(void);


/** open_fifo_spec **/
//This specification refers to: open_fifo, open64_fifo
specification
void open_fifo_spec(CallContext context, CString* path, OpenFlags oflag, 
               FilePermissions* mode, ErrorCode* errno, bool is64bits );

void onOpenFIFO( CallContext context, CString* path, OpenFlags oflag, 
            FilePermissions* mode, bool is64bits );

void onOpenFIFOReturn(CallContext context, FileDescId open_spec);

reaction OpenFIFOReturnType* open_fifo_return(void);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isFIFOOpenedForReadingWriting(CallContext context, FileDescId fildes, bool checkReading);
bool checkFIFODataRead(CallContext context, CByteArray* fdata, VoidTPtr buf, SSizeT nbytes);

#endif

