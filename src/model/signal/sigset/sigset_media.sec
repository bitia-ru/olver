/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "signal/sigset/sigset_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initSignalSigsetSubsystem(void)
{
  // Set up mediators
    set_mediator_sigaddset_spec(sigaddset_media);
    set_mediator_sigandset_spec(sigandset_media);
    set_mediator_sigdelset_spec(sigdelset_media);
    set_mediator_sigemptyset_spec(sigemptyset_media);
    set_mediator_sigfillset_spec(sigfillset_media);
    set_mediator_sigisemptyset_spec(sigisemptyset_media);
    set_mediator_sigismember_spec(sigismember_media);
    set_mediator_sigorset_spec(sigorset_media);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sigaddset_spec **/
mediator sigaddset_media for specification
IntT sigaddset_spec(CallContext context, SigSetTPtr set,
                    IntT signo, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, 
                          "sigaddset:$(ptr)$(int)", 
                          create_VoidTPtrObj(set), 
                          create_IntTObj(signo));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSigaddset(context, set, signo, sigaddset_spec);
    }
}

/** sigandset_spec **/
mediator sigandset_media for specification
IntT sigandset_spec(CallContext context, SigSetTPtr set, 
                    SigSetTPtr left, SigSetTPtr right,
                    ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
     
        format_TSCommand( &command, 
                          "sigandset:$(ptr)$(ptr)$(ptr)",
                          create_VoidTPtrObj(set),
                          create_VoidTPtrObj(left),
                          create_VoidTPtrObj(right));

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSigandset(context, set, left, right, sigandset_spec);
    }
}

/** sigdelset_spec **/
mediator sigdelset_media for specification
IntT sigdelset_spec(CallContext context, SigSetTPtr set,  
                    IntT signo, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, 
                          "sigdelset:$(ptr)$(int)", 
                          create_VoidTPtrObj(set), 
                          create_IntTObj(signo));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSigdelset(context, set, signo, sigdelset_spec);
    }
}

/** sigemptyset_spec **/
mediator sigemptyset_media for specification
IntT sigemptyset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "sigemptyset:$(ptr)",
                          create_VoidTPtrObj(set));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }    
    state
    {
        onSigemptyset(context,  set, sigemptyset_spec);
    }
}

/** sigfillset_spec **/
mediator sigfillset_media for specification
IntT sigfillset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "sigfillset:$(ptr)",
                          create_VoidTPtrObj(set));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSigfillset(context,  set, sigfillset_spec);
    }
}

/** sigisemptyset_spec **/
mediator sigisemptyset_media for specification
IntT sigisemptyset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, 
                          "sigisemptyset:$(ptr)",
                          create_VoidTPtrObj(set));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    // Function doesn't change the state
}

/** sigismember_spec **/
mediator sigismember_media for specification
IntT sigismember_spec(CallContext context, SigSetTPtr set, 
                      IntT signo, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
       
        format_TSCommand( &command, "sigismember:$(ptr)$(int)",
                          create_VoidTPtrObj(set), 
                          create_IntTObj(signo));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    // Function doesn't change the state
}

/** sigorset_spec **/
mediator sigorset_media for specification
IntT sigorset_spec(CallContext context, SigSetTPtr set, 
                   SigSetTPtr left, SigSetTPtr right,
                   ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command,
                          "sigorset:$(ptr)$(ptr)$(ptr)",
                          create_VoidTPtrObj(set),
                          create_VoidTPtrObj(left),
                          create_VoidTPtrObj(right));

        executeCommandInContext( context, &command );
        
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSigorset(context, set, left, right, sigorset_spec);
    }
}
