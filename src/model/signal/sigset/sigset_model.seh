/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SIGNAL_SIGSET_MODEL_SEH
#define SIGNAL_SIGSET_MODEL_SEH

#include <atl/set.h>
#include "common/common_model.seh"
#include "data/signal_model.seh"
#include "data/errno_model.seh"
#include "config/interpretation.seh"
#include "signal/sigset/sigset_config.h"

/********************************************************************/
/**           Defines                                              **/
/********************************************************************/

 /*
  * IS_ADD_REALTIME_SIGNALS defines, if sigfillset function add realtime 
  * signals to signal set
  */
#define IS_ADD_REALTIME_SIGNALS true 

/********************************************************************/
/**           Model Representation of Signals                      **/
/********************************************************************/

typedef VoidTPtr SigSetTPtr;

specification typedef struct SigSet
{
    SigSetTPtr    address;
    /*
     * This flag is true if the set of signals have been initialized by 
     * sigfillset() or sigemptyset() functions and false otherwise.
     */
    bool          is_init;  
    /*
     * Set of signals.
     */
    Set*          data;     
} SigSet;

extern int sigrtmin;
extern int sigrtmax;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sigaddset_spec **/
specification
IntT sigaddset_spec(CallContext context, 
                    SigSetTPtr set, 
                    IntT signo, 
                    ErrorCode* errno)
	coverage C;

void onSigaddset(CallContext context, 
                 SigSetTPtr set, 
                 IntT signo, 
                 IntT sigaddset_spec);

/** sigandset_spec **/
specification
IntT sigandset_spec(CallContext context, 
                    SigSetTPtr set, 
                    SigSetTPtr left, 
                    SigSetTPtr right,
                    ErrorCode* errno);

void onSigandset(CallContext context, 
                 SigSetTPtr set, 
                 SigSetTPtr left, 
                 SigSetTPtr right,
                 IntT sigandset_spec);

/** sigdelset_spec **/
specification
IntT sigdelset_spec(CallContext context,
                    SigSetTPtr set,
                    IntT signo, 
                    ErrorCode* errno)
	coverage C;


void onSigdelset(CallContext context,
                 SigSetTPtr set,
                 IntT signo,
                 IntT sigdelset_spec);

/** sigemptyset_spec **/
specification
IntT sigemptyset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno);

void onSigemptyset(CallContext context, SigSetTPtr set, IntT sigemptyset_spec);

/** sigfillset_spec **/
specification
IntT sigfillset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno);

void onSigfillset(CallContext context, SigSetTPtr set, IntT sigfillset_spec);

/** sigisemptyset_spec **/
specification
IntT sigisemptyset_spec(CallContext context, SigSetTPtr set, ErrorCode* errno);

/** sigismember_spec **/
specification
IntT sigismember_spec(CallContext context,
                      SigSetTPtr set,
                      IntT signo,
                      ErrorCode* errno);

/** sigorset_spec **/
specification
IntT sigorset_spec(CallContext context,
                   SigSetTPtr set,
                   SigSetTPtr left,
                   SigSetTPtr right,
                   ErrorCode* errno);

void onSigorset(CallContext context,
                SigSetTPtr set,
                SigSetTPtr left,
                SigSetTPtr right,
                IntT sigorset_spec);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

SigSet* create_SigSet(SigSetTPtr address);
SigSet* getSigSet(SigSetTPtr address);
bool isRealtimeSig(IntT sig);
bool isDefinedSig(IntT sig);
bool isAlwaysSupported(IntT sig);

#endif

