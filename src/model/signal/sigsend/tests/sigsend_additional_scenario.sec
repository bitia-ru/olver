/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "signal/sigsend/tests/sigsend_additional_scenario.seh"
#include "signal/sigaction/sigaction_model.seh"
#include "signal/sigsend/sigsend_model.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "process/pgroup/pgroup_model.seh"


/********************************************************************/
/**                  Tests Local Data                              **/
/********************************************************************/

static CallContext curContext;

static CallContext context;
static CallContext thr1, thr2;

static CallContext context2;
static CallContext thr21, thr22;

static CallContext context3;
static CallContext thr31, thr32, thr33;

static CallContext context4, context5;

static ProcessId procGroup;

static SigAction* s_oact;
static SigAction* s_act;

/********************************************************************/
/**                  Scenario State Functions                      **/
/********************************************************************/

static Object* getSigsendAddState()
{
    return create_Integer( 0 );
}

/********************************************************************/
/**                  Test Scenarios Initialization                 **/
/********************************************************************/

static bool init_sigsend_add_scenario(int argc,char** argv)
{
    curContext = getContext();

    context = createProcess();
    thr1 = createThreadInContext(context);
    thr2 = createThreadInContext(context);

    context2 = createProcess();
    thr21 = createThreadInContext(context2);
    thr22 = createThreadInContext(context2);

    context3 = createProcess();
    thr31 = createThreadInContext(context3);
    thr32 = createThreadInContext(context3);
    thr33 = createThreadInContext(context3);


    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(SERIALIZATION_TIME*20);

    s_act = create_SigAction();
    s_oact = create_SigAction();

    s_oact->m_sa_handler = SIG_USER_CATCHER;
    s_oact->m_sa_sigaction = SIGACT_USER_CATCHER;
    s_act->m_sa_handler = SIG_USER_CATCHER;
    s_act->m_sa_sigaction = SIGACT_USER_CATCHER;

    sigaction_spec(curContext, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(curContext, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    sigaction_spec(context, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    sigaction_spec(context2, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context2, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    sigaction_spec(context3, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context3, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());


    return true;
}


static bool init_sigsend_sigqueue_scenario(int argc,char** argv)
{
    curContext = getContext();

    context4 = createProcess();
    context5 = createProcess();

    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(SERIALIZATION_TIME*20);

    s_act = create_SigAction();
    s_oact = create_SigAction();

    s_oact->m_sa_handler = SIG_USER_CATCHER;
    s_oact->m_sa_sigaction = SIGACT_USER_CATCHER;
    s_act->m_sa_handler = SIG_USER_CATCHER;
    s_act->m_sa_sigaction = SIGACT_USER_CATCHER;

    sigaction_spec(context4, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context4, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    sigaction_spec(context5, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context5, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    return true;
}

static bool init_sigsend_killpg_scenario(int argc,char** argv)
{
    curContext = getContext();


    procGroup = create_ProcessId(curContext.system, curContext.process);
    setpgid_spec(curContext, procGroup, procGroup, requestErrorCode());

    context = createProcess();

    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(SERIALIZATION_TIME*20);

    s_act = create_SigAction();
    s_oact = create_SigAction();

    s_oact->m_sa_handler = SIG_USER_CATCHER;
    s_oact->m_sa_sigaction = SIGACT_USER_CATCHER;
    s_act->m_sa_handler = SIG_USER_CATCHER;
    s_act->m_sa_sigaction = SIGACT_USER_CATCHER;

    sigaction_spec(curContext, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(curContext, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());

    sigaction_spec(context, create_Signal(SUT_SIGUSR1),
        s_act, s_oact, requestErrorCode());
    sigaction_spec(context, create_Signal(SUT_SIGUSR2),
        s_act, s_oact, requestErrorCode());


    return true;
}

/********************************************************************/
/**                  Test Scenarios Finalization                   **/
/********************************************************************/

static void finish_sigsend_add_scenario(void)
{
    terminateProcess(context);
    terminateProcess(context2);
    terminateProcess(context3);
    TEST_SCENARIO_VERDICT_VERBOSE("add_scenario");
}

static void finish_sigsend_killpg_scenario(void)
{
    terminateProcess(context);
    TEST_SCENARIO_VERDICT_VERBOSE("killpg_scenario");
}

static void finish_sigsend_sigqueue_scenario(void)
{
    terminateProcess(context4);
    terminateProcess(context5);
    TEST_SCENARIO_VERDICT_VERBOSE("sigqueue_scenario");
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool sigsend_pthread_kill_scen()
{
    int i=0;

    pthread_kill_spec(context, thr1, create_Signal(0), false);

    pthread_kill_spec(context, thr1, create_Signal(SUT_SIGUSR1), false);
    pthread_kill_spec(context, thr2, create_Signal(SUT_SIGUSR2), false);

    pthread_kill_spec(thr21, thr21, create_Signal(SUT_SIGUSR1), false);

    pthread_kill_spec(thr21, thr22, create_Signal(0), false);
    pthread_kill_spec(thr21, thr22, create_Signal(SUT_SIGCONT), false);

    ts_sleep_msec(300);

    kill_spec(context2, create_ProcessId(context.system, context.process), create_Signal(SUT_SIGCONT), false);


    return true;
}


scenario
bool sigsend_raise_scen()
{
    int i=0;

    for (i=0;i<3;i++)
    {
        pthread_kill_spec(context3, create_ThreadId(0 ,0, 0), create_Signal(SUT_SIGUSR1), true);
        pthread_kill_spec(context3, create_ThreadId(0 ,0, 0), create_Signal(SUT_SIGUSR2), true);
        pthread_kill_spec(thr31, create_ThreadId(0, 0, 0), create_Signal(SUT_SIGUSR2), true);
    }
    pthread_kill_spec(thr32, create_ThreadId(0, 0, 0), create_Signal(0), true);
    pthread_kill_spec(thr32, create_ThreadId(0, 0, 0), create_Signal(SUT_SIGCONT), true);

    return true;
}


scenario
bool sigsend_sigqueue_scen()
{
    VoidTPtr ptr;
    ptr.process = context4.process;
    ptr.system = context4.system;
    iterate (int i=0;i<3;i++;)
    {
        sigqueue_spec(context4, context5.process, create_Signal(SUT_SIGUSR1), true, i, NULL_VoidTPtr);
        ts_sleep_msec(300);
        ptr.address = i;
        sigqueue_spec(context5, context4.process, create_Signal(SUT_SIGUSR2), false, 0, ptr);
        ts_sleep_msec(300);
    }


    return true;
}

scenario
bool sigsend_killpg_scen()
{
    IntT i=0;

    kill_spec(curContext, procGroup, create_Signal(SUT_SIGUSR1), KILL_KILLPG_CALL);
    kill_spec(curContext, procGroup, create_Signal(SUT_SIGUSR2), KILL_KILLPG_CALL);
    kill_spec(curContext, procGroup, create_Signal(0), KILL_KILLPG_CALL);
    kill_spec(curContext, procGroup, create_Signal(SUT_SIGCONT), KILL_KILLPG_CALL);


    return true;
}


/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

Map* saveSigsendAddModelState(void)
{
    return clone(systems);
}

void restoreSigsendAddModelState(Map* saved_state)
{
    systems = saved_state;
}

static bool isSigsendAddModelStateStationary(void)
{
    return true;
}


/********************************************************************/
/**                    Test Scenarios Definitions                  **/
/********************************************************************/

scenario dfsm signal_sigsend_additional_scenario =
{
    .init = init_sigsend_add_scenario,
    .finish = finish_sigsend_add_scenario,
    .getState = getSigsendAddState,
    .saveModelState = (PtrSaveModelState)saveSigsendAddModelState,
    .restoreModelState = (PtrRestoreModelState)restoreSigsendAddModelState,
    .isStationaryState=(PtrIsStationaryState)isSigsendAddModelStateStationary,
    .actions = {
            sigsend_pthread_kill_scen,
            sigsend_raise_scen,
            NULL
    }

};


scenario dfsm signal_sigsend_killpg_scenario =
{
    .init = init_sigsend_killpg_scenario,
        .finish = finish_sigsend_killpg_scenario,
        .getState = getSigsendAddState,
        .saveModelState = (PtrSaveModelState)saveSigsendAddModelState,
        .restoreModelState = (PtrRestoreModelState)restoreSigsendAddModelState,
        .isStationaryState=(PtrIsStationaryState)isSigsendAddModelStateStationary,
        .actions = {
            sigsend_killpg_scen,
            NULL
    }

};

scenario dfsm signal_sigsend_sigqueue_scenario =
{
        .init = init_sigsend_sigqueue_scenario,
        .finish = finish_sigsend_sigqueue_scenario,
        .getState = getSigsendAddState,
        .saveModelState = (PtrSaveModelState)saveSigsendAddModelState,
        .restoreModelState = (PtrRestoreModelState)restoreSigsendAddModelState,
        .isStationaryState=(PtrIsStationaryState)isSigsendAddModelStateStationary,
        .actions = {
            sigsend_sigqueue_scen,
            NULL
    }

};
