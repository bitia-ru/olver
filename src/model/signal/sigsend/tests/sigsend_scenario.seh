/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SIGNAL_SIGSEND_SCENARIO_SEH
#define SIGNAL_SIGSEND_SCENARIO_SEH

#define SIGNAL_SIGINFO_FLAG 0

#include "common/common_model.seh"
#include "system/system/system_model.seh"
#include "signal/sigsend/sigsend_model.seh"
#include "signal/sigaction/sigaction_model.seh"
#include "signal/sigaction/sigaction_media.seh"
#include "signal/sigaction/tests/sigaction_main.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/control_center.seh"
#include "data/basis.seh"
#include "common/common_scenario.seh"

/********************************************************************/
/**                  Scenario State Data Type                      **/
/********************************************************************/

specification typedef struct State_Kill_and_Sigaction_Scenario 
{
    Map* systems;
    bool is_recived_thread_mask_empty;
} State_Kill_and_Sigaction_Scenario;

/********************************************************************/
/**          Test Scenario Initialization And Finalization         **/
/********************************************************************/

static bool init_kill_and_sigaction_scenario(int argc, char** argv);
static void finish_kill_and_sigaction_scenario(void);

/********************************************************************/
/**                  Scenario State Functions                      **/
/********************************************************************/

/*
 * The function returning the model state
 */
Object* get_state_kill_and_sigaction_scenario(void);

/*
 * The function saving the model state
 */
State_Kill_and_Sigaction_Scenario* save_KillAndSigactionState(void);

/*
 * The function restoring the model state.
 */
void restore_KillAndSigactionState(State_Kill_and_Sigaction_Scenario* saved_state);

/*
 * The function checking if the model state was stationary
 */
bool is_stationary_KillAndSigactionState(void);
State_Kill_and_Sigaction_Scenario* create_state_kill_and_sigaction_scenario(Map* systems, bool is_empty_mask);
int get_signals_number_in_queue(Map* signal_queue);

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario bool kill_scen(void);
scenario bool sigaction_scen(void);
scenario bool pthread_sigmask_scen(void);


#endif
