/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SIGNAL_SIGSEND_MEDIA_SEH
#define SIGNAL_SIGSEND_MEDIA_SEH

#include "signal/sigsend/sigsend_model.seh"
/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSignalSigsendSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** kill_spec **/
//This mediator refers to: raise, killpg, kill
mediator kill_media for specification
void kill_spec( CallContext context, ProcessId proc_id, Signal* sig,  KillCallTypes callType);

mediator kill_react_media for 
reaction KillReactionType* kill_react(void);

/** pthread_kill_spec **/
//This mediator refers to: raise, pthread_kill
mediator pthread_kill_media for specification
void pthread_kill_spec( CallContext context, ThreadId thrId, Signal* sig, bool isRaise);

mediator pthread_kill_react_media for 
reaction Pthread_killReactionType* pthread_kill_react(void);

/** sigqueue_spec **/
mediator sigqueue_media for specification
void sigqueue_spec( CallContext context, PidT pid, Signal* sig, bool is_param_int, IntT value_int, VoidTPtr value_ptr);

mediator sigqueue_react_media for 
reaction KillReactionType* sigqueue_react(void);

/********************************************************************/
/**        Signals done function(checks that all reaction had got) **/
/********************************************************************/
mediator signals_done_media for specification
void signals_done_spec(CallContext context, ProcessState* pr1, ProcessState* pr2, bool* ex1, bool* ex2);


#endif

