/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SIGNAL_SIGSEND_MODEL_SEH
#define SIGNAL_SIGSEND_MODEL_SEH

#include "common/common_model.seh"
#include "data/errno_model.seh"
#include "data/signal_model.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "pthread/pthread/pthread_model.seh"
#include "process/process/process_model.seh"


/********************************************************************/
/**                      Definitions                               **/
/********************************************************************/
 
#define THREADS_OPTION_SUPPORTED 1

/*
* This constants are used when kill functions called
* 
*/
typedef enum KillCallTypes
{
    KILL_NORMAL_CALL = 0, // = false
    KILL_RAISE_CALL = 1,
    KILL_KILLPG_CALL = 2
}KillCallTypes;

/********************************************************************/
/**                 Helper Data Types                              **/
/********************************************************************/

specification typedef struct BlockedKillParams
{
    ProcessId        get_pid;
    Signal*              sig;
    List*           processes;
    List*           unique_id;
}BlockedKillParams;

specification typedef struct KillReactionType
{
    CallContext       context;
    IntT         return_value;
    ErrorCode*          errno;
    BlockedKillParams* params;
} KillReactionType;

specification typedef struct BlockedPthread_killParams
{
    ThreadId       get_thrid;
    Signal*              sig;
    IntT           unique_id;
}BlockedPthread_killParams;

specification typedef struct Pthread_killReactionType
{
    CallContext      context;
    IntT        return_value;
    ErrorCode*         errno;
} Pthread_killReactionType;

specification typedef struct SigqueueReactionType
{
    CallContext       context;
    IntT         return_value;
    ErrorCode*          errno;
    BlockedKillParams* params;
}SigqueueReactionType;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** kill_spec **/
//This specification refers to: raise, killpg, kill
specification
void kill_spec(CallContext context, ProcessId proc_id, Signal* sig, KillCallTypes callType);
void onKill(CallContext context, Signal* sig, ProcessId pid);
reaction KillReactionType* kill_react(void);
void onKillReact(KillReactionType* reaction_params);

/** pthread_kill_spec **/
//This specification refers to: raise, pthread_kill
specification
void pthread_kill_spec( CallContext context, ThreadId thrId, Signal* sig, bool isRaise);
void onPthread_kill( CallContext context, ThreadId thrId, Signal* sig);
reaction
Pthread_killReactionType* pthread_kill_react(void);
void onPthread_killReact(CallContext context, IntT res, ErrorCode* errno);

/** sigqueue_spec **/
specification
void sigqueue_spec( CallContext context, PidT pid, Signal* sig, bool is_param_int, IntT value_int, VoidTPtr value_ptr);
void sigqueue_model(CallContext context, PidT pid, Signal* sig, bool is_param_int, IntT value_int, VoidTPtr value_ptr);
void onSigqueue(CallContext context, PidT pid, Signal* sig, bool is_param_int, IntT value_int, VoidTPtr value_ptr);
reaction KillReactionType* sigqueue_react(void);
void onSigqueueReact(KillReactionType* reaction_params);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
/** signal_done **/
specification
void signals_done_spec(CallContext context, ProcessState* pr1, ProcessState* pr2, bool* ex1, bool* ex2);

void onSignals_done_spec(ProcessState* pr1, ProcessState* pr2, bool* ex1, bool* ex2);
void onProcessTermination(CallContext context);
int find_unique_id_in_SignalParamsList(IntT unique_id, List* list);
int find_containedList_in_lists(IntT unique_id, List* lists);

void signal_generated_good(IntT unique_id, List* lists);
bool signal_generated_bad(IntT unique_id, List* lists);

IntT add_Signal_to_Process(ProcessState* pr_st_get, Signal* sig, CallContext call_context, 
                           bool is_param_int, IntT value_int, VoidTPtr value_ptr);
IntT add_Signal_to_Thread(ThreadState* pr_st_get, Signal* sig, CallContext call_context, 
                          bool is_param_int, IntT value_int, VoidTPtr value_ptr);
int remove_Signal_from_Model(ProcessState* pr_st_get, Signal* sig, IntT unique_id);

KillReactionType* create_KillReactionType(CallContext context, IntT res, ErrorCode* err, BlockedKillParams* params);

Pthread_killReactionType* create_Pthread_killReactionType(CallContext context, IntT res, ErrorCode* err);
BlockedPthread_killParams* create_BlockedPthread_killParams(ThreadId get_thrid, Signal* sig, IntT unique_id);

bool eqProcessId(ProcessId pid1, ProcessId pid2);
bool eqThreadId(ThreadId thr_id1, ThreadId thr_id2);
bool checkOnlyThisThreadCanHandle(CallContext context, Signal* sig);
/*
 * Function checked if signal can be delivered at least to one of the process
 * threads
 */
bool isCanBeDelivered(ProcessState* prSt, Signal* sig);
bool isHasHandlerFunction(SigAction* sa);


BlockedPthread_killParams * create_BlockedPthread_killParams(
                                                             ThreadId       get_thrid,
                                                             Signal*              sig,
                                                             IntT           unique_id
                                                             );


BlockedKillParams * create_BlockedKillParams(
                                             ProcessId        get_pid,
                                             Signal*              sig,
                                             List*           processes,
                                             List*           unique_id
                                             );

#endif

