/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef SIGNAL_SIGWAIT_MODEL_SEH
#define SIGNAL_SIGWAIT_MODEL_SEH

#include "common/common_model.seh"
#include "data/errno_model.seh"
#include "data/signal_model.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "pthread/pthread/pthread_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sigtimedwait_spec **/
specification
void sigtimedwait_spec( CallContext context, SigSetTPtr set, SigInfoTPtr info, TimeUnit delta);

void onSigtimedwait(CallContext context, SigSetTPtr set, SigInfoTPtr info, TimeInterval t_stamp, TimeUnit delta);

specification typedef struct SigtimedwaitBlockedType {
    CallContext context;
    SigSetTPtr set;
    SigInfoTPtr info;
    TimeInterval t_stamp;
    TimeUnit delta;
}SigtimedwaitBlockedType;

SigtimedwaitBlockedType * create_SigtimedwaitBlockedType(
    CallContext context,
    SigSetTPtr set,
    SigInfoTPtr info,
    TimeInterval t_stamp,
    TimeUnit delta
);

specification typedef struct SigtimedwaitReactionType
{
    CallContext context;
    IntT return_value;
    ErrorCode* errno;
}SigtimedwaitReactionType;

SigtimedwaitReactionType * create_SigtimedwaitReactionType(
    CallContext context,
    IntT return_value,
    ErrorCode* errno
);

reaction SigtimedwaitReactionType* sigtimedwait_react(void);

void onSigtimedwaitReact(SigtimedwaitReactionType* reaction_params);

/** sigwait_spec **/
specification
void sigwait_spec( CallContext context, SigSetTPtr set, VoidTPtr signo);

/*specification typedef struct BlockedSigwaitParams
{
    SigSet* set;
}BlockedSigwaitParams;*/

void onSigwait(CallContext context, SigSetTPtr set, VoidTPtr signo);

specification typedef struct SigwaitReactionType
{
    CallContext context;
    SigSetTPtr set;
    IntT signo;
    IntT return_value;
    ErrorCode* errno;
    IntT has_delete;
}SigwaitReactionType;

SigwaitReactionType * create_SigwaitReactionType(
    CallContext context,
    SigSetTPtr set,
    IntT signo,
    IntT return_value,
    ErrorCode* errno,
    IntT has_delete
);

reaction SigwaitReactionType* sigwait_react(void);

void onSigwaitReact(SigwaitReactionType* react_params);

/** sigwaitinfo_spec **/
specification
void sigwaitinfo_spec(CallContext context, SigSetTPtr set, SigInfoTPtr info);

void onSigwaitinfo(CallContext context, SigSetTPtr set, SigInfoTPtr info);

specification typedef struct SigwaitinfoReactionType
{
    CallContext context;
    SigSetTPtr set;
    SigInfoTPtr info;
    IntT return_value;
    ErrorCode* errno;
}SigwaitinfoReactionType;

SigwaitinfoReactionType * create_SigwaitinfoReactionType(
    CallContext context,
    SigSetTPtr set,
    SigInfoTPtr info,
    IntT return_value,
    ErrorCode* errno
);

reaction SigwaitinfoReactionType* sigwaitinfo_react(void);

void onSigwaitinfoReact(SigwaitinfoReactionType* react_params);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
/** sigtimedwait **/
SigtimedwaitReactionType* create_SigtimedwaitReactionType(CallContext context,
                          IntT return_value, ErrorCode* errno);

SigtimedwaitBlockedType* create_SigtimedwaitBlockedType(CallContext context,
                         SigSetTPtr set, SigInfoTPtr info,
                         TimeInterval t_stamp, TimeUnit delta);
/** sigwait **/
SigwaitReactionType* create_SigwaitReactionType(CallContext context, SigSetTPtr set,
                        IntT signo, IntT return_value, ErrorCode* errno, IntT has_delete);

/** sigwaitinfo **/
SigwaitinfoReactionType* create_SigwaitinfoReactionType(CallContext context, SigSetTPtr set,
                        SigInfoTPtr info, IntT return_value, ErrorCode* errno);

void showSignalsInfoInProcessState( CallContext context );

Set /* SignalObj */ * getPendingSignals( CallContext context );

#endif
