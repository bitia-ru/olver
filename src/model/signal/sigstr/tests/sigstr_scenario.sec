/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "signal/sigstr/tests/sigstr_scenario.seh"
#include "signal/sigstr/sigstr_media.seh"
#include <stdio.h>

static CallContext context;

static bool init_signal_sigstr_basic_scenario( int argc, char ** argv ) {
    bool result=true;

    context = createProcess();
    if(isWrong_ThreadId(context)) result = false;

    initSignalToString( context );
    if ( ! createTestScenarioSandboxDir( context ) ) { return false; }
    setFinishMode( UNTIL_END );

    return result;
}

static void finish_signal_sigstr_basic_scenario( void ) {
    removeTestScenarioSandboxDir( getContext() );
    TEST_SCENARIO_VERDICT_VERBOSE( signal_sigstr_basic_scenario );
    ;//TO DO delete process
}

scenario bool signal_psignal_scen() {
    CString * stderrAsFile = getTestScenarioSandboxPathCh( "stderrAsFile.txt" );
    iterate ( IntT i = 1; i <= 32; i++; ) {
        iterate ( int j = 1; j <= 2; j++; ) {
            switch ( j ) {
                case 1: psignal_spec( context, i, create_CString( ""    ), create_CString( "" ), stderrAsFile ); break;
                case 2: psignal_spec( context, i, create_CString( "abc" ), create_CString( "" ), stderrAsFile ); break;
            }
        }
    }
    return true;
}

scenario bool signal_strsignal_scen() {
    iterate ( IntT i = 1; i <= 32; i++; ) {
        strsignal_spec( context, i );
    }
    return true;
}

scenario dfsm signal_sigstr_basic_scenario =
{
    .init    = init_signal_sigstr_basic_scenario  ,
    .finish  = finish_signal_sigstr_basic_scenario,
    .actions = { signal_psignal_scen  ,
                 signal_strsignal_scen,
                 NULL
               }
};
