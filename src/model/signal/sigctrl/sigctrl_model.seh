/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SIGNAL_SIGCTRL_MODEL_SEH
#define SIGNAL_SIGCTRL_MODEL_SEH

#include "common/common_model.seh"
#include "data/signal_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_model.seh"
/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sighold_spec **/
specification
IntT sighold_spec( CallContext context, IntT sig, ErrorCode * errno );
void onSighold( CallContext context, IntT sig );

/** sigignore_spec **/
specification
IntT sigignore_spec( CallContext context, IntT sig, ErrorCode * errno );
void onSigignore( CallContext context, IntT sig );

/** sigpause_spec **/
specification
void sigpause_spec( CallContext context, IntT sig, ErrorCode * errno );
void onSigpause( CallContext context, IntT sig );

specification typedef struct SigpauseReactionType {
    CallContext context;
    IntT sig;
    IntT res;
    ErrorCode* errno;
} SigpauseReactionType;

specification typedef struct SigpauseBlockedType {
    CallContext context;
    IntT sig;
    IntT was_set;
} SigpauseBlockedType;

reaction SigpauseReactionType * sigpause_react( void );
void onSigpauseReact(SigpauseReactionType* params);
/** sigrelse_spec **/
specification
IntT sigrelse_spec( CallContext context, IntT sig, ErrorCode * errno );
void onSigrelese( CallContext context, IntT sig );

/** sigset_spec **/
specification
SignalHandler sigset_spec( CallContext context, IntT sig, SignalHandler disp, ErrorCode * errno );
void onSigset( CallContext context, IntT sig, SignalHandler disp );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

SigpauseReactionType* create_SigpauseReactionType(CallContext context, IntT res, IntT sig, ErrorCode* errno);

SigpauseBlockedType* create_SigpauseBlockedType(CallContext context, IntT sig, IntT was_set);

#endif
