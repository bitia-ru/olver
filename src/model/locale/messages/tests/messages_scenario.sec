/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "common/common_scenario.seh"

#include "locale/messages/messages_media.seh"
#include "locale/messages/tests/messages_scenario.seh"

static CallContext context;
static CString* strArray[5];
static IntT errorArray[125];

/******************************************************************************/
/**                        TEST SCENARIO FUNCTIONS                           **/
/******************************************************************************/
#include <stdio.h>

static bool init_scen(int argc, char* argv[])
{
    context = getContext();

    initReqFilters();

    errorArray[0] = SUT_EOK;
    errorArray[1] = SUT_EPERM;
    errorArray[2] = SUT_ECHILD;
    errorArray[3] = SUT_ENETDOWN;
    errorArray[4] = SUT_ENETUNREACH;
    errorArray[5] = SUT_ENETRESET;
    errorArray[6] = SUT_ECONNABORTED;
    errorArray[7] = SUT_ECONNRESET;
    errorArray[8] = SUT_ENOBUFS;
    errorArray[9] = SUT_EISCONN;
    errorArray[10] = SUT_ENOTCONN;
    errorArray[11] = SUT_ESHUTDOWN;
    errorArray[12] = SUT_ETOOMANYREFS;
    errorArray[13] = SUT_EAGAIN;
    errorArray[14] = SUT_ETIMEDOUT;
    errorArray[15] = SUT_ECONNREFUSED;
    errorArray[16] = SUT_EHOSTDOWN;
    errorArray[17] = SUT_EHOSTUNREACH;
    errorArray[18] = SUT_EALREADY;
    errorArray[19] = SUT_EINPROGRESS;
    errorArray[20] = SUT_ESTALE;
    errorArray[21] = SUT_EUCLEAN;
    errorArray[22] = SUT_ENOTNAM;
    errorArray[23] = SUT_ENAVAIL;
    errorArray[24] = SUT_ENOMEM;
    errorArray[25] = SUT_EISNAM;
    errorArray[26] = SUT_EREMOTEIO;
    errorArray[27] = SUT_EDQUOT;
    errorArray[28] = SUT_ENOMEDIUM;
    errorArray[29] = SUT_EMEDIUMTYPE;
    errorArray[30] = SUT_ECANCELED;
    errorArray[31] = SUT_EACCES;
    errorArray[32] = SUT_EFAULT;
    errorArray[33] = SUT_ENOTBLK;
    errorArray[34] = SUT_EBUSY;
    errorArray[35] = SUT_EEXIST;
    errorArray[36] = SUT_EXDEV;
    errorArray[37] = SUT_ENODEV;
    errorArray[38] = SUT_ENOENT;
    errorArray[39] = SUT_ENOTDIR;
    errorArray[40] = SUT_EISDIR;
    errorArray[41] = SUT_EINVAL;
    errorArray[42] = SUT_ENFILE;
    errorArray[43] = SUT_EMFILE;
    errorArray[44] = SUT_ENOTTY;
    errorArray[45] = SUT_ETXTBSY;
    errorArray[46] = SUT_EFBIG;
    errorArray[47] = SUT_ENOSPC;
    errorArray[48] = SUT_ESPIPE;
    errorArray[49] = SUT_ESRCH;
    errorArray[50] = SUT_EROFS;
    errorArray[51] = SUT_EMLINK;
    errorArray[52] = SUT_EPIPE;
    errorArray[53] = SUT_EDOM;
    errorArray[54] = SUT_ERANGE;
    errorArray[55] = SUT_EDEADLK;
    errorArray[56] = SUT_ENAMETOOLONG;
    errorArray[57] = SUT_ENOLCK;
    errorArray[58] = SUT_ENOSYS;
    errorArray[59] = SUT_ENOTEMPTY;
    errorArray[60] = SUT_EINTR;
    errorArray[61] = SUT_ELOOP;
    errorArray[62] = SUT_ENOMSG;
    errorArray[63] = SUT_EIDRM;
    errorArray[64] = SUT_ECHRNG;
    errorArray[65] = SUT_EL2NSYNC;
    errorArray[66] = SUT_EL3HLT;
    errorArray[67] = SUT_EL3RST;
    errorArray[68] = SUT_ELNRNG;
    errorArray[69] = SUT_EUNATCH;
    errorArray[70] = SUT_EIO;
    errorArray[71] = SUT_ENOANO;
    errorArray[72] = SUT_EBADRQC;
    errorArray[73] = SUT_EBADSLT;
    errorArray[74] = SUT_EBFONT;
    errorArray[75] = SUT_ENXIO;
    errorArray[76] = SUT_ENOSTR;
    errorArray[77] = SUT_ENODATA;
    errorArray[78] = SUT_ETIME;
    errorArray[79] = SUT_ENOSR;
    errorArray[80] = SUT_ENONET;
    errorArray[81] = SUT_ENOPKG;
    errorArray[82] = SUT_EREMOTE;
    errorArray[83] = SUT_ENOLINK;
    errorArray[84] = SUT_EADV;
    errorArray[85] = SUT_ESRMNT;
    errorArray[86] = SUT_E2BIG;
    errorArray[87] = SUT_ECOMM;
    errorArray[88] = SUT_EPROTO;
    errorArray[89] = SUT_EMULTIHOP;
    errorArray[90] = SUT_EDOTDOT;
    errorArray[91] = SUT_EBADMSG;
    errorArray[92] = SUT_EOVERFLOW;
    errorArray[93] = SUT_ENOTUNIQ;
    errorArray[94] = SUT_EBADFD;
    errorArray[95] = SUT_EREMCHG;
    errorArray[96] = SUT_ELIBACC;
    errorArray[97] = SUT_ENOEXEC;
    errorArray[98] = SUT_ELIBBAD;
    errorArray[99] = SUT_ELIBSCN;
    errorArray[100] = SUT_ELIBMAX;
    errorArray[101] = SUT_ELIBEXEC;
    errorArray[102] = SUT_EILSEQ;
    errorArray[103] = SUT_ERESTART;
    errorArray[104] = SUT_ESTRPIPE;
    errorArray[105] = SUT_EUSERS;
    errorArray[106] = SUT_ENOTSOCK;
    errorArray[107] = SUT_EDESTADDRREQ;
    errorArray[108] = SUT_EBADF;
    errorArray[109] = SUT_EMSGSIZE;
    errorArray[110] = SUT_EPROTOTYPE;
    errorArray[111] = SUT_ENOPROTOOPT;
    errorArray[112] = SUT_EPROTONOSUPPORT;
    errorArray[113] = SUT_ESOCKTNOSUPPORT;
    errorArray[114] = SUT_EOPNOTSUPP;
    errorArray[115] = SUT_EPFNOSUPPORT;
    errorArray[116] = SUT_EAFNOSUPPORT;
    errorArray[117] = SUT_EADDRINUSE;
    errorArray[118] = SUT_EADDRNOTAVAIL;
    errorArray[119] = SUT_EWOULDBLOCK;
    errorArray[120] = SUT_ENOTSUP;
    errorArray[121] = -1;
    errorArray[122] = 1503;
    errorArray[123] = 126;
    errorArray[124] = 142;

    strArray[0] = _CS("Test string");
    strArray[1] = _CS(" ");
    strArray[2] = _CS("skdjf019:2u%`~\\)(-/+/=-");
    strArray[3] = NULL;
    strArray[4] = _CS("");

    return true;
}

static void finish_scen(void)
{
}

scenario
bool strerror_scen(void)
{
    CString *res;

    iterate(int i = 0; i < sizeof(errorArray)/sizeof(errorArray[0]); i++;)
        res = strerror_spec(context, errorArray[i], NULL, 0, requestErrorCode());

    return true;
}

scenario
bool strerror_r_scen(void)
{
    CString *res;


    CString *strRes=create_CString("");


    iterate(int i = 0; i < sizeof(errorArray)/sizeof(errorArray[0]); i++;)
        res = strerror_spec(context, errorArray[i], &strRes, 512, requestErrorCode());

    return true;
}

scenario
bool perror_scen(void)
{
    CString* StdErr;

    iterate(int i = 0; i < sizeof(errorArray)/sizeof(errorArray[0]); i++;)
        perror_spec(context, strArray[i%5], create_ErrorCode(errorArray[i]));

    return true;
}
/******************************************************************************/
/**                        TEST SCENARIO DEFINITION                          **/
/******************************************************************************/

scenario dfsm messages_scenario =
{
    .init = init_scen,
    .finish = finish_scen,
    .actions =
    {
        perror_scen,
        strerror_scen,
        strerror_r_scen,
        NULL
    }
};
#ifdef LOCALE_MESSAGES_LOCAL_MAIN

#include "common/control_center.seh"
#include "system/system/system_model.seh"

/******************************************************************************/
/**                                  LOCAL MAIN                              **/
/******************************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initLocaleMessagesSubsystem();
}

int main(int argc, char* argv[])
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    // setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    if(messages_scenario(argc, argv) == 0) verbose("PASS\n");
    else verbose("FAIL\n");

    // unloadSUT();

    return 0;
}

#endif
