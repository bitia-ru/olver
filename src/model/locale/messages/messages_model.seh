/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef LOCALE_MESSAGES_MODEL_SEH
#define LOCALE_MESSAGES_MODEL_SEH

#include "common/common_model.seh"
#include "locale/messages/messages_config.h"

/********************************************************************/
/**                         Model State API                        **/
/********************************************************************/

specification typedef CString* PCString;

PCString* create_PCString(CString* str);
PCString* getStdErr(CallContext context);

specification typedef
struct LocaleMessagesSt
{
    CString* localeName;
    Map /*<IntT, CString*>*/ *msgMap;
} LocaleMessages;

LocaleMessages*   create_LocaleMessages(void);
LocaleMessages* getState_LocaleMessages(CallContext context);
void                 put_LocaleMessages(CallContext context, IntT errnum, CString* msg);
CString*             get_LocaleMessages(CallContext context, IntT errnum);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** perror_spec **/
specification
void perror_spec(CallContext context, CString* s, ErrorCode* errno);

void onPerror(CallContext context, CString* s, ErrorCode* errno);


/** strerror_spec **/
specification
CString* strerror_spec(CallContext context, IntT errnum, ErrorCode* errno);

void onStrError (
                 CallContext context,
                 IntT        errnum,
                 ErrorCode*  errno,
                 CString*    res
                );


/** strerror_r_spec **/
specification
CString* strerror_r_spec (
                          CallContext context,
                          IntT        errnum,
                          CString**   strerrbuf,
                          SizeT       buflen,
                          ErrorCode*  errno
                         );

void onStrErrorR (
                  CallContext context,
                  IntT        errnum,
                  CString**   strerrbuf,
                  SizeT       buflen,
                  ErrorCode*  errno,
                  CString*    res
                 );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

Bool3 isEINVALstrerror(IntT errnum);

#endif
