/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "locale/locale/locale_media.seh"

/********************************************************************/
/**                    Formatters                                  **/
/********************************************************************/


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleLocaleSubsystem(void)
{
    // Set up mediators
    set_mediator_setlocale_spec(setlocale_media);
    set_mediator_nl_langinfo_spec(nl_langinfo_media);
    set_mediator_localeconv_spec(localeconv_media);
    set_mediator_newlocale_spec(newlocale_media);
    set_mediator_freelocale_spec(freelocale_media);
    set_mediator_duplocale_spec(duplocale_media);
    set_mediator_uselocale_spec(uselocale_media);
}

/********************************************************************/
/**                         Stream Functions                       **/
/********************************************************************/
LConv* readLConv_TSStream(TSStream* stream)
{
    LConv* lc = create_LConv();

    lc->decimal_point           = readCString_TSStream(stream);
    lc->thousands_sep           = readCString_TSStream(stream);
    lc->grouping                = readCString_TSStream(stream);
    lc->int_curr_symbol         = readCString_TSStream(stream);
    lc->currency_symbol         = readCString_TSStream(stream);
    lc->mon_decimal_point       = readCString_TSStream(stream);
    lc->mon_thousands_sep       = readCString_TSStream(stream);
    lc->mon_grouping            = readCString_TSStream(stream);
    lc->positive_sign           = readCString_TSStream(stream);
    lc->negative_sign           = readCString_TSStream(stream);
    lc->int_frac_digits         = readChar_TSStream(stream);
    lc->frac_digits             = readChar_TSStream(stream);
    lc->p_cs_precedes           = readChar_TSStream(stream);
    lc->p_sep_by_space          = readChar_TSStream(stream);
    lc->n_cs_precedes           = readChar_TSStream(stream);
    lc->n_sep_by_space          = readChar_TSStream(stream);
    lc->p_sign_posn             = readChar_TSStream(stream);
    lc->n_sign_posn             = readChar_TSStream(stream);
    lc->int_p_cs_precedes       = readChar_TSStream(stream);
    lc->int_n_cs_precedes       = readChar_TSStream(stream);
    lc->int_p_sep_by_space      = readChar_TSStream(stream);
    lc->int_n_sep_by_space      = readChar_TSStream(stream);
    lc->int_p_sign_posn         = readChar_TSStream(stream);
    lc->int_n_sign_posn         = readChar_TSStream(stream);
    
    return lc;
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** setlocale_spec **/
mediator setlocale_media for specification
CString* setlocale_spec(CallContext context, IntT category, CString* locale)
{
    call
    {
        CString* res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "setlocale:$(int)$(str)",
            create_IntTObj(category), locale);

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onSetLocale(context, category, locale, setlocale_spec);
    }
}


/** nl_langinfo_spec **/
mediator nl_langinfo_media for specification
CString* nl_langinfo_spec(CallContext context, NlItemT item)
{
    call
    {
        CString* res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "nl_langinfo:$(int)", create_IntTObj(item));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** localeconv_spec **/
mediator localeconv_media for specification
LConv* localeconv_spec(CallContext context)
{
    call
    {
        LConv* res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "localeconv:");
        
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readLConv_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** newlocale_spec **/
mediator newlocale_media for specification
LocaleT newlocale_spec (    CallContext context,
                            IntT category_mask,
                            CString* locale,
                            LocaleT base
                       )
{
    call
    {
        LocaleT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "newlocale:$(int)$(str)$(ptr)",
            create_IntTObj(category_mask),
            locale,
            create_VoidTPtrObj(base));

        executeCommandInContext(context, &command);
        
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        onNewLocale(context, category_mask, locale, base, newlocale_spec);
    }
}


/** freelocale_spec **/
mediator freelocale_media for specification
void freelocale_spec(CallContext context, LocaleT locale)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "freelocale:$(ptr)",
            create_VoidTPtrObj(locale));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }

    state
    {
        onFreeLocale(context, locale);
    }
}


/** duplocale_spec **/
mediator duplocale_media for specification
LocaleT duplocale_spec(CallContext context, LocaleT locale)
{
    call
    {
        LocaleT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "duplocale:$(ptr)",
            create_VoidTPtrObj(locale));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onDupLocale(context, locale, duplocale_spec);
    }
}


/** uselocale_spec **/
mediator uselocale_media for specification
LocaleT uselocale_spec(CallContext context, LocaleT newloc)
{
    call
    {
        LocaleT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "uselocale:$(ptr)",
            create_VoidTPtrObj(newloc));
        
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onUseLocale(context, newloc, uselocale_spec);
    }
}
