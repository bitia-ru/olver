/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef LOCALE_MODEL_SEH
#define LOCALE_MODEL_SEH

#include "common/common_model.seh"
#include "data/errno_model.seh"
#include "data/locale_model.seh"
#include "locale/locale/locale_defs.seh"

typedef enum { ProcessSelector, ThreadSelector, EnvironSelector } LSPlace;

/********************************************************************/
/**                        Specification Types                     **/
/********************************************************************/
specification typedef
struct LocaleSelectorSt
{
    CString* All;
    CString* Collate;
    CString* CType;
    CString* Messages;
    CString* Monetary;
    CString* Numeric;
    CString* Time;
} LocaleSelector;

specification typedef
struct LConvSt
{
    CString* decimal_point;
    CString* thousands_sep;
    CString* grouping;
    CString* int_curr_symbol;
    CString* currency_symbol;
    CString* mon_decimal_point;
    CString* mon_thousands_sep;
    CString* mon_grouping;
    CString* positive_sign;
    CString* negative_sign;

    CharT int_frac_digits;
    CharT frac_digits;
    CharT p_cs_precedes;
    CharT p_sep_by_space;
    CharT n_cs_precedes;
    CharT n_sep_by_space;
    CharT p_sign_posn;
    CharT n_sign_posn;
    CharT int_p_cs_precedes;
    CharT int_n_cs_precedes;
    CharT int_p_sep_by_space;
    CharT int_n_sep_by_space;
    CharT int_p_sign_posn;
    CharT int_n_sign_posn;
} LConv;

specification
typedef struct CTypeGroupSt
{
    Set*/*<IntTObj*>*/ Syms;
    Set*/*<CTypeGroup*>*/ Inherits;
    Set*/*<CTypeGroup*>*/ NotInherits;
} CTypeGroup;

// Locale model summary
specification typedef
struct LocaleInfoSt
{
    // localeconv() model state
    LConv* localeConv;

    // strerror() model state
    Map*/*<CString*, CString*>*/    mapErrorMsg;

    // nl_langinfo() model state
    Map*/*<NLItem, CString*>*/      mapNLLangInfo;

    List*/*<IntT>*/ CTypeToLower;
    List*/*<IntT>*/ CTypeToUpper;
    
    Map*/*<IntT, IntT>*/ toUpper;
    
    Map*/*<CString*, CTypeGroup*>*/ mapGroups;
} LocaleInfo;

LocaleSelector* create_LocaleSelector(CString* BaseLoc);
LConv* create_LConv(void);
LocaleInfo* create_LocaleInfo(void);

CTypeGroup*       create_CTypeGroup(CString* sSyms);
Set*          getFullSet_CTypeGroup(CTypeGroup* tg);
void             include_CTypeGroup(CTypeGroup* dst, CTypeGroup* src);
void             exclude_CTypeGroup(CTypeGroup* dst, CTypeGroup* src);
bool            contains_CTypeGroup(CTypeGroup* grp, IntT c);
bool         containsNot_CTypeGroup(CTypeGroup* grp, IntT c);

bool isInCTypeGroup_Locale(CallContext context, CString* group, IntT c);
bool isNotInCTypeGroup_Locale(CallContext context, CString* group, IntT c);

bool isUpperCase(CallContext context, IntT c);
bool isLowerCase(CallContext context, IntT c);
IntT getUpperCase(CallContext context, IntT c);
IntT getLowerCase(CallContext context, IntT c);

/********************************************************************/
/**                      Locale Model State API                    **/
/********************************************************************/
void init_Locale(CallContext context);
CString* getLocale_Locale(CallContext context, IntT category);

LocaleInfo* createLocale_Locale(CallContext context, CString* locName, LocaleInfo* pBase);
bool nameLocale_Locale(CallContext context, CString* locName, CString* newName);

LocaleInfo* getCurrLocaleInfo_Locale(CallContext context, IntT category);
LocaleInfo* getLocaleInfo_Locale(CallContext context, CString* locName);

Object* get_Locale(CallContext context, CString* locName, IntT locVar);
bool set_Locale(CallContext context, CString* locName, IntT locVar, Object* value);

bool isKnown_Locale(CallContext context, CString* locName);

Bool3 equals_Locale(CallContext context, CString* locName, IntT locVar, Object* value);
Bool3 equalsCurrent_Locale(CallContext context, IntT locVar, Object* value);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*** ::POSIX:: ***/

/** setlocale_spec **/
specification
CString* setlocale_spec(CallContext context, IntT category, CString* locale);

void onSetLocale (  CallContext context,
                    IntT category,
                    CString* locale,
                    CString* res
                 );

/** nl_langinfo_spec **/
specification
CString* nl_langinfo_spec(CallContext context, NlItemT item);

/** localeconv_spec **/
specification
LConv* localeconv_spec(CallContext context);


/*** ::Linux Standard Base:: ***/

/** newlocale_spec **/
specification
LocaleT newlocale_spec (    CallContext context,
                            IntT category_mask,
                            CString* locale,
                            LocaleT base
                       );

void onNewLocale (  CallContext context,
                    IntT category_mask,
                    CString* locale,
                    LocaleT base,
                    LocaleT res
                 );

/** freelocale_spec **/
specification
void freelocale_spec(CallContext context, LocaleT locale);

void onFreeLocale(CallContext context, LocaleT locale);

/** duplocale_spec **/
specification
LocaleT duplocale_spec(CallContext context, LocaleT locale);

void onDupLocale(CallContext context, LocaleT locale, LocaleT res);

/** uselocale_spec **/
specification
LocaleT uselocale_spec(CallContext context, LocaleT newloc);

void onUseLocale(CallContext context, LocaleT newloc, LocaleT res);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isValid_Category(int category);

LSPlace whatIs_LocaleSelector(CallContext context, IntT category);

LocaleSelector* getProcessLocaleSelector(CallContext context);
CString* selectLocale_LocaleSelector (  LocaleSelector* LocaleSelector,
                                        IntT category,
                                        CString* val
                                     );
CString* getLocale_LocaleSelector(LocaleSelector* ls, IntT category);
CString* selectProcessLocale (  CallContext context,
                                IntT category,
                                CString* val
                             );

LocaleT getThreadLocaleSelector(CallContext context);
LocaleT selectThreadLocale(CallContext context, LocaleT locale);

#endif
