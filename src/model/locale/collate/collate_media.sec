/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/collate/collate_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleCollateSubsystem(void)
{
    // Set up mediators
   set_mediator_strcoll_spec(strcoll_media);
   set_mediator_strxfrm_spec(strxfrm_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** strcoll_spec **/
mediator strcoll_media for specification
IntT strcoll_spec(CallContext context, CString* s1, CString* s2, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "strcoll:$(str)$(str)",
                                    s1,
                                    s2
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** strxfrm_spec **/
mediator strxfrm_media for specification
SizeT strxfrm_spec(CallContext context, CString* s1, CString* s2, SizeT n, ErrorCode* errno)
{
    call
    {
        SizeT res;
        CString* res_str;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "strxfrm:$(str)$(size)",
                                    s2,
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res_str = readCString_TSStream(&command.response);
            copy(res_str, s1);
            res = readSize_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}
