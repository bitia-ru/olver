/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/ctrans/ctrans_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleCtransSubsystem(void)
{
    // Set up mediators
    set_mediator___ctype_tolower_loc_spec(__ctype_tolower_loc_media);
    set_mediator___ctype_toupper_loc_spec(__ctype_toupper_loc_media);
    set_mediator__tolower_spec(_tolower_media);
    set_mediator__toupper_spec(_toupper_media);
    set_mediator_tolower_spec(tolower_media);
    set_mediator_toupper_spec(toupper_media);
}

LocChars* readLocChars_TSStream(TSStream* stream)
{
    int i;
    IntT sz;
    LocChars* res;

    verifyType_TSStream(stream, "locchars");
    sz = readInt_TSStream(stream);
    res = create_LocChars();
    for (i=0; i<sz; ++i)
        add_List(res, i, create_IntTObj(readInt_TSStream(stream)));
    return res;
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __ctype_tolower_loc_spec **/
mediator __ctype_tolower_loc_media for specification
LocChars* __ctype_tolower_loc_spec(CallContext context)
{
    call
    {
        LocChars* res = create_LocChars();
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "__ctype_tolower_loc");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readLocChars_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        onCTypeToLowerLoc(context, __ctype_tolower_loc_spec);
    }
}


/** __ctype_toupper_loc_spec **/
mediator __ctype_toupper_loc_media for specification
LocChars* __ctype_toupper_loc_spec(CallContext context)
{
    call
    {
        LocChars* res = create_LocChars();
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "__ctype_toupper_loc");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readLocChars_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        onCTypeToUpperLoc(context, __ctype_toupper_loc_spec);
    }
}


/** _tolower_spec **/
mediator _tolower_media for specification
IntT _tolower_spec(CallContext context, IntT c)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "_tolower:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** _toupper_spec **/
mediator _toupper_media for specification
IntT _toupper_spec(CallContext context, IntT c)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "_toupper:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** tolower_spec **/
mediator tolower_media for specification
IntT tolower_spec(CallContext context, IntT c)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "tolower:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** toupper_spec **/
mediator toupper_media for specification
IntT toupper_spec(CallContext context, IntT c)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "toupper:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}
