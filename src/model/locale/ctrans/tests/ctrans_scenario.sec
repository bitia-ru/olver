/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/common_scenario.seh"
#include "locale/ctrans/tests/ctrans_scenario.seh"
#include "locale/locale/locale_model.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_ctrans_simple_scenario()
{
}

bool init_ctrans_simple_scenario(int argc, char** argv)
{
    context = getContext();

    return true;
}

void finish_ctrans_simple_scenario(void)
{
    cleanup_ctrans_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(locale_ctrans_simple_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ctrans_simple_scen()
{
    IntT res, _res;

    res = toupper_spec(context, 'a');
    toupper_spec(context, 'A');
    toupper_spec(context, '.');
    _res = _toupper_spec(context, 'a');

    /*
     * The _toupper() macro shall be equivalent to toupper()
     */
    REQ("_toupper.01", "_toupper() shall be equivalent to toupper()", _res == res);

    res = tolower_spec(context, 'A');
    tolower_spec(context, 'a');
    tolower_spec(context, '.');
    _res = _tolower_spec(context, 'A');

    /*
     * The _tolower() macro shall be equivalent to tolower(c)
     */
    REQ("_tolower.01", "_tolower() shall be equivalent to tolower()", _res == res);

    // loading arrays to the model state...
    __ctype_toupper_loc_spec(context);
    __ctype_tolower_loc_spec(context);

    // comparing arrays with the model state...
    __ctype_toupper_loc_spec(context);
    __ctype_tolower_loc_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm locale_ctrans_simple_scenario =
{
    .init = init_ctrans_simple_scenario,
    .finish = finish_ctrans_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            ctrans_simple_scen,
            NULL
    }
};
