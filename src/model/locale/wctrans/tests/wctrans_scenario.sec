/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/common_scenario.seh"
#include "locale/wctrans/tests/wctrans_scenario.seh"
#include "config/interpretation.seh"
#include "locale/wctrans/wctrans_config.h"
#include "locale/locale/locale_model.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_wctrans_simple_scenario()
{
}

bool init_wctrans_simple_scenario(int argc, char** argv)
{
    context = getContext();

    return true;
}

void finish_wctrans_simple_scenario(void)
{
    cleanup_wctrans_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(locale_wctrans_simple_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool wctrans_simple_scen()
{
    WCTransT desc;
    WIntT res1, res2;

    /*
     * The function shall return a value of type wctrans_t, which can be used as the
     * second argument to subsequent calls of towctrans().
     */
    IMPLEMENT_REQ("app.wctrans.03");

    /*
     * otherwise, it shall return a non-zero object of type wctrans_t that can be used
     * in calls to towctrans().
     */
    IMPLEMENT_REQ("wctrans.06.02");

    desc = wctrans_spec(context, create_CString("toupper"), errno_model);

    res1 = towupper_spec(context, 'a');
    res2 = towctrans_spec(context, 'a', desc, errno_model);
    REQ("", "towupper and towctrans(toupper) should be the same", res1 == res2);

    res1 = towupper_spec(context, 'A');
    res2 = towctrans_spec(context, 'A', desc, errno_model);
    REQ("", "towupper and towctrans(toupper) should be the same", res1 == res2);

    res1 = towupper_spec(context, '.');
    res2 = towctrans_spec(context, '.', desc, errno_model);
    REQ("", "towupper and towctrans(toupper) should be the same", res1 == res2);


    desc = wctrans_spec(context, create_CString("tolower"), errno_model);

    res1 = towlower_spec(context, 'a');
    res2 = towctrans_spec(context, 'a', desc, errno_model);
    REQ("", "towlower and towctrans(tolower) should be the same", res1 == res2);

    res1 = towlower_spec(context, 'A');
    res2 = towctrans_spec(context, 'A', desc, errno_model);
    REQ("", "towlower and towctrans(tolower) should be the same", res1 == res2);

    res1 = towlower_spec(context, '.');
    res2 = towctrans_spec(context, '.', desc, errno_model);
    REQ("", "towlower and towctrans(tolower) should be the same", res1 == res2);

    if(POSIX_WCTRANS_FAILS_WITH_EINVAL)
    {
        desc = wctrans_spec(context, create_CString("Eto_tipa_primer_nesuschestvuyuschego_imeni"), errno_model);
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm locale_wctrans_simple_scenario =
{
    .init = init_wctrans_simple_scenario,
    .finish = finish_wctrans_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            wctrans_simple_scen,
            NULL
    }
};
