/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "config/interpretation.seh"
#include "locale/wctrans/wctrans_config.h"
#include "locale/wctrans/wctrans_model.seh"
#include "locale/locale/locale_model.seh"

#pragma SEC subsystem wctrans "locale.wctrans"


/*
   The group of functions 'locale.wctrans' consists of:
       towctrans [2]
       towlower [2]
       towupper [2]
       wctrans [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    towctrans - wide-character transliteration

SYNOPSIS

    #include <wctype.h>

    wint_t towctrans(wint_t wc, wctrans_t desc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The towctrans() function shall transliterate the wide-character code wc using
    the mapping described by desc. The current setting of the LC_CTYPE
    category should be the same as during the call to wctrans() that returned the
    value desc. If the value of desc is invalid (that is, not obtained by a
    call to wctrans() or desc is invalidated by a subsequent call to setlocale()
    that has affected category LC_CTYPE ), the result is unspecified.

    An application wishing to check for error situations should set errno to 0
    before calling towctrans(). If errno is non-zero on return, an error has
    occurred.

RETURN VALUE

    If successful, the towctrans() function shall return the mapped value of wc
    using the mapping described by desc. Otherwise, it shall return wc
    unchanged.

ERRORS

    The towctrans() function may fail if:

    [EINVAL]

        desc contains an invalid transliteration descriptor.

*/

specification
WIntT towctrans_spec(CallContext context, WIntT wc, WCTransT desc, ErrorCode* errno)
{
    pre
    {
        if(!POSIX_TOWCTRANS_FAILS_WITH_EINVAL)
        {
            /*
             * The current setting of the LC_CTYPE category should be the same as during the
             * call to wctrans() that returned the value desc. If the value of desc is
             * invalid (that is, not obtained by a call to wctrans() or desc is invalidated
             * by a subsequent call to setlocale() that has affected category LC_CTYPE ), the
             * result is unspecified.
             */
            REQ("app.towctrans.02", "", TODO_REQ());
        }

        /*
         * An application wishing to check for error situations should set errno to 0
         * before calling towctrans(). If errno is non-zero on return, an error has
         * occurred.
         */
        /* [This is performed in the agent.] */
        IMPLEMENT_REQ("app.towctrans.03");

        return true;
    }
    post
    {
        ERROR_BEGIN(POSIX_TOWCTRANS, "towctrans.04", *errno != 0, *errno)
            /*
             * The towctrans() function may fail if:
             *
             * [EINVAL]
             *
             * desc contains an invalid transliteration descriptor.
             */
            ERROR_MAY(POSIX_TOWCTRANS, EINVAL, "towctrans.04.01", TODO_ERR(EINVAL))

        ERROR_END()

        /*
         * The towctrans() function shall transliterate the wide-character code wc using
         * the mapping described by desc.
         *
         * If successful, the towctrans() function shall return the mapped value of wc
         * using the mapping described by desc.
         */
        REQ("towctrans.01.01", "", TODO_REQ());

        /*
         * The towctrans() function shall transliterate the wide-character code wc using
         * the mapping described by desc.
         *
         * Otherwise, it shall return wc unchanged.
         */
        REQ("towctrans.01.02", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    towlower - transliterate uppercase wide-character code to lowercase

SYNOPSIS

    #include <wctype.h>

    wint_t towlower(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The towlower() function has as a domain a type wint_t, the value of which the
    application shall ensure is a character representable as a wchar_t, and a wide-
    character code corresponding to a valid character in the current locale or the
    value of WEOF. If the argument has any other value, the behavior is undefined.
    If the argument of towlower() represents an uppercase wide-character code, and
    there exists a corresponding lowercase wide-character code (as defined by
    character type information in the program locale category LC_CTYPE ), the
    result shall be the corresponding lowercase wide-character code. All other
    arguments in the domain are returned unchanged.

RETURN VALUE

    Upon successful completion, towlower() shall return the lowercase letter
    corresponding to the argument passed; otherwise, it shall return the argument
    unchanged.

ERRORS

    No errors are defined.

*/

specification
WIntT towlower_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The towlower() function has as a domain a type wint_t, the value of which the
         * application shall ensure is a character representable as a wchar_t, and a wide-
         * character code corresponding to a valid character in the current locale or the
         * value of WEOF. If the argument has any other value, the behavior is undefined.
         */
        REQ("app.towlower.01", "wc should be a valid wide character", isValidWChar(wc));

        return true;
    }
    post
    {
        if(isUpperCase(context, wc))
        {
        /*
         * If the argument of towlower() represents an uppercase wide-character code, and
         * there exists a corresponding lowercase wide-character code (as defined by
         * character type information in the program locale category LC_CTYPE ), the
         * result shall be the corresponding lowercase wide-character code.
         *
         * Upon successful completion, towlower() shall return the lowercase letter
         * corresponding to the argument passed;
         */
        REQ("towlower.02.01", "should return the lowercase letter from wc",
                towlower_spec == getLowerCase(context, wc));
        }
        else
        {
        /*
         * All other arguments in the domain are returned unchanged.
         *
         * otherwise, it shall return the argument unchanged.
         */
        REQ("towlower.03.01", "wc should remain unchanged", towlower_spec == wc);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    towupper - transliterate lowercase wide-character code to uppercase

SYNOPSIS

    #include <wctype.h>

    wint_t towupper(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The towupper() function has as a domain a type wint_t, the value of which the
    application shall ensure is a character representable as a wchar_t, and a wide-
    character code corresponding to a valid character in the current locale or the
    value of WEOF. If the argument has any other value, the behavior is undefined.
    If the argument of towupper() represents a lowercase wide-character code, and
    there exists a corresponding uppercase wide-character code (as defined by
    character type information in the program locale category LC_CTYPE ), the
    result shall be the corresponding uppercase wide-character code. All other
    arguments in the domain are returned unchanged.

RETURN VALUE

    Upon successful completion, towupper() shall return the uppercase letter
    corresponding to the argument passed. Otherwise, it shall return the argument
    unchanged.

ERRORS

    No errors are defined.

*/

specification
WIntT towupper_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The towupper() function has as a domain a type wint_t, the value of which the
         * application shall ensure is a character representable as a wchar_t, and a wide-
         * character code corresponding to a valid character in the current locale or the
         * value of WEOF. If the argument has any other value, the behavior is undefined.
         */
        REQ("app.towupper.01", "wc should be a valid wide character", isValidWChar(wc));

        return true;
    }
    post
    {
        if(isLowerCase(context, wc))
        {
        /*
         * If the argument of towupper() represents a lowercase wide-character code, and
         * there exists a corresponding uppercase wide-character code (as defined by
         * character type information in the program locale category LC_CTYPE ), the
         * result shall be the corresponding uppercase wide-character code.
         *
         * Upon successful completion, towupper() shall return the uppercase letter
         * corresponding to the argument passed.
         */
        REQ("towupper.02.01", "should return the uppercase letter from wc",
                towupper_spec == getUpperCase(context, wc));
        }
        else
        {
        /*
         * All other arguments in the domain are returned unchanged.
         *
         * Otherwise, it shall return the argument unchanged.
         */
        REQ("towupper.03.01", "wc should remain unchanged", towupper_spec == wc);
        }
        
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wctrans - define character mapping

SYNOPSIS

    #include <wctype.h>

    wctrans_t wctrans(const char *charclass);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The wctrans() function is defined for valid character mapping names identified
    in the current locale. The charclass is a string identifying a generic
    character mapping name for which codeset-specific information is required. The
    following character mapping names are defined in all locales: tolower and
    toupper.

    The function shall return a value of type wctrans_t, which can be used as the
    second argument to subsequent calls of towctrans(). The wctrans() function
    shall determine values of wctrans_t according to the rules of the coded
    character set defined by character mapping information in the program's locale (
    category LC_CTYPE ). The values returned by wctrans() shall be valid until
    a call to setlocale() that modifies the category LC_CTYPE .

RETURN VALUE

    The wctrans() function shall return 0 and may set errno to indicate the
    error  if the given character mapping name is not valid for the current
    locale (category LC_CTYPE ); otherwise, it shall return a non-zero object of
    type wctrans_t that can be used in calls to towctrans().

ERRORS

    The wctrans() function may fail if:

    [EINVAL]

        The character mapping name pointed to by charclass is not valid in the
        current locale.

*/

specification
WCTransT wctrans_spec(CallContext context, CString* charclass, ErrorCode* errno)
{
    pre
    {
        if(!POSIX_WCTRANS_FAILS_WITH_EINVAL)
        {
            /*
             * The wctrans() function is defined for valid character mapping names identified
             * in the current locale. The charclass is a string identifying a generic
             * character mapping name for which codeset-specific information is required. The
             * following character mapping names are defined in all locales: tolower and
             * toupper.
             */
            REQ("app.wctrans.01", "charclass should be a valid character mapping name",
                isValidCharMappingName(charclass)
               );
        }

        return true;
    }
    post
    {
        ERROR_BEGIN(POSIX_WCTRANS, "wctrans.07", isNULL_VoidTPtr(wctrans_spec), *errno)
            /*
             * The wctrans() function may fail if:
             *
             * [EINVAL]
             *
             * The character mapping name pointed to by charclass is not valid in the
             * current locale.
             */
            ERROR_MAY(POSIX_WCTRANS, EINVAL, "wctrans.07.01", !isValidCharMappingName(charclass))

        ERROR_END()

        /*
         * The wctrans() function shall determine values of wctrans_t according to the
         * rules of the coded character set defined by character mapping information in
         * the program's locale (category LC_CTYPE ).
         */
        REQ("wctrans.04", "", TODO_REQ());

        /*
         * The values returned by wctrans() shall be valid until a call to setlocale()
         * that modifies the category LC_CTYPE .
         */
        REQ("wctrans.05", "", TODO_REQ());

        /*
         * The wctrans() function shall return 0 and may set errno to indicate the
         * error  if the given character mapping name is not valid for the current
         * locale (category LC_CTYPE );
         */
        REQ("wctrans.06.01", "", TODO_REQ());

        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isValidWChar(WIntT wc)
{
    return true;
}

bool isValidCharMappingName(CString* charclass)
{
    return equals(charclass, create_CString("toupper")) || equals(charclass, create_CString("tolower"));
}
