/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/wctrans/wctrans_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleWctransSubsystem(void)
{
    // Set up mediators
    set_mediator_towctrans_spec(towctrans_media);
    set_mediator_towlower_spec(towlower_media);
    set_mediator_towupper_spec(towupper_media);
    set_mediator_wctrans_spec(wctrans_media);
}

WIntT readWInt_TSStream(TSStream* stream)
{
    return readUInt_TSStream(stream);
}

WCTransT readWCTrans_TSStream(ThreadId threadid, TSStream* stream)
{
    return readPointer_TSStream(threadid, stream);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** towctrans_spec **/
mediator towctrans_media for specification
WIntT towctrans_spec(CallContext context, WIntT wc, WCTransT desc, ErrorCode* errno)
{
    call
    {
        WIntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "towctrans:$(wint)$(ptr)",
                                    create_WIntTObj(wc),
                                    create_VoidTPtrObj(desc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readWInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** towlower_spec **/
mediator towlower_media for specification
WIntT towlower_spec(CallContext context, WIntT wc)
{
    call
    {
        WIntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "towlower:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readWInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** towupper_spec **/
mediator towupper_media for specification
WIntT towupper_spec(CallContext context, WIntT wc)
{
    call
    {
        WIntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "towupper:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readWInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** wctrans_spec **/
mediator wctrans_media for specification
WCTransT wctrans_spec(CallContext context, CString* charclass, ErrorCode* errno)
{
    call
    {
        WCTransT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "wctrans:$(str)",
                                    charclass
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readWCTrans_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}
