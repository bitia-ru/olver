/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "locale/wctype/wctype_media.seh"
#include "common/common_media.seh"


WCTypeT readWCType_TSStream(TSStream* stream)
{
    return readULong_TSStream(stream);
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleWctypeSubsystem(void)
{
    // Set up mediators
    set_mediator_iswalnum_spec(iswalnum_media);
    set_mediator_iswalpha_spec(iswalpha_media);
    set_mediator_iswblank_spec(iswblank_media);
    set_mediator_iswcntrl_spec(iswcntrl_media);
    set_mediator_iswctype_spec(iswctype_media);
    set_mediator_iswdigit_spec(iswdigit_media);
    set_mediator_iswgraph_spec(iswgraph_media);
    set_mediator_iswlower_spec(iswlower_media);
    set_mediator_iswprint_spec(iswprint_media);
    set_mediator_iswpunct_spec(iswpunct_media);
    set_mediator_iswspace_spec(iswspace_media);
    set_mediator_iswupper_spec(iswupper_media);
    set_mediator_iswxdigit_spec(iswxdigit_media);
    set_mediator_wctype_spec(wctype_media);
    set_mediator_wcwidth_spec(wcwidth_media);
    set_mediator_wcswidth_spec(wcswidth_media);
    
    registerTSFormatter("wctype", (TSFormatterFuncType)wctype_formatter);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** iswalnum_spec **/
mediator iswalnum_media for specification
IntT iswalnum_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswalnum:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswalpha_spec **/
mediator iswalpha_media for specification
IntT iswalpha_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswalpha:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswblank_spec **/
mediator iswblank_media for specification
IntT iswblank_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswblank:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswcntrl_spec **/
mediator iswcntrl_media for specification
IntT iswcntrl_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswcntrl:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswctype_spec **/
mediator iswctype_media for specification
IntT iswctype_spec(CallContext context, WIntT wc, WCTypeT charclass)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswctype:$(wint)$(wctype)",
                                    create_WIntTObj(wc),
                                    create_WCTypeTObj(charclass)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswdigit_spec **/
mediator iswdigit_media for specification
IntT iswdigit_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswdigit:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswgraph_spec **/
mediator iswgraph_media for specification
IntT iswgraph_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswgraph:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswlower_spec **/
mediator iswlower_media for specification
IntT iswlower_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswlower:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswprint_spec **/
mediator iswprint_media for specification
IntT iswprint_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswprint:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswpunct_spec **/
mediator iswpunct_media for specification
IntT iswpunct_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswpunct:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswspace_spec **/
mediator iswspace_media for specification
IntT iswspace_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswspace:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswupper_spec **/
mediator iswupper_media for specification
IntT iswupper_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswupper:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** iswxdigit_spec **/
mediator iswxdigit_media for specification
IntT iswxdigit_spec(CallContext context, WIntT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "iswxdigit:$(wint)",
                                    create_WIntTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wctype_spec **/
mediator wctype_media for specification
WCTypeT wctype_spec(CallContext context, CString* property)
{
    call
    {
        WCTypeT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "wctype:$(str)",
                                    property
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readWCType_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcwidth_spec **/
mediator wcwidth_media for specification
IntT wcwidth_spec(CallContext context, WCharT wc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "wcwidth:$(wchar)",
                                    create_WCharTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcswidth_spec **/
mediator wcswidth_media for specification
IntT wcswidth_spec(CallContext context, WCharArray* pwcs, SizeT n)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "wcswidth:$(wchararray)$(size)",
                                    pwcs,
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}
