/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_scenario.seh"
#include "locale/wctype/tests/wctype_scenario.seh"
#include "locale/locale/locale_model.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_wctype_simple_scenario()
{
}

bool init_wctype_simple_scenario(int argc, char** argv)
{
    bool result = true;
    context = getContext();
    
    init_Locale(context);
    
    return result;
}

void finish_wctype_simple_scenario(void)
{
    cleanup_wctype_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(wctype_simple_scenario);
}

WCharArray* create_WCharArray_From_String(CString* src_str)
{
    int i;
    int len = length_CString(src_str) + 1;
    CharT* tmp = toCharArray_CString(src_str);
    WCharT* temp_buf = malloc(len * sizeof(WCharT));
    WCharArray* res;
    for (i=0; i<len; ++i)
    {
        temp_buf[i] = (WCharT)(tmp[i]);
    }
    res = create_WCharArray(temp_buf, len);
    free(temp_buf);
    return res;
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool wctype_simple_scen() 
{
    WCTypeT charclass;
    IntT res;
    WCharArray* tmp_wide_str = NULL;

    res = iswalnum_spec(context, 'A');
    verbose("res=%d\n", res);
    res = iswalnum_spec(context, '.');
    verbose("res=%d\n", res);

    res = iswalpha_spec(context, 'A');
    verbose("res=%d\n", res);
    res = iswalpha_spec(context, '0');
    verbose("res=%d\n", res);

    res = iswblank_spec(context, '\t');
    verbose("res=%d\n", res);
    res = iswblank_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswcntrl_spec(context, '\x07');
    verbose("res=%d\n", res);
    res = iswcntrl_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswdigit_spec(context, '1');
    verbose("res=%d\n", res);
    res = iswdigit_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswgraph_spec(context, 'A');
    verbose("res=%d\n", res);
    res = iswgraph_spec(context, '\t');
    verbose("res=%d\n", res);

    res = iswlower_spec(context, 'a');
    verbose("res=%d\n", res);
    res = iswlower_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswprint_spec(context, 'A');
    verbose("res=%d\n", res);
    res = iswprint_spec(context, '\v');
    verbose("res=%d\n", res);

    res = iswpunct_spec(context, '.');
    verbose("res=%d\n", res);
    res = iswpunct_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswspace_spec(context, ' ');
    verbose("res=%d\n", res);
    res = iswspace_spec(context, 'A');
    verbose("res=%d\n", res);

    res = iswupper_spec(context, 'A');
    verbose("res=%d\n", res);
    res = iswupper_spec(context, 'z');
    verbose("res=%d\n", res);

    res = iswxdigit_spec(context, 'B');
    verbose("res=%d\n", res);
    res = iswxdigit_spec(context, 'G');
    verbose("res=%d\n", res);

    charclass = wctype_spec(context, create_CString("alnum"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("alpha"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("blank"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("cntrl"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("digit"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("graph"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("lower"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("print"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("punct"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("space"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("upper"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);
    charclass = wctype_spec(context, create_CString("xdigit"));
    res = iswctype_spec(context, 'A', charclass);
    verbose("res=%d\n", res);

    res = wcwidth_spec(context, 'A');
    verbose("res=%d\n", res);
    res = wcwidth_spec(context, '\0');
    verbose("res=%d\n", res);
    res = wcwidth_spec(context, '\x07');
    verbose("res=%d\n", res);

    tmp_wide_str = create_WCharArray_From_String(create_CString("123456"));
    res = wcswidth_spec(context, tmp_wide_str, 3);
    verbose("res=%d\n", res);
    res = wcswidth_spec(context, tmp_wide_str, 10);
    verbose("res=%d\n", res);

    tmp_wide_str = create_WCharArray_From_String(create_CString(""));
    res = wcswidth_spec(context, tmp_wide_str, 3);
    verbose("res=%d\n", res);

    tmp_wide_str = create_WCharArray_From_String(create_CString("123\x07XYZ"));
    res = wcswidth_spec(context, tmp_wide_str, 2);
    verbose("res=%d\n", res);
    res = wcswidth_spec(context, tmp_wide_str, 10);
    verbose("res=%d\n", res);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm wctype_simple_scenario =
{
    .init = init_wctype_simple_scenario,
    .finish = finish_wctype_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            wctype_simple_scen,
            NULL
    }
};
