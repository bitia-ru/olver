/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "locale/wctype/wctype_model.seh"
#include "locale/locale/locale_model.seh"


#pragma SEC subsystem wctype "locale.wctype"


/*
   The group of functions 'locale.wctype' consists of:
       iswalnum [2]
       iswalpha [2]
       iswblank [2]
       iswcntrl [2]
       iswctype [2]
       iswdigit [2]
       iswgraph [2]
       iswlower [2]
       iswprint [2]
       iswpunct [2]
       iswspace [2]
       iswupper [2]
       iswxdigit [2]
       wctype [2]
       wcwidth [2]
       wcswidth [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswalnum - test for an alphanumeric wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswalnum(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswalnum() function shall test whether wc is a wide-character code
    representing a character of class alpha or digit in the program's current
    locale; see the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7,
    Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswalnum() function shall return non-zero if wc is an alphanumeric wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswalnum_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswalnum.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("alnum"), wc))
        {
        /*
         * The iswalnum() function shall test whether wc is a wide-character code
         * representing a character of class alpha or digit in the program's current
         * locale
         *
         * The iswalnum() function shall return non-zero if wc is an alphanumeric wide-
         * character code
         */
        REQ("iswalnum.01.01", "shall return non-zero", iswalnum_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("alnum"), wc))
        {
        /*
         * The iswalnum() function shall test whether wc is a wide-character code
         * representing a character of class alpha or digit in the program's current
         * locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswalnum.01.02", "shall return 0", iswalnum_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswalpha - test for an alphabetic wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswalpha(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswalpha() function shall test whether wc is a wide-character code
    representing a character of class alpha in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswalpha() function shall return non-zero if wc is an alphabetic wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswalpha_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswalpha.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("alpha"), wc))
        {
        /*
         * The iswalpha() function shall test whether wc is a wide-character code
         * representing a character of class alpha in the program's current locale
         *
         * The iswalpha() function shall return non-zero if wc is an alphabetic wide-
         * character code
         */
        REQ("iswalpha.01.01", "shall return non-zero", iswalpha_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("alpha"), wc))
        {
        /*
         * The iswalpha() function shall test whether wc is a wide-character code
         * representing a character of class alpha in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswalpha.01.02", "shall return 0", iswalpha_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswblank - test for a blank wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswblank(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswblank() function shall test whether wc is a wide-character code
    representing a character of class blank in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswblank() function shall return non-zero if wc is a blank wide-character
    code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswblank_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswblank.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("blank"), wc))
        {
        /*
         * The iswblank() function shall test whether wc is a wide-character code
         * representing a character of class blank in the program's current locale
         *
         * The iswblank() function shall return non-zero if wc is a blank wide-character
         * code
         */
        REQ("iswblank.01.01", "shall return non-zero", iswblank_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("blank"), wc))
        {
        /*
         * The iswblank() function shall test whether wc is a wide-character code
         * representing a character of class blank in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswblank.01.02", "shall return 0", iswblank_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswcntrl - test for a control wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswcntrl(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswcntrl() function shall test whether wc is a wide-character code
    representing a character of class cntrl in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswcntrl() function shall return non-zero if wc is a control wide-character
    code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswcntrl_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswcntrl.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("cntrl"), wc))
        {
        /*
         * The iswcntrl() function shall test whether wc is a wide-character code
         * representing a character of class cntrl in the program's current locale
         *
         * The iswcntrl() function shall return non-zero if wc is a control wide-character
         * code
         */
        REQ("iswcntrl.01.01", "shall return non-zero", iswcntrl_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("cntrl"), wc))
        {
        /*
         * The iswcntrl() function shall test whether wc is a wide-character code
         * representing a character of class cntrl in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswcntrl.01.02", "shall return 0", iswcntrl_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswctype - test character for a specified class

SYNOPSIS

    #include <wctype.h>

    int iswctype(wint_t wc, wctype_t charclass);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswctype() function shall determine whether the wide-character code wc has
    the character class charclass, returning true or false. The iswctype()
    function is defined on WEOF and wide-character codes corresponding to the
    valid character encodings in the current locale. If the wc argument is not in
    the domain of the function, the result is undefined. If the value of
    charclass is invalid (that is, not obtained by a call to wctype() or charclass
    is invalidated by a subsequent call to setlocale() that has affected category
    LC_CTYPE ) the result is unspecified.

RETURN VALUE

    The iswctype() function shall return non-zero (true) if and only if wc has the
    property described by charclass. If charclass is 0, iswctype() shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswctype_spec(CallContext context, WIntT wc, WCTypeT charclass)
{
    pre
    {
        /*
         * The iswctype() function is defined on WEOF and wide-character codes
         * corresponding to the valid character encodings in the current locale. If the
         * wc argument is not in the domain of the function, the result is undefined.
         */
        REQ("app.iswctype.02", "", TODO_REQ());

        /*
         * If the value of charclass is invalid (that is, not obtained by a call to wctype()
         * or charclass is invalidated by a subsequent call to setlocale() that has
         * affected category LC_CTYPE ) the result is unspecified.
         */
        REQ("app.iswctype.03", "", TODO_REQ());

        return true;
    }
    post
    {
        /*
         * The iswctype() function shall determine whether the wide-character code wc has
         * the character class charclass, returning true or false.
         *
         * The iswctype() function shall return non-zero (true) if and only if wc has the
         * property described by charclass.
         */
        REQ("iswctype.01.01", "", TODO_REQ());

        /*
         * The iswctype() function shall determine whether the wide-character code wc has
         * the character class charclass, returning true or false.
         *
         * If charclass is 0, iswctype() shall return 0.
         */
        REQ("iswctype.01.02", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswdigit - test for a decimal digit wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswdigit(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswdigit() function shall test whether wc is a wide-character code
    representing a character of class digit in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswdigit() function shall return non-zero if wc is a decimal digit wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswdigit_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswdigit.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("digit"), wc))
        {
        /*
         * The iswdigit() function shall test whether wc is a wide-character code
         * representing a character of class digit in the program's current locale
         *
         * The iswdigit() function shall return non-zero if wc is a decimal digit wide-
         * character code
         */
        REQ("iswdigit.01.01", "shall return non-zero", iswdigit_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("digit"), wc))
        {
        /*
         * The iswdigit() function shall test whether wc is a wide-character code
         * representing a character of class digit in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswdigit.01.02", "shall return 0", iswdigit_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswgraph - test for a visible wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswgraph(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswgraph() function shall test whether wc is a wide-character code
    representing a character of class graph in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswgraph() function shall return non-zero if wc is a wide-character code
    with a visible representation; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswgraph_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswgraph.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("graph"), wc))
        {
        /*
         * The iswgraph() function shall test whether wc is a wide-character code
         * representing a character of class graph in the program's current locale
         *
         * The iswgraph() function shall return non-zero if wc is a wide-character code
         * with a visible representation
         */
        REQ("iswgraph.01.01", "shall return non-zero", iswgraph_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("graph"), wc))
        {
        /*
         * The iswgraph() function shall test whether wc is a wide-character code
         * representing a character of class graph in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswgraph.01.02", "shall return 0", iswgraph_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswlower - test for a lowercase letter wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswlower(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswlower() function shall test whether wc is a wide-character code
    representing a character of class lower in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswlower() function shall return non-zero if wc is a lowercase letter wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswlower_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswlower.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("lower"), wc))
        {
        /*
         * The iswlower() function shall test whether wc is a wide-character code
         * representing a character of class lower in the program's current locale
         *
         * The iswlower() function shall return non-zero if wc is a lowercase letter wide-
         * character code
         */
        REQ("iswlower.01.01", "shall return non-zero", iswlower_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("lower"), wc))
        {
        /*
         * The iswlower() function shall test whether wc is a wide-character code
         * representing a character of class lower in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswlower.01.02", "shall return 0", iswlower_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswprint - test for a printable wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswprint(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswprint() function shall test whether wc is a wide-character code
    representing a character of class print in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswprint() function shall return non-zero if wc is a printable wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswprint_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswprint.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("print"), wc))
        {
        /*
         * The iswprint() function shall test whether wc is a wide-character code
         * representing a character of class print in the program's current locale
         *
         * The iswprint() function shall return non-zero if wc is a printable wide-
         * character code
         */
        REQ("iswprint.01.01", "shall return non-zero", iswprint_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("print"), wc))
        {
        /*
         * The iswprint() function shall test whether wc is a wide-character code
         * representing a character of class print in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswprint.01.02", "shall return 0", iswprint_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswpunct - test for a punctuation wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswpunct(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswpunct() function shall test whether wc is a wide-character code
    representing a character of class punct in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswpunct() function shall return non-zero if wc is a punctuation wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswpunct_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswpunct.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("punct"), wc))
        {
        /*
         * The iswpunct() function shall test whether wc is a wide-character code
         * representing a character of class punct in the program's current locale
         *
         * The iswpunct() function shall return non-zero if wc is a punctuation wide-
         * character code
         */
        REQ("iswpunct.01.01", "shall return non-zero", iswpunct_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("punct"), wc))
        {
        /*
         * The iswpunct() function shall test whether wc is a wide-character code
         * representing a character of class punct in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswpunct.01.02", "shall return 0", iswpunct_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswspace - test for a white-space wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswspace(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswspace() function shall test whether wc is a wide-character code
    representing a character of class space in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswspace() function shall return non-zero if wc is a white-space wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswspace_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswspace.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("space"), wc))
        {
        /*
         * The iswspace() function shall test whether wc is a wide-character code
         * representing a character of class space in the program's current locale
         *
         * The iswspace() function shall return non-zero if wc is a white-space wide-
         * character code
         */
        REQ("iswspace.01.01", "shall return non-zero", iswspace_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("space"), wc))
        {
        /*
         * The iswspace() function shall test whether wc is a wide-character code
         * representing a character of class space in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswspace.01.02", "shall return 0", iswspace_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswupper - test for an uppercase letter wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswupper(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswupper() function shall test whether wc is a wide-character code
    representing a character of class upper in the program's current locale; see
    the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswupper() function shall return non-zero if wc is an uppercase letter wide-
    character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswupper_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswupper.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("upper"), wc))
        {
        /*
         * The iswupper() function shall test whether wc is a wide-character code
         * representing a character of class upper in the program's current locale
         *
         * The iswupper() function shall return non-zero if wc is an uppercase letter wide-
         * character code
         */
        REQ("iswupper.01.01", "shall return non-zero", iswupper_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("upper"), wc))
        {
        /*
         * The iswupper() function shall test whether wc is a wide-character code
         * representing a character of class upper in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswupper.01.02", "shall return 0", iswupper_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    iswxdigit - test for a hexadecimal digit wide-character code

SYNOPSIS

    #include <wctype.h>

    int iswxdigit(wint_t wc);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The iswxdigit() function shall test whether wc is a wide-character code
    representing a character of class xdigit in the program's current locale;
    see the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 7, Locale.

    The wc argument is a wint_t, the value of which the application shall ensure is
    a wide-character code corresponding to a valid character in the current locale,
    or equal to the value of the macro WEOF. If the argument has any other value,
    the behavior is undefined.

RETURN VALUE

    The iswxdigit() function shall return non-zero if wc is a hexadecimal digit
    wide-character code; otherwise, it shall return 0.

ERRORS

    No errors are defined.

*/

specification
IntT iswxdigit_spec(CallContext context, WIntT wc)
{
    pre
    {
        /*
         * The wc argument is a wint_t, the value of which the application shall ensure is
         * a wide-character code corresponding to a valid character in the current locale,
         * or equal to the value of the macro WEOF. If the argument has any other value,
         * the behavior is undefined.
         */
        REQ("app.iswxdigit.02", "", TODO_REQ());

        return true;
    }
    post
    {
        if(isInCTypeGroup_Locale(context, _CS("xdigit"), wc))
        {
        /*
         * The iswxdigit() function shall test whether wc is a wide-character code
         * representing a character of class xdigit in the program's current locale
         *
         * The iswxdigit() function shall return non-zero if wc is a hexadecimal digit
         * wide-character code
         */
        REQ("iswxdigit.01.01", "shall return non-zero", iswxdigit_spec > 0);
        }
        else if(isNotInCTypeGroup_Locale(context, _CS("xdigit"), wc))
        {
        /*
         * The iswxdigit() function shall test whether wc is a wide-character code
         * representing a character of class xdigit in the program's current locale
         *
         * otherwise, it shall return 0.
         */
        REQ("iswxdigit.01.02", "shall return 0", iswxdigit_spec == 0);
        }

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wctype - define character class

SYNOPSIS

    #include <wctype.h>

    wctype_t wctype(const char *property);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The wctype() function is defined for valid character class names as defined in
    the current locale. The property argument is a string identifying a generic
    character class for which codeset-specific type information is required.

    The following character class names shall be defined in all locales:

        alnum alpha blank cntrl
        digit graph lower print
        punct space upper xdigit

    Additional character class names defined in the locale definition file (
    category LC_CTYPE ) can also be specified.

    The function shall return a value of type wctype_t, which can be used as the
    second argument to subsequent calls of iswctype(). The wctype() function shall
    determine values of wctype_t according to the rules of the coded character set
    defined by character type information in the program's locale (category
    LC_CTYPE ). The values returned by wctype() shall be valid until a call to
    setlocale() that modifies the category LC_CTYPE .

RETURN VALUE

    The wctype() function shall return 0 if the given character class name is not
    valid for the current locale (category LC_CTYPE ); otherwise, it shall
    return an object of type wctype_t that can be used in calls to iswctype().

ERRORS

    No errors are defined.

*/

specification
WCTypeT wctype_spec(CallContext context, CString* property)
{
    pre
    {
        /*
         * The wctype() function is defined for valid character class names as defined in
         * the current locale. The property argument is a string identifying a generic
         * character class for which codeset-specific type information is required.
         */
        REQ("app.wctype.01", "", TODO_REQ());

        /*
         * Additional character class names defined in the locale definition file (
         * category LC_CTYPE ) can also be specified.
         */
        REQ("app.wctype.03", "", TODO_REQ());

        /*
         * The function shall return a value of type wctype_t, which can be used as the
         * second argument to subsequent calls of iswctype().
         */
        REQ("app.wctype.04", "", TODO_REQ());

        return true;
    }
    post
    {
        /*
         * The following character class names shall be defined in all locales:
         *
         * alnum alpha blank cntrl
         * digit graph lower print
         * punct space upper xdigit
         */
        REQ("wctype.02", "", TODO_REQ());

        /*
         * The wctype() function shall determine values of wctype_t according to the
         * rules of the coded character set defined by character type information in the
         * program's locale (category LC_CTYPE ).
         */
        REQ("wctype.05", "", TODO_REQ());

        /*
         * The values returned by wctype() shall be valid until a call to setlocale() that
         * modifies the category LC_CTYPE .
         */
        REQ("wctype.06", "", TODO_REQ());

        /*
         * The wctype() function shall return 0 if the given character class name is not
         * valid for the current locale (category LC_CTYPE )
         */
        REQ("wctype.07.01", "", TODO_REQ());

        /*
         * otherwise, it shall return an object of type wctype_t that can be used in calls
         * to iswctype().
         */
        REQ("wctype.07.02", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcwidth - number of column positions of a wide-character code

SYNOPSIS

    #include <wchar.h>

    int wcwidth(wchar_t wc);

DESCRIPTION

    The wcwidth() function shall determine the number of column positions required
    for the wide character wc. The application shall ensure that the value of wc
    is a character representable as a wchar_t, and is a wide-character code
    corresponding to a valid character in the current locale.

RETURN VALUE

    The wcwidth() function shall either return 0 (if wc is a null wide-character
    code), or return the number of column positions to be occupied by the wide-
    character code wc, or return -1 (if wc does not correspond to a printable
    wide-character code).

ERRORS

    No errors are defined.

*/

specification
IntT wcwidth_spec(CallContext context, WCharT wc)
{
    pre
    {
        /*
         * The application shall ensure that the value of wc is a character representable
         * as a wchar_t
         */
        REQ("app.wcwidth.02", "", TODO_REQ());

        /*
         * and is a wide-character code corresponding to a valid character in the current
         * locale.
         */
        REQ("app.wcwidth.03", "", TODO_REQ());

        return true;
    }
    post
    {
        /*
         * The wcwidth() function shall determine the number of column positions required
         * for the wide character wc.
         *
         * The wcwidth() function shall either return 0 (if wc is a null wide-character
         * code),
         */
        REQ("wcwidth.01.01", "", TODO_REQ());

        /*
         * The wcwidth() function shall determine the number of column positions required
         * for the wide character wc.
         *
         * or return the number of column positions to be occupied by the wide-character
         * code wc,
         */
        REQ("wcwidth.01.02", "", TODO_REQ());

        /*
         * The wcwidth() function shall determine the number of column positions required
         * for the wide character wc.
         *
         * or return -1 (if wc does not correspond to a printable wide-character code).
         */
        REQ("wcwidth.01.03", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcswidth - number of column positions of a wide-character string

SYNOPSIS

    #include <wchar.h>

    int wcswidth(const wchar_t *pwcs, size_t n);

DESCRIPTION

    The wcswidth() function shall determine the number of column positions required
    for n wide-character codes (or fewer than n wide-character codes if a null
    wide-character code is encountered before n wide-character codes are exhausted)
    in the string pointed to by pwcs.

RETURN VALUE

    The wcswidth() function either shall return 0 (if pwcs points to a null wide-
    character code), or return the number of column positions to be occupied by
    the wide-character string pointed to by pwcs, or return -1 (if any of the
    first n wide-character codes in the wide-character string pointed to by pwcs
    is not a printable wide-character code).

ERRORS

    No errors are defined.

*/


specification
IntT wcswidth_spec(CallContext context, WCharArray* pwcs, SizeT n)
{
    pre
    {
        return true;
    }
    post
    {
        /*
         * The wcswidth() function shall determine the number of column positions required
         * for n wide-character codes (or fewer than n wide-character codes if a null
         * wide-character code is encountered before n wide-character codes are exhausted)
         * in the string pointed to by pwcs.
         *
         * The wcswidth() function either shall return 0 (if pwcs points to a null wide-
         * character code),
         */
        REQ("wcswidth.01.01", "", TODO_REQ());

        /*
         * The wcswidth() function shall determine the number of column positions required
         * for n wide-character codes (or fewer than n wide-character codes if a null
         * wide-character code is encountered before n wide-character codes are exhausted)
         * in the string pointed to by pwcs.
         *
         * or return the number of column positions to be occupied by the wide-character
         * string pointed to by pwcs,
         */
        REQ("wcswidth.01.02", "", TODO_REQ());

        /*
         * The wcswidth() function shall determine the number of column positions required
         * for n wide-character codes (or fewer than n wide-character codes if a null
         * wide-character code is encountered before n wide-character codes are exhausted)
         * in the string pointed to by pwcs.
         *
         * or return -1 (if any of the first n wide-character codes in the wide-character
         * string pointed to by pwcs is not a printable wide-character code).
         */
        REQ("wcswidth.01.03", "", TODO_REQ());

        return true;
    }
}

/********************************************************************/
/**                       WCTypeT Type                             **/
/********************************************************************/

specification typedef WCTypeT WCTypeTObj = {};

WCTypeTObj* create_WCTypeTObj(WCTypeT value)
{
    return create(&type_WCTypeTObj, value);
}

void wctype_formatter(TSStream* stream, WCTypeTObj* value)
{
    VERIFY_TYPE(wctype_formatter, &type_WCTypeTObj, value);

    writeULong_TSStream(stream, *value);
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

