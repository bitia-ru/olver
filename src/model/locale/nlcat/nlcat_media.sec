/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/nlcat/nlcat_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleNlcatSubsystem(void)
{
    // Set up mediators
    set_mediator_catclose_spec(catclose_media);
    set_mediator_catgets_spec(catgets_media);
    set_mediator_catopen_spec(catopen_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** catclose_spec **/

mediator catclose_media for specification
IntT catclose_spec(CallContext context, nl_catd catd, ErrorCode* errno)
{
    call
    {
        IntT res;

        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "catclose:$(ptr)", create_VoidTPtrObj(catd));
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onCatClose(context, catd, catclose_spec);
    }
}


/** catgets_spec **/

mediator catgets_media for specification
CString* catgets_spec(CallContext context, nl_catd catd, IntT set_id, IntT msg_id, CString* s, ErrorCode* errno)
{
    call
    {
        BoolT bError;
        CString* res;

        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "catgets:$(ptr)$(int)$(int)$(str)",
            create_VoidTPtrObj(catd), create_IntTObj(set_id), create_IntTObj(msg_id), s);

        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
            bError = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return bError ? s : res;
    }

    state
    {
        onCatGets(context, catd, set_id, msg_id, s, catgets_spec);
    }
}


/** catopen_spec **/

mediator catopen_media for specification
nl_catd catopen_spec(CallContext context, CString* Name, IntT oflag, ErrorCode* errno)
{
    call
    {
        nl_catd res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "catopen:$(str)$(int)",
            Name, create_IntTObj(oflag));

        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onCatOpen(context, Name, oflag, catopen_spec);
    }
}
