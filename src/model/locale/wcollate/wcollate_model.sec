/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "config/interpretation.seh"
#include "locale/wcollate/wcollate_config.h"
#include "locale/wcollate/wcollate_model.seh"

#pragma SEC subsystem wcollate "locale.wcollate"


/*
   The group of functions 'locale.wcollate' consists of:
       wcscoll [2]
       wcsxfrm [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcscoll - wide-character string comparison using collating information

SYNOPSIS

    #include <wchar.h>

    int wcscoll(const wchar_t *ws1, const wchar_t *ws2);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The wcscoll() function shall compare the wide-character string pointed to by
    ws1 to the wide-character string pointed to by ws2, both interpreted as
    appropriate to the LC_COLLATE category of the current locale.

    The wcscoll() function shall not change the setting of errno if successful.

    An application wishing to check for error situations should set errno to 0
    before calling wcscoll(). If errno is non-zero on return, an error has
    occurred.

    RETURN VALUE

    Upon successful completion, wcscoll() shall return an integer greater than,
    equal to, or less than 0, according to whether the wide-character string
    pointed to by ws1 is greater than, equal to, or less than the wide-character
    string pointed to by ws2, when both are interpreted as appropriate to the
    current locale. On error, wcscoll() shall set errno, but no return value
    is reserved to indicate an error.

ERRORS

    The wcscoll() function may fail if:

    [EINVAL]

        The ws1 or ws2 arguments contain wide-character codes outside the domain
        of the collating sequence.

*/

specification
IntT wcscoll_spec(CallContext context, WString* ws1, WString* ws2, ErrorCode* errno)
{
    pre
    {
        if(!POSIX_WCSCOLL_FAILS_WITH_EINVAL)
        {
            /* [Implicit precondition.] */
            REQ("", "ws1 should contain wide-characters inside the domain of the collating sequence", TODO_REQ());
            REQ("", "ws2 should contain wide-characters inside the domain of the collating sequence", TODO_REQ());
        }

        /*
         * An application wishing to check for error situations should set errno to 0
         * before calling wcscoll(). If errno is non-zero on return, an error has
         * occurred.
         */
        /* [This is performed in the agent.] */
        IMPLEMENT_REQ("app.wcscoll.03");

        return true;
    }
    post
    {
        /*
         * The wcscoll() function shall not change the setting of errno if successful.
         */
        IMPLEMENT_REQ("wcscoll.02");

        /*
         * On error, wcscoll() shall set errno, but no return value is reserved to
         * indicate an error.
         */
        IMPLEMENT_REQ("wcscoll.04");

        ERROR_BEGIN(POSIX_WCSCOLL, "wcscoll.05", *errno != 0, *errno)
            /*
             * The wcscoll() function may fail if:
             *
             * [EINVAL]
             *
             * The ws1 or ws2 arguments contain wide-character codes outside the domain
             * of the collating sequence.
             */
            ERROR_MAY(POSIX_WCSCOLL, EINVAL, "wcscoll.05.01", TODO_ERR(EINVAL))

        ERROR_END()

        /*
         * The wcscoll() function shall compare the wide-character string pointed to by
         * ws1 to the wide-character string pointed to by ws2, both interpreted as
         * appropriate to the LC_COLLATE category of the current locale.
         *
         * Upon successful completion, wcscoll() shall return an integer greater than,
         * equal to, or less than 0, according to whether the wide-character string
         * pointed to by ws1 is greater than, equal to, or less than the wide-character
         * string pointed to by ws2, when both are interpreted as appropriate to the
         * current locale.
         */
        REQ("wcscoll.01.01", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcsxfrm - wide-character string transformation

SYNOPSIS

    #include <wchar.h>

    size_t wcsxfrm(wchar_t *restrict ws1, const wchar_t *restrict ws2,
    size_t n);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO
    C standard. Any conflict between the requirements described here and the ISO
    C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
    the ISO C standard.

    The wcsxfrm() function shall transform the wide-character string pointed to
    by ws2 and place the resulting wide-character string into the array pointed
    to by ws1. The transformation shall be such that if wcscmp() is applied to
    two transformed wide strings, it shall return a value greater than, equal
    to, or less than 0, corresponding to the result of wcscoll() applied to the
    same two original wide-character strings. No more than n wide-character
    codes shall be placed into the resulting array pointed to by ws1, including
    the terminating null wide-character code. If n is 0, ws1 is permitted to be
    a null pointer. If copying takes place between objects that overlap, the
    behavior is undefined.

    The wcsxfrm() function shall not change the setting of errno if successful.

    Since no return value is reserved to indicate an error, an application
    wishing to check for error situations should set errno to 0, then call
    wcsxfrm(), then check errno.

RETURN VALUE

    The wcsxfrm() function shall return the length of the transformed wide-
    character string (not including the terminating null wide-character code).
    If the value returned is n or more, the contents of the array pointed to by
    ws1 are unspecified.

    On error, the wcsxfrm() function may set errno, but no return value is
    reserved to indicate an error.

ERRORS

    The wcsxfrm() function may fail if:

    [EINVAL]

        The wide-character string pointed to by ws2 contains wide-character
        codes outside the domain of the collating sequence.

*/

specification
SizeT wcsxfrm_spec(CallContext context, WString* ws1, WString* ws2, SizeT n, ErrorCode* errno)
{
    pre
    {
        if (n != 0)
        {
            /*
             * If n is 0, ws1 is permitted to be a null pointer.
             */
            /* [Implicitly: else ws1 cannot be null.] */
            REQ("app.wcsxfrm.03", "ws1 should not be NULL", ws1 != NULL);
        }

        if(!POSIX_WCSXFRM_FAILS_WITH_EINVAL)
        {
            /* [Implicit precondition.] */
            REQ("", "ws2 should contain wide-characters inside the domain of the collating sequence", TODO_REQ());
        }

        /*
         * If copying takes place between objects that overlap, the behavior is undefined.
         */
        IMPLEMENT_REQ("app.wcsxfrm.04");

        /*
         * Since no return value is reserved to indicate an error, an application wishing
         * to check for error situations should set errno to 0, then call wcsxfrm(),
         * then check errno.
         */
        /* [This is performed in the agent.] */
        IMPLEMENT_REQ("app.wcsxfrm.06");

        return true;
    }
    post
    {
        /*
         * The wcsxfrm() function shall not change the setting of errno if successful.
         */
        IMPLEMENT_REQ("wcsxfrm.05");

        /*
         * On error, the wcsxfrm() function may set errno, but no return value is
         * reserved to indicate an error.
         */
        IMPLEMENT_REQ("wcsxfrm.09");

        ERROR_BEGIN(POSIX_WCSXFRM, "wcsxfrm.10", *errno != 0, *errno)
            /*
             * The wcsxfrm() function may fail if:
             *
             * [EINVAL]
             *
             * The wide-character string pointed to by ws2 contains wide-character
             * codes outside the domain of the collating sequence.
             */
            ERROR_MAY(POSIX_WCSXFRM, EINVAL, "wcsxfrm.10.01", TODO_ERR(EINVAL))

        ERROR_END()

        /*
         * No more than n wide-character codes shall be placed into the resulting array
         * pointed to by ws1, including the terminating null wide-character code.
         */
        /* [Checked in the agent.] */
        IMPLEMENT_REQ("wcsxfrm.02");

        if (wcsxfrm_spec < n)
        {
            /*
             * The wcsxfrm() function shall return the length of the transformed wide-
             * character string (not including the terminating null wide-character code).
             */
            REQ("wcsxfrm.07", "wcsxfrm should return the length of the transformed string",
                wcsxfrm_spec == length_WString(ws1)
               );
        }
        else
        {
            /*
             * If the value returned is n or more, the contents of the array pointed to by ws1
             * are unspecified.
             */
            /* [Agent returns an empty string in this case.] */
            REQ("wcsxfrm.08",
                "If the value returned is n or more",
                equals(ws1, createFromCharArray_WString("")));
        }

        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
