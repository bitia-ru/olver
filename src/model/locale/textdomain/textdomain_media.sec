/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/textdomain/textdomain_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleTextdomainSubsystem(void)
{
    // Set up mediators
    set_mediator_bind_textdomain_codeset_spec ( bind_textdomain_codeset_media );
    set_mediator_bindtextdomain_spec          ( bindtextdomain_media          );
    set_mediator_textdomain_spec              ( textdomain_media              );
    set_mediator_gettext_caller_spec          ( gettext_caller_media          );
    set_mediator_ngettext_caller_spec         ( ngettext_caller_media         );
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** bind_textdomain_codeset_spec **/
mediator bind_textdomain_codeset_media for specification
CString* bind_textdomain_codeset_spec (
                                         CallContext context,
                                         CString*    domainname,
                                         CString*    codeset,
                                         ErrorCode*  errno
                                        )
{
    call
    {
        CString* res      = NULL;
        TSCommand command = create_TSCommand();

        format_TSCommand (
                          &command,
                          "bind_textdomain_codeset:$(str)$(str)",
                          domainname,
                          codeset
                         );

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res    = readCString_TSStream(&command.response);
            *errno =     readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onBindTextDomainCodeset(context, domainname, codeset, errno, bind_textdomain_codeset_spec);
    }
}


/** bindtextdomain_spec **/
mediator bindtextdomain_media for specification
CString* bindtextdomain_spec (
                                CallContext context,
                                CString*    domainname,
                                CString*    dirname,
                                ErrorCode*  errno
                               )
{
    call
    {
        CString* res      = NULL;
        TSCommand command = create_TSCommand();

        format_TSCommand (
                          &command,
                          "bindtextdomain:$(str)$(str)",
                          domainname,
                          dirname
                         );

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res    = readCString_TSStream(&command.response);
            *errno =     readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onBindTextDomain(context, domainname, dirname, errno, bindtextdomain_spec);
    }
}

/** textdomain_spec **/
mediator textdomain_media for specification
CString* textdomain_spec (
                            CallContext context,
                            CString*    domainname,
                            ErrorCode*  errno
                           )
{
    call
    {
        CString* res      = NULL;
        TSCommand command = create_TSCommand();

        format_TSCommand (
                          &command,
                          "textdomain:$(str)",
                          domainname
                         );

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res    = readCString_TSStream(&command.response);
            *errno =     readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onTextDomain(context, domainname, errno, textdomain_spec);
    }
}

/** dcgettext_spec **/
//This mediator refers to: gettext, dgettext, dcgettext
mediator gettext_caller_media for specification
CString* gettext_caller_spec (
                              CallContext context,
                              CString*    domainname,
                              CString*    msgid,
                              IntT        category,
                              ErrorCode*  errno,
                              gettextT    funcType
                             )
{
    call
    {
        CString* res      = NULL;
        TSCommand command = create_TSCommand();
        
        if(funcType == gettextFunc)
        {
            format_TSCommand (
                              &command,
                              "gettext:$(str)$(int)", 
                              msgid,  
                              create_IntTObj(*errno) 
                             );
        }
        else if(funcType == dgettextFunc)
        {
            format_TSCommand ( 
                              &command, 
                              "dgettext:$(str)$(str)$(int)", 
                              domainname, 
                              msgid, 
                              create_IntTObj(*errno) 
                             ); 
        } 
        else
        {
            format_TSCommand (
                              &command,
                              "dcgettext:$(str)$(str)$(int)$(int)",
                              domainname,
                              msgid,
                              create_IntTObj(category),
                              create_IntTObj(*errno)
                             );
        }

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res    = readCString_TSStream(&command.response);
            *errno =     readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        if(funcType == gettextFunc)
            onGetText(context, getCurrent_Domain(context), msgid, SUT_LC_MESSAGES, errno, gettext_caller_spec);
        else if(funcType == dgettextFunc)
            onGetText(context, domainname, msgid, SUT_LC_MESSAGES, errno, gettext_caller_spec);
        else
            onGetText(context, domainname, msgid, category, errno, gettext_caller_spec);
    }
}

/** dcngettext_spec **/
//This mediator refers to: ngettext, dngettext, dcngettext
mediator ngettext_caller_media for specification
CString* ngettext_caller_spec (
                            CallContext context,
                            CString*    domainname,
                            CString*    msgid1,
                            CString*    msgid2,
                            ULongT      n,
                            IntT        category,
                            ErrorCode*  errno,
                            ngettextT   funcType
                           )
{
    call
    {
        CString* res      = NULL;
        TSCommand command = create_TSCommand();

        if(funcType == ngettextFunc)
        {
            format_TSCommand ( 
                              &command, 
                              "ngettext:$(str)$(str)$(ulong)$(int)", 
                              msgid1, 
                              msgid2, 
                              create_ULongTObj (n), 
                              create_IntTObj   (*errno) 
                             ); 
        } 
        else if(funcType == dngettextFunc)
        { 
            format_TSCommand ( 
                              &command, 
                              "dngettext:$(str)$(str)$(str)$(ulong)$(int)", 
                              domainname, 
                              msgid1, 
                              msgid2, 
                              create_ULongTObj (n), 
                              create_IntTObj   (*errno) 
                             ); 
        }
        else
        {
            format_TSCommand (
                              &command,
                            "dcngettext:$(str)$(str)$(str)$(ulong)$(int)$(int)",
                              domainname,
                              msgid1,
                              msgid2,
                              create_ULongTObj (n),
                              create_IntTObj   (category),
                              create_IntTObj   (*errno)
                            );
        }

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res    = readCString_TSStream(&command.response);
            *errno =     readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        if(funcType == ngettextFunc)
            onNGetText(context, getCurrent_Domain(context), msgid1, msgid2, n, SUT_LC_MESSAGES, errno, ngettext_caller_spec);
        else if(funcType == dngettextFunc)
            onNGetText(context, domainname, msgid1, msgid2, n, SUT_LC_MESSAGES, errno, ngettext_caller_spec);
        else
            onNGetText(context, domainname, msgid1, msgid2, n, category, errno, ngettext_caller_spec);
    }
}
