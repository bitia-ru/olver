/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_scenario.seh"
#include "locale/ctype/tests/ctype_scenario.seh"
#include "locale/locale/locale_model.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_ctype_simple_scenario()
{
}

bool init_ctype_simple_scenario(int argc, char** argv)
{
    context = getContext();

    return true;
}

void finish_ctype_simple_scenario(void)
{
    cleanup_ctype_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(locale_ctype_simple_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ctype_simple_scen()
{
    LocSpec* tmp;
    SizeT sz;
    IntT res;

    tmp = __ctype_b_loc_spec(context);
    sz = __ctype_get_mb_cur_max_spec(context);

    res = isalnum_spec(context, 'A');
    res = isalnum_spec(context, '.');

    res = isalpha_spec(context, 'A');
    res = isalpha_spec(context, '0');

    res = isascii_spec(context, 'A');
    res = isascii_spec(context, '\x95');

    res = isblank_spec(context, '\t');
    res = isblank_spec(context, 'A');

    res = iscntrl_spec(context, '\x07');
    res = iscntrl_spec(context, 'A');

    res = isdigit_spec(context, '1');
    res = isdigit_spec(context, 'A');

    res = isgraph_spec(context, 'A');
    res = isgraph_spec(context, '\t');

    res = islower_spec(context, 'a');
    res = islower_spec(context, 'A');

    res = isprint_spec(context, 'A');
    res = isprint_spec(context, '\v');

    res = ispunct_spec(context, '.');
    res = ispunct_spec(context, 'A');

    res = isspace_spec(context, ' ');
    res = isspace_spec(context, 'A');

    res = isupper_spec(context, 'A');
    res = isupper_spec(context, 'z');

    res = isxdigit_spec(context, 'B');
    res = isxdigit_spec(context, 'G');

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm locale_ctype_simple_scenario =
{
    .init = init_ctype_simple_scenario,
    .finish = finish_ctype_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            ctype_simple_scen,
            NULL
    }
};
