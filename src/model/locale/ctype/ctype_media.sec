/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "locale/ctype/ctype_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initLocaleCtypeSubsystem(void)
{
    // Set up mediators
    set_mediator___ctype_b_loc_spec(__ctype_b_loc_media);
    set_mediator___ctype_get_mb_cur_max_spec(__ctype_get_mb_cur_max_media);
    set_mediator_isalnum_spec(isalnum_media);
    set_mediator_isalpha_spec(isalpha_media);
    set_mediator_isascii_spec(isascii_media);
    set_mediator_isblank_spec(isblank_media);
    set_mediator_iscntrl_spec(iscntrl_media);
    set_mediator_isdigit_spec(isdigit_media);
    set_mediator_isgraph_spec(isgraph_media);
    set_mediator_islower_spec(islower_media);
    set_mediator_isprint_spec(isprint_media);
    set_mediator_ispunct_spec(ispunct_media);
    set_mediator_isspace_spec(isspace_media);
    set_mediator_isupper_spec(isupper_media);
    set_mediator_isxdigit_spec(isxdigit_media);
}

void writeLocSpec_TSStream(TSStream* stream, LocSpec* value)
{
    int i;
    IntT sz;
    UShortTObj* tmp;

    writeTypeHeaderTSStream(stream, "locspec");
    sz = size_List(value);
    writeInt_TSStream(stream, size_List(value));
    for (i=0; i<sz; ++i)
    {
        tmp = get_List(value, i);
        writeUShort_TSStream(stream, *tmp);
    }
}

LocSpec* readLocSpec_TSStream(TSStream* stream)
{
    int i;
    IntT sz;
    LocSpec* res;

    verifyType_TSStream(stream, "locspec");
    sz = readInt_TSStream(stream);
    res = create_LocSpec();
    for (i=0; i<sz; ++i)
        add_List(res, i, create_UShortTObj(readUShort_TSStream(stream)));
    return res;
}

void locspec_formatter(TSStream* stream, LocSpec* value)
{
    VERIFY_TYPE(locspec_formatter, &type_List, value);

    writeLocSpec_TSStream(stream, value);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __ctype_b_loc_spec **/
mediator __ctype_b_loc_media for specification
LocSpec* __ctype_b_loc_spec(CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        LocSpec* res = create_LocSpec();

        format_TSCommand(&command, "__ctype_b_loc");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readLocSpec_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** __ctype_get_mb_cur_max_spec **/
mediator __ctype_get_mb_cur_max_media for specification
SizeT __ctype_get_mb_cur_max_spec(CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res = 0;

        format_TSCommand(&command, "__ctype_get_mb_cur_max");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isalnum_spec **/
mediator isalnum_media for specification
IntT isalnum_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isalnum:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isalpha_spec **/
mediator isalpha_media for specification
IntT isalpha_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isalpha:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isascii_spec **/
mediator isascii_media for specification
IntT isascii_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isascii:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isblank_spec **/
mediator isblank_media for specification
IntT isblank_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isblank:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** iscntrl_spec **/
mediator iscntrl_media for specification
IntT iscntrl_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "iscntrl:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isdigit_spec **/
mediator isdigit_media for specification
IntT isdigit_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isdigit:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isgraph_spec **/
mediator isgraph_media for specification
IntT isgraph_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isgraph:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** islower_spec **/
mediator islower_media for specification
IntT islower_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "islower:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isprint_spec **/
mediator isprint_media for specification
IntT isprint_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isprint:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** ispunct_spec **/
mediator ispunct_media for specification
IntT ispunct_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "ispunct:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isspace_spec **/
mediator isspace_media for specification
IntT isspace_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isspace:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isupper_spec **/
mediator isupper_media for specification
IntT isupper_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isupper:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isxdigit_spec **/
mediator isxdigit_media for specification
IntT isxdigit_spec(CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "isxdigit:$(int)",
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}
