/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "config/pthread_config.seh"
#include "config/system_config.seh"


/********************************************************************/
/**                     Default Mutex Attributes                   **/
/********************************************************************/
/* The ISO POSIX 2003 defines the following default values of attributes */
static MutexType defaultMutexType = SUT_PTHREAD_MUTEX_DEFAULT;
static MutexProtocol defaultMutexProtocol = SUT_PTHREAD_PRIO_NONE;
static PThreadPShared defaultMutexPShared = SUT_PTHREAD_PROCESS_PRIVATE;
static IntT defaultMutexPrioceiling = 1; //is it right?

MutexType getDefaultMutexType(void)
{
  return defaultMutexType;
}

MutexProtocol getDefaultMutexProtocol(void)
{
  return defaultMutexProtocol;
}

PThreadPShared getDefaultMutexPShared(void)
{
  return defaultMutexPShared;
}

IntT getDefaultMutexPrioceiling(void)
{
  return defaultMutexPrioceiling;
}
 
#if defined (LINUX_STANDARD_BASE)
  /* 
   * Linux Standard Base defines PTHREAD_MUTEX_DEFAULT as an alias for PTHREAD_MUTEX_NORMAL
   *
   *   Linux Standard Base Core Specification 3.1
   *   Copyright (c) 2004, 2005 Free Standards Group
   *
   *   See section 'Data Definitions for libpthread', header file 'pthread.h'.
   */
  #define DEFAULT_PTHREAD_MUTEX_TYPE_ALIAS SUT_PTHREAD_MUTEX_NORMAL
#else
  #define DEFAULT_PTHREAD_MUTEX_TYPE_ALIAS -1
#endif

MutexType getDefaultMutexTypeAlias(CallContext context)
{
SystemConfiguration* configuration = getSystemConfiguration(context);
  
  return configuration->pthreadConfiguration.defaultMutexTypeAlias;
}

void setDefaultMutexTypeAlias(CallContext context,MutexType type)
{
SystemConfiguration* configuration = getSystemConfiguration(context);

  if (configuration->pthreadConfiguration.defaultMutexTypeAlias == -1)
    configuration->pthreadConfiguration.defaultMutexTypeAlias = type;
}


/********************************************************************/
/**                     Default Rwlock Attributes                  **/
/********************************************************************/
/* The ISO POSIX 2003 defines the following default values of attributes */
static PThreadPShared defaultRwlockPShared = SUT_PTHREAD_PROCESS_PRIVATE;

PThreadPShared getDefaultRwlockPShared(void)
{
  return defaultRwlockPShared;
}


/********************************************************************/
/**                     Default Cond Attributes                  **/
/********************************************************************/
/* The ISO POSIX 2003 defines the following default values of attributes */
static PThreadPShared defaultCondPShared = SUT_PTHREAD_PROCESS_PRIVATE;

PThreadPShared getDefaultCondPShared(void)
{
  return defaultCondPShared;
}


/********************************************************************/
/**                       PThread Configuration                    **/
/********************************************************************/
static ThreadPriority defaultThreadPriority = 100;

void initPThreadConfiguration( PThreadConfiguration* pthreadConfiguration )
{
  pthreadConfiguration->defaultThreadPriority = defaultThreadPriority;
  pthreadConfiguration->defaultMutexTypeAlias = DEFAULT_PTHREAD_MUTEX_TYPE_ALIAS;
}

ThreadPriority getDefaultThreadPriority( SystemId systemid )
{
SystemConfiguration* configuration = getSystemConfiguration_SystemId(systemid);

  return configuration->pthreadConfiguration.defaultThreadPriority;
}
