/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef LSB_CONFIGURATION_SEH
#define LSB_CONFIGURATION_SEH

#include "common/embed.h"
#include "config/test_system_config.h"

/********************************************************************/
/**                    Linux Standard Base Version                 **/
/********************************************************************/
#define LINUX_STANDARD_BASE   31


/********************************************************************/
/**                  Linux Standard Base Architecture              **/
/********************************************************************/
#define LSB_ARCH_IA32   1
#define LSB_ARCH_IA64   2
#define LSB_ARCH_PPC32  3
#define LSB_ARCH_PPC64  4
#define LSB_ARCH_S390   5
#define LSB_ARCH_S390X  6
#define LSB_ARCH_AMD64  7

#ifndef LSB_ARCH
// Default LSB_ARCH is an architecture of the target machine
#if __i386__
  #define LSB_ARCH  LSB_ARCH_IA32
#elif __ia64__
  #define LSB_ARCH  LSB_ARCH_IA64
#elif (__powerpc__ && !__powerpc64__ )
  #define LSB_ARCH  LSB_ARCH_PPC32
#elif __powerpc64__
  #define LSB_ARCH  LSB_ARCH_PPC64
#elif (__s390__ && !__s390x__)
  #define LSB_ARCH  LSB_ARCH_S390
#elif __s390x__
  #define LSB_ARCH  LSB_ARCH_S390X
#elif __x86_64__
  #define LSB_ARCH  LSB_ARCH_AMD64
#endif
#endif // #ifndef LSB_ARCH


/********************************************************************/
/**             System Under Test Standard Integer Types           **/
/********************************************************************/

/*
 * These data types represents data definition requirements of
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   According to LSB Core Generic 3.1 char can be signed char or unsigned
 *
 *   See section 'Data Definitions for libc', header file 'limits.h'
 *   in architecture specific specification.
 */
#if ( (LSB_ARCH == LSB_ARCH_IA32) || \
      (LSB_ARCH == LSB_ARCH_IA64) || \
      (LSB_ARCH == LSB_ARCH_AMD64) \
    )

    typedef signed char sut_char;
    //typedef char sut_char;
    #define SUT_CHAR_MAX 127

#elif ( (LSB_ARCH == LSB_ARCH_PPC32) || \
        (LSB_ARCH == LSB_ARCH_PPC64) || \
        (LSB_ARCH == LSB_ARCH_S390)  || \
        (LSB_ARCH == LSB_ARCH_S390X) || \
        (LSB_ARCH == LSB_ARCH_PPC32) \
      )

    typedef unsigned char sut_char;
    //typedef char sut_char;
    #define SUT_CHAR_MAX 255

#else

    typedef unsigned char sut_char;
    #define SUT_CHAR_MAX 255

#endif


/*
 * According to LSB Core 3.1 sizes of signed and unsigned char,
 * short and int are fixed.
 */
typedef int8_t   sut_schar;
typedef uint8_t  sut_uchar;
typedef int16_t  sut_short;
typedef uint16_t sut_ushort;
typedef int32_t  sut_int;
typedef uint32_t sut_uint;


/*
 * According to LSB Core 3.1 sizes of long and unsigned long are unspecified.
 */
#if ( (LSB_ARCH == LSB_ARCH_IA32) || (LSB_ARCH == LSB_ARCH_PPC32) || (LSB_ARCH == LSB_ARCH_S390) )

  typedef int32_t  sut_long;
  typedef uint32_t sut_ulong;

#elif ( (LSB_ARCH == LSB_ARCH_IA64)  || \
        (LSB_ARCH == LSB_ARCH_PPC64) || \
        (LSB_ARCH == LSB_ARCH_S390X) || \
        (LSB_ARCH == LSB_ARCH_AMD64) \
      )

  typedef int64_t  sut_long;
  typedef uint64_t sut_ulong;

#else

  typedef int64_t  sut_long;
  typedef uint64_t sut_ulong;

#endif


/*
 * According to LSB Core 3.1 sizes of long long and unsigned long long are fixed.
 */
typedef int64_t    sut_llong;
typedef uint64_t   sut_ullong;


/*
 * According to LSB Core 3.1 wchar_t is typedef of int.
 */
typedef sut_int    sut_wchar_t;


/********************************************************************/
/**              System Under Test Real Floating Types             **/
/********************************************************************/
typedef float       sut_float;
typedef double      sut_double;
typedef long double sut_ldouble;


/********************************************************************/
/**         System Under Test Greatest-Width Integer Types         **/
/********************************************************************/

/*
 * These data types represents data definition requirements of
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libc', header file 'inttypes.h'
 *   in architecture specific specification.
 */
typedef sut_llong   sut_intmax_t;
typedef sut_ullong  sut_uintmax_t;


/********************************************************************/
/**         Specification Typed for Integer types                  **/
/**                    capable of holding object pointers          **/
/********************************************************************/

#if ( (LSB_ARCH == LSB_ARCH_IA32) || (LSB_ARCH == LSB_ARCH_PPC32) || (LSB_ARCH == LSB_ARCH_S390) )

  typedef sut_int  sut_intptr_t ;
  typedef sut_uint sut_uintptr_t;

#elif ( (LSB_ARCH == LSB_ARCH_IA64)  || \
        (LSB_ARCH == LSB_ARCH_PPC64) || \
        (LSB_ARCH == LSB_ARCH_S390X) || \
        (LSB_ARCH == LSB_ARCH_AMD64) \
      )

  typedef sut_long  sut_intptr_t ;
  typedef sut_ulong sut_uintptr_t;

#else

  typedef sut_long  sut_intptr_t ;
  typedef sut_ulong sut_uintptr_t;

#endif


/********************************************************************/
/**              System Under Test Other Integer Types             **/
/********************************************************************/

/*
 * These data types represents data definition requirements of
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libc',
 *   header files 'stddef.h' and 'sys/types.h'
 *   in architecture specific specification.
 */
#if ( (LSB_ARCH == LSB_ARCH_IA32) || (LSB_ARCH == LSB_ARCH_PPC32) || (LSB_ARCH == LSB_ARCH_S390) )

  typedef sut_int   sut_ptrdiff_t;
  typedef sut_uint  sut_size_t;
  typedef sut_int   sut_ssize_t;

#elif ( (LSB_ARCH == LSB_ARCH_IA64)  || \
        (LSB_ARCH == LSB_ARCH_PPC64) || \
        (LSB_ARCH == LSB_ARCH_S390X) || \
        (LSB_ARCH == LSB_ARCH_AMD64) \
      )

  typedef sut_long  sut_ptrdiff_t;
  typedef sut_ulong sut_size_t;
  typedef sut_long  sut_ssize_t;

#else

  typedef sut_long  sut_ptrdiff_t;
  typedef sut_ulong sut_size_t;
  typedef sut_long  sut_ssize_t;

#endif


/********************************************************************/
/**                  System Under Test Pointer Type                **/
/********************************************************************/
#if ( (LSB_ARCH == LSB_ARCH_IA32) || (LSB_ARCH == LSB_ARCH_PPC32) || (LSB_ARCH == LSB_ARCH_S390) )

  typedef uint32_t  sut_ptr_t;

#elif ( (LSB_ARCH == LSB_ARCH_IA64)  || \
        (LSB_ARCH == LSB_ARCH_PPC64) || \
        (LSB_ARCH == LSB_ARCH_S390X) || \
        (LSB_ARCH == LSB_ARCH_AMD64) \
      )

  typedef uint64_t  sut_ptr_t;

#else

  typedef uint64_t  sut_ptr_t;

#endif


#endif
