/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <limits.h>
#include <atl/integer.h>
#include <string.h>
#include "process/pgroup/tests/pgroup_scenario.seh"
#include "process/pgroup/pgroup_model.seh"
#include "process/pgroup/pgroup_media.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "system/system/system_model.seh"
#include "common/control_center.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/


/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static List * contexts     ;   // type_ThreadIdObj
static List * processes_ids;   // type_ProcessIdObj

static int createProcesses( int quantity ) {
   int realQuantity = 0;
   int i;
   for ( i = 1; i <= quantity; i++ ) { if ( ! equals_ThreadId( createProcess(), WrongThreadId ) ) { realQuantity++; } }
   return realQuantity;
}

static void fillContextsAndProcessesIds( void ) {
   int i;
   TestAgentDesc * agent;
   SystemState * system;
   PidT max_process;
   // contexts
   contexts = create_List( & type_ThreadIdObj );
   for ( i = 0; i < size_Map( taMap ); i++ ) {
      agent = get_Map( taMap, key_Map( taMap, i ) );
      append_List( contexts, create_ThreadIdObj( agent->threadid ) );
   }
   // processes_ids
   processes_ids = create_List( & type_ProcessIdObj );
   agent = get_Map( taMap, key_Map( taMap, 0 ) );
   system = getSystemState( agent->threadid.system );
   // 0
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, 0 ) ) );
   // known processes
   max_process = 0;
   for ( i = 0; i < size_Map( system->processes ); i++ ) {
      ProcessIdObj * process_id = key_Map( system->processes, i );
      PidT key = process_id->process;
      if ( key > max_process ) { max_process = key; }
      append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, key ) ) );
   }
   // last + 100, last + 200
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, max_process + 100 ) ) );
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, max_process + 200 ) ) );
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, max_IntT          ) ) );
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, max_UIntT         ) ) );
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, -1                ) ) );
   append_List( processes_ids, create_ProcessIdObj( create_ProcessId( agent->threadid.system, min_IntT          ) ) );
} // fillContextsAndProcessesIds

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_pgroup_scenario( int argc, char** argv )
{
   const int repeat = 1;
   // Init test scenario data
   if ( createProcesses( repeat ) != repeat ) { return false; }
   fillContextsAndProcessesIds();
   return true;
}

static void finish_pgroup_scenario( void )
{
   TEST_SCENARIO_VERDICT_VERBOSE( pgroup_scenario );
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool __getpgid_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 0; j < size_List( processes_ids ); j++; )
      {
         ProcessIdObj * pidObj = get_List( processes_ids, j );
         __getpgid_spec( * contextObj, * pidObj, requestErrorCode() );
      }
   }
   return true;
}

scenario
bool getpgid_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 0; j < size_List( processes_ids ); j++; )
      {
         ProcessIdObj * pidObj = get_List( processes_ids, j );
         getpgid_spec( * contextObj, * pidObj, requestErrorCode() );
      }
   }
   return true;
}

scenario
bool getpgrp_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      getpgrp_spec( * contextObj );
   }
   return true;
}

scenario
bool getsid_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 0; j < size_List( processes_ids ); j++; )
      {
         ProcessIdObj * pidObj = get_List( processes_ids, j );
         getsid_spec( * contextObj, * pidObj, requestErrorCode() );
      }
   }
   return true;
}

scenario
bool setpgid_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 0; j < size_List( processes_ids ); j++; )
      {
         ProcessIdObj * pidObj = get_List( processes_ids, j );
         iterate ( int k = 0; k < size_List( processes_ids ); k++; )
         {
            ProcessIdObj * pgidObj = get_List( processes_ids, k );
            iterate ( int l = 1; l <= 2; l++; )
            // iterate ( int l = 1; l <= 1; l++; )
            {
               setpgid_spec( * contextObj, * pidObj, * pgidObj, requestErrorCode() );
            }
         }
      }
   }
   return true;
}

scenario
bool setpgrp_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 1; j <= 2; j++; )
      {
         setpgrp_spec( * contextObj );
      }
   }
   return true;
}

scenario
bool setsid_scen()
{
   iterate ( int i = 0; i < size_List( contexts ); i++; )
   {
      ThreadIdObj * contextObj = get_List( contexts, i );
      iterate ( int j = 1; j <= 2; j++; )
      {
         setsid_spec( * contextObj, requestErrorCode() );
      }
   }
   return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm pgroup_scenario =
{
   .init    = init_pgroup_scenario  ,
   .finish  = finish_pgroup_scenario,
   .actions = { __getpgid_scen,
                getpgid_scen  ,
                getpgrp_scen  ,
                getsid_scen   ,
                setpgid_scen  ,
                setpgrp_scen  ,
                setsid_scen   ,
                NULL
              }
};

bool main_process_pgroup_local( int argc, char** argv )
{
    pgroup_scenario( argc, argv );
    return true;
}


#ifdef PROCESS_PGROUP_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "process/pgroup/pgroup_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initProcessPgroupSubsystem();
}

int main( int argc, char** argv )
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile( "trace.xml_CTesK" );

    // Run test scenario
    main_process_pgroup_local( argc, argv );

    //  unloadSUT();
    return 0;
}

#endif
