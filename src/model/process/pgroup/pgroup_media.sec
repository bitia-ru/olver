/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/pgroup/pgroup_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initProcessPgroupSubsystem(void)
{
   // Set up mediators
   set_mediator___getpgid_spec( __getpgid_media );
   set_mediator_getpgid_spec  ( getpgid_media   );
   set_mediator_getpgrp_spec  ( getpgrp_media   );
   set_mediator_getsid_spec   ( getsid_media    );
   set_mediator_setpgid_spec  ( setpgid_media   );
   set_mediator_setpgrp_spec  ( setpgrp_media   );
   set_mediator_setsid_spec   ( setsid_media    );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __getpgid_spec **/
mediator __getpgid_media for specification
ProcessId __getpgid_spec( CallContext context, ProcessId pid, ErrorCode * errno )
   writes  * errno
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "__getpgid:$(long)", create_PidTObj( pid.process ) );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );

         copy( create_ErrorCode( readInt_TSStream( &command.response ) ), errno );
      }

      destroy_TSCommand(&command);

      return res;
   }
}

/** getpgid_spec **/
mediator getpgid_media for specification
ProcessId getpgid_spec( CallContext context, ProcessId pid, ErrorCode * errno )
   writes  * errno
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "getpgid:$(long)", create_PidTObj( pid.process ) );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );

         copy( create_ErrorCode( readInt_TSStream( &command.response ) ), errno );
      }

      destroy_TSCommand(&command);

      return res;
   }
}

/** getpgrp_spec **/
mediator getpgrp_media for specification
ProcessId getpgrp_spec( CallContext context )
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "getpgrp" );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );
      }

      destroy_TSCommand(&command);

      return res;
   }
}

/** getsid_spec **/
mediator getsid_media for specification
ProcessId getsid_spec( CallContext context, ProcessId pid, ErrorCode * errno )
   writes * errno
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "getsid:$(long)", create_PidTObj( pid.process ) );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );

         copy( create_ErrorCode( readInt_TSStream( &command.response ) ), errno );
      }

      destroy_TSCommand(&command);

      return res;
   }
}

/** setpgid_spec **/
mediator setpgid_media for specification
IntT setpgid_spec( CallContext context, ProcessId pid, ProcessId pgid, ErrorCode * errno )
   writes * errno
{
   call
   {
      IntT res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "setpgid:$(long)$(long)", create_PidTObj( pid.process ), create_PidTObj( pgid.process ) );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res = readInt_TSStream( & command.response );

         copy( create_ErrorCode( readInt_TSStream( &command.response ) ), errno );
      }

      destroy_TSCommand(&command);

      return res;
   }
   state
   {
      ProcessState * process_state;   if ( pid.process == 0 ) { process_state = getProcessState_CallContext( context ); }
                                                         else { process_state = getProcessState( pid )                ; }
      if ( process_state == NULL ) { return; }
      if ( setpgid_spec == 0 ) {
         if ( pgid.process == 0 ) { process_state->meta.pgroup = process_state->processid; }
                             else { process_state->meta.pgroup = pgid                    ; }
      }
   }
}

/** setpgrp_spec **/
mediator setpgrp_media for specification
ProcessId setpgrp_spec( CallContext context )
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "setpgrp" );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );
      }

      destroy_TSCommand(&command);

      return res;
   }
   state
   {
      TSCommand command;
      int res_getsid;

      ProcessState * process_state = getProcessState_CallContext( context );

      /* Setpgrp() shall return the process group ID. */
      process_state->meta.pgroup = setpgrp_spec;

      /* [Setpgrp can create new session] */
      command = create_TSCommand();

      format_TSCommand( &command, "getsid:$(long)", create_PidTObj( process_state->processid.process ) );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res_getsid = readInt_TSStream( & command.response );
         if ( res_getsid == -1 ) { setBadVerdict( "setpgrp_media, state: getsid return -1" ); }

         readInt_TSStream( &command.response );   // errno
      }

      destroy_TSCommand(&command);

      if ( process_state->meta.session.process != res_getsid ) {
         /* [Setpgrp create new session] */
         process_state->meta.session.process = res_getsid;
         process_state->meta.cterm           = NULL      ;
      }
   }
}

/** setsid_spec **/
mediator setsid_media for specification
ProcessId setsid_spec( CallContext context, ErrorCode * errno )
   writes * errno
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "setsid" );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );

         copy( create_ErrorCode( readInt_TSStream( &command.response ) ), errno );
      }

      destroy_TSCommand(&command);

      return res;
   }
   state
   {
      if ( setsid_spec.process != -1 ) {
         ProcessState * process_state = getProcessState_CallContext( context );
         process_state->meta.pgroup  = process_state->processid;
         process_state->meta.session = process_state->processid;
         process_state->meta.cterm   = NULL                    ;
      }
   }
}
