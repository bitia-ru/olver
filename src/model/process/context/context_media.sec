/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "process/context/context_media.seh"
#include "common/common_media.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initProcessContextSubsystem(void)
{
    // Set up mediators
    set_mediator_getcontext_spec ( getcontext_media  );
    set_mediator_makecontext_spec( makecontext_media );
    set_mediator_setcontext_spec ( setcontext_media  );
    set_mediator_swapcontext_spec( swapcontext_media );
    // Set up formatters
    registerTSFormatter( "markedbytechain", (TSFormatterFuncType)markedbytechain_formatter );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** getcontext_spec **/
mediator getcontext_media for specification
IntT getcontext_spec( CallContext context, UContextT * ucp ) {
    call {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "getcontext:$(int)", create_IntTObj( ucp->id ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
            readMarkedByteChain_TSStream( & command.response, ucp );
            readInt_TSStream( & command.response ); // skip errno
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** makecontext_spec **/
mediator makecontext_media for specification
void makecontext_spec( CallContext context, UContextT * ucp, CString * func, IntT argc ) {
    call {
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "makecontext:$(markedbytechain)$(str)$(int)", ucp, func, create_IntTObj( argc ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            readMarkedByteChain_TSStream( & command.response, ucp );
        }
        destroy_TSCommand( & command );
    }
}

mediator setcontext_media for specification
IntT setcontext_spec( CallContext context, UContextT * ucp ) {
    call {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "setcontext:$(markedbytechain)", ucp );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
            readMarkedByteChain_TSStream( & command.response, ucp );
            readInt_TSStream( & command.response ); // skip errno
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** swapcontext_spec **/
mediator swapcontext_media for specification
IntT swapcontext_spec( CallContext context, UContextT * oucp, UContextT * ucp, ErrorCode * errno ) {
    call {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "swapcontext:$(int)$(markedbytechain)", create_IntTObj( oucp->id ), ucp );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
            readMarkedByteChain_TSStream( & command.response, ucp );
            * errno = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
	}
}
