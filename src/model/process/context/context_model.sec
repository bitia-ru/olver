/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "process/context/context_config.h"
#include "process/fenv/fenv_model.seh"
#include "process/process/process_model.seh"
#include "system/system/system_model.seh"
#include "fs/dir/dir_model.seh"
#include "process/meta/user_model.seh"
#include "fs/meta/access_model.seh"
#include "config/system_config.seh"
#include "data/sys/wait_model.seh"
#include "data/stdlib_model.seh"
#include "process/process/process_common.seh"
#include "process/context/context_model.seh"

#pragma SEC subsystem context "process.context"

/*
   The group of functions 'process.context' consists of:
       getcontext [2]
       makecontext [1]
       setcontext [2]
       swapcontext [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    getcontext, setcontext - get and set current user context

SYNOPSIS

    #include <ucontext.h>
    int getcontext(ucontext_t *ucp);
    int setcontext(const ucontext_t *ucp);

DESCRIPTION

    The getcontext() function shall initialize the structure pointed to by ucp
    to the current user context of the calling thread. The ucontext_t type that
    ucp points to defines the user context and includes the contents of the
    calling thread's machine registers, the signal mask, and the current
    execution stack.

    The setcontext() function shall restore the user context pointed to by ucp.
    A successful call to setcontext() shall not return; program execution
    resumes at the point specified by the ucp argument passed to setcontext().
    The ucp argument should be created either by a prior call to getcontext() or
    makecontext(), or by being passed as an argument to a signal handler. If the
    ucp argument was created with getcontext(), program execution continues as
    if the corresponding call of getcontext() had just returned. If the ucp
    argument was created with makecontext(), program execution continues with
    the function passed to makecontext(). When that function returns, the thread
    shall continue as if after a call to setcontext() with the ucp argument that
    was input to makecontext(). If the uc_link member of the ucontext_t
    structure pointed to by the ucp argument is equal to 0, then this context is
    the main context, and the thread shall exit when this context returns. The
    effects of passing a ucp argument obtained from any other source are
    unspecified.

RETURN VALUE

    Upon successful completion, setcontext() shall not return and getcontext()
    shall return 0; otherwise, a value of -1 shall be returned.

ERRORS

    No errors are defined.
*/
specification
IntT getcontext_spec( CallContext context, UContextT * ucp ) {
    pre {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        return true;
    }
    post {
        /*
         * The getcontext() function shall initialize the structure pointed to by ucp to
         * the current user context of the calling thread.
         */
        REQ( "getcontext.01", "", TODO_REQ() );

        if ( getcontext_spec == -1 ) {
            /*
             * [Upon successful completion, setcontext() shall not return and getcontext()
             * shall return 0] otherwise, a value of -1 shall be returned.
             */
            REQ( "getcontext.07.02", "value of -1 shall be returned", getcontext_spec == -1 );
        } else {
            /*
             * Upon successful completion, setcontext() shall not return and getcontext()
             * shall return 0
             */
            REQ( "getcontext.07.01", "getcontext() shall return 0", getcontext_spec == 0 );
        }

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    makecontext, swapcontext - manipulate user contexts

SYNOPSIS

    #include <ucontext.h>
    void makecontext(ucontext_t *ucp, void (*func)(),
           int argc, ...);
    int swapcontext(ucontext_t *restrict oucp,
           const ucontext_t *restrict ucp);

DESCRIPTION

    The makecontext() function shall modify the context specified by ucp, which
    has been initialized using getcontext(). When this context is resumed using
    swapcontext() or setcontext(), program execution shall continue by calling
    func, passing it the arguments that follow argc in the makecontext() call.

    Before a call is made to makecontext(), the application shall ensure that
    the context being modified has a stack allocated for it. The application
    shall ensure that the value of argc matches the number of arguments of type
    int passed to func; otherwise, the behavior is undefined.

    The uc_link member is used to determine the context that shall be resumed
    when the context being modified by makecontext() returns. The application
    shall ensure that the uc_link member is initialized prior to the call to
    makecontext().

    The swapcontext() function shall save the current context in the context
    structure pointed to by oucp and shall set the context to the context
    structure pointed to by ucp.

RETURN VALUE

    Upon successful completion, swapcontext() shall return 0. Otherwise, -1
    shall be returned and errno set to indicate the error.

ERRORS

    The swapcontext() function shall fail if:

    [ENOMEM]
        The ucp argument does not have enough stack left to complete the
        operation.
*/
specification
void makecontext_spec( CallContext context, UContextT * ucp, CString * func, IntT argc )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * Before a call is made to makecontext(), the application shall ensure that the
         * context being modified has a stack allocated for it.
         */
        REQ( "app.makecontext.01", "", TODO_REQ() );

        /*
         * The application shall ensure that the value of argc matches the number of
         * arguments of type int passed to func; otherwise, the behavior is undefined.
         */
        REQ( "app.makecontext.02", "", TODO_REQ() );

        /*
         * The application shall ensure that the uc_link member is initialized prior to
         * the call to makecontext().
         */
        REQ( "app.makecontext.03", "", TODO_REQ() );

        return true;
    }
    post
    {
        /*
         * The makecontext() function shall modify the context specified by ucp, which has
         * been initialized using getcontext().
         */
        REQ( "makecontext.01", "", TODO_REQ() );

        /*
         * When this context is resumed using swapcontext() or setcontext(), program
         * execution shall continue by calling func, passing it the arguments that follow
         * argc in the makecontext() call.
         */
        REQ( "makecontext.02", "", TODO_REQ() );

        /*
         * The uc_link member is used to determine the context that shall be resumed when
         * the context being modified by makecontext() returns.
         */
        REQ( "makecontext.03", "", TODO_REQ() );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    getcontext, setcontext - get and set current user context

SYNOPSIS

    #include <ucontext.h>
    int getcontext(ucontext_t *ucp);
    int setcontext(const ucontext_t *ucp);

DESCRIPTION

    The getcontext() function shall initialize the structure pointed to by ucp
    to the current user context of the calling thread. The ucontext_t type that
    ucp points to defines the user context and includes the contents of the
    calling thread's machine registers, the signal mask, and the current
    execution stack.

    The setcontext() function shall restore the user context pointed to by ucp.
    A successful call to setcontext() shall not return; program execution
    resumes at the point specified by the ucp argument passed to setcontext().
    The ucp argument should be created either by a prior call to getcontext() or
    makecontext(), or by being passed as an argument to a signal handler. If the
    ucp argument was created with getcontext(), program execution continues as
    if the corresponding call of getcontext() had just returned. If the ucp
    argument was created with makecontext(), program execution continues with
    the function passed to makecontext(). When that function returns, the thread
    shall continue as if after a call to setcontext() with the ucp argument that
    was input to makecontext(). If the uc_link member of the ucontext_t
    structure pointed to by the ucp argument is equal to 0, then this context is
    the main context, and the thread shall exit when this context returns. The
    effects of passing a ucp argument obtained from any other source are
    unspecified.

RETURN VALUE

    Upon successful completion, setcontext() shall not return and getcontext()
    shall return 0; otherwise, a value of -1 shall be returned.

ERRORS

    No errors are defined.
*/
specification
IntT setcontext_spec( CallContext context, UContextT * ucp ) {
    pre {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * The ucp argument should be created either by a prior call to getcontext() or
         * makecontext(), or by being passed as an argument to a signal handler.
         *
         * The effects of passing a ucp argument obtained from any other source are
         * unspecified.
         */
        REQ( "app.setcontext.01", "", TODO_REQ() );

        return true;
    }
    post {
        if ( setcontext_spec == -1 ) {
            // call      : setcontext_spec -> setcontext_media -> setcontext_cmd -> setcontext
            // execution : setcontext
            // return    : setcontext -> setcontext_cmd -> setcontext_media -> setcontext_spec

            /*
             * [Upon successful completion, setcontext() shall not return and getcontext()
             * shall return 0] otherwise, a value of -1 shall be returned.
             */
            REQ( "setcontext.07.02", "", TODO_REQ() );
        } else {
            // call      : setcontext_spec -> setcontext_media -> setcontext_cmd -> setcontext
            // execution : setcontext -> getcontext
            // return    : getcontext -> getcontext_cmd -> setcontext_media -> setcontext_spec

            /*
             * The setcontext() function shall restore the user context pointed to by ucp.
             */
            REQ( "setcontext.01", "setcontext() function shall restore the user context", true );

            /*
             * A successful call to setcontext() shall not return;
             */
            REQ( "setcontext.07.01", "A successful call to setcontext() shall not return", true );

            /*
             * program execution resumes at the point specified by the ucp argument passed to
             * setcontext().
             */
            REQ( "setcontext.02", "program execution resumes at the point specified by the ucp", true );

            /*
             * If the ucp argument was created with getcontext(), program execution continues
             * as if the corresponding call of getcontext() had just returned.
             */
            REQ( "setcontext.03", "program continues as if getcontext() had just returned", true );

            /*
             * If the ucp argument was created with makecontext(), program execution
             * continues with the function passed to makecontext().
             */
            REQ( "setcontext.04", "", TODO_REQ() );

            /*
             * When that function returns, the thread shall continue as if after a call to
             * setcontext() with the ucp argument that was input to makecontext().
             */
            REQ( "setcontext.05", "", TODO_REQ() );

            /*
             * If the uc_link member of the ucontext_t structure pointed to by the ucp
             * argument is equal to 0, then this context is the main context, and the thread
             * shall exit when this context returns.
             */
            REQ( "setcontext.06", "", TODO_REQ() );

            /*
             * Upon successful completion, setcontext() shall not return and getcontext()
             * shall return 0
             */
            REQ( "setcontext.07.01", "setcontext() shall not return", true );
        }

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    makecontext, swapcontext - manipulate user contexts

SYNOPSIS

    #include <ucontext.h>
    void makecontext(ucontext_t *ucp, void (*func)(),
           int argc, ...);
    int swapcontext(ucontext_t *restrict oucp,
           const ucontext_t *restrict ucp);

DESCRIPTION

    The makecontext() function shall modify the context specified by ucp, which
    has been initialized using getcontext(). When this context is resumed using
    swapcontext() or setcontext(), program execution shall continue by calling
    func, passing it the arguments that follow argc in the makecontext() call.

    Before a call is made to makecontext(), the application shall ensure that
    the context being modified has a stack allocated for it. The application
    shall ensure that the value of argc matches the number of arguments of type
    int passed to func; otherwise, the behavior is undefined.

    The uc_link member is used to determine the context that shall be resumed
    when the context being modified by makecontext() returns. The application
    shall ensure that the uc_link member is initialized prior to the call to
    makecontext().

    The swapcontext() function shall save the current context in the context
    structure pointed to by oucp and shall set the context to the context
    structure pointed to by ucp.

RETURN VALUE

    Upon successful completion, swapcontext() shall return 0. Otherwise, -1
    shall be returned and errno set to indicate the error.

ERRORS

    The swapcontext() function shall fail if:

    [ENOMEM]
        The ucp argument does not have enough stack left to complete the
        operation.
*/
specification
IntT swapcontext_spec( CallContext context, UContextT * oucp, UContextT * ucp, ErrorCode * errno ) {
    pre {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        return true;
    }
    post {
        /*
         * [Upon successful completion, swapcontext() shall return 0.]
         * Otherwise, -1 shall be returned and errno set to indicate the error.
         */
        ERROR_BEGIN( POSIX_SWAPCONTEXT, "swapcontext.02.02", swapcontext_spec == -1, * errno )
            /*
             * The swapcontext() function shall fail if:
             *
             * [ENOMEM]
             * The ucp argument does not have enough stack left to complete the operation.
             */
            ERROR_SHALL( POSIX_SWAPCONTEXT, ENOMEM, "swapcontext.03.01", TODO_ERR(ENOMEM) )
        ERROR_END()

        /*
         * The swapcontext() function
         *
         * shall save the current context in the context structure pointed to by oucp
         */
        REQ( "swapcontext.01.01", "", TODO_REQ() );

        /*
         * The swapcontext() function
         *
         * shall set the context to the context structure pointed to by ucp.
         */
        REQ( "swapcontext.01.02", "swapcontext() set the context to ucp", true );

        /*
         * Upon successful completion, swapcontext() shall return 0.
         */
        REQ( "swapcontext.02.01", "", swapcontext_spec == 0 );

        return true;
    }
}
