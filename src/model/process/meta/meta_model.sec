/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "process/meta/meta_model.seh"

#pragma SEC subsystem meta "process.meta"

/*
   The group of functions 'process.meta.meta' consists of:
       getpid [2]
       getppid [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    getpid - get the process ID

SYNOPSIS

    #include <unistd.h>
    pid_t getpid(void);

DESCRIPTION

    The getpid() function shall return the process ID of the calling process.

RETURN VALUE

    The getpid() function shall always be successful and no return value is
     reserved to indicate an error.

ERRORS

    No errors are defined.
*/
specification
ProcessId getpid_spec( CallContext context )
{
      pre
      {
        /* [Consistency of test suite] */
        REQ( "", "Process state exists", getProcessState_CallContext( context ) != NULL );

        return true;
      }
      coverage C
      {
        return { TheOnlyBranch, "The only branch" };
      }
      post
      {
        ProcessState * process_state = getProcessState_CallContext( context );

        /*
         * The getpid() function shall return the process ID of the calling process.
         *
         * The getpid() function shall always be successful and no return value is
         * reserved to indicate an error.
         */
        REQ( "getpid.01", "The getpid() function shall return the process ID of the calling process",
                          equals_ProcessId( getpid_spec, process_state->processid )
           );

        return true;
      }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    getppid - get the parent process ID

SYNOPSIS

    #include <unistd.h>
    pid_t getppid(void);

DESCRIPTION

    The getppid() function shall return the parent process ID of the calling
    process.

RETURN VALUE

    The getppid() function shall always be successful and no return value is
    reserved to indicate an error.

ERRORS

    No errors are defined.
*/
specification
ProcessId getppid_spec( CallContext context )
{
    pre
    {
        /* [Consistency of test suite] */
        REQ( "", "Process state exists", getProcessState_CallContext( context ) != NULL );

        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /*
         * The getppid() function shall return the parent process ID of the calling
         * process.
         *
         * The getppid() function shall always be successful and no return value is
         * reserved to indicate an error.
         */
        REQ( "getppid.01", "The getppid() function shall return the parent process ID of the calling process",
                           equals_ProcessId( getppid_spec, process_state->meta.parent )
           );

        return true;
    }
}
