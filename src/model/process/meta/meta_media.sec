/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "process/meta/meta_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initProcessMetaSubsystem(void)
{
   // Set up mediators
   set_mediator_getpid_spec(getpid_media);
   set_mediator_getppid_spec(getppid_media);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** getpid_spec **/
mediator getpid_media for specification
ProcessId getpid_spec( CallContext context )
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "getpid" );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );
      }

      destroy_TSCommand(&command);

      return res;
   }
}

/** getppid_spec **/
mediator getppid_media for specification
ProcessId getppid_spec( CallContext context )
{
   call
   {
      ProcessId res;

      TSCommand command = create_TSCommand();

      format_TSCommand( &command, "getppid" );
      executeCommandInContext( context, &command );
      if (!isBadVerdict())
      {
         timestamp = command.meta.timestamp;

         res.system  = context.system                        ;
         res.process = readInt_TSStream( & command.response );
      }

      destroy_TSCommand(&command);

      return res;
   }
}
