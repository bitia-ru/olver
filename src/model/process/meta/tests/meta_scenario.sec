/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "process/meta/tests/meta_scenario.seh"
#include "process/meta/meta_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_meta_scenario( int argc, char** argv )
{
    verbose( "process_meta_meta_scenario\n" );
    dotPrint( 0, 0 );
    // Init test scenario data
    context = getContext();
    return true;
}

static void finish_meta_scenario(void)
{
    verbose( "\n" );
    TEST_SCENARIO_VERDICT_VERBOSE( process_meta_meta_scenario );
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool getpid_scen()
{
    iterate ( int index = 1; index <= 2; index++; )
    {
        dotPrint( 10, 50 );
        getpid_spec( context );
    }
    return true;
}

scenario
bool getppid_scen()
{
    iterate ( int index = 1; index <= 2; index++; )
    {
        dotPrint( 10, 50 );
        getppid_spec( context );
    }
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm process_meta_meta_scenario =
{
    .init = init_meta_scenario,
    .finish = finish_meta_scenario,
    .actions = { getpid_scen ,
                 getppid_scen,
                 NULL
    }
};

#ifdef PROCESS_META_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "process/meta/meta_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initProcessMetaSubsystem();
}

bool main_process_meta_meta( int argc, char** argv )
{
    addTraceToFile( "trace.xml_CTesK" );
    process_meta_meta_scenario( argc, argv );
    return true;
}

int main( int argc, char** argv )
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    main_process_meta_meta( argc, argv );

    //  unloadSUT();
    return 0;
}

#endif
