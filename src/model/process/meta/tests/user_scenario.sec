/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "process/meta/meta_user_config.h"

#include "system/sysconf/sysconf_model.seh"
#include "system/sysconf/sysconf_media.seh"
#include "system/user/user_model.seh"
#include "system/user/user_media.seh"
#include "process/meta/tests/user_scenario.seh"
#include "process/meta/user_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "system/system/system_model.seh"
#include "common/control_center.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;

StringTPtr cuserid_s_NULL, cuserid_s_not_NULL;

List * functionData; // NULL

static List * createContexts( const char * funcName ) {
verbose( "[%s]", funcName );
   return createProcesses( true );
}

static List * createFunctionDataForGid( const char * funcName ) {
   List * result = create_List( & type_Map );
   List * contexts;
   int i, j;
verbose( "[%s]", funcName );
   for ( i = 1; i <= 5; i++ ) {
      if ( ( contexts = createProcesses( i == 1 ) ) == NULL ) { return NULL; }
      for ( j = 0; j < size_List( contexts ); j++ ) {
         Map * pars = create_Map( & type_String, NULL );
         ThreadIdObj * contextObj = get_List( contexts, j );
         ProcessState * processState = getProcessState_CallContext( * contextObj );
         put_Map( pars, create_String( "context" ), contextObj );
         switch ( i ) {
            case 1: put_Map( pars, create_String( "gid" ), create_GidTObj( -3                                  ) ); break;
            case 2: put_Map( pars, create_String( "gid" ), create_GidTObj( -1                                  ) ); break;
            case 3: put_Map( pars, create_String( "gid" ), create_GidTObj( processState->meta.saved_setgroupid ) ); break;
            case 4: put_Map( pars, create_String( "gid" ), create_GidTObj( processState->meta.real_groupid     ) ); break;
            case 5: put_Map( pars, create_String( "gid" ), create_GidTObj( maxGroupId( * contextObj ) + 100    ) ); break;
         }
         append_List( result, pars );
      }
   }
   return result;
}

static List * createFunctionDataForGid12( const char * funcName ) {
   List * result = create_List( & type_Map );
   List * contexts;
   int i1, i2, j;
verbose( "[%s]", funcName );
   for ( i1 = 1; i1 <= 4; i1++ ) {
      for ( i2 = 1; i2 <= 5; i2++ ) {
         if ( ( contexts = createProcesses( i1 == 1 && i2 == 1 ) ) == NULL ) { return NULL; }
         for ( j = 0; j < size_List( contexts ); j++ ) {
            Map * pars = create_Map( & type_String, NULL );
            ThreadIdObj * contextObj = get_List( contexts, j );
            ProcessState * processState = getProcessState_CallContext( * contextObj );
            ProcessMetaInfo meta = processState->meta;
            GidT greateThanMax = maxGroupId( * contextObj ) + 100;
            put_Map( pars, create_String( "context" ), contextObj );
            switch ( i1 ) {
               case 1: put_Map( pars, create_String( "gid1" ), create_GidTObj( -3                    ) ); break;
               case 2: put_Map( pars, create_String( "gid1" ), create_GidTObj( -1                    ) ); break;
               case 3: put_Map( pars, create_String( "gid1" ), create_GidTObj( meta.saved_setgroupid ) ); break;
               case 4: put_Map( pars, create_String( "gid1" ), create_GidTObj( greateThanMax         ) ); break;
            }
            switch ( i2 ) {
               case 1: put_Map( pars, create_String( "gid2" ), create_GidTObj( -3                    ) ); break;
               case 2: put_Map( pars, create_String( "gid2" ), create_GidTObj( -1                    ) ); break;
               case 3: put_Map( pars, create_String( "gid2" ), create_GidTObj( meta.saved_setgroupid ) ); break;
               case 4: put_Map( pars, create_String( "gid2" ), create_GidTObj( meta.real_groupid     ) ); break;
               case 5: put_Map( pars, create_String( "gid2" ), create_GidTObj( greateThanMax         ) ); break;
            }
            append_List( result, pars );
         }
      }
   }
   return result;
} // createFunctionDataForGid12

static List * createFunctionDataForUid( const char * funcName ) {
   List * result = create_List( & type_Map );
   List * contexts;
   int i, j;
verbose( "[%s]", funcName );
   for ( i = 1; i <= 5; i++ ) {
      if ( ( contexts = createProcesses( i == 1 ) ) == NULL ) { return NULL; }
      for ( j = 0; j < size_List( contexts ); j++ ) {
         Map * pars = create_Map( & type_String, NULL );
         ThreadIdObj * contextObj = get_List( contexts, j );
         ProcessState * processState = getProcessState_CallContext( * contextObj );
         put_Map( pars, create_String( "context" ), contextObj );
         switch ( i ) {
            case 1: put_Map( pars, create_String( "uid" ), create_UidTObj( -3                                 ) ); break;
            case 2: put_Map( pars, create_String( "uid" ), create_UidTObj( -1                                 ) ); break;
            case 3: put_Map( pars, create_String( "uid" ), create_UidTObj( processState->meta.saved_setuserid ) ); break;
            case 4: put_Map( pars, create_String( "uid" ), create_UidTObj( processState->meta.real_userid     ) ); break;
            case 5: put_Map( pars, create_String( "uid" ), create_UidTObj( maxUserId( * contextObj ) + 100    ) ); break;
         }
         append_List( result, pars );
      }
   }
   return result;
}

static List * createFunctionDataForUid12( const char * funcName ) {
   List * result = create_List( & type_Map );
   List * contexts;
   int i1, i2, j;
verbose( "[%s]", funcName );
   for ( i1 = 1; i1 <= 3; i1++ ) {
      for ( i2 = 1; i2 <= 6; i2++ ) {
         if ( ( contexts = createProcesses( i1 == 1 && i2 == 1 ) ) == NULL ) { return NULL; }
         for ( j = 0; j < size_List( contexts ); j++ ) {
            Map * pars = create_Map( & type_String, NULL );
            ThreadIdObj * contextObj = get_List( contexts, j );
            ProcessState * processState = getProcessState_CallContext( * contextObj );
            ProcessMetaInfo meta = processState->meta;
            UidT greateThanMax = maxUserId( * contextObj ) + 100;
            put_Map( pars, create_String( "context" ), contextObj );
            switch ( i1 ) {
               case 1: put_Map( pars, create_String( "uid1" ), create_UidTObj( -3            ) ); break;
               case 2: put_Map( pars, create_String( "uid1" ), create_UidTObj( -1            ) ); break;
               case 3: put_Map( pars, create_String( "uid1" ), create_UidTObj( greateThanMax ) ); break;
            }
            switch ( i2 ) {
               case 1: put_Map( pars, create_String( "uid2" ), create_UidTObj( -3                    ) ); break;
               case 2: put_Map( pars, create_String( "uid2" ), create_UidTObj( -1                    ) ); break;
               case 3: put_Map( pars, create_String( "uid2" ), create_UidTObj( meta.saved_setuserid  ) ); break;
               case 4: put_Map( pars, create_String( "uid2" ), create_UidTObj( meta.real_userid      ) ); break;
               case 5: put_Map( pars, create_String( "uid2" ), create_UidTObj( meta.effective_userid ) ); break;
               case 6: put_Map( pars, create_String( "uid2" ), create_UidTObj( greateThanMax         ) ); break;
            }
            append_List( result, pars );
         }
      }
   }
   return result;
} // createFunctionDataForUid12

static bool terminate_processes( List * threadIdsOrPars ) {
   int i;
   if ( threadIdsOrPars == NULL ) { return true; }
   for ( i = 0; i < size_List( threadIdsOrPars ); i++ ) {
      ThreadIdObj * threadIdObj;
      if ( elemType_List( threadIdsOrPars ) == & type_ThreadIdObj ) {
         threadIdObj = get_List( threadIdsOrPars, i );
      } else if ( elemType_List( threadIdsOrPars ) == & type_Map ) {
         Map * par = get_List( threadIdsOrPars, i );
         threadIdObj = get_Map( par, create_String( "context" ) );
      } else {
         return false;
      }
      terminateProcess( * threadIdObj );
   }
   return true;
}

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_user_scenario( int argc, char** argv )
{
    dotPrint( 0, 0 );
    context = getContext();

    cuserid_s_NULL = NULL_VoidTPtr;
    cuserid_s_not_NULL = allocateMemoryBlock( context, 1024 );
    if ( isNULL_VoidTPtr( cuserid_s_not_NULL ) ) { return false; }

    functionData = NULL;

    setFinishMode( UNTIL_END );

    return true;
}

static void finish_user_scenario( void )
{
   verbose( "\n" );
   terminate_processes( functionData );
//   deallocateMemoryBlock( context, cuserid_s_not_NULL );
   TEST_SCENARIO_VERDICT_VERBOSE( process_meta_user_scenario );
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool cuserid_scen()
{
    iterate ( int i = 1; i <= 2; i++; )
    {
        dotPrint( 10, 50 );
        switch ( i ) {
           case 1: cuserid_spec( context, cuserid_s_NULL     ); break;
           case 2: cuserid_spec( context, cuserid_s_not_NULL ); break;
        }
    }
    return true;
}

scenario
bool getegid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                  ) { return false; }
        if ( ( functionData = createContexts( "getegid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        dotPrint( 10, 50 );
        getegid_spec( * contextObj );
    }
    return true;
}

scenario
bool geteuid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                  ) { return false; }
        if ( ( functionData = createContexts( "geteuid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        dotPrint( 10, 50 );
        geteuid_spec( * contextObj );
    }
    return true;
}

scenario
bool getgid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                 ) { return false; }
        if ( ( functionData = createContexts( "getgid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        dotPrint( 10, 50 );
        getgid_spec( * contextObj );
    }
    return true;
}

scenario
bool getgroups_scen()
{
    static int shift;
    static bool firstCall = true;

    if(GETGROUPS_RETURNS_THE_EFFECTIVE_GROUP_ID_IN_THE_GROUPLIST_ARRAY)
        shift = 1;
    else
        shift = 0;

    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                    ) { return false; }
        if ( ( functionData = createContexts( "getgroups" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        iterate ( int j = 1; j <= 5; j++; )
        {
            List * list = create_List( & type_GidTObj );
            int listSize;
            ProcessState * processState = getProcessState_CallContext( * contextObj );
            int k;
            switch ( j ) {
                case 1: listSize = 0                                                              ;   break;
             // case 2: listSize = getSystemConfigurationValue( * contextObj, SUT_SC_NGROUPS_MAX );   break;
                case 2: listSize = 100                                                            ;   break; // for speed
                case 3: listSize = size_List( processState->meta.groups ) + shift - 1             ;   break;
                case 4: listSize = size_List( processState->meta.groups ) + shift - 2             ;   break;
                case 5: listSize = size_List( processState->meta.groups ) + shift                 ;   break;
            }
            for ( k = 0; k < listSize ; k++ ) { append_List( list, create_GidTObj( k ) ); }
            dotPrint( 10, 50 );
            getgroups_spec( * contextObj, listSize, list, requestErrorCode() );
        }
    }
    return true;
}

scenario
bool getuid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                 ) { return false; }
        if ( ( functionData = createContexts( "getuid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        dotPrint( 10, 50 );
        getuid_spec( * contextObj );
    }
    return true;
}

scenario
bool initgroups_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                     ) { return false; }
        if ( ( functionData = createContexts( "initgroups" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        SystemState * systemState = getSystemState_CallContext( context );
        iterate ( int j = 0; j < size_Set( systemState->globalUsers ); j++; )
        {
            Passwd * user = get_Set( systemState->globalUsers, j );
            dotPrint( 10, 50 );
            initgroups_spec( * contextObj, user->pw_name, user->pw_gid, requestErrorCode() );
        }
    }
    return true;
}

scenario
bool setegid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                            ) { return false; }
        if ( ( functionData = createFunctionDataForGid( "setegid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        GidTObj     * gidObj     = get_Map( pars, create_String( "gid"     ) );
        dotPrint( 10, 50 );
        setegid_spec( * contextObj, * gidObj, requestErrorCode() );
    }
    return true;
}

scenario
bool seteuid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                            ) { return false; }
        if ( ( functionData = createFunctionDataForUid( "seteuid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        UidTObj     * uidObj     = get_Map( pars, create_String( "uid"     ) );
        dotPrint( 10, 50 );
        seteuid_spec( * contextObj, * uidObj, requestErrorCode() );
    }
    return true;
}

scenario
bool setgid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                           ) { return false; }
        if ( ( functionData = createFunctionDataForGid( "setgid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        GidTObj     * gidObj     = get_Map( pars, create_String( "gid"     ) );
        dotPrint( 10, 50 );
        setgid_spec( * contextObj, * gidObj, requestErrorCode() );
    }
    return true;
}

scenario
bool setgroups_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                    ) { return false; }
        if ( ( functionData = createContexts( "setgroups" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, i );
        iterate ( int j = 1; j <= 3; j++; )
        {
            List * list = create_List( & type_GidTObj );
            int listSize;
            ProcessState * processState = getProcessState_CallContext( * contextObj );
            int k;
            switch ( j ) {
                case 1: listSize = 0                                                              ;   break;
                case 2: listSize = 1                                                              ;   break;
             // case 3: listSize = getSystemConfigurationValue( * contextObj, SUT_SC_NGROUPS_MAX );   break;
                case 3: listSize = 100                                                            ;   break; // for speed
            }
            for ( k = 0; k < listSize ; k++ ) { append_List( list, create_GidTObj( k ) ); }
            dotPrint( 10, 50 );
            setgroups_spec( * contextObj, listSize, list, requestErrorCode() );
        }
    }
    return true;
}

scenario
bool setregid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                               ) { return false; }
        if ( ( functionData = createFunctionDataForGid12( "setregid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        GidTObj     * gidObj1    = get_Map( pars, create_String( "gid1"    ) );
        GidTObj     * gidObj2    = get_Map( pars, create_String( "gid2"    ) );
        dotPrint( 10, 50 );
        setregid_spec( * contextObj, * gidObj1, * gidObj2, requestErrorCode() );
    }
    return true;
}

scenario
bool setreuid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                               ) { return false; }
        if ( ( functionData = createFunctionDataForUid12( "setreuid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        UidTObj     * uidObj1    = get_Map( pars, create_String( "uid1"    ) );
        UidTObj     * uidObj2    = get_Map( pars, create_String( "uid2"    ) );
        dotPrint( 10, 50 );
        setreuid_spec( * contextObj, * uidObj1, * uidObj2, requestErrorCode() );
    }
    return true;
}

scenario
bool setuid_scen()
{
    static bool firstCall = true;
    if ( firstCall ) {
        firstCall = false;
        if ( ! terminate_processes( functionData )                           ) { return false; }
        if ( ( functionData = createFunctionDataForUid( "setuid" ) ) == NULL ) { return false; }
    }
    iterate ( int i = 0; i < size_List( functionData ); i++; )
    {
        Map * pars = get_List( functionData, i );
        ThreadIdObj * contextObj = get_Map( pars, create_String( "context" ) );
        UidTObj     * uidObj     = get_Map( pars, create_String( "uid"     ) );
        dotPrint( 10, 50 );
        setuid_spec( * contextObj, * uidObj, requestErrorCode() );
    }
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm process_meta_user_scenario =
{
   .init    = init_user_scenario  ,
   .finish  = finish_user_scenario,
   .actions = { cuserid_scen   ,
                getegid_scen   ,
                geteuid_scen   ,
                getgid_scen    ,
                getgroups_scen ,
                getuid_scen    ,
                initgroups_scen,
                setegid_scen   ,
                seteuid_scen   ,
                setgid_scen    ,
                setgroups_scen ,
                setregid_scen  ,
                setreuid_scen  ,
                setuid_scen    ,
                NULL
              }
};

#ifdef PROCESS_META_USER_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "process/meta/user_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initSystemSysconfSubsystem();
    initSystemUserSubsystem();

    initProcessMetaUserSubsystem();
}

bool main_process_meta_user( int argc, char** argv )
{
    addTraceToFile( "trace.xml_CTesK" );
    process_meta_user_scenario( argc, argv );
    return true;
}

int main( int argc, char** argv )
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    main_process_meta_user( argc, argv );

    //  unloadSUT();
    return 0;
}

#endif
