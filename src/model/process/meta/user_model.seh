/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_META_USER_MODEL_SEH
#define PROCESS_META_USER_MODEL_SEH

#include "common/common_model.seh"
#include "process/process/process_model.seh"
#include "data/errno_model.seh"
#include "data/sys/types_model.seh"
#include "config/system_config.seh"

/*
 * It is implementation-defined whether getgroups() also returns the effective
 * group ID in the grouplist array.
 */
#undef GETGROUPS_RETURNS_THE_EFFECTIVE_GROUP_ID_IN_THE_GROUPLIST_ARRAY

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cuserid_spec **/
specification
StringTPtr cuserid_spec( CallContext context, StringTPtr s );

/** getegid_spec **/
specification
GidT getegid_spec( CallContext context );

/** geteuid_spec **/
specification
UidT geteuid_spec( CallContext context );

/** getgid_spec **/
specification
GidT getgid_spec( CallContext context );

/** getgroups_spec **/
specification
IntT getgroups_spec( CallContext context, IntT gidsetsize, List * grouplist, ErrorCode * errno )
   updates grouplist
   writes  * errno
;

/** getuid_spec **/
specification
UidT getuid_spec( CallContext context );

/** initgroups_spec **/
specification
IntT initgroups_spec( CallContext context, CString * user, GidT group, ErrorCode * errno )
   reads  user
   writes * errno
;

/** setegid_spec **/
specification
IntT setegid_spec( CallContext context, GidT gid, ErrorCode * errno )
   writes * errno
;

/** seteuid_spec **/
specification
IntT seteuid_spec( CallContext context, UidT uid, ErrorCode * errno )
   writes * errno
;

/** setgid_spec **/
specification
IntT setgid_spec( CallContext context, GidT gid, ErrorCode * errno )
   writes * errno
;

/** setgroups_spec **/
specification
IntT setgroups_spec( CallContext context, SizeT size, List * list /* & type_GidTObj */, ErrorCode * errno )
   reads  list
   writes * errno
;

/** setregid_spec **/
specification
IntT setregid_spec( CallContext context, GidT rgid, GidT egid, ErrorCode * errno )
   writes * errno
;

/** setreuid_spec **/
specification
IntT setreuid_spec( CallContext context, UidT ruid, UidT euid, ErrorCode * errno )
   writes * errno
;

/** setuid_spec **/
specification
IntT setuid_spec( CallContext context, UidT uid, ErrorCode * errno )
   writes * errno
;


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

typedef enum PriorityCoverage { Priority_ReallyHigh = 0x01, Priority_ReallyLow = 0x02, Priority_Unknown = 0x04 }
                              PriorityCoverage;

PriorityCoverage ProcessPriorityCoverage( CallContext context );

typedef enum IdCoverage { Id_SkipValue     = 0x01,
                          Id_ReallyInvalid = 0x02,
                          Id_SavedSetId    = 0x04,
                          Id_RealId        = 0x08,
                          Id_EffectiveId   = 0x10,
                          Id_Unknown       = 0x20
                        } IdCoverage;

IdCoverage GidCoverage( CallContext context, GidT Id, const ProcessMetaInfo * meta, unsigned int AllowedResults );
IdCoverage UidCoverage( CallContext context, UidT Id, const ProcessMetaInfo * meta, unsigned int AllowedResults );

unsigned int DoubleCoverageSwitch( IdCoverage id_coverage, PriorityCoverage priority_coverage );

#define DoubleCoverageMark( Coverage1, Coverage2 ) case Coverage1##__##Coverage2:

#define DoubleCoverage( Id, IdCoverage, PriorityCoverage ) \
case IdCoverage << 8 | PriorityCoverage: \
return { IdCoverage##__##PriorityCoverage, "( Id, priority ) == ( " #IdCoverage ", " #PriorityCoverage " )" };

unsigned int TripleCoverageSwitch( IdCoverage id1_coverage, IdCoverage id2_coverage, PriorityCoverage priority_coverage );

#define TripleCoverageMark( Coverage1, Coverage2, Coverage3 ) case Coverage1##__##Coverage2##__##Coverage3:

#define TripleCoverage( Id1, Id1Coverage, Id2, Id2Coverage, PriorityCoverage ) \
case Id1Coverage << 16 | Id2Coverage << 8 | PriorityCoverage: \
return { Id1Coverage##__##Id2Coverage##__##PriorityCoverage, \
"( Id1, Id2, priority ) == ( " #Id1Coverage ", " #Id2Coverage ", " #PriorityCoverage " )" };


/* 
 * Makes sure the context has appropriate privileges in standard POSIX way.
 * Returns true on success.
 */
bool makeSureProcessHasRootPrivileges(CallContext context);


bool gidValueIsReallyInvalid( CallContext context, GidT gid );
bool uidValueIsReallyInvalid( CallContext context, UidT uid );

#endif
