/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_RESOURCES_MODEL_SEH
#define PROCESS_RESOURCES_MODEL_SEH

#include "common/common_model.seh"
#include "data/time_model.seh"

/************************************************************************/
/*                       Interface Data                                 */
/************************************************************************/

#define SUT_RLIM_INFINITY (~0UL)
#define SUT_RLIM_SAVED_CUR (-1UL)
#define SUT_RLIM_SAVED_MAX (-1UL)

/*
#define SUT_RLIM64_INFINITY (~ULL_CONST(0))
#define SUT_RLIM64_SAVED_CUR (ULL_CONST(-1))
#define SUT_RLIM64_SAVED_MAX (ULL_CONST(-1))
/**/
extern ULLongT SUT_RLIM64_INFINITY;
extern ULLongT SUT_RLIM64_SAVED_CUR;
extern ULLongT SUT_RLIM64_SAVED_MAX;

#define SUT_RUSAGE_SELF 0
#define SUT_RUSAGE_CHILDREN (-1)
#define SUT_RUSAGE_BOTH (-2)

#define SUT_RLIMIT_FSIZE 1

#define SUT_UL_GETFSIZE 1
#define SUT_UL_SETFSIZE 2

typedef ULongT RLimT;
typedef ULLongT RLim64T;

specification typedef struct RLimitT
{
  RLimT rlim_cur;
  RLimT rlim_max;
}RLimitT;

RLimitT * create_RLimitT
(
    RLimT rlim_cur,
    RLimT rlim_max
);

specification typedef struct RLimit64T
{
  RLim64T rlim_cur;
  RLim64T rlim_max;
}RLimit64T;

RLimit64T * create_RLimit64T
(
  RLim64T rlim_cur,
  RLim64T rlim_max
);

specification typedef struct RusageT
{
    TimeSpecT ru_utime;
    TimeSpecT ru_stime;
    LongT ru_maxrss;
    LongT ru_ixrss;
    LongT ru_idrss;
    LongT ru_isrss;
    LongT ru_minflt;
    LongT ru_majflt;
    LongT ru_nswap;
    LongT ru_inblock;
    LongT ru_oublock;
    LongT ru_msgsnd;
    LongT ru_msgrcv;
    LongT ru_nsignals;
    LongT ru_nvcsw;
    LongT ru_nivcsw;    
}RusageT;

RusageT * create_RusageT
(
    TimeSpecT ru_utime,
    TimeSpecT ru_stime,
    LongT ru_maxrss,
    LongT ru_ixrss,
    LongT ru_idrss,
    LongT ru_isrss,
    LongT ru_minflt,
    LongT ru_majflt,
    LongT ru_nswap,
    LongT ru_inblock,
    LongT ru_oublock,
    LongT ru_msgsnd,
    LongT ru_msgrcv,
    LongT ru_nsignals,
    LongT ru_nvcsw,
    LongT ru_nivcsw
);


/* [infinit value shall be represented as isNoLimit_.. = true]  */
/* [and corresponding rlim_.. shall be representedable as RLimT. (zero value for example)] */
specification typedef struct RSavedLimitT
{
  ULLongT rlim_cur;
  bool isNoLimit_cur; 
  ULLongT rlim_max;    
  bool isNoLimit_max;
}RSavedLimitT;

RSavedLimitT * create_RSavedLimitT(
  ULLongT rlim_cur,
  bool isNoLimit_cur, 
  ULLongT rlim_max,    
  bool isNoLimit_max
);

/************************************************************************/
/*                        Model Data                                    */
/************************************************************************/

extern Map * RSavedLimits; /* [IntTObj * resource -m-> RSavedLimitT * saved_lim] */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** getrlimit_spec **/
specification
IntT getrlimit_spec( CallContext context, IntT resource, RLimitT * rlp, ErrorCode * errno );

/** setrlimit_spec **/
specification
IntT setrlimit_spec( CallContext context, IntT resource, RLimitT * rlp, ErrorCode * errno );

/** getrusage_spec **/
specification
IntT getrusage_spec( CallContext context, IntT who, RusageT * r_usage, ErrorCode * errno);

/** getrlimit64_spec **/
specification
IntT getrlimit64_spec( CallContext context, IntT resource, RLimit64T * rlp, ErrorCode * errno);

/** setrlimit64_spec **/
//This specification refers to: setrlimit64, setrlimit
specification
IntT setrlimit64_spec( CallContext context, IntT resource, RLimit64T * rlp, ErrorCode * errno);

/** ulimit_spec **/
specification
LongT ulimit_spec( CallContext context, IntT cmd, List * params, ErrorCode * errno );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

RSavedLimitT * create_RSavedLimitT_RLimitT(RLimitT * rlp);
RSavedLimitT * create_RSavedLimitT_RLimit64T(RLimit64T * rlp);

RLimT toRLimT_RSavedLimitT(RSavedLimitT * saved_lim,int who);
RLim64T toRLim64T_RSavedLimitT(RSavedLimitT * saved_lim,int who);

int compare_RLimT(RLimT val1,RLimT val2);
int compare_RLim64T(RLim64T val1,RLim64T val2);

/* [Checks whether the process has enough privileges for increasing the 
 * corresponding hard limit] 
 */
bool isEnoughPrivilegesHardIncrease( CallContext context, IntT resource );

/* [Checks whether the value of type ULongT can be represented correctly
 *  in an object of type RLimT]
 * [Remember about invariant of RLimT]
 */
bool canBeRepresentedAsRLimT( ULLongT val );
bool canBeRepresentedAsRLim64T( ULLongT val );

bool init_resources_model(void);

bool is_correct_RLimT(RLimT val);
bool is_correct_RLim64T(RLim64T val);

bool is_correct_RLimitT(RLimitT * val);
bool is_correct_RLimit64T(RLimit64T * val);

#endif

