/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "config/system_config.seh"
#include "common/coverages.seh"
#include "data/stdlib_model.seh"
#include "data/sys/wait_model.seh"
#include "fs/dir/dir_model.seh"
#include "fs/meta/access_model.seh"
#include "math/math/math_data.seh"
#include "process/goto/goto_model.seh"
#include "process/fenv/fenv_model.seh"
#include "process/meta/user_model.seh"
#include "process/process/process_common.seh"
#include "process/process/process_model.seh"
#include "system/system/system_model.seh"

#pragma SEC subsystem goto "process.goto"

/*
   The group of functions 'process.goto' consists of:
       __sigsetjmp [1]
       _longjmp [1]
       _setjmp [1]
       longjmp [1]
       siglongjmp [2]
 */

specification typedef struct SigJmpBuf SigJmpBuf = {};
specification typedef struct JmpBuf    JmpBuf    = {};

SigJmpBuf * create_SigJmpBuf( int id, List /* CharTObj */ * data ) { return create( & type_SigJmpBuf, id, data ); }
JmpBuf    * create_JmpBuf   ( int id, List /* CharTObj */ * data ) { return create( & type_JmpBuf   , id, data ); }

SigJmpBuf * createEmpty_SigJmpBuf( int id ) { return create_SigJmpBuf( id, create_List( & type_CharTObj ) ); }
JmpBuf    * createEmpty_JmpBuf   ( int id ) { return create_JmpBuf   ( id, create_List( & type_CharTObj ) ); }

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    __sigsetjmp -- save stack context for non-local goto

SYNOPSIS

    int __sigsetjmp(jmp_buf env, int savemask);

DESCRIPTION

    __sigsetjmp() has the same behavior as sigsetjmp() as specified by ISO POSIX
    (2003).

    __sigsetjmp() is not in the source standard; it is only in the binary
    standard.

Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    sigsetjmp - set jump point for a non-local goto

SYNOPSIS

    #include <setjmp.h>
    int sigsetjmp(sigjmp_buf env, int savemask);

DESCRIPTION

    The sigsetjmp() function shall be equivalent to the setjmp() function,
    except as follows:

        References to setjmp() are equivalent to sigsetjmp().

        References to longjmp() are equivalent to siglongjmp().

        If the value of the savemask argument is not 0, sigsetjmp() shall also
        save the current signal mask of the calling thread as part of the
        calling environment.

RETURN VALUE

    If the return is from a successful direct invocation, sigsetjmp() shall
    return 0. If the return is from a call to siglongjmp(), sigsetjmp() shall
    return a non-zero value.

ERRORS

    No errors are defined.
*/
specification
IntT __sigsetjmp_spec( CallContext context, SigJmpBuf * env, IntT savemask )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The entire controlling expression of a selection or iteration statement
         */
        REQ( "__sigsetjmp.02.01", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * One operand of a relational or equality operator with the other operand an
         * integral constant expression, with the resulting expression being the entire
         * controlling expression of a selection or iteration statement
         */
        REQ( "__sigsetjmp.02.02", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The operand of a unary '!' operator with the resulting expression being the
         * entire controlling expression of a selection or iteration
         */
        REQ( "__sigsetjmp.02.03", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The entire expression of an expression statement (possibly cast to void)
         */
        REQ( "__sigsetjmp.02.04", "", TODO_REQ() );

        return true;
    }
    coverage __sigsetjmp_coverage = CoverageForInteger_Middle( savemask, SUT_INT_MIN, 0, SUT_INT_MAX );
    post
    {
        /*
         * A call to setjmp() shall save the calling environment in its env argument for
         * later use by longjmp().
         *
         * References to setjmp() are equivalent to sigsetjmp().
         * References to longjmp() are equivalent to siglongjmp().
         */
        REQ( "__sigsetjmp.01", "setjmp() save the calling environment in env argument", size_List( env->data ) != 0 );

        /*
         * The sigsetjmp() function shall be equivalent to the setjmp() function, except
         * as follows:
         *
         * If the value of the savemask argument is not 0, sigsetjmp() shall also save the
         * current signal mask of the calling thread as part of the calling environment.
         */
        REQ( "__sigsetjmp.07.01", "", TODO_REQ() );

        /*
         * If the return is from a successful direct invocation, sigsetjmp() shall return
         * 0. If the return is from a call to siglongjmp(), sigsetjmp() shall return a non-
         * zero value.
         */
        REQ( "__sigsetjmp.04", "sigsetjmp() shall return 0 from a direct invocation", __sigsetjmp_spec == 0 );

        /*
         * __sigsetjmp() has the same behavior as sigsetjmp() as specified by ISO
         * POSIX (2003).
         */
        REQ( "__sigsetjmp.30", "__sigsetjmp() has the same behavior as sigsetjmp()", GENERAL_REQ( "__sigsetjmp.*" ) );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    _longjmp, _setjmp - non-local goto

SYNOPSIS

    #include <setjmp.h>
    void _longjmp(jmp_buf env, int val);
    int _setjmp(jmp_buf env);

DESCRIPTION

    The _longjmp() and _setjmp() functions shall be equivalent to longjmp() and
    setjmp(), respectively, with the additional restriction that _longjmp() and
    _setjmp() shall not manipulate the signal mask.

    If _longjmp() is called even though env was never initialized by a call to
    _setjmp(), or when the last such call was in a function that has since
    returned, the results are undefined.

RETURN VALUE

    Refer to longjmp() and setjmp().
*/
specification
IntT _longjmp_spec( CallContext context, JmpBuf * env, IntT val )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * If _longjmp() is called even though env was never initialized by a call to
         * _setjmp(), or when the last such call was in a function that has since
         * returned, the results are undefined.
         */
        REQ( "app._longjmp.01", "env was never initialized", size_List( env->data ) != 0 );

        /*
         * However, if longjmp() is invoked from a nested signal handler (that is, from a
         * function invoked as a result of a signal raised during the handling of another
         * signal), the behavior is undefined.
         */
        REQ( "app._longjmp.02", "", TODO_REQ() );

        /*
         * The effect of a call to longjmp() where initialization of the jmp_buf structure
         * was not performed in the calling thread is undefined.
         */
        REQ( "app._longjmp.03", "", TODO_REQ() );

        return true;
    }
    coverage _longjmp_coverage = CoverageForInteger_Middle( val, SUT_INT_MIN, 0, SUT_INT_MAX );
    post
    {
        /*
         * The longjmp() function shall restore the environment saved by the most recent
         * invocation of setjmp() in the same thread, with the corresponding jmp_buf
         * argument.
         */
        REQ( "_longjmp.01", "longjmp() restore the environment saved by setjmp()", true );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are local to the function containing the corresponding setjmp()
         * invocation.
         */
        REQ( "_longjmp.02.01", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They do not have volatile-qualified type.
         */
        REQ( "_longjmp.02.02", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are changed between the setjmp() invocation and longjmp() call.
         */
        REQ( "_longjmp.02.03", "", TODO_REQ() );

        /*
         * As it bypasses the usual function call and return mechanisms, longjmp() shall
         * execute correctly in contexts of interrupts, signals, and any of their
         * associated functions.
         */
        REQ( "_longjmp.03", "", TODO_REQ() );

        /*
         * After longjmp() is completed, program execution continues as if the
         * corresponding invocation of setjmp() had just returned the value specified by
         * val.
         */
        REQ( "_longjmp.04", "program execution continues as if the setjmp() had just returned", true );

        /*
         * The longjmp() function shall not cause setjmp() to return 0; if val is 0,
         * setjmp() shall return 1.
         *
         * If the return is from a call to longjmp(), setjmp() shall return a non-zero
         * value.
         */
        REQ( "_longjmp.05", "longjmp() shall not cause setjmp() to return 0; if val is 0, setjmp() shall return 1",
                            _longjmp_spec == ( val == 0 ? 1 : val )
           );

        /*
         * The _longjmp() and _setjmp() functions shall be equivalent to longjmp() and
         * setjmp(), respectively, with the additional restriction that _longjmp() and
         * _setjmp() shall not manipulate the signal mask.
         */
        REQ( "_longjmp.06", "", TODO_REQ() );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    _longjmp, _setjmp - non-local goto

SYNOPSIS

    #include <setjmp.h>
    void _longjmp(jmp_buf env, int val);
    int _setjmp(jmp_buf env);

DESCRIPTION

    The _longjmp() and _setjmp() functions shall be equivalent to longjmp() and
    setjmp(), respectively, with the additional restriction that _longjmp() and
    _setjmp() shall not manipulate the signal mask.

    If _longjmp() is called even though env was never initialized by a call to
    _setjmp(), or when the last such call was in a function that has since
    returned, the results are undefined.

RETURN VALUE

    Refer to longjmp() and setjmp().

Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    setjmp - set jump point for a non-local goto

SYNOPSIS

    #include <setjmp.h>
    int setjmp(jmp_buf env);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO C
    standard. Any conflict between the requirements described here and the ISO C
    standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to the
    ISO C standard.

    A call to setjmp() shall save the calling environment in its env argument
    for later use by longjmp().

    It is unspecified whether setjmp() is a macro or a function. If a macro
    definition is suppressed in order to access an actual function, or a program
    defines an external identifier with the name setjmp, the behavior is
    undefined.

    An application shall ensure that an invocation of setjmp() appears in one of
    the following contexts only:

        The entire controlling expression of a selection or iteration statement

        One operand of a relational or equality operator with the other operand
        an integral constant expression, with the resulting expression being the
        entire controlling expression of a selection or iteration statement

        The operand of a unary '!' operator with the resulting expression being
        the entire controlling expression of a selection or iteration

        The entire expression of an expression statement (possibly cast to void)

    If the invocation appears in any other context, the behavior is undefined.

RETURN VALUE

    If the return is from a direct invocation, setjmp() shall return 0. If the
    return is from a call to longjmp(), setjmp() shall return a non-zero value.

ERRORS

    No errors are defined.
*/
specification
IntT _setjmp_spec( CallContext context, JmpBuf * env )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The entire controlling expression of a selection or iteration statement
         */
        REQ( "_setjmp.02.01", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * One operand of a relational or equality operator with the other operand an
         * integral constant expression, with the resulting expression being the entire
         * controlling expression of a selection or iteration statement
         */
        REQ( "_setjmp.02.02", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The operand of a unary '!' operator with the resulting expression being the
         * entire controlling expression of a selection or iteration
         */
        REQ( "_setjmp.02.03", "", TODO_REQ() );

        /*
         * An application shall ensure that an invocation of setjmp() appears in one of
         * the following contexts only:
         *
         * The entire expression of an expression statement (possibly cast to void)
         */
        REQ( "_setjmp.02.04", "", TODO_REQ() );

        return true;
    }
    post
    {
        /*
         * A call to setjmp() shall save the calling environment in its env argument for
         * later use by longjmp().
         */
        REQ( "_setjmp.01", "setjmp() save the calling environment in env argument", size_List( env->data ) != 0 );

        /*
         * If the return is from a direct invocation, setjmp() shall return 0. If the
         * return is from a call to longjmp(), setjmp() shall return a non-zero value.
         */
        REQ( "_setjmp.04", "setjmp() shall return 0 from a direct invocation", _setjmp_spec == 0 );

        /*
         * The _longjmp() and _setjmp() functions shall be equivalent to longjmp() and
         * setjmp(), respectively, with the additional restriction that _longjmp() and
         * _setjmp() shall not manipulate the signal mask.
         */
        REQ( "_setjmp.06", "", TODO_REQ() );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    longjmp - non-local goto

SYNOPSIS

#include <setjmp.h>

    void longjmp(jmp_buf env, int val);

DESCRIPTION

    The functionality described on this reference page is aligned with the ISO C
    standard. Any conflict between the requirements described here and the ISO C
    standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to the
    ISO C standard.

    The longjmp() function shall restore the environment saved by the most
    recent invocation of setjmp() in the same thread, with the corresponding
    jmp_buf argument. If there is no such invocation, or if the function
    containing the invocation of setjmp() has terminated execution in the
    interim, or if the invocation of setjmp() was within the scope of an
    identifier with variably modified type and execution has left that scope in
    the interim, the behavior is undefined. It is unspecified whether longjmp()
    restores the signal mask, leaves the signal mask unchanged, or restores it
    to its value at the time setjmp() was called.

    All accessible objects have values, and all other components of the abstract
    machine have state (for example, floating-point status flags and open
    files), as of the time longjmp() was called, except that the values of
    objects of automatic storage duration are unspecified if they meet all the
    following conditions:

        They are local to the function containing the corresponding setjmp()
        invocation.

        They do not have volatile-qualified type.

        They are changed between the setjmp() invocation and longjmp() call.

    As it bypasses the usual function call and return mechanisms, longjmp()
    shall execute correctly in contexts of interrupts, signals, and any of their
    associated functions. However, if longjmp() is invoked from a nested signal
    handler (that is, from a function invoked as a result of a signal raised
    during the handling of another signal), the behavior is undefined.

    The effect of a call to longjmp() where initialization of the jmp_buf
    structure was not performed in the calling thread is undefined.

RETURN VALUE

    After longjmp() is completed, program execution continues as if the
    corresponding invocation of setjmp() had just returned the value specified
    by val. The longjmp() function shall not cause setjmp() to return 0; if val
    is 0, setjmp() shall return 1.

ERRORS

    No errors are defined.
*/
specification
IntT longjmp_spec( CallContext context, JmpBuf * env, IntT val )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * If there is no such invocation, or if the function containing the invocation
         * of setjmp() has terminated execution in the interim, or if the invocation of
         * setjmp() was within the scope of an identifier with variably modified type and
         * execution has left that scope in the interim, the behavior is undefined.
         */
        REQ( "app.longjmp.01", "", TODO_REQ() );

        /*
         * However, if longjmp() is invoked from a nested signal handler (that is, from a
         * function invoked as a result of a signal raised during the handling of another
         * signal), the behavior is undefined.
         */
        REQ( "app.longjmp.02", "", TODO_REQ() );

        /*
         * The effect of a call to longjmp() where initialization of the jmp_buf structure
         * was not performed in the calling thread is undefined.
         */
        REQ( "app.longjmp.03", "", TODO_REQ() );

        return true;
    }
    coverage longjmp_coverage = CoverageForInteger_Middle( val, SUT_INT_MIN, 0, SUT_INT_MAX );
    post
    {
        /*
         * The longjmp() function shall restore the environment saved by the most recent
         * invocation of setjmp() in the same thread, with the corresponding jmp_buf
         * argument.
         */
        REQ( "longjmp.01", "longjmp() restore the environment saved by setjmp()", true );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are local to the function containing the corresponding setjmp()
         * invocation.
         */
        REQ( "longjmp.02.01", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They do not have volatile-qualified type.
         */
        REQ( "longjmp.02.02", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are changed between the setjmp() invocation and longjmp() call.
         */
        REQ( "longjmp.02.03", "", TODO_REQ() );

        /*
         * As it bypasses the usual function call and return mechanisms, longjmp() shall
         * execute correctly in contexts of interrupts, signals, and any of their
         * associated functions.
         */
        REQ( "longjmp.03", "", TODO_REQ() );

        /*
         * After longjmp() is completed, program execution continues as if the
         * corresponding invocation of setjmp() had just returned the value specified by
         * val.
         */
        REQ( "longjmp.04", "program execution continues as if the setjmp() had just returned", true );

        /*
         * The longjmp() function shall not cause setjmp() to return 0; if val is 0,
         * setjmp() shall return 1.
         *
         * If the return is from a call to longjmp(), setjmp() shall return a non-zero
         * value.
         */
        REQ( "longjmp.05", "longjmp() shall not cause setjmp() to return 0; if val is 0, setjmp() shall return 1",
                           longjmp_spec == ( val == 0 ? 1 : val )
           );

        /*
         * It is unspecified whether longjmp() restores the signal mask, leaves the signal
         * mask unchanged, or restores it to its value at the time setjmp() was called.
         */
        REQ( "longjmp.06", "", TODO_REQ() );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    siglongjmp - non-local goto with signal handling

SYNOPSIS

    #include <setjmp.h>
    void siglongjmp(sigjmp_buf env, int val);

DESCRIPTION

    The siglongjmp() function shall be equivalent to the longjmp() function,
    except as follows:

        References to setjmp() shall be equivalent to sigsetjmp().

        The siglongjmp() function shall restore the saved signal mask if and
        only if the env argument was initialized by a call to sigsetjmp() with a
        non-zero savemask argument.

RETURN VALUE

    After siglongjmp() is completed, program execution shall continue as if the
    corresponding invocation of sigsetjmp() had just returned the value
    specified by val. The siglongjmp() function shall not cause sigsetjmp() to
    return 0; if val is 0, sigsetjmp() shall return the value 1.

ERRORS

    No errors are defined.
*/
specification
IntT siglongjmp_spec( CallContext context, SigJmpBuf * env, IntT val )
{
    pre
    {
        ProcessState * process_state = getProcessState_CallContext( context );

        /* [Consistency of test suite] */
        REQ( "", "Process state exists", process_state != NULL );

        /*
         * If there is no such invocation, or if the function containing the invocation
         * of setjmp() has terminated execution in the interim, or if the invocation of
         * setjmp() was within the scope of an identifier with variably modified type and
         * execution has left that scope in the interim, the behavior is undefined.
         */
        REQ( "app.siglongjmp.01", "", TODO_REQ() );

        /*
         * References to setjmp() shall be equivalent to sigsetjmp().
         */
        REQ( "app.siglongjmp.01", "", TODO_REQ() );

        /*
         * However, if longjmp() is invoked from a nested signal handler (that is, from a
         * function invoked as a result of a signal raised during the handling of another
         * signal), the behavior is undefined.
         */
        REQ( "app.siglongjmp.02", "", TODO_REQ() );

        /*
         * The effect of a call to longjmp() where initialization of the jmp_buf structure
         * was not performed in the calling thread is undefined.
         */
        REQ( "app.siglongjmp.03", "", TODO_REQ() );

        return true;
    }
    coverage siglongjmp_coverage = CoverageForInteger_Middle( val, SUT_INT_MIN, 0, SUT_INT_MAX );
    post
    {
        /*
         * The longjmp() function shall restore the environment saved by the most recent
         * invocation of setjmp() in the same thread, with the corresponding jmp_buf
         * argument.
         */
        REQ( "siglongjmp.01", "longjmp() restore the environment saved by setjmp()", true );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are local to the function containing the corresponding setjmp()
         * invocation.
         */
        REQ( "siglongjmp.02.01", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They do not have volatile-qualified type.
         */
        REQ( "siglongjmp.02.02", "", TODO_REQ() );

        /*
         * All accessible objects have values, and all other components of the abstract
         * machine have state (for example, floating-point status flags and open files),
         * as of the time longjmp() was called, except that the values of objects of
         * automatic storage duration are unspecified if they meet all the following
         * conditions:
         *
         * They are changed between the setjmp() invocation and longjmp() call.
         */
        REQ( "siglongjmp.02.03", "", TODO_REQ() );

        /*
         * As it bypasses the usual function call and return mechanisms, longjmp() shall
         * execute correctly in contexts of interrupts, signals, and any of their
         * associated functions.
         */
        REQ( "siglongjmp.03", "", TODO_REQ() );

        /*
         * After siglongjmp() is completed, program execution shall continue as if the
         * corresponding invocation of sigsetjmp() had just returned the value specified
         * by val.
         */
        REQ( "siglongjmp.04", "program execution continues as if the sigsetjmp() had just returned", true );

        /*
         * The siglongjmp() function shall not cause sigsetjmp() to return 0; if val is
         * 0, sigsetjmp() shall return the value 1.
         *
         * If the return is from a call to siglongjmp(), sigsetjmp() shall return a non-
         * zero value.
         */
        REQ( "siglongjmp.05",
             "siglongjmp() shall not cause sigsetjmp() to return 0; if val is 0, sigsetjmp() shall return 1",
             siglongjmp_spec == ( val == 0 ? 1 : val )
           );

        /*
         * The siglongjmp() function shall be equivalent to the longjmp() function,
         * except as follows:
         *
         * The siglongjmp() function shall restore the saved signal mask if and only if
         * the env argument was initialized by a call to sigsetjmp() with a non-zero
         * savemask argument.
         */
        REQ( "siglongjmp.07.01", "", TODO_REQ() );

        return true;
    }
}
