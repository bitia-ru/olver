/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_SCHEDULER_MODEL_SEH
#define PROCESS_SCHEDULER_MODEL_SEH

#include "common/common_model.seh"
#include "pthread/attr/attr_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                      Helper Data Types                         **/
/********************************************************************/

specification typedef struct SchedGetParamReturnType
{
    IntT funcRes;
    ShedParam* shParam;
}SchedGetParamReturnType;

SchedGetParamReturnType * create_SchedGetParamReturnType(
    IntT funcRes,
    ShedParam* shParam
);

specification typedef struct RRGetIntervalReturnType
{
    IntT          funcRes;
    TimeSpecTObj* interval;
}RRGetIntervalReturnType;

RRGetIntervalReturnType * create_RRGetIntervalReturnType(
    IntT          funcRes,
    TimeSpecTObj* interval
);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sched_get_priority_max_spec **/
//This specification refers to: sched_get_priority_min, sched_get_priority_max
specification
IntT sched_get_priority_min_max_spec( CallContext context, IntT policy, ErrorCode* errno, bool min);

/** sched_getparam_spec **/
specification
SchedGetParamReturnType* sched_getparam_spec( CallContext context, PidT pid, ErrorCode* errno);

/** sched_getscheduler_spec **/
specification
IntT sched_getscheduler_spec(CallContext context, PidT pid, ErrorCode* errno);

/** sched_rr_get_interval_spec **/
specification
RRGetIntervalReturnType* sched_rr_get_interval_spec( CallContext context, PidT pid, ErrorCode* errno);

/** sched_setparam_spec **/
specification
IntT sched_setparam_spec( CallContext context, PidT pid, ShedParam* param, ErrorCode* errno);

/** sched_setscheduler_spec **/
specification
IntT sched_setscheduler_spec( CallContext context, PidT pid, IntT policy, IntT* former_policy, ShedParam* param, ErrorCode* errno);

/** sched_yield_spec **/
specification
IntT sched_yield_spec( CallContext context, ErrorCode * errno );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

ProcessState * findProcessState_PidT(PidT pid_t);
BoolT isValid_Policy(IntT policy);
BoolT isValid_Priority(CallContext context, IntT policy, ProcessState* process_state, ShedParam* param);
BoolT isValid_MaxRepl(CallContext context, IntT max_repl);
BoolT isValid_LowPriority(CallContext context, IntT policy, ProcessState* process_state, ShedParam* param);
BoolT isValid_ReplPeriod_And_InitBudget(ShedParam* param);
BoolT isValid_SchedParam(CallContext context, IntT policy, ProcessState* process_state, ShedParam* param);
BoolT compareSchedParam(CallContext context, ShedParam* param1, ShedParam* param2);
BoolT isDefined_SporadicServer(CallContext context);

#endif

