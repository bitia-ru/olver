/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef PROCESS_MEDIA_SEH
#define PROCESS_MEDIA_SEH

#include "process/process/process_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initProcessProcessSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** common for exit group and return_from_main **/
mediator exitCalledProcess_return_media for reaction
ExitReturnType * exitCalledProcess_return( void );

mediator exit_processTerminated_media for reaction
ExitReturnType * exit_processTerminated( void );

/** _Exit_spec **/
mediator _Exit_media for specification
void _Exit_spec( CallContext context, IntT status );

/** __cxa_atexit_spec **/
mediator __cxa_atexit_media for specification
IntT __cxa_atexit_spec( CallContext context, CString * func, VoidTPtr arg, VoidTPtr dso_handle );

/** __libc_start_main_spec **/
mediator __libc_start_main_media for specification
IntT __libc_start_main_spec( CallContext context, CString * main, IntT argc, List /* CString */ * ubp_av,
                                                  CString * init, CString * fini, CString * rtld_fini,
                                                  VoidTPtr stack_end
                           );

/** __register_atfork_spec **/
mediator __register_atfork_media for specification
IntT __register_atfork_spec( CallContext context,
                             CString * prepare, CString * parent, CString * child, VoidTPtr __dso_handle
                           );

/** _exit_spec **/
mediator _exit_media for specification
void _exit_spec( CallContext context, IntT status );

/** abort_spec **/
mediator abort_media for specification
void abort_spec( CallContext context );

mediator abortCalledProcess_return_media for reaction
AbortReturnType * abortCalledProcess_return( void );

mediator abort_processTerminated_media for reaction
AbortReturnType * abort_processTerminated( void );

/** common for daemon, fork and vfork **/
mediator fork_return_media for reaction
ForkReturnType * fork_return( void );

mediator forkToChild_return_media for reaction
ForkReturnType * forkToChild_return( void );

/** daemon_spec **/
mediator daemon_media for specification
void daemon_spec( CallContext context, IntT nochdir, IntT noclose );

/** common for exec group **/
mediator execOldProcess_return_media for reaction
ExecReturnType * execOldProcess_return( void );

mediator execNewProcess_return_media for reaction
ExecReturnType * execNewProcess_return( void );

/** execl_spec **/
mediator execl_media for specification
void execl_spec( CallContext context, CString * path, List /* CString */ * argv );

/** execle_spec **/
mediator execle_media for specification
void execle_spec( CallContext context, CString * path, List /* CString */ * argv, List /* CString */ * envp );

/** execlp_spec **/
mediator execlp_media for specification
void execlp_spec( CallContext context, CString * file, List /* CString */ * argv );

/** execv_spec **/
mediator execv_media for specification
void execv_spec( CallContext context, CString * path, List /* CString */ * argv );

/** execve_spec **/
mediator execve_media for specification
void execve_spec( CallContext context, CString * path, List /* CString */ * argv, List /* CString */ * envp );

/** execvp_spec **/
mediator execvp_media for specification
void execvp_spec( CallContext context, CString * file, List /* CString */ * argv );

/** exit_spec **/
mediator exit_media for specification
void exit_spec( CallContext context, IntT status );

/** fork_spec **/
mediator fork_media for specification
void fork_spec( CallContext context );

/** forkpty_spec **/
mediator forkpty_media for specification
void forkpty_spec( CallContext context );

/** pclose_spec **/
mediator pclose_media for specification
void pclose_spec( CallContext context, FILETPtr stream );

mediator pclose_return_media for reaction
PcloseReturnType * pclose_return( void );

/** popen_spec **/
mediator popen_media for specification
void popen_spec( CallContext context, CString * Command, CString * mode );

mediator popen_return_media for reaction
PopenReturnType * popen_return( void );

/** return_from_main_spec **/
mediator return_from_main_media for specification
void return_from_main_spec( CallContext context, IntT status );

/** system_spec **/
mediator system_media for specification
IntT system_spec( CallContext context, CString *cmd, ErrorCode *errno );

/** vfork_spec **/
mediator vfork_media for specification
void vfork_spec( CallContext context, CString * funcName );

/** common for wait group **/
mediator wait_return_media for reaction
WaitReturnType * wait_return( void );

/** wait_spec **/
mediator wait_media for specification
void wait_spec( CallContext context, bool isStatLocNull );

/** wait4_spec **/
mediator wait4_media for specification
void wait4_spec( CallContext context, ProcessId pid, bool isStatLocNull, IntT options, bool isRusageNull );

/** waitpid_spec **/
mediator waitpid_media for specification
void waitpid_spec( CallContext context, ProcessId pid, bool isStatLocNull, IntT options );

#endif
