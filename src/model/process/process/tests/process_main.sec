/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/process/tests/process_main.seh"
#include "process/process/tests/process_scenario.seh"

bool main_process_process( int argc, char **argv )
{
    process_process___cxa_atexit_scenario     ( argc, argv );
    process_process___libc_start_main_scenario( argc, argv );
    process_process___register_atfork_scenario( argc, argv );
    process_process__Exit_scenario            ( argc, argv );
    process_process__exit_scenario            ( argc, argv );
    process_process_abort_scenario            ( argc, argv );
    process_process_daemon_scenario           ( argc, argv );
    process_process_execl_scenario            ( argc, argv );
    process_process_execlp_scenario           ( argc, argv );
    process_process_execle_scenario           ( argc, argv );
    process_process_execv_scenario            ( argc, argv );
    process_process_execve_scenario           ( argc, argv );
    process_process_execvp_scenario           ( argc, argv );
    process_process_exit_scenario             ( argc, argv );
    process_process_fork_scenario             ( argc, argv );
    process_process_forkpty_scenario          ( argc, argv );
    process_process_popen_pclose_scenario     ( argc, argv );
    process_process_return_from_main_scenario ( argc, argv );
    process_process_vfork_scenario            ( argc, argv );
    process_process_wait_scenario             ( argc, argv );
    process_process_wait4_scenario            ( argc, argv );
    process_process_waitpid_scenario          ( argc, argv );
    return true;
}
