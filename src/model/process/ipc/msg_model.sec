/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "process/ipc/msg_model.seh"
#include "process/ipc/msg_config.h"

#pragma SEC subsystem ipc "process.ipc"



/* 
   The group of functions 'process.ipc.msg' consists of: 
       msgctl [1]
       msgget [1]
       msgrcv [1]
       msgsnd [1]
 */



/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    msgctl - XSI message control operations

SYNOPSIS

    [XSI]  #include <sys/msg.h>
    int msgctl(int msqid, int cmd, struct msqid_ds *buf); 

DESCRIPTION

    The msgctl() function operates on XSI message queues (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.224, Message Queue).
    It is unspecified whether this function interoperates with the realtime 
    interprocess communication facilities defined in Realtime.

    The msgctl() function shall provide message control operations as specified
    by cmd. The following values for cmd, and the message control operations 
    they specify, are:

        IPC_STAT 

            Place the current value of each member of the msqid_ds data 
            structure associated with msqid into the structure pointed to by 
            buf. The contents of this structure are defined in <sys/msg.h>. 
            
        IPC_SET 

            Set the value of the following members of the msqid_ds data
            structure associated with msqid to the corresponding value found in
            the structure pointed to by buf: 

            msg_perm.uid
            msg_perm.gid
            msg_perm.mode
            msg_qbytes


            IPC_SET can only be executed by a process with appropriate
            privileges or that has an effective user ID equal to the value of 
            msg_perm.cuid or msg_perm.uid in the msqid_ds data structure 
            associated with msqid. Only a process with appropriate privileges 
            can raise the value of msg_qbytes.

        IPC_RMID 

            Remove the message queue identifier specified by msqid from the 
            system and destroy the message queue and msqid_ds data structure 
            associated with it. IPC_RMD can only be executed by a process with
            appropriate privileges or one that has an effective user ID equal 
            to the value of msg_perm.cuid or msg_perm.uid in the msqid_ds data
            structure associated with msqid. 

RETURN VALUE

    Upon successful completion, msgctl() shall return 0; otherwise, it shall 
    return -1 and set errno to indicate the error.

ERRORS

    The msgctl() function shall fail if:

        [EACCES] 
        The argument cmd is IPC_STAT and the calling process does not have read
        permission; see XSI Interprocess Communication. 

        [EINVAL] 
        The value of msqid is not a valid message queue identifier; or the 
        value of cmd is not a valid command. 

        [EPERM] 
        The argument cmd is IPC_RMID or IPC_SET and the effective user ID of 
        the calling process is not equal to that of a process with appropriate
        privileges and it is not equal to the value of msg_perm.cuid or 
        msg_perm.uid in the data structure associated with msqid. 

        [EPERM] 
        The argument cmd is IPC_SET, an attempt is being made to increase to 
        the value of msg_qbytes, and the effective user ID of the calling 
        process does not have appropriate privileges. 

*/
specification typedef struct IpcPerm IpcPerm = {};


specification typedef struct MsqidDs MsqidDs = {};

specification
IntT msgctl_spec( CallContext context, IntT msqid, MsgCtlCommand cmd, MsqidDs* buf, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * otherwise, it shall return -1 and set errno to indicate the error.
        */
        ERROR_BEGIN(POSIX_MSGCTL, "msgctl.04.02", msgctl_spec==-1, *errno)
            
        /*
        * The msgctl() function shall fail if:
        *
        * [EACCES] The argument cmd is IPC_STAT and the calling process does not have 
        * read permission; see XSI Interprocess Communication.
        */
        ERROR_SHALL(POSIX_MSGCTL, EACCES, "msgctl.05.01", TODO_ERR(EACCES) )
        
        /*
        * The msgctl() function shall fail if:
        *
        * [EINVAL] The value of msqid is not a valid message queue identifier; or the 
        * value of cmd is not a valid command.
        */
        ERROR_SHALL(POSIX_MSGCTL, EINVAL, "msgctl.05.02", TODO_ERR(EINVAL) )
        
        /*
        * The msgctl() function shall fail if:
        *
        * [EPERM] The argument cmd is IPC_RMID or IPC_SET and the effective user ID of 
        * the calling process is not equal to that of a process with appropriate 
        * privileges and it is not equal to the value of msg_perm.cuid or msg_perm.uid in 
        * the data structure associated with msqid.
        */
        /*
        * The msgctl() function shall fail if:
        *
        * [EPERM] The argument cmd is IPC_SET, an attempt is being made to increase to 
        * the value of msg_qbytes, and the effective user ID of the calling process does 
        * not have appropriate privileges.
        */
        ERROR_SHALL(POSIX_MSGCTL, EPERM, "msgctl.05.03;msgctl.05.04", 
        TODO_ERR(EPERM)
        )
        
        ERROR_END()


        /*
        * Upon successful completion, msgctl() shall return 0;
        */
        REQ("msgctl.04.01", "Function shall return zero", msgctl_spec==0);
        
        /*
        * It is unspecified whether this function interoperates with the realtime 
        * interprocess communication facilities defined in Realtime.
        */
        REQ("msgctl.02", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_STAT Place the current value of each member of the msqid_ds data structure 
        * associated with msqid into the structure pointed to by buf. The contents of 
        * this structure are defined in <sys/msg.h>.
        */
        REQ("msgctl.03.01", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_SET
        *
        * Set the value of the following members of the msqid_ds data structure 
        * associated with msqid to the corresponding value found in the structure pointed 
        * to by buf: msg_perm.uid msg_perm.gid msg_perm.mode msg_qbytes 
        
          
        */
        REQ("msgctl.03.02.01", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_SET
        *
        * IPC_SET can only be executed by a process with appropriate privileges or that 
        * has an effective user ID equal to the value of msg_perm.cuid or msg_perm.uid in 
        * the msqid_ds data structure associated with msqid.
        */
        REQ("msgctl.03.02.02", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_SET
        *
        * Only a process with appropriate privileges can raise the value of msg_qbytes.
        */
        REQ("msgctl.03.02.03", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_RMID
        *
        * Remove the message queue identifier specified by msqid from the system and 
        * destroy the message queue and msqid_ds data structure associated with it.
        */
        REQ("msgctl.03.03.01", "", TODO_REQ());
        
        /*
        * The msgctl() function shall provide message control operations as specified by 
        * cmd. The following values for cmd, and the message control operations they 
        * specify, are:
        *
        * IPC_RMID
        *
        * IPC_RMD can only be executed by a process with appropriate privileges or one 
        * that has an effective user ID equal to the value of msg_perm.cuid or msg_perm. 
        * uid in the msqid_ds data structure associated with msqid.
        */
        REQ("msgctl.03.03.02", "", TODO_REQ());
        
        
  

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    msgget - get the XSI message queue identifier

SYNOPSIS

    [XSI]  #include <sys/msg.h>
    int msgget(key_t key, int msgflg); 

DESCRIPTION

    The msgget() function operates on XSI message queues (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.224, Message Queue). 
    It is unspecified whether this function interoperates with the realtime 
    interprocess communication facilities defined in Realtime.

    The msgget() function shall return the message queue identifier associated
    with the argument key.

    A message queue identifier, associated message queue, and data structure 
    (see <sys/msg.h>), shall be created for the argument key if one of the 
    following is true:

        The argument key is equal to IPC_PRIVATE.

        The argument key does not already have a message queue identifier 
        associated with it, and (msgflg & IPC_CREAT) is non-zero.

    Upon creation, the data structure associated with the new message queue 
    identifier shall be initialized as follows:

        msg_perm.cuid, msg_perm.uid, msg_perm.cgid, and msg_perm.gid shall be 
        set equal to the effective user ID and effective group ID, 
        respectively, of the calling process.

        The low-order 9 bits of msg_perm.mode shall be set equal to the 
        low-order 9 bits of msgflg.

        msg_qnum, msg_lspid, msg_lrpid, msg_stime, and msg_rtime shall be set 
        equal to 0.

        msg_ctime shall be set equal to the current time.

        msg_qbytes shall be set equal to the system limit.

RETURN VALUE

    Upon successful completion, msgget() shall return a non-negative integer, 
    namely a message queue identifier. Otherwise, it shall return -1 and set
    errno to indicate the error.

ERRORS

    The msgget() function shall fail if:

        [EACCES] 
        A message queue identifier exists for the argument key, but operation 
        permission as specified by the low-order 9 bits of msgflg would not be 
        granted; see XSI Interprocess Communication. 

        [EEXIST] 
        A message queue identifier exists for the argument key but ((msgflg & 
        IPC_CREAT) && (msgflg & IPC_EXCL)) is non-zero. 

        [ENOENT] 
        A message queue identifier does not exist for the argument key and 
        (msgflg & IPC_CREAT) is 0. 

        [ENOSPC] 
        A message queue identifier is to be created but the system-imposed 
        limit on the maximum number of allowed message queue identifiers 
        system-wide would be exceeded. 
*/
specification
IntT msgget_spec( CallContext context, KeyT key, IntT msgflg, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * Otherwise, it shall return -1 and set errno to indicate the error.
        */
        ERROR_BEGIN(POSIX_MSGGET, "msgget.06.02", msgget_spec==-1, *errno)
            
        /*
        * The msgget() function shall fail if:
        *
        * [EACCES] A message queue identifier exists for the argument key, but 
        * operation permission as specified by the low-order 9 bits of msgflg would not 
        * be granted; see XSI Interprocess Communication.
        */
        ERROR_SHALL(POSIX_MSGGET, EACCES, "msgget.07.01", TODO_ERR(EACCES) )
        
        /*
        * The msgget() function shall fail if:
        *
        * [EEXIST] A message queue identifier exists for the argument key but ((msgflg & 
        * amp; IPC_CREAT) && (msgflg & IPC_EXCL)) is non-zero.
        */
        ERROR_SHALL(POSIX_MSGGET, EEXIST, "msgget.07.02", TODO_ERR(EEXIST) )
        
        /*
        * The msgget() function shall fail if:
        *
        * [ENOENT] A message queue identifier does not exist for the argument key and 
        * (msgflg & IPC_CREAT) is 0.
        */
        ERROR_SHALL(POSIX_MSGGET, ENOENT, "msgget.07.03", TODO_ERR(ENOENT) )
        
        /*
        * The msgget() function shall fail if:
        *
        * [ENOSPC] A message queue identifier is to be created but the system-imposed 
        * limit on the maximum number of allowed message queue identifiers system-wide 
        * would be exceeded.
        */
        ERROR_UNCHECKABLE(POSIX_MSGGET, ENOSPC, "msgget.07.04", "Can not check if space is left")
        
        ERROR_END()

        /*
        * Upon successful completion, msgget() shall return a non-negative integer, 
        * namely a message queue identifier.
        */
        /*
        * The msgget() function shall return the message queue identifier associated with 
        * the argument key.
        */
        REQ("msgget.06.01;msgget.03", "Non negative value shall be returned", msgget_spec>=0);
        
        /*
        * A message queue identifier, associated message queue, and data structure (see & 
        * lt;sys/msg.h>), shall be created for the argument key if one of the 
        * following is true:
        *
        * The argument key is equal to IPC_PRIVATE.
        */
        REQ("msgget.04.01", "", TODO_REQ());
        
        /*
        * A message queue identifier, associated message queue, and data structure (see & 
        * lt;sys/msg.h>), shall be created for the argument key if one of the 
        * following is true:
        *
        * The argument key does not already have a message queue identifier associated 
        * with it, and (msgflg & IPC_CREAT) is non-zero.
        */
        REQ("msgget.04.02", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new message queue 
        * identifier shall be initialized as follows:
        *
        * msg_perm.cuid, msg_perm.uid, msg_perm.cgid, and msg_perm.gid shall be set equal 
        * to the effective user ID and effective group ID, respectively, of the calling 
        * process.
        */
        REQ("msgget.05.01", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new message queue 
        * identifier shall be initialized as follows:
        *
        * The low-order 9 bits of msg_perm.mode shall be set equal to the low-order 9 
        * bits of msgflg.
        */
        REQ("msgget.05.02", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new message queue 
        * identifier shall be initialized as follows:
        *
        * msg_qnum, msg_lspid, msg_lrpid, msg_stime, and msg_rtime shall be set equal to 
        * 0.
        */
        REQ("msgget.05.03", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new message queue 
        * identifier shall be initialized as follows:
        *
        * msg_ctime shall be set equal to the current time.
        */
        REQ("msgget.05.04", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new message queue 
        * identifier shall be initialized as follows:
        *
        * msg_qbytes shall be set equal to the system limit.
        */
        REQ("msgget.05.05", "", TODO_REQ());

      

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    msgrcv - XSI message receive operation

SYNOPSIS

    [XSI]  #include <sys/msg.h>
    ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,
        int msgflg); 

DESCRIPTION

    The msgrcv() function operates on XSI message queues (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.224, Message Queue). 
    It is unspecified whether this function interoperates with the realtime 
    interprocess communication facilities defined in Realtime.

    The msgrcv() function shall read a message from the queue associated with 
    the message queue identifier specified by msqid and place it in the
    user-defined buffer pointed to by msgp.

    The application shall ensure that the argument msgp points to a 
    user-defined buffer that contains first a field of type long specifying the
    type of the message, and then a data portion that holds the data bytes of 
    the message. The structure below is an example of what this user-defined
    buffer might look like:

        struct mymsg {
            long    mtype;     // Message type. 
            char    mtext[1];  // Message text. 
        }


    The structure member mtype is the received message's type as specified by 
    the sending process.

    The structure member mtext is the text of the message.

    The argument msgsz specifies the size in bytes of mtext. The received 
    message shall be truncated to msgsz bytes if it is larger than msgsz and
    (msgflg & MSG_NOERROR) is non-zero. The truncated part of the message shall
    be lost and no indication of the truncation shall be given to the calling 
    process.

    If the value of msgsz is greater than {SSIZE_MAX}, the result is 
    implementation-defined.

    The argument msgtyp specifies the type of message requested as follows:

        If msgtyp is 0, the first message on the queue shall be received.

        If msgtyp is greater than 0, the first message of type msgtyp shall be 
        received.

        If msgtyp is less than 0, the first message of the lowest type that is 
        less than or equal to the absolute value of msgtyp shall be received.

    The argument msgflg specifies the action to be taken if a message of the desired type is not on the queue. These are as follows:

        If (msgflg & IPC_NOWAIT) is non-zero, the calling thread shall return
        immediately with a return value of -1 and errno set to [ENOMSG].

        If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend 
        execution until one of the following occurs:

            A message of the desired type is placed on the queue.

            The message queue identifier msqid is removed from the system; when
            this occurs, errno shall be set equal to [EIDRM] and -1 shall be 
            returned.

            The calling thread receives a signal that is to be caught; in this 
            case a message is not received and the calling thread resumes 
            execution in the manner prescribed in sigaction().

    Upon successful completion, the following actions are taken with respect to
    the data structure associated with msqid:

        msg_qnum shall be decremented by 1.

        msg_lrpid shall be set equal to the process ID of the calling process.

        msg_rtime shall be set equal to the current time.

RETURN VALUE   
 
    Upon successful completion, msgrcv() shall return a value equal to the 
    number of bytes actually placed into the buffer mtext. Otherwise, no 
    message shall be received, msgrcv() shall return (ssize_t)-1, and errno 
    shall be set to indicate the error.

ERRORS

    The msgrcv() function shall fail if:

        [E2BIG] 
        The value of mtext is greater than msgsz and (msgflg & MSG_NOERROR) is 
        0. 

        [EACCES] 
        Operation permission is denied to the calling process; see XSI 
        Interprocess Communication. 

        [EIDRM] 
        The message queue identifier msqid is removed from the system. 

        [EINTR] 
        The msgrcv() function was interrupted by a signal. 

        [EINVAL] 
        msqid is not a valid message queue identifier. 

        [ENOMSG] 
        The queue does not contain a message of the desired type and (msgflg & 
        IPC_NOWAIT) is non-zero. 
*/


specification typedef struct MsgRcvReturnType MsgRcvReturnType = {};

MsgRcvReturnType * create_MsgRcvReturnType(
    SSizeT funcRes,
    CByteArray* dataRecieved
)
{
    return create(&type_MsgRcvReturnType,
        funcRes,
        dataRecieved);
}

specification
MsgRcvReturnType* msgrcv_spec( CallContext context, IntT msqid, SizeT msgsz, LongT msgtyp, IntT msgflg, ErrorCode* errno)
{
    pre
    {
        /*
        * The application shall ensure that the argument msgp points to a user-defined 
        * buffer that contains first a field of type long specifying the type of the 
        * message, and then a data portion that holds the data bytes of the message.
        */
        REQ("app.msgrcv.04", "", TODO_REQ());
        
        /*
        * If the value of msgsz is greater than {SSIZE_MAX}, the result is implementation- 
        * defined.
        */
        REQ("app.msgrcv.08", "", TODO_REQ());
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * Otherwise, no message shall be received, msgrcv() shall return (ssize_t)-1, and 
         * errno shall be set to indicate the error.
         */
        ERROR_BEGIN(POSIX_MSGRCV, "msgrcv.12.02", msgrcv_spec->funcRes == -1, *errno)
            
        /*
        * The msgrcv() function shall fail if:
        *
        * [E2BIG] The value of mtext is greater than msgsz and (msgflg & MSG_NOERROR) 
        * is 0.
        */
        ERROR_SHALL(POSIX_MSGRCV, E2BIG, "msgrcv.13.01", TODO_ERR(E2BIG) )
        
        /*
        * The msgrcv() function shall fail if:
        *
        * [EACCES] Operation permission is denied to the calling process; see XSI 
        * Interprocess Communication.
        */
        ERROR_SHALL(POSIX_MSGRCV, EACCES, "msgrcv.13.02", TODO_ERR(EACCES) )
        
        /*
        * The msgrcv() function shall fail if:
        *
        * [EIDRM] The message queue identifier msqid is removed from the system.
        */
        ERROR_SHALL(POSIX_MSGRCV, EIDRM, "msgrcv.13.03", TODO_ERR(EIDRM) )
        
        /*
        * The msgrcv() function shall fail if:
        *
        * [EINTR] The msgrcv() function was interrupted by a signal.
        */
        ERROR_SHALL(POSIX_MSGRCV, EINTR, "msgrcv.13.04", TODO_ERR(EINTR) )
        
        /*
        * The msgrcv() function shall fail if:
        *
        * [EINVAL] msqid is not a valid message queue identifier.
        */
        ERROR_SHALL(POSIX_MSGRCV, EINVAL, "msgrcv.13.05", TODO_ERR(EINVAL) )
        
        /*
        * The msgrcv() function shall fail if:
        *
        * [ENOMSG] The queue does not contain a message of the desired type and (msgflg & 
        * amp; IPC_NOWAIT) is non-zero.
        */
        ERROR_SHALL(POSIX_MSGRCV, ENOMSG, "msgrcv.13.06", TODO_ERR(ENOMSG) )
        
        ERROR_END()

        /*
         * The msgrcv() function shall read a message from the queue associated with the 
         * message queue identifier specified by msqid and place it in the user-defined 
         * buffer pointed to by msgp.
         */
        REQ("msgrcv.03", "", TODO_REQ());

        /*
         * The argument msgsz specifies the size in bytes of mtext.
         */
        REQ("msgrcv.05", "", TODO_REQ());

        /*
         * The received message shall be truncated to msgsz bytes if it is larger than 
         * msgsz and (msgflg & MSG_NOERROR) is non-zero.
         */
        REQ("msgrcv.06", "", TODO_REQ());

        /*
         * The truncated part of the message shall be lost and no indication of the 
         * truncation shall be given to the calling process.
         */
        REQ("msgrcv.07", "", TODO_REQ());

        /*
         * The argument msgtyp specifies the type of message requested as follows:
         *
         * If msgtyp is 0, the first message on the queue shall be received.
         */
        REQ("msgrcv.09.01", "", TODO_REQ());

        /*
         * The argument msgtyp specifies the type of message requested as follows:
         *
         * If msgtyp is greater than 0, the first message of type msgtyp shall be received.
         */
        REQ("msgrcv.09.02", "", TODO_REQ());

        /*
         * The argument msgtyp specifies the type of message requested as follows:
         *
         * If msgtyp is less than 0, the first message of the lowest type that is less 
         * than or equal to the absolute value of msgtyp shall be received.
         */
        REQ("msgrcv.09.03", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if a message of the 
         * desired type is not on the queue. These are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is non-zero, the calling thread shall return 
         * immediately with a return value of -1 and errno set to [ENOMSG].
         */
        REQ("msgrcv.10.01", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if a message of the 
         * desired type is not on the queue. These are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * A message of the desired type is placed on the queue.
         */
        REQ("msgrcv.10.02.01", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if a message of the 
         * desired type is not on the queue. These are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * The message queue identifier msqid is removed from the system; when this 
         * occurs, errno shall be set equal to [EIDRM] and -1 shall be returned.
         */
        REQ("msgrcv.10.02.02", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if a message of the 
         * desired type is not on the queue. These are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * The calling thread receives a signal that is to be caught; in this case a 
         * message is not received and the calling thread resumes execution in the manner 
         * prescribed in sigaction().
         */
        REQ("msgrcv.10.02.03", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid:
         *
         * msg_qnum shall be decremented by 1.
         */
        REQ("msgrcv.11.01", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid:
         *
         * msg_lrpid shall be set equal to the process ID of the calling process.
         */
        REQ("msgrcv.11.02", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid:
         *
         * msg_rtime shall be set equal to the current time.
         */
        REQ("msgrcv.11.03", "", TODO_REQ());

        /*
         * Upon successful completion, msgrcv() shall return a value equal to the number 
         * of bytes actually placed into the buffer mtext.
         */
        REQ("msgrcv.12.01", "", TODO_REQ());


       


        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    msgsnd - XSI message send operation

SYNOPSIS

    [XSI]  #include <sys/msg.h>
    int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); 

DESCRIPTION

    The msgsnd() function operates on XSI message queues (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.224, Message Queue). 
    It is unspecified whether this function interoperates with the realtime 
    interprocess communication facilities defined in Realtime.

    The msgsnd() function shall send a message to the queue associated with the
    message queue identifier specified by msqid.

    The application shall ensure that the argument msgp points to a 
    user-defined buffer that contains first a field of type long specifying the
    type of the message, and then a data portion that holds the data bytes of 
    the message. The structure below is an example of what this user-defined 
    buffer might look like:

        struct mymsg {
            long   mtype;       // Message type. 
            char   mtext[1];    // Message text. 
        }

    The structure member mtype is a non-zero positive type long that can be 
    used by the receiving process for message selection.

    The structure member mtext is any text of length msgsz bytes. The argument 
    msgsz can range from 0 to a system-imposed maximum.

    The argument msgflg specifies the action to be taken if one or more of the
    following is true:

    The number of bytes already on the queue is equal to msg_qbytes; see 
    <sys/msg.h>.

    The total number of messages on all queues system-wide is equal to the 
    system-imposed limit.

    These actions are as follows:

        If (msgflg & IPC_NOWAIT) is non-zero, the message shall not be sent and
        the calling thread shall return immediately.

        If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend 
        execution until one of the following occurs:

            The condition responsible for the suspension no longer exists, in 
            which case the message is sent.

            The message queue identifier msqid is removed from the system; when
            this occurs, errno shall be set equal to [EIDRM] and -1 shall be 
            returned.

            The calling thread receives a signal that is to be caught; in this 
            case the message is not sent and the calling thread resumes 
            execution in the manner prescribed in sigaction().

    Upon successful completion, the following actions are taken with respect to
    the data structure associated with msqid; see <sys/msg.h>:

        msg_qnum shall be incremented by 1.

        msg_lspid shall be set equal to the process ID of the calling process.

        msg_stime shall be set equal to the current time.

RETURN VALUE

    Upon successful completion, msgsnd() shall return 0;otherwise, no message 
    shall be sent, msgsnd() shall return -1, and errno shall be set to indicate
    the error.

ERRORS

    The msgsnd() function shall fail if:

    [EACCES] 
    Operation permission is denied to the calling process; see XSI Interprocess
    Communication. 

    [EAGAIN] 
    The message cannot be sent for one of the reasons cited above and 
    (msgflg & IPC_NOWAIT) is non-zero. 

    [EIDRM] 
    The message queue identifier msqid is removed from the system. 

    [EINTR] 
    The msgsnd() function was interrupted by a signal. 

    [EINVAL] 
    The value of msqid is not a valid message queue identifier, or the value of
    mtype is less than 1; or the value of msgsz is less than 0 or greater than 
    the system-imposed limit. 
*/

specification
IntT msgsnd_spec( CallContext context, IntT msgid, LongT mtype, CByteArray* mtext, IntT msgflag, ErrorCode* errno)
{
    pre
    {
        /*
        * The application shall ensure that the argument msgp points to a user-defined 
        * buffer that contains first a field of type long specifying the type of the 
        * message, and then a data portion that holds the data bytes of the message.
        */
        REQ("app.msgsnd.04", "", TODO_REQ());
        
        

        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        
        /*
         * otherwise, no message shall be sent, msgsnd() shall return -1, and errno shall 
         * be set to indicate the error.
         */
        ERROR_BEGIN(POSIX_MSGSEND, "msgsnd.09.02", msgsnd_spec==-1, *errno)
            
        /*
        * The msgsnd() function shall fail if:
        *
        * [EACCES] Operation permission is denied to the calling process; see XSI 
        * Interprocess Communication.
        */
        ERROR_SHALL(POSIX_MSGSEND, EACCES, "msgsnd.10.01", TODO_ERR(EACCES) )
        
        /*
        * The msgsnd() function shall fail if:
        *
        * [EAGAIN] The message cannot be sent for one of the reasons cited above and 
        * (msgflg & IPC_NOWAIT) is non-zero.
        */
        ERROR_SHALL(POSIX_MSGSEND, EAGAIN, "msgsnd.10.02", TODO_ERR(EAGAIN) )
        
        /*
        * The msgsnd() function shall fail if:
        *
        * [EIDRM] The message queue identifier msqid is removed from the system.
        */
        ERROR_SHALL(POSIX_MSGSEND, EIDRM, "msgsnd.10.03", TODO_ERR(EIDRM) )
        
        /*
        * The msgsnd() function shall fail if:
        *
        * [EINTR] The msgsnd() function was interrupted by a signal.
        */
        ERROR_SHALL(POSIX_MSGSEND, EINTR, "msgsnd.10.04", TODO_ERR(EINTR) )
        
        /*
        * The msgsnd() function shall fail if:
        *
        * [EINVAL] The value of msqid is not a valid message queue identifier, or the 
        * value of mtype is less than 1; or the value of msgsz is less than 0 or greater 
        * than the system-imposed limit.
        */
        ERROR_SHALL(POSIX_MSGSEND, EINVAL, "msgsnd.10.05", TODO_ERR(EINVAL) )
        
        ERROR_END()

        /*
         * The msgsnd() function shall send a message to the queue associated with the 
         * message queue identifier specified by msqid.
         */
        REQ("msgsnd.03", "", TODO_REQ());

        /*
         * The argument msgsz can range from 0 to a system-imposed maximum.
         */
        REQ("msgsnd.05", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if one or more of the 
         * following is true:
         *
         * The number of bytes already on the queue is equal to msg_qbytes; see <sys/ 
         * msg.h>.
         */
        REQ("msgsnd.06.01", "", TODO_REQ());

        /*
         * The argument msgflg specifies the action to be taken if one or more of the 
         * following is true:
         *
         * The total number of messages on all queues system-wide is equal to the system- 
         * imposed limit.
         */
        REQ("msgsnd.06.02", "", TODO_REQ());

        /*
         * These actions are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is non-zero, the message shall not be sent and the 
         * calling thread shall return immediately.
         */
        REQ("msgsnd.07.01", "", TODO_REQ());

        /*
         * These actions are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * The condition responsible for the suspension no longer exists, in which case 
         * the message is sent.
         */
        REQ("msgsnd.07.02.01", "", TODO_REQ());

        /*
         * These actions are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * The message queue identifier msqid is removed from the system; when this 
         * occurs, errno shall be set equal to [EIDRM] and -1 shall be returned.
         */
        REQ("msgsnd.07.02.02", "", TODO_REQ());

        /*
         * These actions are as follows:
         *
         * If (msgflg & IPC_NOWAIT) is 0, the calling thread shall suspend execution 
         * until one of the following occurs:
         *
         * The calling thread receives a signal that is to be caught; in this case the 
         * message is not sent and the calling thread resumes execution in the manner 
         * prescribed in sigaction().
         */
        REQ("msgsnd.07.02.03", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid; see <sys/msg.h>:
         *
         * msg_qnum shall be incremented by 1.
         */
        REQ("msgsnd.08.01", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid; see <sys/msg.h>:
         *
         * msg_lspid shall be set equal to the process ID of the calling process.
         */
        REQ("msgsnd.08.02", "", TODO_REQ());

        /*
         * Upon successful completion, the following actions are taken with respect to the 
         * data structure associated with msqid; see <sys/msg.h>:
         *
         * msg_stime shall be set equal to the current time.
         */
        REQ("msgsnd.08.03", "", TODO_REQ());

        /*
         * Upon successful completion, msgsnd() shall return 0;
         */
        REQ("msgsnd.09.01", "", TODO_REQ());


       
        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/


IpcPerm* create_IpcPerm(UidT uid, GidT gid, UidT cuid, GidT cgid, FilePermissions* mode)
{
    return create(&type_IpcPerm, uid, gid, cuid, cgid, mode);
}

MsqidDs* create_MsqidDs(IpcPerm* msg_perm, MsgNumT msg_qnum, MsgLenT msg_qbytes, PidT msg_lspid, 
                        PidT msg_lrpid, TimeT msg_stime, TimeT msg_rtime, TimeT msg_ctime)
{
    return create(&type_MsqidDs, msg_perm, msg_qnum, msg_qbytes, msg_lspid, msg_lrpid, msg_stime, msg_rtime, msg_ctime);
}
