/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/ipc/ipc_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initProcessIpcSubsystem(void)
{
  // Set up mediators
    set_mediator_ftok_spec(ftok_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** ftok_spec **/
mediator ftok_media for specification
KeyT ftok_spec( CallContext context, CString* path, IntT id, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        KeyT res;
        format_TSCommand( &command, "ftok:$(str)$(int)", path, create_IntTObj(id) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}



