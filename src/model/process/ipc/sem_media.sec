/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/ipc/msg_media.seh"
#include "process/ipc/sem_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Formatters                                  **/
/********************************************************************/

void sembuf_formatter(TSStream *stream, SemBuf* buf)
{
    VERIFY_TYPE(sembuf_formatter, &type_SemBuf, buf);
    
    writeTypeHeaderTSStream(stream, "sembuf");
    
    writeShort_TSStream(stream, buf->sem_num);
    writeShort_TSStream(stream, buf->sem_op);
    writeShort_TSStream(stream, buf->sem_flg);

}


SemidDs* readSemidDS_TSStream(TSStream* stream)
{
    SemidDs* res = create_SemidDs(NULL, 0, 0, 0);
    
    res->sem_perm = readIpcPerm_TSStream(stream);

    res->sem_nsems = readUShort_TSStream(stream);
    res->sem_otime = readLong_TSStream(stream);
    res->sem_ctime = readLong_TSStream(stream);

    return res;
}

void semid_formatter(TSStream *stream, SemidDs* data)
{
    VERIFY_TYPE(semid_formatter, &type_SemidDs, data);
    
    writeTypeHeaderTSStream(stream, "semid");
    
    ipcperm_formatter(stream, data->sem_perm);
    
    writeUShort_TSStream(stream, data->sem_nsems);
    writeLong_TSStream(stream, data->sem_otime);
    writeLong_TSStream(stream, data->sem_ctime);
}


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initProcessIpcSemSubsystem(void)
{
  // Set up mediators
//    set_mediator_semctl_spec(semctl_media);

    set_mediator_semctl_GETVAL_spec(semctl_GETVAL_media);
    set_mediator_semctl_SETVAL_spec(semctl_SETVAL_media);
    set_mediator_semctl_GETPID_spec(semctl_GETPID_media);
    
    set_mediator_semctl_GETNCNT_spec(semctl_GETNCNT_media);
    set_mediator_semctl_GETZCNT_spec(semctl_GETZCNT_media);
    set_mediator_semctl_GETALL_spec(semctl_GETALL_media);
    
    set_mediator_semctl_SETALL_spec(semctl_SETALL_media);
    set_mediator_semctl_IPC_STAT_spec(semctl_IPC_STAT_media);
    set_mediator_semctl_IPC_SET_spec(semctl_IPC_SET_media);
    set_mediator_semctl_IPC_RMID_spec(semctl_IPC_RMID_media);

    set_mediator_semget_spec(semget_media);
    set_mediator_semop_spec(semop_media);

    // Set up formatters
    registerTSFormatter("semid",(TSFormatterFuncType)semid_formatter);

}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** semctl_spec **/
mediator semctl_GETVAL_media for specification
IntT semctl_GETVAL_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( &command, "semctl_get_int:$(int)$(int)$(int)", create_IntTObj(SUT_GETVAL), create_IntTObj(semid), create_IntTObj(semnum));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

mediator semctl_SETVAL_media for specification
IntT semctl_SETVAL_spec(CallContext context, IntT semid, IntT semnum, IntT semval,  ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( &command, "semctl_SETVAL:$(int)$(int)$(int)$(int)", create_IntTObj(SUT_SETVAL), create_IntTObj(semid), create_IntTObj(semnum), create_IntTObj(semval));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

mediator semctl_GETPID_media for specification
IntT semctl_GETPID_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_get_int:$(int)$(int)$(int)", create_IntTObj(SUT_GETPID), create_IntTObj(semid), create_IntTObj(semnum));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


mediator semctl_GETNCNT_media for specification
IntT semctl_GETNCNT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_get_int:$(int)$(int)$(int)", create_IntTObj(SUT_GETNCNT), create_IntTObj(semid), create_IntTObj(semnum));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


mediator semctl_GETZCNT_media for specification
IntT semctl_GETZCNT_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_get_int:$(int)$(int)$(int)", create_IntTObj(SUT_GETZCNT), create_IntTObj(semid), create_IntTObj(semnum));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


mediator semctl_GETALL_media for specification
SemctlGETALLReturnType* semctl_GETALL_spec(CallContext context, IntT semid, IntT semnum, UShortT sem_nsems, ErrorCode* errno)
{
    call
    {
        IntT funcRes;
        List* values=create_List(&type_UShortTObj);
        TSCommand command = create_TSCommand();
        IntT i=0, sz;
        
         
        format_TSCommand( &command, "semctl_GETALL:$(int)$(int)$(int)$(ushort)", create_IntTObj(SUT_GETALL), create_IntTObj(semid), create_IntTObj(semnum), create_UShortTObj(sem_nsems));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            for (i=0;i<sem_nsems;i++)
            {
                UShortT curVal = readUShort_TSStream(&command.response);
                append_List(values, create_UShortTObj(curVal));
            }

            funcRes=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return create_SemctlGETALLReturnType(funcRes, values);  
    }
}


mediator semctl_SETALL_media for specification
IntT semctl_SETALL_spec(CallContext context, IntT semid, IntT semnum, List* values,  ErrorCode* errno)
{
    call
    {
        IntT res, i;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_SETALL:$(int)$(int)$(int)$(int)", create_IntTObj(SUT_SETALL), create_IntTObj(semid), create_IntTObj(semnum), create_IntTObj(size_List(values)));
        
        for (i=0;i<size_List(values);i++)
        {
            UShortTObj* us=get_List(values, i);
            writeUShort_TSStream(&(command.command), *us);
        }


        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }

}


mediator semctl_IPC_STAT_media for specification
IPCStatReturnType* semctl_IPC_STAT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno)
{
    call
    {
        IntT res, i;
        SemidDs* data;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_IPC_STAT:$(int)$(int)$(int)", create_IntTObj(SUT_IPC_STAT), create_IntTObj(semid), create_IntTObj(semnum));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            data=readSemidDS_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return create_IPCStatReturnType(res, data);  
    }
    
}


mediator semctl_IPC_SET_media for specification
IntT semctl_IPC_SET_spec(CallContext context, IntT semid, IntT semnum, SemidDs* data,  ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_IPC_SET:$(int)$(int)$(int)$(semid)", create_IntTObj(SUT_IPC_SET), create_IntTObj(semid), create_IntTObj(semnum), data);
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
    
}


mediator semctl_IPC_RMID_media for specification
IntT semctl_IPC_RMID_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "semctl_get_int:$(int)$(int)$(int)", create_IntTObj(SUT_IPC_RMID), create_IntTObj(semid), create_IntTObj(semnum));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
    
}


/** semget_spec **/
mediator semget_media for specification
IntT semget_spec(CallContext context, KeyT key, IntT nsems, IntT semflg, ErrorCode* errno)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "semget:$(int)$(int)$(int)", create_IntTObj(key), create_IntTObj(nsems), 
            create_IntTObj(semflg));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


/** semop_spec **/
mediator semop_media for specification
IntT semop_spec(CallContext context, IntT semid, List* sops, ErrorCode* errno)
{
    call
    {
        IntT res, i;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "semop:$(int)$(int)", create_IntTObj(semid), create_IntTObj(size_List(sops)));

        for (i=0;i<size_List(sops);i++)
        {
            SemBuf* smb=get_List(sops, i);
            sembuf_formatter(&(command.command), smb);
        }

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}



