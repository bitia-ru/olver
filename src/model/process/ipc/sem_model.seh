/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_IPC_SEM_MODEL_SEH
#define PROCESS_IPC_SEM_MODEL_SEH

#include "common/common_model.seh"
#include "process/ipc/ipc_model.seh"
#include "process/ipc/msg_model.seh"

/********************************************************************/
/**                      Definitions                               **/
/********************************************************************/

#define SUT_SEM_UNDO    0x1000
#define SUT_GETPID    11
#define SUT_GETVAL    12
#define SUT_GETALL    13
#define SUT_GETNCNT    14
#define SUT_GETZCNT    15
#define SUT_SETVAL    16
#define SUT_SETALL    17


/********************************************************************/
/**                      SemidDs Data Type                         **/
/********************************************************************/

specification typedef struct SemidDs
{
    IpcPerm*   sem_perm;  //  Operation permission structure. 
    UShortT    sem_nsems; //  Number of semaphores in set. 
    TimeT      sem_otime; //  Last semop
    TimeT      sem_ctime; //  Last time changed by semctl
}SemidDs;

SemidDs* create_SemidDs(IpcPerm* sem_perm, UShortT sem_nsems, TimeT sem_otime, TimeT sem_ctime);

/********************************************************************/
/**                      SemBuf Data Type                          **/
/********************************************************************/

specification typedef struct SemBuf
{
    ShortT sem_num; // Semaphore number.
    ShortT sem_op;  // Semaphore operation.
    ShortT sem_flg; // Operation flags.
}SemBuf;

SemBuf* create_SemBuf(ShortT sem_num, ShortT sem_op, ShortT sem_flg);

/********************************************************************/
/**                      Helper Data Types                         **/
/********************************************************************/

specification typedef struct SemctlGETALLReturnType
{
    IntT funcRes;
    List* values;
}SemctlGETALLReturnType;

SemctlGETALLReturnType * create_SemctlGETALLReturnType(
    IntT funcRes,
    List* values
);

specification typedef struct IPCStatReturnType
{
    IntT funcRes;
    SemidDs* data;
}IPCStatReturnType;

IPCStatReturnType * create_IPCStatReturnType(
    IntT funcRes,
    SemidDs* data
);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** semctl_spec **/
//specification
//ReturnType semctl_spec( CallContext context, ... );

specification
IntT semctl_GETVAL_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

specification
IntT semctl_SETVAL_spec(CallContext context, IntT semid, IntT semnum, IntT semval,  ErrorCode* errno);

specification
IntT semctl_GETPID_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno);

specification
IntT semctl_GETNCNT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

specification
IntT semctl_GETZCNT_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno);

specification
SemctlGETALLReturnType* semctl_GETALL_spec(CallContext context, IntT semid, IntT semnum, UShortT sem_nsems, ErrorCode* errno);

specification
IntT semctl_SETALL_spec(CallContext context, IntT semid, IntT semnum, List* values,  ErrorCode* errno);

specification
IPCStatReturnType* semctl_IPC_STAT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

specification
IntT semctl_IPC_SET_spec(CallContext context, IntT semid, IntT semnum, SemidDs* data,  ErrorCode* errno);

specification
IntT semctl_IPC_RMID_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);


/** semget_spec **/
specification
IntT semget_spec(CallContext context, KeyT key, IntT nsems, IntT semflg, ErrorCode* errno);

/** semop_spec **/
specification
IntT semop_spec(CallContext context, IntT semid, List* sops, ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

#endif

