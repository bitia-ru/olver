/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_IPC_SEM_MEDIA_SEH
#define PROCESS_IPC_SEM_MEDIA_SEH

#include "process/ipc/sem_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initProcessIpcSemSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** semctl_spec **/
//mediator semctl_media for specification
//ReturnType semctl_spec( CallContext context, ... );

mediator semctl_GETVAL_media for specification
IntT semctl_GETVAL_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

mediator semctl_SETVAL_media for specification
IntT semctl_SETVAL_spec(CallContext context, IntT semid, IntT semnum, IntT semval,  ErrorCode* errno);

mediator semctl_GETPID_media for specification
IntT semctl_GETPID_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno);

mediator semctl_GETNCNT_media for specification
IntT semctl_GETNCNT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

mediator semctl_GETZCNT_media for specification
IntT semctl_GETZCNT_spec(CallContext context, IntT semid, IntT semnum,  ErrorCode* errno);

mediator semctl_GETALL_media for specification
SemctlGETALLReturnType* semctl_GETALL_spec(CallContext context, IntT semid, IntT semnum, UShortT sem_nsems, ErrorCode* errno);

mediator semctl_SETALL_media for specification
IntT semctl_SETALL_spec(CallContext context, IntT semid, IntT semnum, List* values,  ErrorCode* errno);

mediator semctl_IPC_STAT_media for specification
IPCStatReturnType* semctl_IPC_STAT_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);

mediator semctl_IPC_SET_media for specification
IntT semctl_IPC_SET_spec(CallContext context, IntT semid, IntT semnum, SemidDs* data,  ErrorCode* errno);

mediator semctl_IPC_RMID_media for specification
IntT semctl_IPC_RMID_spec(CallContext context, IntT semid, IntT semnum, ErrorCode* errno);


/** semget_spec **/
mediator semget_media for specification
IntT semget_spec(CallContext context, KeyT key, IntT nsems, IntT semflg, ErrorCode* errno);

/** semop_spec **/
mediator semop_media for specification
IntT semop_spec(CallContext context, IntT semid, List* sops, ErrorCode* errno);




#endif

