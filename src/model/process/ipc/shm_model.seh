/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_IPC_SHM_MODEL_SEH
#define PROCESS_IPC_SHM_MODEL_SEH

#include "common/common_model.seh"
#include "process/ipc/ipc_model.seh"
#include "process/ipc/msg_model.seh"

/********************************************************************/
/**                      Definitions                               **/
/********************************************************************/

#define SHM_RDONLY    010000
#define SHM_W    0200
#define SHM_RND    020000
#define SHM_R    0400
#define SHM_REMAP    040000
#define SHM_LOCK    11
#define SHM_UNLOCK    12

typedef UShortT ShmattT;

/********************************************************************/
/**                      ShmidDs Data Type                         **/
/********************************************************************/

specification typedef struct ShmidDs
{
    IpcPerm*  shm_perm;   //  Operation permission structure. 
    SizeT     shm_segsz;  //  Size of segment in bytes. 
    PidT      shm_lpid;   //  Process ID of last shared memory operation. 
    PidT      shm_cpid;   //  Process ID of creator. 
    ShmattT   shm_nattch; //  Number of current attaches. 
    TimeT     shm_atime;  //  Time of last shmat
    TimeT     shm_dtime;  //  Time of last shmdt
    TimeT     shm_ctime;  //  Time of last change by shmctl
}ShmidDs;

ShmidDs* create_ShmidDs(IpcPerm*  shm_perm, 
                        SizeT     shm_segsz, 
                        PidT      shm_lpid,
                        PidT      shm_cpid,
                        ShmattT   shm_nattch,
                        TimeT     shm_atime,
                        TimeT     shm_dtime,
                        TimeT     shm_ctime
                        );


/********************************************************************/
/**                      Helper Data Types                         **/
/********************************************************************/

specification typedef struct ShmCtlRetunType
{
    IntT funcRes;
    ShmidDs* data;
}ShmCtlRetunType;

ShmCtlRetunType * create_ShmCtlRetunType(
    IntT funcRes,
    ShmidDs* data
);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** shmat_spec **/
specification
VoidTPtr shmat_spec( CallContext context, IntT shmid, VoidTPtr shmaddr, IntT shmflg, ErrorCode* errno);

/** shmctl_spec **/
specification
ShmCtlRetunType* shmctl_spec( CallContext context, IntT shmid, IntT cmd, ShmidDs* buf, ErrorCode* errno);

/** shmdt_spec **/
specification
IntT shmdt_spec( CallContext context, VoidTPtr shmaddr, ErrorCode* errno);

/** shmget_spec **/
specification
IntT shmget_spec( CallContext context, KeyT key, SizeT size, IntT shmflag, ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

#endif

