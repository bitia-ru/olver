/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */




#include "process/ipc/shm_model.seh"
#include "process/ipc/shm_config.h"
#include "data/embed_model.seh"


#pragma SEC subsystem ipc "process.ipc"



/* 
   The group of functions 'process.ipc.shm' consists of: 
       shmat [1]
       shmctl [1]
       shmdt [1]
       shmget [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    shmat - XSI shared memory attach operation

SYNOPSIS

    [XSI]  #include <sys/shm.h>
    void *shmat(int shmid, const void *shmaddr, int shmflg); 

DESCRIPTION

    The shmat() function operates on XSI shared memory (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.340, Shared Memory
    Object). It is unspecified whether this function interoperates with the 
    realtime interprocess communication facilities defined in Realtime.

    The shmat() function attaches the shared memory segment associated with the
    shared memory identifier specified by shmid to the address space of the 
    calling process. The segment is attached at the address specified by one of
    the following criteria:

        If shmaddr is a null pointer, the segment is attached at the first 
        available address as selected by the system.

        If shmaddr is not a null pointer and (shmflg &SHM_RND) is non-zero, the
        segment is attached at the address given by 
        (shmaddr -((uintptr_t)shmaddr %SHMLBA)). The character '%' is the 
        C-language remainder operator.

        If shmaddr is not a null pointer and (shmflg &SHM_RND) is 0, the 
        segment is attached at the address given by shmaddr.

        The segment is attached for reading if (shmflg &SHM_RDONLY) is non-zero
        and the calling process has read permission; otherwise, if it is 0 and 
        the calling process has read and write permission, the segment is 
        attached for reading and writing.

RETURN VALUE

    Upon successful completion, shmat() shall increment the value of shm_nattch
    in the data structure associated with the shared memory ID of the attached 
    shared memory segment and return the segment's start address.

    Otherwise, the shared memory segment shall not be attached, shmat() shall
    return -1, and errno shall be set to indicate the error.

ERRORS

    The shmat() function shall fail if:

        [EACCES] 
        Operation permission is denied to the calling process; see XSI 
        Interprocess Communication. 

        [EINVAL] 
        The value of shmid is not a valid shared memory identifier, the shmaddr
        is not a null pointer, and the value of 
        (shmaddr -((uintptr_t)shmaddr %SHMLBA)) is an illegal address for 
        attaching shared memory; or the shmaddr is not a null pointer, 
        (shmflg &SHM_RND) is 0, and the value of shmaddr is an illegal address 
        for attaching shared memory. 

        [EMFILE] 
        The number of shared memory segments attached to the calling process 
        would exceed the system-imposed limit. 

        [ENOMEM] 
        The available data space is not large enough to accommodate the shared 
        memory segment. 
*/
specification
VoidTPtr shmat_spec( CallContext context, IntT shmid, VoidTPtr shmaddr, IntT shmflg, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * Otherwise, the shared memory segment shall not be attached, shmat() shall 
        * return -1, and errno shall be set to indicate the error.
        */
        ERROR_BEGIN(POSIX_SHMAT, "shmat.05.02", isInvalid_VoidTPtr(shmat_spec) == true, *errno)
            
        /*
        * The shmat() function shall fail if:
        *
        * [EACCES] Operation permission is denied to the calling process; see XSI 
        * Interprocess Communication.
        */
        ERROR_SHALL(POSIX_SHMAT, EACCES, "shmat.06.01", TODO_ERR(EACCES) )
        
        /*
        * The shmat() function shall fail if:
        *
        * [EINVAL] The value of shmid is not a valid shared memory identifier, the 
        * shmaddr is not a null pointer, and the value of (shmaddr -((uintptr_t)shmaddr % 
        * SHMLBA)) is an illegal address for attaching shared memory; or the shmaddr is 
        * not a null pointer, (shmflg &SHM_RND) is 0, and the value of shmaddr is an 
        * illegal address for attaching shared memory.
        */
        ERROR_SHALL(POSIX_SHMAT, EINVAL, "shmat.06.02", TODO_ERR(EINVAL) )
        
        /*
        * The shmat() function shall fail if:
        *
        * [EMFILE] The number of shared memory segments attached to the calling process 
        * would exceed the system-imposed limit.
        */
        ERROR_SHALL(POSIX_SHMAT, EMFILE, "shmat.06.03", TODO_ERR(EMFILE) )
        
        /*
        * The shmat() function shall fail if:
        *
        * [ENOMEM] The available data space is not large enough to accommodate the shared 
        * memory segment.
        */
        ERROR_SHALL(POSIX_SHMAT, ENOMEM, "shmat.06.04", TODO_ERR(ENOMEM) )
        
        ERROR_END()


        /*
        * It is unspecified whether this function interoperates with the realtime 
        * interprocess communication facilities defined in Realtime.
        */
        REQ("shmat.02", "", TODO_REQ());
        
        /*
        * The shmat() function attaches the shared memory segment associated with the 
        * shared memory identifier specified by shmid to the address space of the calling 
        * process.
        */
        REQ("shmat.03", "", TODO_REQ());
        
        /*
        * The segment is attached at the address specified by one of the following 
        * criteria:
        *
        * If shmaddr is a null pointer, the segment is attached at the first available 
        * address as selected by the system.
        */
        REQ("shmat.04.01", "", TODO_REQ());
        
        /*
        * If shmaddr is not a null pointer and (shmflg &SHM_RND) is non-zero, the 
        * segment is attached at the address given by (shmaddr -((uintptr_t)shmaddr % 
        * SHMLBA)).
        */
        REQ("shmat.04.02.01", "", TODO_REQ());
        
        /*
        * The character '%' is the C-language remainder operator.
        */
        REQ("shmat.04.02.02", "", TODO_REQ());
        
        /*
        * The segment is attached at the address specified by one of the following 
        * criteria:
        *
        * If shmaddr is not a null pointer and (shmflg &SHM_RND) is 0, the segment is 
        * attached at the address given by shmaddr.
        */
        REQ("shmat.04.03", "", TODO_REQ());
        
        /*
        * The segment is attached for reading if (shmflg &SHM_RDONLY) is non-zero and 
        * the calling process has read permission;
        */
        REQ("shmat.04.04.01", "", TODO_REQ());
        
        /*
        * otherwise, if it is 0 and the calling process has read and write permission, 
        * the segment is attached for reading and writing.
        */
        REQ("shmat.04.04.02", "", TODO_REQ());
        
        /*
        * Upon successful completion, shmat() shall increment the value of shm_nattch in 
        * the data structure associated with the shared memory ID of the attached shared 
        * memory segment
        */
        REQ("shmat.05.01.01", "", TODO_REQ());
        
        /*
        * and return the segment's start address.
        */
        REQ("shmat.05.01.02", "", TODO_REQ());


        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

  The Open Group Base Specifications Issue 6
  IEEE Std 1003.1, 2004 Edition
  Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.
  
-------------------------------------------------------------------------------

NAME

    shmctl - XSI shared memory control operations

SYNOPSIS

    [XSI]  #include <sys/shm.h>
    int shmctl(int shmid, int cmd, struct shmid_ds *buf); 

DESCRIPTION

    The shmctl() function operates on XSI shared memory (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.340, Shared Memory 
    Object). It is unspecified whether this function interoperates with the 
    realtime interprocess communication facilities defined in Realtime.

    The shmctl() function provides a variety of shared memory control 
    operations as specified by cmd. The following values for cmd are available:

        IPC_STAT 
        Place the current value of each member of the shmid_ds data 
        structure associated with shmid into the structure pointed to by 
        buf. The contents of the structure are defined in <sys/shm.h>. 

        IPC_SET 
        Set the value of the following members of the shmid_ds data structure 
        associated with shmid to the corresponding value found in the structure
        pointed to by buf: 
    
        shm_perm.uid
        shm_perm.gid
        shm_perm.mode    Low-order nine bits.

        IPC_SET can only be executed by a process that has an effective user ID
        equal to either that of a process with appropriate privileges or to the
        value of shm_perm.cuid or shm_perm.uid in the shmid_ds data structure 
        associated with shmid.

        IPC_RMID 
        Remove the shared memory identifier specified by shmid from the system
        and destroy the shared memory segment and shmid_ds data structure 
        associated with it. IPC_RMID can only be executed by a process that has
        an effective user ID equal to either that of a process with appropriate
        privileges or to the value of shm_perm.cuid or shm_perm.uid in the 
        shmid_ds data structure associated with shmid. 

RETURN VALUE

    Upon successful completion, shmctl() shall return 0; otherwise, it shall 
    return -1 and set errno to indicate the error.

ERRORS

    The shmctl() function shall fail if:

        [EACCES] 
        The argument cmd is equal to IPC_STAT and the calling process does not 
        have read permission; see XSI Interprocess Communication. 

        [EINVAL] 
        The value of shmid is not a valid shared memory identifier, or the 
        value of cmd is not a valid command. 

        [EPERM] 
        The argument cmd is equal to IPC_RMID or IPC_SET and the effective user
        ID of the calling process is not equal to that of a process with 
        appropriate privileges and it is not equal to the value of 
        shm_perm.cuid or shm_perm.uid in the data structure associated with 
        shmid. 

    The shmctl() function may fail if:

        [EOVERFLOW] 
        The cmd argument is IPC_STAT and the gid or uid value is too large to 
        be stored in the structure pointed to by the buf argument. 
*/

specification typedef struct ShmCtlRetunType ShmCtlRetunType = {};

ShmCtlRetunType * create_ShmCtlRetunType(
    IntT funcRes,
    ShmidDs* data
)
{
    return create(&type_ShmCtlRetunType, funcRes, data);
}

specification typedef struct ShmidDs ShmidDs = {};

specification
ShmCtlRetunType* shmctl_spec( CallContext context, IntT shmid, IntT cmd, ShmidDs* buf, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * otherwise, it shall return -1 and set errno to indicate the error.
        */
        ERROR_BEGIN(POSIX_SHMCTL, "shmctl.04.02", shmctl_spec->funcRes==-1, *errno)
            
        /*
        * The shmctl() function shall fail if:
        *
        * [EACCES] The argument cmd is equal to IPC_STAT and the calling process does not 
        * have read permission; see XSI Interprocess Communication.
        */
        ERROR_SHALL(POSIX_SHMCTL, EACCES, "shmctl.05.01", TODO_ERR(EACCES) )
        
        /*
        * The shmctl() function shall fail if:
        *
        * [EINVAL] The value of shmid is not a valid shared memory identifier, or the 
        * value of cmd is not a valid command.
        */
        ERROR_SHALL(POSIX_SHMCTL, EINVAL, "shmctl.05.02", TODO_ERR(EINVAL) )
        
        /*
        * The shmctl() function shall fail if:
        *
        * [EPERM] The argument cmd is equal to IPC_RMID or IPC_SET and the effective user 
        * ID of the calling process is not equal to that of a process with appropriate 
        * privileges and it is not equal to the value of shm_perm.cuid or shm_perm.uid in 
        * the data structure associated with shmid.
        */
        ERROR_SHALL(POSIX_SHMCTL, EPERM, "shmctl.05.03", TODO_ERR(EPERM) )
        
        /*
        * The shmctl() function may fail if:
        *
        * [EOVERFLOW] The cmd argument is IPC_STAT and the gid or uid value is too large 
        * to be stored in the structure pointed to by the buf argument.
        */
        ERROR_MAY(POSIX_SHMCTL, EOVERFLOW, "shmctl.06.01", TODO_ERR(EOVERFLOW))
        
        ERROR_END()
        

        /*
        * Upon successful completion, shmctl() shall return 0;
        */
        REQ("shmctl.04.01", "Function shall return zero", shmctl_spec->funcRes==0);

        
        /*
        * It is unspecified whether this function interoperates with the realtime 
        * interprocess communication facilities defined in Realtime.
        */
        REQ("shmctl.02", "", TODO_REQ());
        
        /*
        * The shmctl() function provides a variety of shared memory control operations as 
        * specified by cmd. The following values for cmd are available:
        *
        * IPC_STAT Place the current value of each member of the shmid_ds data structure 
        * associated with shmid into the structure pointed to by buf. The contents of the 
        * structure are defined in <sys/shm.h>.
        */
        REQ("shmctl.03.01", "", TODO_REQ());
        
        /*
        * The shmctl() function provides a variety of shared memory control operations as 
        * specified by cmd. The following values for cmd are available:
        *
        * IPC_SET
        *
        * Set the value of the following members of the shmid_ds data structure 
        * associated with shmid to the corresponding value found in the structure pointed 
        * to by buf: 
        shm_perm.uid shm_perm.gid shm_perm.mode Low-order nine bits. 
        
        */
        REQ("shmctl.03.02.01", "", TODO_REQ());
        
        /*
        * The shmctl() function provides a variety of shared memory control operations as 
        * specified by cmd. The following values for cmd are available:
        *
        * IPC_SET
        *
        * IPC_SET can only be executed by a process that has an effective user ID equal 
        * to either that of a process with appropriate privileges or to the value of 
        * shm_perm.cuid or shm_perm.uid in the shmid_ds data structure associated with 
        * shmid.
        */
        REQ("shmctl.03.02.02", "", TODO_REQ());
        
        /*
        * The shmctl() function provides a variety of shared memory control operations as 
        * specified by cmd. The following values for cmd are available:
        *
        * IPC_RMID
        *
        * Remove the shared memory identifier specified by shmid from the system and 
        * destroy the shared memory segment and shmid_ds data structure associated with 
        * it.
        */
        REQ("shmctl.03.03.01", "", TODO_REQ());
        
        /*
        * The shmctl() function provides a variety of shared memory control operations as 
        * specified by cmd. The following values for cmd are available:
        *
        * IPC_RMID
        *
        * IPC_RMID can only be executed by a process that has an effective user ID equal 
        * to either that of a process with appropriate privileges or to the value of 
        * shm_perm.cuid or shm_perm.uid in the shmid_ds data structure associated with 
        * shmid.
        */
        REQ("shmctl.03.03.02", "", TODO_REQ());
        

      
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    shmdt - XSI shared memory detach operation

SYNOPSIS

    [XSI]  #include <sys/shm.h>
    int shmdt(const void *shmaddr); 

DESCRIPTION

    The shmdt() function operates on XSI shared memory (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.340, Shared Memory 
    Object). It is unspecified whether this function interoperates with the 
    realtime interprocess communication facilities defined in Realtime.

    The shmdt() function detaches the shared memory segment located at the 
    address specified by shmaddr from the address space of the calling process.

RETURN VALUE

    Upon successful completion, shmdt() shall decrement the value of shm_nattch
    in the data structure associated with the shared memory ID of the attached 
    shared memory segment and return 0.

    Otherwise, the shared memory segment shall not be detached, shmdt() shall
    return -1, and errno shall be set to indicate the error.

ERRORS

    The shmdt() function shall fail if:

        [EINVAL] 
        The value of shmaddr is not the data segment start address of a shared memory segment. 
*/

specification
IntT shmdt_spec( CallContext context, VoidTPtr shmaddr, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * Otherwise, the shared memory segment shall not be detached, shmdt() shall 
        * return -1, and errno shall be set to indicate the error.
        */
        ERROR_BEGIN(POSIX_SHMDT, "shmdt.04.02", shmdt_spec == -1, *errno)
            
        /*
        * The shmdt() function shall fail if:
        *
        * [EINVAL] The value of shmaddr is not the data segment start address of a shared 
        * memory segment.
        */
        ERROR_SHALL(POSIX_SHMDT, EINVAL, "shmdt.05.01", TODO_ERR(EINVAL) )
        
        ERROR_END()


        /*
        * Upon successful completion,
        *
        * and return 0.
        */
        REQ("shmdt.04.01.02", "Function shall return 0", shmdt_spec==0);

        
        /*
        * It is unspecified whether this function interoperates with the realtime 
        * interprocess communication facilities defined in Realtime.
        */
        REQ("shmdt.02", "", TODO_REQ());
        
        /*
        * The shmdt() function detaches the shared memory segment located at the address 
        * specified by shmaddr from the address space of the calling process.
        */
        REQ("shmdt.03", "", TODO_REQ());
        
        /*
        * Upon successful completion,
        *
        * shmdt() shall decrement the value of shm_nattch in the data structure 
        * associated with the shared memory ID of the attached shared memory segment
        */
        REQ("shmdt.04.01.01", "", TODO_REQ());
        
        
        
       
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    shmget - get an XSI shared memory segment

SYNOPSIS

    [XSI]  #include <sys/shm.h>
    int shmget(key_t key, size_t size, int shmflg); 

DESCRIPTION

    The shmget() function operates on XSI shared memory (see the Base 
    Definitions volume of IEEE Std 1003.1-2001, Section 3.340, Shared Memory 
    Object).It is unspecified whether this function interoperates with the 
    realtime interprocess communication facilities defined in Realtime.

    The shmget() function shall return the shared memory identifier associated 
    with key.

    A shared memory identifier, associated data structure, and shared memory 
    segment of at least size bytes (see <sys/shm.h>) are created for key if one
    of the following is true:

        The argument key is equal to IPC_PRIVATE.

        The argument key does not already have a shared memory identifier 
        associated with it and (shmflg &IPC_CREAT) is non-zero.

    Upon creation, the data structure associated with the new shared memory 
    identifier shall be initialized as follows:

        The values of shm_perm.cuid, shm_perm.uid, shm_perm.cgid, and shm_perm.gid
        are set equal to the effective user ID and effective group ID, respectively
        , of the calling process.

        The low-order nine bits of shm_perm.mode are set equal to the low-order 
        nine bits of shmflg.

        The value of shm_segsz is set equal to the value of size.

        The values of shm_lpid, shm_nattch, shm_atime, and shm_dtime are set equal
        to 0.

        The value of shm_ctime is set equal to the current time.

    When the shared memory segment is created, it shall be initialized with all
    zero values.

RETURN VALUE

    Upon successful completion, shmget() shall return a non-negative integer, 
    namely a shared memory identifier; otherwise, it shall return -1 and set 
    errno to indicate the error.

ERRORS

    The shmget() function shall fail if:

        [EACCES 
        A shared memory identifier exists for key but operation permission as 
        specified by the low-order nine bits of shmflg would not be granted; 
        see XSI Interprocess Communication. 

        [EEXIST] 
        A shared memory identifier exists for the argument key but 
        (shmflg &IPC_CREAT) &&(shmflg &IPC_EXCL) is non-zero. 

        [EINVAL] 
        A shared memory segment is to be created and the value of size is less 
        than the system-imposed minimum or greater than the system-imposed
        maximum. 

        [EINVAL] 
        No shared memory segment is to be created and a shared memory segment 
        exists for key but the size of the segment associated with it is less
        than size and size is not 0. 

        [ENOENT] 
        A shared memory identifier does not exist for the argument key and 
        (shmflg &IPC_CREAT) is 0. 

        [ENOMEM] 
        A shared memory identifier and associated shared memory segment shall 
        be created, but the amount of available physical memory is not 
        sufficient to fill the request. 

        [ENOSPC] 
        A shared memory identifier is to be created, but the system-imposed 
        limit on the maximum number of allowed shared memory identifiers 
        system-wide would be exceeded. 
*/
specification
IntT shmget_spec( CallContext context, KeyT key, SizeT size, IntT shmflag, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
        * otherwise, it shall return -1 and set errno to indicate the error.
        */
        ERROR_BEGIN(POSIX_SHMGET, "shmget.07.02", shmget_spec==-1, *errno)
            
        /*
        * The shmget() function shall fail if:
        *
        * [EEXIST] A shared memory identifier exists for the argument key but (shmflg & 
        * amp;IPC_CREAT) &&(shmflg &IPC_EXCL) is non-zero.
        */
        ERROR_SHALL(POSIX_SHMGET, EEXIST, "shmget.08.02", TODO_ERR(EEXIST) )
        
        /*
        * The shmget() function shall fail if:
        *
        * [EINVAL] A shared memory segment is to be created and the value of size is less 
        * than the system-imposed minimum or greater than the system-imposed maximum.
        */
        /*
        * The shmget() function shall fail if:
        *
        * [EINVAL] No shared memory segment is to be created and a shared memory segment 
        * exists for key but the size of the segment associated with it is less than size 
        * and size is not 0.
        */
        ERROR_SHALL(POSIX_SHMGET, EINVAL, "shmget.08.03;shmget.08.04", 
        TODO_ERR(EINVAL)
        )
        
        /*
        * The shmget() function shall fail if:
        *
        * [ENOENT] A shared memory identifier does not exist for the argument key and 
        * (shmflg &IPC_CREAT) is 0.
        */
        ERROR_SHALL(POSIX_SHMGET, ENOENT, "shmget.08.05", TODO_ERR(ENOENT) )
        
        /*
        * The shmget() function shall fail if:
        *
        * [ENOMEM] A shared memory identifier and associated shared memory segment shall 
        * be created, but the amount of available physical memory is not sufficient to 
        * fill the request.
        */
        ERROR_SHALL(POSIX_SHMGET, ENOMEM, "shmget.08.06", TODO_ERR(ENOMEM) )
        
        /*
        * The shmget() function shall fail if:
        *
        * [ENOSPC] A shared memory identifier is to be created, but the system-imposed 
        * limit on the maximum number of allowed shared memory identifiers system-wide 
        * would be exceeded.
        */
        ERROR_SHALL(POSIX_SHMGET, ENOSPC, "shmget.08.07", TODO_ERR(ENOSPC) )
        
        ERROR_END()

        /*
        * Upon successful completion, shmget() shall return a non-negative integer, 
        * namely a shared memory identifier;
        */
        REQ("shmget.07.01", "Non negative integer shall be returned", shmget_spec>=0);

        /*
        * It is unspecified whether this function interoperates with the realtime 
        * interprocess communication facilities defined in Realtime.
        */
        REQ("shmget.02", "", TODO_REQ());
        
        /*
        * The shmget() function shall return the shared memory identifier associated with 
        * key.
        */
        REQ("shmget.03", "", TODO_REQ());
        
        /*
        * A shared memory identifier, associated data structure, and shared memory 
        * segment of at least size bytes (see <sys/shm.h>) are created for key if 
        * one of the following is true:
        *
        * The argument key is equal to IPC_PRIVATE.
        */
        REQ("shmget.04.01", "", TODO_REQ());
        
        /*
        * A shared memory identifier, associated data structure, and shared memory 
        * segment of at least size bytes (see <sys/shm.h>) are created for key if 
        * one of the following is true:
        *
        * The argument key does not already have a shared memory identifier associated 
        * with it and (shmflg &IPC_CREAT) is non-zero.
        */
        REQ("shmget.04.02", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new shared memory 
        * identifier shall be initialized as follows:
        *
        * The values of shm_perm.cuid, shm_perm.uid, shm_perm.cgid, and shm_perm.gid are 
        * set equal to the effective user ID and effective group ID, respectively, of the 
        * calling process.
        */
        REQ("shmget.05.01", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new shared memory 
        * identifier shall be initialized as follows:
        *
        * The low-order nine bits of shm_perm.mode are set equal to the low-order nine 
        * bits of shmflg.
        */
        REQ("shmget.05.02", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new shared memory 
        * identifier shall be initialized as follows:
        *
        * The value of shm_segsz is set equal to the value of size.
        */
        REQ("shmget.05.03", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new shared memory 
        * identifier shall be initialized as follows:
        *
        * The values of shm_lpid, shm_nattch, shm_atime, and shm_dtime are set equal to 0.
        */
        REQ("shmget.05.04", "", TODO_REQ());
        
        /*
        * Upon creation, the data structure associated with the new shared memory 
        * identifier shall be initialized as follows:
        *
        * The value of shm_ctime is set equal to the current time.
        */
        REQ("shmget.05.05", "", TODO_REQ());
        
        /*
        * When the shared memory segment is created, it shall be initialized with all 
        * zero values.
        */
        REQ("shmget.06", "", TODO_REQ());
        
        
       

        return true;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

ShmidDs* create_ShmidDs(IpcPerm*  shm_perm, 
                        SizeT     shm_segsz, 
                        PidT      shm_lpid,
                        PidT      shm_cpid,
                        ShmattT   shm_nattch,
                        TimeT     shm_atime,
                        TimeT     shm_dtime,
                        TimeT     shm_ctime
                        )
{
    return create(&type_ShmidDs, shm_perm, shm_segsz, shm_lpid, shm_cpid, shm_nattch, shm_atime, shm_dtime, shm_ctime);
}
