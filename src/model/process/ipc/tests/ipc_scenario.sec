/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "process/ipc/tests/ipc_scenario.seh"


#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

#include "process/ipc/ipc_model.seh"
#include "process/ipc/msg_model.seh"
#include "process/ipc/sem_model.seh"
#include "process/ipc/shm_model.seh"

#include "io/pipe/pipe_media.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

#include "fs/dir/dir_model.seh"

#include "process/meta/fs_model.seh"

#include "fs/fifo/fifo_model.seh"

#include "fs/fs/fs_model.seh"
#include "process/meta/fs_media.seh"


/********************************************************************/
/**                       Tests Local Data                         **/
/********************************************************************/

static CallContext context;
static CString *rootpath;
static CString *filePath1, *filePath2;


/********************************************************************/
/**                       Helper Macros And Functions              **/
/********************************************************************/


// makes full path string from local path
#define FP(path) (concat_Path(rootpath, create_CString(path)))

// makes full path string
#define P(path)  (create_CString(path))

#define MKDIR_A(path, perms)\
    mkdir_spec(context, path, create_FilePermissions_String(perms), requestErrorCode())


static void update_cwd(CallContext context)
{
    SizeT size = 1024;
    StringTPtr buf = allocateMemoryBlock(context, size);
    ProcessState* pstate= getProcessState_CallContext(context);

    getcwd_spec(context, buf, size, requestErrorCode());
    rootpath=getPath_File(getFileSystem(context), getFile_FileId(pstate->meta.workdir));
    deallocateMemoryBlock(context, buf);
}


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_ipc_ftok_scenario(int argc,char** argv)
{
    FileDescId file;

    FilePermission* owner = create_FilePermission(true, true, false);
    FilePermission* group = create_FilePermission(true, true, false);
    FilePermission* other = create_FilePermission(true, true, false);
    FilePermissions *perms = create_FilePermissions(owner, group, other,
        Unknown_Bool3, Unknown_Bool3, Unknown_Bool3);

    OpenFlags oflag = { ReadWrite, Nonblocking, false, true, false, false, false,
        false };

    context = getContext();
    initPathSystemConfiguration();

    update_cwd(context);

    // create test root
    MKDIR_A(FP("ipc_ftok"),"rwxrwxrwx");
    setUptodate_Directory(getFile_FileSystem(getFileSystem(context), FP("ipc_ftok")), true);

    rootpath=FP("ipc_ftok/");

    filePath1=FP("ipc_ftok_file1");
    file = open_spec(context, filePath1, oflag, perms, requestErrorCode(), false);
    close_spec(context, file, requestErrorCode());

    filePath2=FP("ipc_ftok_file2");
    file = open_spec(context, filePath2, oflag, perms, requestErrorCode(), false);
    close_spec(context, file, requestErrorCode());

    return true;

}


static void finish_ipc_ftok_scenario(void)
{
    recursive_remove(context, rootpath);
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ipc_ftok_scen()
{
    KeyT key1 = ftok_spec(context, filePath1, 10, requestErrorCode());
    KeyT key2 = ftok_spec(context, filePath2, 10, requestErrorCode());
    KeyT key3 = ftok_spec(context, filePath1, 20, requestErrorCode());
    KeyT key4 = ftok_spec(context, create_CString("./ipc_ftok/ipc_ftok_file1"), 10, requestErrorCode());
    IntT msgid;
    ByteT arr[]={2, 20, 4, 5};
    IntT semid= -1;
    List* sops = create_List(&type_SemBuf);
    List* sem_values = create_List(&type_UShortTObj);
    SemidDs* semid_data;
    IntT shmid= -1;
    ShmidDs* shmid_data;
    VoidTPtr shmem_addr;

    /*
    * The ftok() function shall return the same key value for all paths that name the
    * same file, when called with the same id value,
    */
    REQ("ftok.03.01", "Keys shall be the same", key1 == key4);

    /*
    * and return different key values when called with different id values or with
    * paths that name different files existing on the same file system at the same
    * time.
    */
    REQ("ftok.03.02", "Keys shall be different", key1!=key2 && key1!=key3 && key2!= key3);

    ftok_spec(context, create_CString("//xxxDir"), 10, requestErrorCode());


    msgget_spec(context, key1, 0, requestErrorCode());
    msgid = msgget_spec(context, key2, SUT_IPC_CREAT, requestErrorCode());

    msgsnd_spec(context, msgid, 10, create_CByteArray(arr, sizeof(arr)), 0, requestErrorCode());

    msgctl_spec(context,msgid, SUT_IPC_STAT,
        create_MsqidDs(create_IpcPerm(0 ,0, 0, 0, create_FilePermissions_String("rwxrwxrwx")), 10, 0, 0, 0, 0, 0, 0),
        requestErrorCode());

    msgrcv_spec(context, msgid, 10, 0, 0, requestErrorCode());


    semid = semget_spec(context, key2, 5, SUT_IPC_CREAT, requestErrorCode());
    append_List(sops, create_SemBuf(0, 1, 0));
    semop_spec(context, semid, sops, requestErrorCode());


    semctl_GETVAL_spec(context, semid, 0, requestErrorCode());

    semctl_SETVAL_spec(context, semid, 3, 2,  requestErrorCode());

    semctl_GETPID_spec(context, semid, 3,  requestErrorCode());

    semctl_GETNCNT_spec(context, semid, 0, requestErrorCode());

    semctl_GETZCNT_spec(context, semid, 2,  requestErrorCode());

    semctl_GETALL_spec(context, semid, 0, 5, requestErrorCode());

    append_List(sem_values, create_UShortTObj(3));
    append_List(sem_values, create_UShortTObj(2));
    append_List(sem_values, create_UShortTObj(4));
    append_List(sem_values, create_UShortTObj(1));
    append_List(sem_values, create_UShortTObj(6));
    semctl_SETALL_spec(context, semid, 0, sem_values,  requestErrorCode());

    semctl_IPC_STAT_spec(context, semid, 0, requestErrorCode());

    semid_data = create_SemidDs(create_IpcPerm(0 ,0, 0, 0, create_FilePermissions_String("rwxrwxrwx")), 3, 0, 0);

    semctl_IPC_SET_spec(context, semid, 2, semid_data,  requestErrorCode());

    semctl_IPC_RMID_spec(context, semid, 3, requestErrorCode());


    shmid = shmget_spec(context, key3, 100, SUT_IPC_CREAT, requestErrorCode());

    shmem_addr = shmat_spec(context, shmid, NULL_VoidTPtr, 0, requestErrorCode());

    shmid_data =create_ShmidDs(create_IpcPerm(0 ,0, 0, 0, create_FilePermissions_String("rwxrwxrwx")), 0, 0, 0, 0, 0, 0, 0);

    shmctl_spec(context, shmid, SUT_IPC_STAT, shmid_data, requestErrorCode());

    shmdt_spec(context, shmem_addr, requestErrorCode());

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm process_ipc_ipc_ftok_scenario =
{
        .init = init_ipc_ftok_scenario,
        .finish = finish_ipc_ftok_scenario,
        .actions = {
            ipc_ftok_scen,
            NULL
    }
};

