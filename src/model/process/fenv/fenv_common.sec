#include "config/interpretation.seh"
#include "process/fenv/fenv_common.seh"
#include "process/process/process_model.seh"

/*****************************************************************************/
/**                          FEnvExceptions Type                            **/
/*****************************************************************************/

/*
 * This type represents floating-point exception status flags.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
FEnvExceptions create_NoneFEnvExceptions(void)
{
    FEnvExceptions excepts =
    {
        false,  /* divbyzero */
        false,  /* inexact */
        false,  /* invalid */
        false,  /* overflow */
        false   /* underflow */
    };

    return excepts;
}

FEnvExceptions create_AllFEnvExceptions(void)
{
    FEnvExceptions excepts =
    {
        true,   /* divbyzero */
        true,   /* inexact */
        true,   /* invalid */
        true,   /* overflow */
        true    /* underflow */
    };

    return excepts;
}

bool isClear_FEnvExceptions(FEnvExceptions excepts)
{
    return !excepts.divbyzero &&
           !excepts.inexact &&
           !excepts.invalid &&
           !excepts.overflow &&
           !excepts.underflow;
}

bool isSubsetOf_FEnvExceptions(FEnvExceptions set, FEnvExceptions subset)
{
    return (subset.divbyzero => set.divbyzero) &&
           (subset.inexact   => set.inexact) &&
           (subset.invalid   => set.invalid) &&
           (subset.overflow  => set.overflow) &&
           (subset.underflow => set.underflow);
}

specification typedef FEnvExceptions FEnvExceptionsObj = {};

FEnvExceptionsObj* create_FEnvExceptionsObj(FEnvExceptions excepts)
{
    return create
    (
        &type_FEnvExceptionsObj,
        excepts.divbyzero,
        excepts.inexact,
        excepts.invalid,
        excepts.overflow,
        excepts.underflow
    );
}

FEnvExceptionsObj* create_NoneFEnvExceptionsObj(void)
{
    return create_FEnvExceptionsObj(create_NoneFEnvExceptions());
}

FEnvExceptionsObj* create_AllFEnvExceptionsObj(void)
{
    return create_FEnvExceptionsObj(create_AllFEnvExceptions());
}

bool isClear_FEnvExceptionsObj(FEnvExceptionsObj *excepts)
{
    assertion(excepts != NULL, "isClear_FEnvExceptionsObj: excepts is NULL");

    return isClear_FEnvExceptions(*excepts);
}

bool isSubsetOf_FEnvExceptionsObj(FEnvExceptionsObj *set, FEnvExceptionsObj *subset)
{
    assertion(set != NULL, "isSubsetOf_FEnvExceptionsObj: set is NULL");
    assertion(subset != NULL, "isSubsetOf_FEnvExceptionsObj: subset is NULL");

    return isSubsetOf_FEnvExceptions(*set, *subset);
}

/*****************************************************************************/
/**                       FEnvRoundingDirection Type                        **/
/*****************************************************************************/

/*
 * This type represents directed-rounding control modes.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
bool isKnown_FEnvRoundingDirection(IntT round)
{
    switch(round)
    {
    case SUT_FE_DOWNWARD:
    case SUT_FE_TONEAREST:
    case SUT_FE_TOWARDZERO:
    case SUT_FE_UPWARD:
        return true;
    }
    return false;
}

/*****************************************************************************/
/**                             FExceptT Type                               **/
/*****************************************************************************/

/*
 * This type represents fexcept_t type.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
specification typedef struct FExceptT FExceptT = {};

FExceptT* create_FExceptT
(
    FExceptTPtr address,
    FEnvExceptions excepts,
    Bool3 divbyzero,
    Bool3 inexact,
    Bool3 invalid,
    Bool3 overflow,
    Bool3 underflow
)
{
    return create
    (
        &type_FExceptT,
        address,
        excepts,
        divbyzero,
        inexact,
        invalid,
        overflow,
        underflow
    );
}

FExceptT* default_FExceptT(FExceptTPtr address)
{
    return create_FExceptT
    (
        address,                        /* address */
        create_NoneFEnvExceptions(),    /* excepts */
        Unknown_Bool3,                  /* divbyzero */
        Unknown_Bool3,                  /* inexact */
        Unknown_Bool3,                  /* invalid */
        Unknown_Bool3,                  /* overflow */
        Unknown_Bool3                   /* underflow */
    );
}

Bool3 equals_FExceptT(FExceptT *lhs, FExceptT *rhs)
{
    Bool3 equals;

    assertion(lhs != NULL, "equals_FExceptT: lhs is NULL");
    assertion(rhs != NULL, "equals_FExceptT: rhs is NULL");

    equals = equals_Bool3(lhs->divbyzero, rhs->divbyzero);
    equals = and_Bool3(equals, equals_Bool3(lhs->inexact,   rhs->inexact));
    equals = and_Bool3(equals, equals_Bool3(lhs->invalid,   rhs->invalid));
    equals = and_Bool3(equals, equals_Bool3(lhs->overflow,  rhs->overflow));

    return and_Bool3(equals, equals_Bool3(lhs->underflow, rhs->underflow));
}

FExceptT* getFExceptT(FExceptTPtr address)
{
    return getObjectInMemory(address);
}

/*****************************************************************************/
/**                              FEnvT Type                                 **/
/*****************************************************************************/

/*
 * This type represents fenv_t type.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
specification typedef struct FEnvT FEnvT = {};

FEnvT* create_FEnvT
(
    FEnvTPtr address,
    FExceptT *excepts,
    IntTObj *round,
    Bool3 nonstop
)
{
    return create(&type_FEnvT, address, excepts, round, nonstop);
}

FEnvT* default_FEnvT(FEnvTPtr address)
{
    return create_FEnvT
    (
        address,                            /* address */
        default_FExceptT(NULL_VoidTPtr),    /* excepts */
        NULL,                               /* round */
        Unknown_Bool3                       /* nonstop */
    );
}

Bool3 equals_FEnvT(FEnvT *lhs, FEnvT *rhs)
{
    Bool3 equals;

    assertion(lhs != NULL, "equals_FEnvT: lhs is NULL");
    assertion(rhs != NULL, "equals_FEnvT: rhs is NULL");

    equals = equals_FExceptT(lhs->excepts, rhs->excepts);
    equals = and_Bool3(equals, equals_Bool3(lhs->nonstop, rhs->nonstop));

    if(lhs->round == NULL || rhs->round == NULL)
    {
        return and_Bool3(equals, Unknown_Bool3);
    }

    return and_Bool3(equals, *lhs->round == *rhs->round ? True_Bool3 : False_Bool3);
}

FEnvT* getFEnvT(FEnvTPtr address)
{
    return getObjectInMemory(address);
}

/*****************************************************************************/
/**                            Format Functions                             **/
/*****************************************************************************/
void writeFEnvExceptionsObj_TSStream(TSStream *stream, FEnvExceptionsObj *excepts)
{
    assertion(stream != NULL, "writeFEnvExceptionsObj_TSStream: stream is NULL");
    assertion(excepts != NULL, "writeFEnvExceptionsObj_TSStream: excepts is NULL");

    writeTypeHeaderTSStream(stream, "fexcepts");

    writeChar_TSStream(stream, excepts->divbyzero ? '\xFF' : '\x00');
    writeChar_TSStream(stream, excepts->inexact   ? '\xFF' : '\x00');
    writeChar_TSStream(stream, excepts->invalid   ? '\xFF' : '\x00');
    writeChar_TSStream(stream, excepts->overflow  ? '\xFF' : '\x00');
    writeChar_TSStream(stream, excepts->underflow ? '\xFF' : '\x00');
}

FEnvExceptions readFEnvExceptions_TSStream(TSStream* stream)
{
    FEnvExceptions res;

    res.divbyzero = readChar_TSStream(stream) != '\x00';
    res.inexact   = readChar_TSStream(stream) != '\x00';
    res.invalid   = readChar_TSStream(stream) != '\x00';
    res.overflow  = readChar_TSStream(stream) != '\x00';
    res.underflow = readChar_TSStream(stream) != '\x00';
    
    return res;
}
