/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/fenv/fenv_media.seh"
#include "common/common_media.seh"

static void fexcepts_formatter(TSStream *stream, FEnvExceptionsObj *excepts)
{
    VERIFY_TYPE(fexcepts_formatter, &type_FEnvExceptionsObj, excepts);

    writeFEnvExceptionsObj_TSStream(stream, excepts);
}

/*****************************************************************************/
/**                       Initialization Function                           **/
/*****************************************************************************/
void initProcessFenvSubsystem(void)
{
    // Set up mediators
    set_mediator_feclearexcept_spec(feclearexcept_media);
    set_mediator_fegetenv_spec(fegetenv_media);
    set_mediator_fegetexceptflag_spec(fegetexceptflag_media);
    set_mediator_fegetround_spec(fegetround_media);
    set_mediator_feholdexcept_spec(feholdexcept_media);
    set_mediator_feraiseexcept_spec(feraiseexcept_media);
    set_mediator_fesetenv_spec(fesetenv_media);
    set_mediator_fesetexceptflag_spec(fesetexceptflag_media);
    set_mediator_fesetround_spec(fesetround_media);
    set_mediator_fetestexcept_spec(fetestexcept_media);
    set_mediator_feupdateenv_spec(feupdateenv_media);
    //set_mediator_matherr_spec(matherr_media);

    // Set up formatters
    registerTSFormatter("fexcepts", (TSFormatterFuncType)fexcepts_formatter);
}

/*****************************************************************************/
/**                          Interface Functions                            **/
/*****************************************************************************/

/** feclearexcept_spec **/
mediator feclearexcept_media for specification
IntT feclearexcept_spec(CallContext context, FEnvExceptions excepts)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "feclearexcept:$(fexcepts)",
            create_FEnvExceptionsObj(excepts));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEClearExcept(context, excepts, feclearexcept_spec);
    }
}

/** fegetenv_spec **/
mediator fegetenv_media for specification
IntT fegetenv_spec(CallContext context, VoidTPtr envp)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fegetenv:$(ptr)",
            create_VoidTPtrObj(envp));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEGetEnv(context, envp, fegetenv_spec);
    }
}

/** fegetexceptflag_spec **/
mediator fegetexceptflag_media for specification
IntT fegetexceptflag_spec(CallContext context, VoidTPtr flagp, FEnvExceptions excepts)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fegetexceptflag:$(ptr)$(fexcepts)",
            create_VoidTPtrObj(flagp),
            create_FEnvExceptionsObj(excepts));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEGetExceptFlag(context, flagp, excepts, fegetexceptflag_spec);
    }
}

/** fegetround_spec **/
mediator fegetround_media for specification
IntT fegetround_spec(CallContext context)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fegetround");
        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEGetRound(context, fegetround_spec);
    }
}

/** feholdexcept_spec **/
mediator feholdexcept_media for specification
IntT feholdexcept_spec(CallContext context, VoidTPtr envp)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "feholdexcept:$(ptr)",
            create_VoidTPtrObj(envp));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEHoldExcept(context, envp, feholdexcept_spec);
    }
}

/** feraiseexcept_spec **/
mediator feraiseexcept_media for specification
IntT feraiseexcept_spec(CallContext context, FEnvExceptions excepts)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "feraiseexcept:$(fexcepts)",
            create_FEnvExceptionsObj(excepts));

        executeCommandInContext(context, &command);
        
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFERaiseExcept(context, excepts, feraiseexcept_spec);
    }
}

/** fesetenv_spec **/
mediator fesetenv_media for specification
IntT fesetenv_spec(CallContext context, FEnvTPtr envp)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fesetenv:$(ptr)",
            create_VoidTPtrObj(envp));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFESetEnv(context, envp, fesetenv_spec);
    }
}

/** fesetexceptflag_spec **/
mediator fesetexceptflag_media for specification
IntT fesetexceptflag_spec(CallContext context, FExceptTPtr flagp, FEnvExceptions excepts)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fesetexceptflag:$(ptr)$(fexcepts)",
            create_VoidTPtrObj(flagp),
            create_FEnvExceptionsObj(excepts));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFESetExceptFlag(context, flagp, excepts, fesetexceptflag_spec);
    }
}

/** fesetround_spec **/
mediator fesetround_media for specification
IntT fesetround_spec(CallContext context, IntT round)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fesetround:$(int)",
            create_IntTObj(round));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFESetRound(context, round, fesetround_spec);
    }
}

/** fetestexcept_spec **/
mediator fetestexcept_media for specification
FEnvExceptions fetestexcept_spec(CallContext context, FEnvExceptions excepts)
{
    call
    {
        FEnvExceptions res = create_NoneFEnvExceptions();
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "fetestexcept:$(fexcepts)",
            create_FEnvExceptionsObj(excepts));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readFEnvExceptions_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
    }
}

/** feupdateenv_spec **/
mediator feupdateenv_media for specification
IntT feupdateenv_spec(CallContext context, FEnvTPtr envp)
{
    call
    {
        IntT res = -1;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "feupdateenv:$(ptr)",
            create_VoidTPtrObj(envp));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFEUpdateEnv(context, envp, feupdateenv_spec);
    }
}

/** matherr_spec **/
/****
mediator matherr_media for specification
ReturnType matherr_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "matherr");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}
****/



