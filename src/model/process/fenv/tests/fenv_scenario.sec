/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "process/fenv/tests/fenv_scenario.seh"

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/fenv/fenv_media.seh"
#include "process/process/process_media.seh"
#include "system/system/system_model.seh"

extern bool pre_feclearexcept_spec(CallContext context, FEnvExceptions excepts);
extern bool pre_fegetenv_spec(CallContext context, FEnvTPtr envp);
extern bool pre_fegetexceptflag_spec(CallContext context, FExceptTPtr flagp, FEnvExceptions excepts);
extern bool pre_fegetround_spec(CallContext context);
extern bool pre_feholdexcept_spec(CallContext context, FEnvTPtr envp);
extern bool pre_feraiseexcept_spec(CallContext context, FEnvExceptions excepts);
extern bool pre_fesetenv_spec(CallContext context, FEnvTPtr envp);
extern bool pre_fesetexceptflag_spec(CallContext context, FExceptTPtr flagp, FEnvExceptions excepts);
extern bool pre_fesetround_spec(CallContext context, IntT round);
extern bool pre_fetestexcept_spec(CallContext context, FEnvExceptions excepts);
extern bool pre_feupdateenv_spec(CallContext context, FEnvTPtr envp);

/********************************************************************/
/**                    Test Scenario Parameters                    **/
/********************************************************************/

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef PROCESS_FENV_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void process_fenv_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef PROCESS_FENV_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static FEnvTPtr envp;
static FExceptTPtr flagp;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_fenv_scenario(int argc, char **argv)
{
#ifdef PROCESS_FENV_LOCAL_MAIN

    system_assertion_handler = atAssertion(process_fenv_assertion_exit);

#endif /* #ifdef PROCESS_FENV_LOCAL_MAIN */

    context = getContext();

    envp = allocateMemoryBlock(context, sizeof_Type(context, "fenv_t"));
    flagp = allocateMemoryBlock(context, sizeof_Type(context, "fexcept_t"));

    if(isNULL_VoidTPtr(envp) || isNULL_VoidTPtr(flagp))
    {
        return false;
    }

    return true;
}

static void finish_fenv_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(fenv_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool fecleartestexcept_scen()
{
    FEnvExceptions excepts = create_NoneFEnvExceptions();
    FEnvExceptions all_excepts = create_AllFEnvExceptions();

    iterate(int i = 0; i < 32; i++;)
    {
        excepts.divbyzero = i & 0x01;
        excepts.inexact   = i & 0x02;
        excepts.invalid   = i & 0x04;
        excepts.overflow  = i & 0x08;
        excepts.underflow = i & 0x10;

        feclearexcept_spec(context, excepts);
        fetestexcept_spec(context, all_excepts);
    }

    return true;
}

scenario
bool feholdtestexcept_scen()
{
    FEnvExceptions all_excepts = create_AllFEnvExceptions();

    feholdexcept_spec(context, envp);
    fetestexcept_spec(context, all_excepts);

    return true;
}

scenario
bool feraisetestexcept_scen()
{
    FEnvExceptions excepts = create_NoneFEnvExceptions();
    FEnvExceptions all_excepts = create_AllFEnvExceptions();

    iterate(int i = 0; i < 32; i++;)
    {
        excepts.divbyzero = i & 0x01;
        excepts.inexact   = i & 0x02;
        excepts.invalid   = i & 0x04;
        excepts.overflow  = i & 0x08;
        excepts.underflow = i & 0x10;

        feraiseexcept_spec(context, excepts);
        fetestexcept_spec(context, all_excepts);
    }

    return true;
}

scenario
bool fegetsetenv_scen()
{
    fegetenv_spec(context, envp);
    fesetenv_spec(context, envp);

    return true;
}

scenario
bool fegetsettestexceptflag_scen()
{
    FEnvExceptions excepts = create_NoneFEnvExceptions();
    FEnvExceptions all_excepts = create_AllFEnvExceptions();

    iterate(int i = 0; i < 32; i++;)
    {
        excepts.divbyzero = i & 0x01;
        excepts.inexact   = i & 0x02;
        excepts.invalid   = i & 0x04;
        excepts.overflow  = i & 0x08;
        excepts.underflow = i & 0x10;

        fegetexceptflag_spec(context, flagp, excepts);
        fesetexceptflag_spec(context, flagp, excepts);

        fetestexcept_spec(context, excepts);
        fetestexcept_spec(context, all_excepts);
    }

    return true;
}

scenario
bool fesetgetround_scen()
{
    iterate(int i = -1; i < 10; i++;)
    {
        fegetround_spec(context);
        fesetround_spec(context, i);
    }

    return true;
}

scenario
bool feupdateenv_scen()
{
    fegetenv_spec(context, envp);
    feupdateenv_spec(context, envp);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm fenv_scenario =
{
    .init = init_fenv_scenario,
    .finish = finish_fenv_scenario,
    .actions = 
    {
        fecleartestexcept_scen,
        feholdtestexcept_scen,
        feraisetestexcept_scen,
        fegetsetenv_scen,
        fegetsettestexceptflag_scen,
        feupdateenv_scen,
        fesetgetround_scen,
        NULL
    }
};

bool main_process_fenv(int argc, char **argv)
{
    addTraceToFile("trace.xml");
    fenv_scenario(argc, argv);
    return true;
}

#ifdef PROCESS_FENV_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();
    initSystemConfiguration();
    initSystemModel();
    initProcessFenvSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    
    main_process_fenv(argc, argv);

    return 0;
}

#endif /* #ifdef PROCESS_FENV_LOCAL_MAIN */
