/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PROCESS_FENV_MEDIA_SEH
#define PROCESS_FENV_MEDIA_SEH

#include "process/fenv/fenv_model.seh"

/*****************************************************************************/
/**                         Initialization Function                         **/
/*****************************************************************************/
void initProcessFenvSubsystem(void);

/*****************************************************************************/
/**                           Interface Functions                           **/
/*****************************************************************************/

/** feclearexcept_spec **/
mediator feclearexcept_media for specification
IntT feclearexcept_spec(CallContext context, FEnvExceptions excepts);

/** fegetenv_spec **/
mediator fegetenv_media for specification
IntT fegetenv_spec(CallContext context, VoidTPtr envp);

/** fegetexceptflag_spec **/
mediator fegetexceptflag_media for specification
IntT fegetexceptflag_spec(CallContext context, VoidTPtr flagp, FEnvExceptions excepts);

/** fegetround_spec **/
mediator fegetround_media for specification
IntT fegetround_spec(CallContext context);

/** feholdexcept_spec **/
mediator feholdexcept_media for specification
IntT feholdexcept_spec(CallContext context, VoidTPtr envp);

/** feraiseexcept_spec **/
mediator feraiseexcept_media for specification
IntT feraiseexcept_spec(CallContext context, FEnvExceptions excepts);

/** fesetenv_spec **/
mediator fesetenv_media for specification
IntT fesetenv_spec(CallContext context, FEnvTPtr envp);

/** fesetexceptflag_spec **/
mediator fesetexceptflag_media for specification
IntT fesetexceptflag_spec(CallContext context, FExceptTPtr flagp, FEnvExceptions excepts);

/** fesetround_spec **/
mediator fesetround_media for specification
IntT fesetround_spec(CallContext context, IntT round);

/** fetestexcept_spec **/
mediator fetestexcept_media for specification
FEnvExceptions fetestexcept_spec(CallContext context, FEnvExceptions excepts);

/** feupdateenv_spec **/
mediator feupdateenv_media for specification
IntT feupdateenv_spec(CallContext context, FEnvTPtr envp);

/** matherr_spec **/
//mediator matherr_media for specification
//ReturnType matherr_spec( CallContext context, ... );

#endif

