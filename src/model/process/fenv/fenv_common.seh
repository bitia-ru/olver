#ifndef PROCESS_FENV_COMMON_SEH
#define PROCESS_FENV_COMMON_SEH

#include "common/common_model.seh"
/*****************************************************************************/
/**                          FEnvExceptions Type                            **/
/*****************************************************************************/

/*
 * This type represents floating-point exception status flags.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
typedef struct FEnvExceptions
{
    bool divbyzero;         /* FE_DIVBYZERO */
    bool inexact;           /* FE_INEXACT */
    bool invalid;           /* FE_INVALID */
    bool overflow;          /* FE_OVERFLOW */
    bool underflow;         /* FE_UNDERFLOW */
} FEnvExceptions;

FEnvExceptions create_NoneFEnvExceptions(void);
FEnvExceptions create_AllFEnvExceptions(void);

bool isClear_FEnvExceptions(FEnvExceptions excepts);
bool isSubsetOf_FEnvExceptions(FEnvExceptions set, FEnvExceptions subset);

specification typedef FEnvExceptions FEnvExceptionsObj;

FEnvExceptionsObj* create_FEnvExceptionsObj(FEnvExceptions excepts);

FEnvExceptionsObj* create_NoneFEnvExceptionsObj(void);
FEnvExceptionsObj* create_AllFEnvExceptionsObj(void);

bool isClear_FEnvExceptionsObj(FEnvExceptionsObj *excepts);
bool isSubsetOf_FEnvExceptionsObj(FEnvExceptionsObj *set, FEnvExceptionsObj *subset);

/*****************************************************************************/
/**                       FEnvRoundingDirection Type                        **/
/*****************************************************************************/

/*
 * This type represents directed-rounding control modes.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
typedef enum FEnvRoundingDirection
{
    SUT_FE_DOWNWARD   = 0,  /* FE_DOWNWARD */
    SUT_FE_TONEAREST  = 1,  /* FE_TONEAREST */
    SUT_FE_TOWARDZERO = 2,  /* FE_TOWARDZERO */
    SUT_FE_UPWARD     = 3   /* FE_UPWARD */
} FEnvRoundingDirection;

bool isKnown_FEnvRoundingDirection(IntT round);

/*****************************************************************************/
/**                             FExceptT Type                               **/
/*****************************************************************************/
typedef VoidTPtr FExceptTPtr;

/*
 * This type represents fexcept_t type.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
specification typedef struct FExceptT
{
    FExceptTPtr address;
    FEnvExceptions excepts;
    Bool3 divbyzero;
    Bool3 inexact;
    Bool3 invalid;
    Bool3 overflow;
    Bool3 underflow;
} FExceptT;

FExceptT* create_FExceptT
(
    FExceptTPtr address,
    FEnvExceptions excepts,
    Bool3 divbyzero,
    Bool3 inexact,
    Bool3 invalid,
    Bool3 overflow,
    Bool3 underflow
);

FExceptT* default_FExceptT(FExceptTPtr address);

Bool3 equals_FExceptT(FExceptT *lhs, FExceptT *rhs);

FExceptT* getFExceptT(FExceptTPtr address);

/*****************************************************************************/
/**                              FEnvT Type                                 **/
/*****************************************************************************/
typedef VoidTPtr FEnvTPtr;

/*
 * This type represents fenv_t type.
 *
 * The Open Group Base Specifications Issue 6
 * IEEE Std 1003.1, 2004 Edition
 * Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved
 *
 * See 'Base Definitions / Headers / <fenv.h>'
 */
specification typedef struct FEnvT
{
    FEnvTPtr address;
    FExceptT *excepts;
    IntTObj *round;
    Bool3 nonstop;
} FEnvT;

FEnvT* create_FEnvT
(
    FEnvTPtr address,
    FExceptT *excepts,
    IntTObj *round,
    Bool3 nonstop
);

FEnvT* default_FEnvT(FEnvTPtr address);

Bool3 equals_FEnvT(FEnvT *lhs, FEnvT *rhs);

FEnvT* getFEnvT(FEnvTPtr address);

/*****************************************************************************/
/**                            Format Functions                             **/
/*****************************************************************************/
void writeFEnvExceptionsObj_TSStream(TSStream *stream, FEnvExceptionsObj *excepts);

FEnvExceptions readFEnvExceptions_TSStream(TSStream* stream);

#endif
