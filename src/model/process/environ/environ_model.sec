/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "process/environ/environ_config.h"
#include "process/environ/environ_model.seh"

#pragma SEC subsystem environ "process.environ"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.


NAME

    getenv - get value of an environment variable

SYNOPSIS

    #include <stdlib.h>
    char *getenv(const char *name);

DESCRIPTION

    The functionality described on this reference page is aligned with the
    ISO C standard. Any conflict between the requirements described here and
    the ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001
    defers to the ISO C standard. [Option End]

    The getenv() function shall search the environment of the calling process
    (see the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 8,
    Environment Variables) for the environment variable name if it exists and
    return a pointer to the value of the environment variable. If the specified
    environment variable cannot be found, a null pointer shall be returned. The
    application shall ensure that it does not modify the string pointed to by
    the getenv() function.

RETURN VALUE

    Upon successful completion, getenv() shall return a pointer to a string
    containing the value for the specified name. If the specified name cannot
    be found in the environment of the calling process, a null pointer shall be
    returned.

    The return value from getenv() may point to static data which may be
    overwritten by subsequent calls to getenv(), setenv(), or unsetenv().

    On XSI-conformant systems, the return value from getenv() may point
    to static data which may also be overwritten by subsequent calls to
    putenv().

ERRORS

    No errors are defined.

*/
specification
CString * getenv_spec( CallContext context, CString * name )
    reads name
{
    /* [reads environ = getProcessEnvironment( context )] */
    Map * environ, * old_environ;

    pre
    {
        old_environ = clone( environ = getProcessEnvironment( context ) );

        /* [Consistency of test suite] */
        REQ( "", "Environ prepared", environ != NULL );

        /* [Getenv can not work with name equal to NULL] */
        REQ( "", "Name is not NULL", name != NULL );

        /*
         * The application shall ensure that it does not modify the string pointed to by
         * the getenv() function.
         */
        REQ("app.getenv.01", "", TODO_REQ());

        /*
         * The string pointed to may be overwritten by a subsequent call to getenv(), [CX]
         * setenv(), or unsetenv(), but shall not be overwritten by a call to any other
         * function in this volume of IEEE Std 1003.1-2001.
         *
         * The return value from getenv() may point to static data which may be
         * overwritten by subsequent calls to getenv(), [CX] setenv(), or unsetenv().
         *
         * [XSI] On XSI-conformant systems, the return value from getenv() may point to
         * static data which may also be overwritten by subsequent calls to putenv().
         */
        REQ("app.getenv.02", "", TODO_REQ());

        /*
         * [CX] If the application modifies environ or the pointers to which it points,
         * the behavior of getenv() is undefined.
         */
        REQ("app.getenv.03", "", TODO_REQ());

        /*
         * The getenv() function need not be reentrant. A function that is not required to
         * be reentrant is not required to be thread-safe.
         */
        REQ("app.getenv.04", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        if ( ! containsKey_Map( environ, name ) )
        {
            return { NoNameInEnviron, "No value for name" };
        }
        else
        {
            return { NameInEnviron, "Value for name exists" };
        }
    }
    post
    {
        environ = getProcessEnvironment( context );
        /* [reads environ] */
        REQ( "", "reads environ", equals( environ, old_environ ) );

#ifdef NewCTesK
        if ( C == C.NoNameInEnviron )
#else
        if ( coverage( C ) == NoNameInEnviron )
#endif
        {
            /*
             * If the specified environment variable cannot be found, a null pointer shall be
             * returned.
             *
             * If the specified name cannot be found in the environment of the calling process,
             * a null pointer shall be returned.
             */
            REQ("getenv.02",
                "If the specified environment variable cannot be found, "
                "a null pointer shall be returned",
                getenv_spec == NULL );
        }
        else // coverage( C ) == NameInEnviron
        {
            /*
             * The getenv() function shall search the environment of the calling process (see
             * the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 8, Environment
             * Variables) for the environment variable name if it exists and return a pointer
             * to the value of the environment variable.
             *
             * Upon successful completion, getenv() shall return a pointer to a string
             * containing the value for the specified name.
             */
            REQ( "getenv.01", "Environment for name exists", getenv_spec != NULL                             );
            REQ( "getenv.01", "Environment for name right" , equals( get_Map( environ, name ), getenv_spec ) );
        }

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    putenv - change or add a value to an environment

SYNOPSIS

    #include <stdlib.h>
    int putenv(char *string);

DESCRIPTION

    The putenv() function shall use the string argument to set environment
    variable values. The string argument should point to a string of the form
    " name= value ". The putenv() function shall make the value of the
    environment variable name equal to value by altering an existing variable
    or creating a new one. In either case, the string pointed to by string
    shall become part of the environment, so altering the string shall change
    the environment. The space used by string is no longer used once a new
    string which defines name is passed to putenv().

RETURN VALUE

    Upon successful completion, putenv() shall return 0; otherwise, it shall
    return a non-zero value and set errno to indicate the error.

ERRORS

    The putenv() function may fail if:

    [ENOMEM]
        Insufficient memory was available.
*/
specification
IntT putenv_spec( CallContext context, CString * string, ErrorCode * errno )
    reads   string
{
    CString * name ;
    CString * value;

    /* [updates environ = getProcessEnvironment( context )] */
    Map * environ, * old_environ;

    pre
    {
        old_environ = clone( environ = getProcessEnvironment( context ) );

        /* [Consistency of test suite] */
        REQ( "", "Environ prepared", environ != NULL );

        /*
         * The putenv() function shall use the string argument to set environment variable
         * values. The string argument should point to a string of the form " name= value "
         * .
         */
        REQ( "app.putenv.01", "String is not null"               , string != NULL                           );
        REQ( "app.putenv.01", "String should point to name=value", indexOfChar_CString( string, '=' ) != -1 );

        /*
         * so altering the string shall change the environment.
         */
        REQ("app.putenv.02", "", TODO_REQ());

        /*
         * The putenv() function need not be reentrant. A function that is not required to
         * be reentrant is not required to be thread-safe.
         */
        REQ("app.putenv.03", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        int EqualSignPosition = indexOfChar_CString( string, '=' );

        name  = substring_CString    ( string, 0, EqualSignPosition     );
        value = substringFrom_CString( string,    EqualSignPosition + 1 );

        if ( ! containsKey_Map( environ, name ) )
        {
            return { CreateValueForName, "Create value for name" };
        }
        else
        {
            return { ReplaceValueForName, "Replace value for name" };
        }
    }
    post
    {
        Map * modifiedEnviron;

        /*
         * [Upon successful completion, putenv() shall return 0]
         * otherwise, it shall return a non-zero value and set errno to indicate the error
         */
        ERROR_BEGIN( POSIX_PUTENV, "putenv.02.02", putenv_spec == -1, * errno )
            /*
             * The putenv() function may fail if:
             *
             * [ENOMEM]
             *
             * Insufficient memory was available.
             */
            ERROR_UNCHECKABLE(POSIX_PUTENV, ENOMEM, "putenv.03.01", "")
        ERROR_END()

        environ = getProcessEnvironment( context );

        modifiedEnviron = clone( old_environ );
        put_Map( modifiedEnviron, name, value );

        /*
         * The putenv() function shall make the value of the environment variable name
         * equal to value by altering an existing variable or creating a new one.
         */
        REQ( "putenv.01", "Environment shall be updated", equals( environ, modifiedEnviron ) );

        /*
         * Upon successful completion, putenv() shall return 0
         */
        REQ( "putenv.02.01", "Create or replace value for name", putenv_spec == 0 );

        /*
         * In either case, the string pointed to by string shall become part of the
         * environment
         */
        REQ("putenv.04", "", TODO_REQ());

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    setenv - add or change environment variable

SYNOPSIS

    #include <stdlib.h>
    int setenv(const char *envname, const char *envval, int overwrite);

DESCRIPTION

    The setenv() function shall update or add a variable in the environment of
    the calling process. The envname argument points to a string containing the
    name of an environment variable to be added or altered. The environment
    variable shall be set to the value to which envval points. The function
    shall fail if envname points to a string which contains an '=' character.
    If the environment variable named by envname already exists and the value
    of overwrite is non-zero, the function shall return success and the
    environment shall be updated. If the environment variable named by envname
    already exists and the value of overwrite is zero, the function shall
    return success and the environment shall remain unchanged.

    If the application modifies environ or the pointers to which it points, the
    behavior of setenv() is undefined. The setenv() function shall update the
    list of pointers to which environ points.

    The strings described by envname and envval are copied by this function.

RETURN VALUE

    Upon successful completion, zero shall be returned. Otherwise, -1 shall be
    returned, errno set to indicate the error, and the environment shall be
    unchanged.

ERRORS

    The setenv() function shall fail if:

    [EINVAL]
        The name argument is a null pointer, points to an empty string, or
        points to a string containing an '=' character.
    [ENOMEM]
        Insufficient memory was available to add a variable or its value to the
        environment.
*/
specification
IntT setenv_spec( CallContext context, CString * envname, CString * envval, IntT overwrite, ErrorCode * errno )
    reads  envname, envval
    writes * errno
{
    /* [updates environ = getProcessEnvironment( context )] */
    Map * environ, * old_environ;

    pre
    {
        old_environ = clone( environ = getProcessEnvironment( context ) );

        /* [Consistency of test suite] */
        REQ( "", "Environ prepared", environ != NULL );

        if(SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_FORBIDDEN)
        {
            REQ( "", "envval can not be equal to NULL", envval != NULL );
        }

        /*
         * If the application modifies environ or the pointers to which it points, the
         * behavior of setenv() is undefined.
         */
        REQ("app.setenv.01", "", TODO_REQ());

        /*
         * The setenv() function need not be reentrant. A function that is not required to
         * be reentrant is not required to be thread-safe.
         */
        REQ("app.setenv.02", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        if ( envname == NULL )
        {
            return { EnvnameIsNull, "Envname is null" };
        }
        else if ( length_CString( envname ) == 0 )
        {
            return { EmptyName, "Envname points to an empty string" };
        }
        else if ( indexOfChar_CString( envname, '=' ) != -1 )
        {
            return { EnvnameWithEqualSign, "Envname points to a string containing an '=' character" };
        }
        /*
         * [
         * SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_FAILURE      ||
         * SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_EMPTY_STRING
         * ]
         */
        #if SETENV_NULL_ENVVAL_BEHAVIOUR != SETENV_NULL_ENVVAL_FORBIDDEN
            else if ( envval == NULL )
            {
                return { EnvvalIsNull, "Envval is null" };
            }
        #endif
        else if ( ! containsKey_Map( environ, envname ) )
        {
            return { CreateValueForName, "Create value for name" };
        }
        else
        {
            if ( overwrite != 0 )
            {
                return { ReplaceValueForName, "Replace value for name" };
            }
            else
            {
                return { LeaveOldValueForName, "Leave old value for name" };
            }
        }
   }
   post
   {
        Map * modifiedEnviron;

        environ = getProcessEnvironment( context );

        /*
         * [Upon successful completion, zero shall be returned.]
         * Otherwise, -1 shall be returned, errno set to indicate the error
         */
        ERROR_BEGIN( POSIX_SETENV, "setenv.04.02", setenv_spec == -1, * errno )
            if ( setenv_spec == -1 )
            {
                /*
                 * the environment shall be unchanged
                 */
                REQ( "setenv.04.03", "Environment shall remain unchanged", equals( environ, old_environ ) );
            }

            /*
             * The setenv() function shall fail if:
             *
             * [EINVAL]
             *
             * The name argument is a null pointer, points to an empty string, or points to a
             * string containing an '=' character.
             *
             * The function shall fail if envname points to a string which contains an '='
             * character.
             *
             * [SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_FAILURE]
             *     [The envval argument is a null pointer.]
             */
            if ( SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_FAILURE )
            {
#if SETENV_NULL_ENVVAL_BEHAVIOUR != SETENV_NULL_ENVVAL_FORBIDDEN
#ifdef NewCTesK
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01",
                             C == C.EnvnameIsNull || C == C.EmptyName || C == C.EnvnameWithEqualSign || C == C.EnvvalIsNull
                           )
#else
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01", coverage( C ) == EnvnameIsNull        ||
                                                                   coverage( C ) == EmptyName            ||
                                                                   coverage( C ) == EnvnameWithEqualSign ||
                                                                   coverage( C ) == EnvvalIsNull
                           )
#endif
#else
#ifdef NewCTesK
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01",
                             C == C.EnvnameIsNull || C == C.EmptyName || C == C.EnvnameWithEqualSign
                           )
#else
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01", coverage( C ) == EnvnameIsNull        ||
                                                                   coverage( C ) == EmptyName            ||
                                                                   coverage( C ) == EnvnameWithEqualSign
                           )
#endif
#endif // SETENV_NULL_ENVVAL_BEHAVIOUR != SETENV_NULL_ENVVAL_FORBIDDEN
            } else {
#ifdef NewCTesK
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01",
                             C == C.EnvnameIsNull || C == C.EmptyName || C == C.EnvnameWithEqualSign
                           )
#else
                ERROR_SHALL( POSIX_SETENV, EINVAL, "setenv.05.01", coverage( C ) == EnvnameIsNull        ||
                                                                   coverage( C ) == EmptyName            ||
                                                                   coverage( C ) == EnvnameWithEqualSign
                           )
#endif
            }

            /*
             * The setenv() function shall fail if:
             *
             * [ENOMEM]
             *
             * Insufficient memory was available to add a variable or its value to the
             * environment.
             */
            ERROR_SHALL(POSIX_SETENV, ENOMEM, "setenv.05.02", TODO_ERR(ENOMEM))
        ERROR_END()

#ifdef NewCTesK
        if ( C == C.LeaveOldValueForName )
#else
        if ( coverage( C ) == LeaveOldValueForName )
#endif
        {
            /*
             * The setenv() function shall update or add a variable in the environment of the
             * calling process. The envname argument points to a string containing the name of
             * an environment variable to be added or altered. The environment variable shall
             * be set to the value to which envval points.
             *
             * If the environment variable named by envname already exists and the value of
             * overwrite is zero, the function shall return success and the environment shall
             * remain unchanged.
             */
            REQ( "setenv.01.02", "Environment shall remain unchanged", equals( environ, old_environ ) );
        }
        else // coverage( C ) == CreateValueForName || coverage( C ) == ReplaceValueForName ||
             // ( SETENV_NULL_ENVVAL_BEHAVIOUR == SETENV_NULL_ENVVAL_EMPTY_STRING && coverage( C ) == EnvvalIsNull )
        {
            modifiedEnviron = clone( old_environ );
            put_Map( modifiedEnviron, envname, ( envval == NULL ? create_CString( "" ) : envval ) );

            /*
             * The setenv() function shall update or add a variable in the environment of the
             * calling process. The envname argument points to a string containing the name of
             * an environment variable to be added or altered. The environment variable shall
             * be set to the value to which envval points.
             *
             * If the environment variable named by envname already exists and the value of
             * overwrite is non-zero, the function shall return success and the environment
             * shall be updated.
             */
            REQ( "setenv.01.01", "Environment shall be updated", equals( environ, modifiedEnviron ) );

            /*
             * The setenv() function shall update the list of pointers to which environ points.
             */
            REQ( "setenv.02", "The setenv() function shall update the list of pointers to which environ points", true );

            /*
             * The strings described by envname and envval are copied by this function.
             */
            REQ( "setenv.03", "The strings described by envname and envval are copied by this function", true );
        }

        /*
         * Upon successful completion, zero shall be returned.
         */
        REQ( "setenv.04.01", "Function shall return success", setenv_spec == 0 );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    unsetenv - remove an environment variable

SYNOPSIS

    #include <stdlib.h>
    int unsetenv(const char *name);

DESCRIPTION

    The unsetenv() function shall remove an environment variable from the
    environment of the calling process. The name argument points to a string,
    which is the name of the variable to be removed. The named argument shall
    not contain an '=' character. If the named variable does not exist in the
    current environment, the environment shall be unchanged and the function is
    considered to have completed successfully.

    If the application modifies environ or the pointers to which it points, the
    behavior of unsetenv() is undefined. The unsetenv() function shall update
    the list of pointers to which environ points.

RETURN VALUE

    Upon successful completion, zero shall be returned. Otherwise, -1 shall be
    returned, errno set to indicate the error, and the environment shall be
    unchanged.

ERRORS

    The unsetenv() function shall fail if:

    [EINVAL]
        The name argument is a null pointer, points to an empty string, or
        points to a string containing an '=' character.
*/
specification
IntT unsetenv_spec( CallContext context, CString * name, ErrorCode * errno )
    reads  name
    writes * errno
{
    /* [updates environ = getProcessEnvironment( context )] */
    Map * environ, * old_environ;

    pre
    {
        old_environ = clone( environ = getProcessEnvironment( context ) );

        /* [Consistency of test suite] */
        REQ( "", "Environ prepared", environ != NULL );

        /*
         * If the application modifies environ or the pointers to which it points, the
         * behavior of unsetenv() is undefined.
         */
        REQ("app.unsetenv.01", "", TODO_REQ());

        /*
         * The unsetenv() function need not be reentrant. A function that is not required
         * to be reentrant is not required to be thread-safe.
         */
        REQ("app.unsetenv.02", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        if ( name == NULL )
        {
            return { NameIsNull, "Name is null" };
        }
        else if ( length_CString( name ) == 0 )
        {
            return { EmptyName, "Name points to an empty string" };
        }
        else if ( indexOfChar_CString( name, '=' ) != -1 )
        {
            return { NameWithEqualSign, "Name points to a string containing an '=' character" };
        }
        else if ( ! containsKey_Map( environ, name ) )
        {
            return { NoNameInEnviron, "No value for name" };
        }
        else
        {
            return { NameInEnviron, "Value for name exists" };
        }
    }
    post
    {
        Map * modifiedEnviron;

        environ = getProcessEnvironment( context );

        /*
         * [Upon successful completion, zero shall be returned.]
         * Otherwise, -1 shall be returned, errno set to indicate the error
         */
        ERROR_BEGIN( POSIX_UNSETENV, "unsetenv.04.02", unsetenv_spec == -1, * errno )
            if ( unsetenv_spec == -1 )
            {
                /*
                 * the environment shall be unchanged
                 */
                REQ( "unsetenv.04.03", "Environment shall remain unchanged", equals( environ, old_environ ) );
            }

            /*
             * The unsetenv() function shall fail if:
             *
             * [EINVAL]
             *
             * The name argument is a null pointer, points to an empty string, or points to a
             * string containing an '=' character.
             *
             * The named argument shall not contain an '=' character.
             */
#ifdef NewCTesK
            ERROR_SHALL( POSIX_UNSETENV, EINVAL, "unsetenv.05.01",
                         C == C.NameIsNull || C == C.EmptyName || C == C.NameWithEqualSign
                       )
#else
            ERROR_SHALL( POSIX_UNSETENV, EINVAL, "unsetenv.05.01",
                         coverage( C ) == NameIsNull || coverage( C ) == EmptyName || coverage( C ) == NameWithEqualSign
                       )
#endif
        ERROR_END()

#ifdef NewCTesK
        if ( C == C.NoNameInEnviron )
#else
        if ( coverage( C ) == NoNameInEnviron )
#endif
        {
            /*
             * If the named variable does not exist in the current environment, the
             * environment shall be unchanged and the function is considered to have completed
             * successfully.
             */
            REQ( "unsetenv.02","Environment shall remain unchanged", equals( environ, old_environ )  );
        }
        else // coverage( C ) == NameInEnviron
        {
            modifiedEnviron = clone( old_environ );
            remove_Map( modifiedEnviron, name );

            /*
             * The unsetenv() function shall remove an environment variable from the
             * environment of the calling process. The name argument points to a string, which
             * is the name of the variable to be removed.
             */
            REQ( "unsetenv.01", "Environment shall be updated", equals( environ, modifiedEnviron ) );

            /*
             * The unsetenv() function shall update the list of pointers to which environ
             * points.
             */
            REQ( "unsetenv.03", "The unsetenv() shall update the list of pointers to which environ points", true );
        }

        /*
         * Upon successful completion, zero shall be returned.
         */
        REQ( "unsetenv.04.01", "Zero shall be returned", unsetenv_spec == 0 );

        return true;
    }
}
