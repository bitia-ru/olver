/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */


#include "ncurses/bkgd/bkgd_model.seh"


#pragma SEC subsystem bkgd "ncurses.bkgd"



/*
   The group of functions 'ncurses.bkgd' consists of:
       bkgd [1]
       bkgdset [1]
       getbkgd [1]
       wbkgd [1]
       wbkgdset [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    bkgd, bkgdset, getbkgd, wbkgd, wbkgdset - turn off the previous background
    attributes, logical OR the requested attributes into the window rendition, and
    set or get background character and rendition using a single-byte character

SYNOPSIS

    #include <curses.h>

    int bkgd(chtype ch);

    void bkgdset(chtype ch);

    chtype getbkgd(WINDOW *win);

    int wbkgd(WINDOW *win, chtype ch);

    void wbkgdset(WINDOW *win, chtype ch);

DESCRIPTION

    The bkgdset() and wbkgdset() functions turn off the previous background
    attributes, logical OR the requested attributes into the window rendition,
    and set the background property of the current or specified window based on
    the information in ch. If ch refers to a multi-column character, the results
    are undefined.

    The bkgd() and wbkgd() functions turn off the previous background
    attributes, logical OR the requested attributes into the window rendition,
    and set the background property of the current or specified window and then
    apply this setting to every character position in that window:

    The rendition of every character on the screen is changed to the new window
    rendition.

    Wherever the former background character appears, it is changed to the new
    background character.

    The getbkgd() function extracts the specified window's background character
    and rendition.

RETURN VALUE

    Upon successful completion, bkgd() and wbkgd() return OK. Otherwise, they
    return ERR.

    The bkgdset() and wbkgdset() functions do not return a value.

    Upon successful completion, getbkgd() returns the specified window's
    background character and rendition. Otherwise, it returns (chtype)ERR.

ERRORS

    No errors are defined.

*/

//This specification refers to: bkgd, wbkgd
specification
IntT bkgd_spec(CallContext context, WindowTPtr* win, ChTypeT ch)
{
    NCursesWindow* curWin = getWindowMayNULL(context, win);
    NCursesWindow* localWin = createNCursesWindow_Local(curWin);

    if (win == NULL)
    {
        FILTER("bkgd");
    }
    else
    {
        FILTER("wbkgd");
    }

    pre
    {
        return true;
    }
    post
    {
        bkgd_model(localWin, ch);

        if (bkgd_spec != SUT_OK)
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("bkgd.02.02;wbkgd.02.02", "return value should be OK or ERR", bkgd_spec == SUT_ERR);

            return true;
        }

        /*
         * Upon successful completion, bkgd() and wbkgd() return OK.
         */
        REQ("bkgd.02.01;wbkgd.02.01",
            "Upon successful completion, bkgd() and wbkgd() return OK",
            bkgd_spec == SUT_OK);

        REQ("", "check all", check_NCursesWindows(curWin, localWin, CH_ALL, 5));

        return true;
    }
    FILTER_CLEAN;
}

void bkgd_model(NCursesWindow* curWnd, ChTypeT ch)
{
    ChTypeT ch_tmp1;
    IntT i;

    /*
     * The bkgd() and wbkgd() functions turn off the previous background
     * attributes,
     */
    IMPLEMENT_REQ("bkgd.01.01;wbkgd.01.01");

    /*
     * logical OR the requested attributes into the window rendition,
     */
    IMPLEMENT_REQ("bkgd.01.02;wbkgd.01.02");

    /*
     * and set the background property of the current or specified window
     */
    IMPLEMENT_REQ("bkgd.01.03;wbkgd.01.03");

    /*
     * and then apply this setting to every character position in that window:
     *
     * The rendition of every character on the screen is changed to the new window
     * rendition.
     */
    IMPLEMENT_REQ("bkgd.01.04.01;wbkgd.01.04.01");

    /*
     * and then apply this setting to every character position in that window:
     *
     * Wherever the former background character appears, it is changed to the new
     * background character.
     */
    IMPLEMENT_REQ("bkgd.01.04.02;wbkgd.01.04.02");


    for (i=0; i<curWnd->ncols*curWnd->nlines; ++i)
    {
        ch_tmp1 = curWnd->wnd_image->arr[i];
        if (equals_ChTypeT(ch_tmp1, getWindowBkgd(curWnd)))
        {
            curWnd->wnd_image->arr[i] = ch;
        }
        else
        {
            /*
             * The A_ALTCHARSET attribute behaves different from other attributes:
             * if it is present in ch, then it is set in characters of the window;
             * if it is not present in ch, then it is NOT cleared in characters of the window.
             */
            ch_tmp1.altcharset |= ch.altcharset;

            ch_tmp1.blink = ch.blink;
            ch_tmp1.bold = ch.bold;
            ch_tmp1.dim = ch.dim;
            ch_tmp1.invis = ch.invis;
            ch_tmp1.protect = ch.protect;
            ch_tmp1.reverse = ch.reverse;
            ch_tmp1.standout = ch.standout;
            ch_tmp1.underline = ch.underline;
            ch_tmp1.colorPair = ch.colorPair;

            curWnd->wnd_image->arr[i] = ch_tmp1;
        }
    }

    setWindowBkgd(curWnd, ch);
    setWindowAttrs(curWnd, getAttrFromChType(ch));
}

/** bkgdset_spec **/
//This specification refers to: bkgdset, wbkgdset
specification
void bkgdset_spec(CallContext context, WindowTPtr* win, ChTypeT ch)
{
    NCursesWindow* curWin = getWindowMayNULL(context, win);
    NCursesWindow* localWin = createNCursesWindow_Local(curWin);

    if (win == NULL)
    {
        FILTER("bkgdset");
    }
    else
    {
        FILTER("wbkgdset");
    }

    pre
    {
        /*
         * If ch refers to a multi-column character, the results are undefined.
         */
        REQ("app.bkgdset.02;app.wbkgdset.02", "ch should not be a multi-column character",
            !isMultiColumnChar(ch.letter)
           );

        return true;
    }
    post
    {
        bkgdset_model(localWin, ch);

        REQ("", "check all", check_NCursesWindows(curWin, localWin, CH_ALL, 5));

        return true;
    }
    FILTER_CLEAN;
}

void bkgdset_model(NCursesWindow* curWnd, ChTypeT ch)
{
    /*
     * The bkgdset() and wbkgdset() functions turn off the previous background
     * attributes,
     */
    IMPLEMENT_REQ("bkgdset.01.01;wbkgdset.01.01");

    /*
     * logical OR the requested attributes into the window rendition,
     */
    IMPLEMENT_REQ("bkgdset.01.02;wbkgdset.01.02");

    /*
     * and set the background property of the current or specified window based on
     * the information in ch.
     */
    IMPLEMENT_REQ("bkgdset.01.03;wbkgdset.01.03");

    setWindowBkgd(curWnd, ch);
    setWindowAttrs(curWnd, getAttrFromChType(ch));
}


specification
ChTypeT getbkgd_spec(CallContext context, WindowTPtr* win)
{
    pre
    {
        /* [Impicit precondition.] */
        REQ("", "win should not be NULL", win != NULL);

        return true;
    }
    coverage C
    {
        return { ExtractsBackgroundCharacterAndRendition, "Extracts background character and rendition" };
    }
    post
    {
        NCursesWindow* curWnd = getWindowMayNULL(context, win);

        if (getbkgd_spec.letter == (WCharT)SUT_ERR)
        {
            /*
             * Otherwise, it returns (chtype)ERR.
             */
            REQ("getbkgd.02.02", "", TODO_REQ());

            return true;
        }

        /*
         * The getbkgd() function extracts the specified window's background character
         * and rendition.
         */
        /*
         * Upon successful completion, getbkgd() returns the specified window's
         * background character and rendition.
         */
        REQ("getbkgd.01;getbkgd.02.01", "getbkgd should return background character and rendition",
            equals_ChTypeT(getbkgd_spec, getWindowBkgd(curWnd))
           );

        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

void print_ChTypeT(ChTypeT ch)
{
    char flags[10] = "albdiprsu";
    if (!ch.altcharset)
        flags[0] = '-';
    if (!ch.blink)
        flags[1] = '-';
    if (!ch.bold)
        flags[2] = '-';
    if (!ch.dim)
        flags[3] = '-';
    if (!ch.invis)
        flags[4] = '-';
    if (!ch.protect)
        flags[5] = '-';
    if (!ch.reverse)
        flags[6] = '-';
    if (!ch.standout)
        flags[7] = '-';
    if (!ch.underline)
        flags[8] = '-';

    verbose("flags<%s> colors<%02X> letter<%c>", flags, ch.colorPair, ch.letter);
}

void print_ChTypeTArray(ChTypeTArray* arr)
{
    int i;
    verbose("ChTypeTArray (size: %d):\n", arr->size);
    for (i=0; i<arr->size; ++i)
    {
        verbose("\t");
        print_ChTypeT(arr->arr[i]);
        verbose("\n");
    }
}

ChTypeT calcNewBkgd(CallContext context, ChTypeT ch, WindowTPtr* win)
{
    return combineChTypeTWithAttrs(getWindowAttrs(getWindowMayNULL(context, win)), ch);
}

bool isMultiColumnChar(WCharT wc)
{
    return false;
}
