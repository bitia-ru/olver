/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/clear/tests/clear_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/char/add_media.seh"

#include "ncurses/clear/clear_media.seh"
#include "process/process/process_model.seh"

#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"
#include "ncurses/window/window_media.seh"
#include "ncurses/ncurses/ncurses_data.seh"

#include "ncurses/window/refresh_media.seh"

static CallContext context;
static CByteArray* scrDump;
static ChTypeTArray* arr;
static NCursesWindow *stdWnd;
static CByteArray *termInfo;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_clear_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(40, 40);
    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    initscr_spec(context);
    stdWnd = getNCursesStdWindow(context);

    initReqFilters();

    registerStdTerminal(context);
    setVariables_StdTerminal(context);

    return true;
}


static void finish_clear_scenario(void)
{
    endwin_spec(context);
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_clear_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_clear_clear_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    IntT i, j;
    NewWinReturnType* winRet;
    WindowTPtr ret;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ret = derwin_spec(context, &winRet->win, 15, 15, 10, 10);

    ch.bold=true;
    ch.letter='a';

    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);
    clear_spec(context, NULL, false);
    refresh_spec(context, NULL);

    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);
    clear_spec(context, NULL, true);
    refresh_spec(context, NULL);

    addch_spec(context, ch, &(winRet->win), NULL, false);
    refresh_spec(context, &winRet->win);
    clear_spec(context, &(winRet->win), false);
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &(winRet->win), NULL, false);
    refresh_spec(context, &winRet->win);
    clear_spec(context, &(winRet->win), true);
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &ret, NULL, false);
    refresh_spec(context, &ret);
    clear_spec(context, &ret, false);
    refresh_spec(context, &ret);

    addch_spec(context, ch, &ret, NULL, false);
    refresh_spec(context, &ret);
    clear_spec(context, &ret, true);
    refresh_spec(context, &ret);

    addch_spec(context, ch, &ret, NULL, false);
    refresh_spec(context, &ret);
    clear_spec(context, &winRet->win, false);
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &ret, NULL, false);
    refresh_spec(context, &ret);
    clear_spec(context, &winRet->win, true);
    refresh_spec(context, &winRet->win);

    return true;
}

scenario
bool ncurses_clear_clrtobot_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    WindowTPtr ret;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ret = derwin_spec(context, &winRet->win, 15, 15, 10, 10);

    ch.bold=true;         // Extra bright or bold
    ch.letter='a';

    addch_spec(context, ch, NULL, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(0, 0), false);
    refresh_spec(context, NULL);

    clrtobot_spec(context, NULL);
    refresh_spec(context, NULL);

    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(0, 0), false);
    refresh_spec(context, &winRet->win);

    clrtobot_spec(context, &(winRet->win));
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &ret, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(0, 0), false);
    refresh_spec(context, &ret);

    clrtobot_spec(context, &ret);
    refresh_spec(context, &ret);

    return true;
}

scenario
bool ncurses_clear_clrtoeol_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    WindowTPtr ret;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ret = derwin_spec(context, &winRet->win, 15, 15, 10, 10);

    ch.bold=true;         // Extra bright or bold
    ch.letter='a';

    addch_spec(context, ch, NULL, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(0, 0), false);
    refresh_spec(context, NULL);

    clrtoeol_spec(context, NULL);
    refresh_spec(context, NULL);

    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(0, 0), false);
    refresh_spec(context, &(winRet->win));

    clrtoeol_spec(context, &(winRet->win));
    refresh_spec(context, &(winRet->win));

    addch_spec(context, ch, &ret, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(0, 0), false);
    refresh_spec(context, &ret);

    clrtoeol_spec(context, &ret);
    refresh_spec(context, &ret);

    return true;
}

scenario
bool ncurses_clear_delch_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    WindowTPtr ret;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ret = derwin_spec(context, &winRet->win, 15, 15, 10, 10);

    ch.bold=true;         // Extra bright or bold
    ch.letter='a';

    addch_spec(context, ch, NULL, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(0, 0), false);
    refresh_spec(context, NULL);

    delch_spec(context, NULL, NULL);
    delch_spec(context, NULL, create_NCursesPosition(10, 10));
    refresh_spec(context, NULL);

    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(0, 0), false);
    refresh_spec(context, &winRet->win);

    delch_spec(context, &(winRet->win), NULL);
    delch_spec(context, &(winRet->win), create_NCursesPosition(10, 10));
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &ret, create_NCursesPosition(7, 7), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(1, 0), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(0, 0), false);
    refresh_spec(context, &ret);

    delch_spec(context, &ret, NULL);
    delch_spec(context, &ret, create_NCursesPosition(10, 10));
    refresh_spec(context, &ret);

    return true;
}

scenario
bool ncurses_clear_deleteln_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    WindowTPtr ret;
    NCursesWindow* tmp;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ret = derwin_spec(context, &winRet->win, 15, 15, 10, 10);

    ch.bold=true;         // Extra bright or bold
    ch.letter='a';

    addch_spec(context, ch, NULL, create_NCursesPosition(3, 3), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(5, 5), false);
    addch_spec(context, ch, NULL, create_NCursesPosition(4, 5), false);
    refresh_spec(context, NULL);

    deleteln_spec(context, NULL);
    refresh_spec(context, NULL);

    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(3, 3), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(5, 5), false);
    addch_spec(context, ch, &(winRet->win), create_NCursesPosition(4, 5), false);
    refresh_spec(context, &winRet->win);

    deleteln_spec(context, &(winRet->win));
    refresh_spec(context, &winRet->win);

    addch_spec(context, ch, &ret, create_NCursesPosition(3, 3), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(10, 10), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(5, 5), false);
    addch_spec(context, ch, &ret, create_NCursesPosition(4, 5), false);
    refresh_spec(context, &ret);

    deleteln_spec(context, &ret);
    refresh_spec(context, &ret);

    return true;
}

scenario
bool ncurses_clear_erasechar_scen()
{
    IntT er = erasechar_spec(context, false), kl=erasechar_spec(context, true);

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_clear_scenario =
{
    .init = init_clear_scenario,
        .finish = finish_clear_scenario,
        .actions = {
            ncurses_clear_clear_scen,
            ncurses_clear_clrtobot_scen,
            ncurses_clear_clrtoeol_scen,
            ncurses_clear_delch_scen,
            ncurses_clear_deleteln_scen,
            ncurses_clear_erasechar_scen,
            NULL
    }
};

bool main_ncurses_clear( int argc, char** argv )
{
    ncurses_clear_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_CLEAR_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");
    // Run test scenario
    main_ncurses_clear(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
