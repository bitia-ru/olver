/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */
#include "ncurses/misc/misc_model.seh"


#pragma SEC subsystem misc "ncurses.misc"



/*
   The group of functions 'ncurses.misc' consists of:
       baudrate [1]
       beep [1]
       flash [1]
       keyname [1]
       napms [1]
       typeahead [1]
       unctrl [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    baudrate - get terminal baud rate

SYNOPSIS

    #include <curses.h>

    int baudrate(void);

DESCRIPTION

    The baudrate() function extracts the output speed of the terminal in bits
    per second.

RETURN VALUE

    The baudrate() function returns the output speed of the terminal.

ERRORS

    No errors are defined.
*/

specification
IntT baudrate_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { GetTerminalBaudRate, "Get terminal baud rate" };
    }
    post
    {
        /*
         * The baudrate() function extracts the output speed of the terminal
         * in bits per second.
         */
        REQ("baudrate.01", "The baudrate() function extracts the output speed of the terminal in bits per second.", TODO_REQ());

        /*
         * The baudrate() function returns the output speed of the terminal.
         */
        REQ("baudrate.02", "The baudrate() function returns the output speed of the terminal.", TODO_REQ());

        return true;
    }
}
void onBaudrate( CallContext context, IntT baudrate_spec)
{
    NCursesTerminal* term = getNCursesStdTerminal(context);
    term->baudrate = baudrate_spec;
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    beep - audible signal

SYNOPSIS

    #include <curses.h>

    int beep(void);

DESCRIPTION

    The beep() function alerts the user. It sounds the audible alarm on the
    terminal, or if that is not possible, it flashes the screen (visible bell).
    If neither signal is possible, nothing happens.

RETURN VALUE

    The beep() function always returns OK.

ERRORS

    No errors are defined.
*/

specification
IntT beep_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { AudibleSignal, "Audible signal" };
    }
    post
    {
        /*
         * The beep() function always returns OK.
         */
        REQ("beep.04", "The beep() function always returns OK.", beep_spec == SUT_OK);

        /*
         * It sounds the audible alarm on the terminal,
         */
        REQ("beep.02.01", "It sounds the audible alarm on the terminal,", TODO_REQ());

        /*
         * or if that is not possible, it flashes the screen (visible bell).
         */
        REQ("beep.02.02", "or if that is not possible, it flashes the screen (visible bell).", TODO_REQ());

        /*
         * If neither signal is possible, nothing happens.
         */
        REQ("beep.03", "If neither signal is possible, nothing happens.", TODO_REQ());



        return true;
    }
}



/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    flash - flash the screen

SYNOPSIS

    #include <curses.h>

    int flash(void);

DESCRIPTION

    The flash() function alerts the user. It flashes the screen, or if that is
    not possible, it sounds the audible alarm on the terminal.If neither signal
    is possible, nothing happens.

RETURN VALUE

    The flash() function always returns OK.

ERRORS

    No errors are defined.
*/

specification
IntT flash_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { FlashScreen, "Flash the screen" };
    }
    post
    {
        /*
         * The flash() function always returns OK.
         */
        REQ("flash.04", "The flash() function always returns OK.", flash_spec == SUT_OK);

        /*
         * It flashes the screen, or if that is not possible, it sounds the
         * audible alarm on the terminal.
         */
        REQ("flash.02", "It flashes the screen, or if that is not possible, it sounds the audible alarm on the terminal.", TODO_REQ());

        /*
         * If neither signal is possible, nothing happens.
         */
        REQ("flash.03", "If neither signal is possible, nothing happens.", TODO_REQ());



        return true;
    }
}



/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    keyname, key_name - get name of key

SYNOPSIS

    #include <curses.h>

    char *keyname(int c);

    char *key_name(wchar_t c);

DESCRIPTION

    The keyname() and key_name() functions generate a character string whose
    value describes the key c. The c argument of keyname() can be an 8-bit
    character or a key code. The c argument of key_name() must be a wide
    character.

    The string has a format according to the first applicable row in the
    following table:

    Input                                   Format of Returned String

    Visible character                       The same character
    Control character                       ^X
    Meta-character (keyname() only)         M-X
    Key value defined in <curses.h>
        (keyname() only)                    KEY_name
    None of the above                       UNKNOWN KEY


    The meta-character notation shown above is used only if meta-characters are
    enabled.

RETURN VALUE

    Upon successful completion, keyname() returns a pointer to a string as
    described above. Otherwise, it returns a null pointer.

ERRORS

    No errors are defined.
*/

specification
CString* keyname_spec( CallContext context, IntT c)
{
    pre
    {
        /*
         * The c argument of keyname() can be an 8-bit character or a key code.
         */
        //REQ("keyname.02", "The c argument of keyname() can be an 8-bit character or a key code", (c>=0 && c<256) || isKeyCode(c));

        return true;
    }
    post
    {
        IntT eq = 0;
        CString* model = keyname_model(context, c);

        if(!keyname_spec)
        {
            /*
             * Otherwise, it returns a null pointer.
             */
            REQ("keyname.05.02", "Otherwise, it returns a null pointer.", TODO_REQ());

            return true;
        }

        if(model && keyname_spec)
            eq = equals(model, keyname_spec);
        /*
         * Upon successful completion, keyname() returns a pointer to a string
         * as described above.
         */
        REQ("keyname.05.01", "Upon successful completion, keyname() returns a pointer to a string as described above.", eq);

        /*
         * The keyname() and key_name() functions generate a character string
         * whose value describes the key c.
         */
        REQ("keyname.01", "The keyname() and key_name() functions generate a character string whose value describes the key c.", eq);

        return true;
    }
}

CString* keyname_model(CallContext context, IntT c)
{
    NCursesTerminal* term = getNCursesStdTerminal(context);

    /*
     *
     * The string has a format according to the first applicable row in
     * the following table:
     *
     *  Input                                   Format of Returned String
     *
     *  Visible character                       The same character
     *  Control character                       ^X
     *  Meta-character (keyname() only)         M-X
     *  Key value defined in <curses.h>
     *      (keyname() only)                    KEY_name
     *  None of the above                       UNKNOWN KEY
     */
    IMPLEMENT_REQ("keyname.03");

    //Visible character     The same character
    if(c >= 32 && c < 127)
        return createChar_CString(c);

    //Control character     ^X
    if( c < 32 || c == 127)
    {
        CString* a = createChar_CString('^');

        switch(c)
        {
        case 0:
            return concat_CString(a, createChar_CString('@'));
        case 27:
            return concat_CString(a, createChar_CString('['));
        case 28:
            return concat_CString(a, createChar_CString('\\'));
        case 29:
            return concat_CString(a, createChar_CString(']'));
        case 30:
            return concat_CString(a, createChar_CString('^'));
        case 31:
            return concat_CString(a, createChar_CString('_'));
        case 127:
            return concat_CString(a, createChar_CString('?'));
        }

        return concat_CString(a, createChar_CString('A' + c - 1));
    }

    //Meta-character (keyname() only)     M-X
    if(c >= 128 && c < 256 && term->meta)
    {
        /*
         * The meta-character notation shown above is used only if
         * meta-characters are enabled.
         */
        IMPLEMENT_REQ("keyname.04");

        return concat_CString(create_CString("M-"), keyname_model(context, c-128));
    }

    //Key value defined in <curses.h> (keyname() only)     KEY_name
    if(c >= SUT_KEY_MIN && c <= SUT_KEY_MAX)
    {
        if(c >= 0410 && c < 0510)
        {
            CString* a = create_CString("KEY_F(");

            a = concat_CString(a, IntToCString(c-0410));

            return concat_CString(a, createChar_CString(')'));
        }

        switch(c)
        {
        case 0401:
            return create_CString("KEY_BREAK");
        case 0402:
            return create_CString("KEY_DOWN");
        case 0403:
            return create_CString("KEY_UP");
        case 0404:
            return create_CString("KEY_LEFT");
        case 0405:
            return create_CString("KEY_RIGHT");
        case 0406:
            return create_CString("KEY_HOME");
        case 0407:
            return create_CString("KEY_BACKSPACE");
        case 0510:
            return create_CString("KEY_DL");
        case 0511:
            return create_CString("KEY_IL");
        case 0512:
            return create_CString("KEY_DC");
        case 0513:
            return create_CString("KEY_IC");
        case 0514:
            return create_CString("KEY_EIC");
        case 0515:
            return create_CString("KEY_CLEAR");
        case 0516:
            return create_CString("KEY_EOS");
        case 0517:
            return create_CString("KEY_EOL");
        case 0520:
            return create_CString("KEY_SF");
        case 0521:
            return create_CString("KEY_SR");
        case 0522:
            return create_CString("KEY_NPAGE");
        case 0523:
            return create_CString("KEY_PPAGE");
        case 0524:
            return create_CString("KEY_STAB");
        case 0525:
            return create_CString("KEY_CTAB");
        case 0526:
            return create_CString("KEY_CATAB");
        case 0527:
            return create_CString("KEY_ENTER");
        case 0530:
            return create_CString("KEY_SRESET");
        case 0531:
            return create_CString("KEY_RESET");
        case 0532:
            return create_CString("KEY_PRINT");
        case 0533:
            return create_CString("KEY_LL");
        case 0534:
            return create_CString("KEY_A1");
        case 0535:
            return create_CString("KEY_A3");
        case 0536:
            return create_CString("KEY_B2");
        case 0537:
            return create_CString("KEY_C1");
        case 0540:
            return create_CString("KEY_C3");
        case 0541:
            return create_CString("KEY_BTAB");
        case 0542:
            return create_CString("KEY_BEG");
        case 0543:
            return create_CString("KEY_CANCEL");
        case 0544:
            return create_CString("KEY_CLOSE");
        case 0545:
            return create_CString("KEY_COMMAND");
        case 0546:
            return create_CString("KEY_COPY");
        case 0547:
            return create_CString("KEY_CREATE");
        case 0550:
            return create_CString("KEY_END");
        case 0551:
            return create_CString("KEY_EXIT");
        case 0552:
            return create_CString("KEY_FIND");
        case 0553:
            return create_CString("KEY_HELP");
        case 0554:
            return create_CString("KEY_MARK");
        case 0555:
            return create_CString("KEY_MESSAGE");
        case 0556:
            return create_CString("KEY_MOVE");
        case 0557:
            return create_CString("KEY_NEXT");
        case 0560:
            return create_CString("KEY_OPEN");
        case 0561:
            return create_CString("KEY_OPTIONS");
        case 0562:
            return create_CString("KEY_PREVIOUS");
        case 0563:
            return create_CString("KEY_REDO");
        case 0564:
            return create_CString("KEY_REFERENCE");
        case 0565:
            return create_CString("KEY_REFRESH");
        case 0566:
            return create_CString("KEY_REPLACE");
        case 0567:
            return create_CString("KEY_RESTART");
        case 0570:
            return create_CString("KEY_RESUME");
        case 0571:
            return create_CString("KEY_SAVE");
        case 0572:
            return create_CString("KEY_SBEG");
        case 0573:
            return create_CString("KEY_SCANCEL");
        case 0574:
            return create_CString("KEY_SCOMMAND");
        case 0575:
            return create_CString("KEY_SCOPY");
        case 0576:
            return create_CString("KEY_SCREATE");
        case 0577:
            return create_CString("KEY_SDC");
        case 0600:
            return create_CString("KEY_SDL");
        case 0601:
            return create_CString("KEY_SELECT");
        case 0602:
            return create_CString("KEY_SEND");
        case 0603:
            return create_CString("KEY_SEOL");
        case 0604:
            return create_CString("KEY_SEXIT");
        case 0605:
            return create_CString("KEY_SFIND");
        case 0606:
            return create_CString("KEY_SHELP");
        case 0607:
            return create_CString("KEY_SHOME");
        case 0610:
            return create_CString("KEY_SIC");
        case 0611:
            return create_CString("KEY_SLEFT");
        case 0612:
            return create_CString("KEY_SMESSAGE");
        case 0613:
            return create_CString("KEY_SMOVE");
        case 0614:
            return create_CString("KEY_SNEXT");
        case 0615:
            return create_CString("KEY_SOPTIONS");
        case 0616:
            return create_CString("KEY_SPREVIOUS");
        case 0617:
            return create_CString("KEY_SPRINT");
        case 0620:
            return create_CString("KEY_SREDO");
        case 0621:
            return create_CString("KEY_SREPLACE");
        case 0622:
            return create_CString("KEY_SRIGHT");
        case 0623:
            return create_CString("KEY_SRSUME");
        case 0624:
            return create_CString("KEY_SSAVE");
        case 0625:
            return create_CString("KEY_SSUSPEND");
        case 0626:
            return create_CString("KEY_SUNDO");
        case 0627:
            return create_CString("KEY_SUSPEND");
        case 0630:
            return create_CString("KEY_UNDO");
        case 0631:
            return create_CString("KEY_MOUSE");
        case 0632:
            return create_CString("KEY_RESIZE");
        default:
            return NULL;
        }
    }

    //None of the above     UNKNOWN KEY
    return create_CString("UNKNOWN KEY");
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    napms - suspend the calling process

SYNOPSIS

    #include <curses.h>

    int napms(int ms);

DESCRIPTION

    The napms() function takes at least ms milliseconds to return.

RETURN VALUE

    The napms() function returns OK.

ERRORS

    No errors are defined.
*/

specification
IntT napms_spec( CallContext context, IntT ms)
{
    pre
    {
        return true;
    }
    post
    {
        /*
         * The napms() function returns OK.
         */
        REQ("napms.02", "The napms() function returns OK.", napms_spec == SUT_OK);

        return true;
    }
}



/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    typeahead - control checking for typeahead

SYNOPSIS

    #include <curses.h>

    int typeahead(int fildes);

DESCRIPTION

    The typeahead() function controls the detection of typeahead during a
    refresh, based on the value of fildes:

    If fildes is a valid file descriptor, typeahead is enabled during refresh;
    Curses periodically checks fildes for input and aborts the refresh if any
    character is available. (This is the initial setting, and the typeahead
    file descriptor corresponds to the input file associated with the screen
    created by initscr() or newterm().)

    The value of fildes need not be the file descriptor on which the refresh is
    occurring.

    If fildes is -1, Curses does not check for typeahead during refresh.

RETURN VALUE

    Upon successful completion, typeahead() returns OK. Otherwise, it returns
    ERR.
*/

specification
IntT typeahead_spec( CallContext context, IntT fildes)
{
    pre
    {
        return true;
    }
    post
    {
        if(typeahead_spec == SUT_ERR)
        {
            /*
             * Otherwise, it returns ERR.
             */
            REQ("typeahead.02.02", "Otherwise, it returns ERR.", TODO_REQ());

            return true;
        }
        /*
         * Upon successful completion, typeahead() returns OK.
         */
        REQ("typeahead.02.01", "Upon successful completion, typeahead() returns OK.", typeahead_spec == SUT_OK);

        /*
         * If fildes is a valid file descriptor, typeahead is enabled during
         * refresh;
         */
        REQ("typeahead.01.01.01", "If fildes is a valid file descriptor, typeahead is enabled during refresh;", TODO_REQ());

        /*
         * Curses periodically checks fildes for input and aborts the refresh
         * if any character is available. (This is the initial setting, and
         * the typeahead file descriptor corresponds to the input file
         * associated with the screen created by initscr() or newterm().)
         */
        REQ("typeahead.01.01.02", "Curses periodically checks fildes for input and aborts the refresh if any character is available.", TODO_REQ());

        /*
         * The value of fildes need not be the file descriptor on which the
         * refresh is occurring.
         */
        REQ("typeahead.01.01.03", "The value of fildes need not be the file descriptor on which the refresh is occurring.", TODO_REQ());

        /*
         * The typeahead() function controls the detection of typeahead during
         * a refresh, based on the value of fildes:
         *
         * If fildes is -1, Curses does not check for typeahead during refresh.
         */
        REQ("typeahead.01.02", "If fildes is -1, Curses does not check for typeahead during refresh.", TODO_REQ());

        return true;
    }
}



/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    unctrl - generate printable representation of a character

SYNOPSIS

    #include <unctrl.h>

    char *unctrl(chtype c);

DESCRIPTION

    The unctrl() function generates a character string that is a printable
    representation of c. If c is a control character, it is converted to the
    ^X notation. If c contains rendition information, the effect is undefined.

RETURN VALUE

    Upon successful completion, unctrl() returns the generated string.
    Otherwise, it returns a null pointer.

ERRORS

    No errors are defined.
*/

specification
CString* unctrl_spec( CallContext context, ChTypeT c)
{
    pre
    {
        ChTypeT c_back = c;

        c_back.letter = ' ';

        /*
         * If c contains rendition information, the effect is undefined.
         */
        REQ("app.unctrl.02.02", "If c contains rendition information, the effect is undefined.",
                            equals_ChTypeT(c_back, create_emptyChTypeT()));
        return true;
    }
    post
    {
        if(!unctrl_spec)
        {
            /*
             * Otherwise, it returns a null pointer.
             */
            REQ("unctrl.03.02", "Otherwise, it returns a null pointer.", TODO_REQ());

            return true;
        }

        /*
         * The unctrl() function generates a character string that is a
         * printable representation of c.
         */
        REQ("unctrl.01", "The unctrl() function generates a character string that is a printable representation of c.", TODO_REQ());

        /*
         * If c is a control character, it is converted to the ^X notation.
         */
        REQ("unctrl.02.01", "If c is a control character, it is converted to the ^X notation.", TODO_REQ());

        /*
         * Upon successful completion, unctrl() returns the generated string.
         */
        REQ("unctrl.03.01", "Upon successful completion, unctrl() returns the generated string.", TODO_REQ());

        return true;
    }
}



/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
IntT isKeyCode(IntT c)
{
    //Based on "#define KEY_..." in curses.h
    return c>=SUT_KEY_MIN && c<=SUT_KEY_MAX;
}
CString* IntToCString(IntT c)
{
    CString* a = create_CString("");

    if(!c)
        return create_CString("0");

    while(c)
    {
        a = concat_CString(createChar_CString(c%10 + '0'), a);
        c/=10;
    }

    return a;
}
