/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "ncurses/misc/misc_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesMiscSubsystem(void)
{
  // Set up mediators
    set_mediator_baudrate_spec(baudrate_media);
    set_mediator_beep_spec(beep_media);
    set_mediator_flash_spec(flash_media);
    set_mediator_keyname_spec(keyname_media);
    set_mediator_napms_spec(napms_media);
    set_mediator_typeahead_spec(typeahead_media);
    set_mediator_unctrl_spec(unctrl_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** baudrate_spec **/

mediator baudrate_media for specification
IntT baudrate_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "baudrate" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onBaudrate(context, baudrate_spec);
    }
}



/** beep_spec **/

mediator beep_media for specification
IntT beep_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "beep" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** flash_spec **/
mediator flash_media for specification
IntT flash_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "flash" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** keyname_spec **/

mediator keyname_media for specification
CString* keyname_spec( CallContext context, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
    
        format_TSCommand( &command, "keyname:$(int)", create_IntTObj(c));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** napms_spec **/

mediator napms_media for specification
IntT napms_spec( CallContext context, IntT ms)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "napms:$(int)", create_IntTObj(ms) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            /*
             * The napms() function takes at least ms milliseconds to return. 
             */
            REQ_MEDIA("napms.01", "The napms() function takes at least ms"
                " milliseconds to return.", delta_gt_ms(timestamp, ms));

            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** typeahead_spec **/

mediator typeahead_media for specification
IntT typeahead_spec( CallContext context, IntT fildes)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "typeahead:$(int)", create_IntTObj(fildes) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** unctrl_spec **/

mediator unctrl_media for specification
CString* unctrl_spec( CallContext context, ChTypeT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
    
        format_TSCommand( &command, "unctrl:$(chtype)", create_ChTypeTObj(c));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);                
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}




