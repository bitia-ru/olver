/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/misc/tests/misc_scenario.seh"

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"

#include "ncurses/char/add_media.seh"
#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"

#include "ncurses/window/window_media.seh"
#include "ncurses/window/refresh_media.seh"

#include "ncurses/move/move_media.seh"

#include "ncurses/input/char_media.seh"

#include "ncurses/misc/misc_media.seh"

#include "ncurses/clear/clear_media.seh"

static CallContext context;
static CByteArray* scrDump;
static ChTypeTArray* arr;
static NCursesWindow *stdWnd;
static CByteArray *termInfo;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_misc_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(40, 40);

    initscr_spec(context);
    stdWnd = getNCursesStdWindow(context);

    initReqFilters();

    registerStdTerminal(context);
    setVariables_StdTerminal(context);

    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    return true;
}

static void finish_misc_scenario(void)
{
    endwin_spec(context);
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_misc_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_misc_baudrate_scen()
{
    NCursesTerminal* term = getNCursesStdTerminal(context);
    IntT res, i, j;
    CString* str;
    ChTypeT ch = create_emptyChTypeT();
    NCursesWindow* stdWnd = getNCursesStdWindow(context);

//    move_spec(context, NULL, create_NCursesPosition(0, 0));

    baudrate_spec(context);

    str = keyname_spec(context, 0777);

    res = typeahead_spec(context, 322223);

    ch.letter = 'Z';
    str = unctrl_spec(context, ch);

    return true;
}

scenario
bool ncurses_misc_bell_flash_scen()
{
    NCursesTerminal* term = getNCursesStdTerminal(context);
    IntT res;
    CString* str;
    ChTypeT ch = create_emptyChTypeT();
    IntT i;

 //   move_spec(context, NULL, create_NCursesPosition(0, 0));

    for(ch.letter = 'A';ch.letter<'K';ch.letter++)
        addch_spec(context, ch, NULL, NULL, true);

    ch.letter = '\n';
    addch_spec(context, ch, NULL, NULL, true);

    res = beep_spec(context);

    refresh_spec(context, NULL);

    for(ch.letter = 'K';ch.letter<'Z';ch.letter++)
        addch_spec(context, ch, NULL, NULL, true);

    res = flash_spec(context);

    refresh_spec(context, NULL);


    return true;
}

scenario
bool ncurses_misc_typeahead_scen()
{
    NCursesTerminal* term = getNCursesStdTerminal(context);
    CString* str = create_CString("\n\tce\bq\r\n");
    CByteArray* ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));
    IntT i, res, size = length_CString(str);

 //   move_spec(context, NULL, create_NCursesPosition(0, 0));

    ncursesInputString(context, ba);

    typeahead_spec(context, 123);

    for(i=0;i<size;i++)
    {
        res = getch_spec(context, NULL, NULL);
    }

    return true;
}
scenario
bool ncurses_misc_keyname_scen()
{
    NCursesTerminal* term = getNCursesStdTerminal(context);
    IntT res, i, j, meta_old = term->meta;

    meta_spec(context, &stdWnd->address, 1);

    for(i=0;i<32;i++)
    {
        for(j=0;j<16;j++)
            keyname_spec(context, i*16+j);
    }

    meta_spec(context, &stdWnd->address, 0);

    for(i=0;i<32;i++)
    {
        for(j=0;j<16;j++)
            keyname_spec(context, i*16+j);
    }

    meta_spec(context, &stdWnd->address, meta_old);

    napms_spec(context, 3000);

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_misc_scenario =
{
    .init = init_misc_scenario,
        .finish = finish_misc_scenario,
        .actions = {
            ncurses_misc_baudrate_scen,
            ncurses_misc_typeahead_scen,
            ncurses_misc_bell_flash_scen,
            ncurses_misc_keyname_scen,
            NULL
    }
};

bool main_ncurses_misc( int argc, char** argv )
{

    ncurses_misc_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_MISC_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");

    // Run test scenario
    main_ncurses_misc(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif


