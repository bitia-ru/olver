/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ncurses/terminal/termcap_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initNcursesTerminalTermcapSubsystem(void)
{
    // Set up mediators
    set_mediator_tgetent_spec ( tgetent_media  );
    set_mediator_tgetflag_spec( tgetflag_media );
    set_mediator_tgetnum_spec ( tgetnum_media  );
    set_mediator_tgetstr_spec ( tgetstr_media  );
    set_mediator_tgoto_spec   ( tgoto_media    );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** tgetent_spec **/
mediator tgetent_media for specification
IntT tgetent_spec( CallContext context, /*StringTPtr bp,*/ CString * name )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "tgetent:$(str)", name );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** tgetflag_spec **/
mediator tgetflag_media for specification
IntT tgetflag_spec( CallContext context, CString * id )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "tgetflag:$(str)", id );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** tgetnum_spec **/
mediator tgetnum_media for specification
IntT tgetnum_spec( CallContext context, CString * id )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "tgetnum:$(str)", id );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** tgetstr_spec **/
mediator tgetstr_media for specification
StringTPtr tgetstr_spec( CallContext context, CString * id, StringTPtr * area )
{
    call
    {
        StringTPtr res;
        TSCommand command = create_TSCommand();
        if ( area == NULL ) { format_TSCommand( & command, "tgetstr_nullarea:$(str)", id                               ); }
                       else { format_TSCommand( & command, "tgetstr:$(str)$(ptr)"   , id, create_VoidTPtrObj( * area ) ); }
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            if (area != NULL)
                *area = readPointer_TSStream(context, &command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}

/** tgoto_spec **/
mediator tgoto_media for specification
StringTPtr tgoto_spec( CallContext context, CString * cap, IntT col, IntT row )
{
    call
    {
        StringTPtr res;
        TSCommand command = create_TSCommand();
        format_TSCommand( & command, "tgoto:$(str)$(int)$(int)", cap, create_IntTObj( col ), create_IntTObj( row ) );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }
        destroy_TSCommand(&command);
        return res;
    }
}
