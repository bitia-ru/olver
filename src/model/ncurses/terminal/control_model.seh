/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef NCURSES_TERMINAL_CONTROL_MODEL_SEH
#define NCURSES_TERMINAL_CONTROL_MODEL_SEH

#include "common/common_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** clearok_spec **/
specification
IntT clearok_spec(CallContext context, WindowTPtr win, IntT bf);

/** echo_spec **/
specification
IntT echo_spec(CallContext context);

/** has_ic_spec **/
specification
IntT has_ic_spec(CallContext context);

/** has_il_spec **/
specification
IntT has_il_spec(CallContext context);

/** idcok_spec **/
specification
void idcok_spec(CallContext context, WindowTPtr win, IntT bf);

/** idlok_spec **/
specification
IntT idlok_spec(CallContext context, WindowTPtr win, IntT bf);

/** immedok_spec **/
specification
void immedok_spec(CallContext context, WindowTPtr win, IntT bf);

/** leaveok_spec **/
specification
IntT leaveok_spec(CallContext context, WindowTPtr win, IntT bf);

/** noecho_spec **/
specification
IntT noecho_spec(CallContext context);

/** noqiflush_spec **/
specification
void noqiflush_spec(CallContext context);

/** qiflush_spec **/
specification
void qiflush_spec(CallContext context);

/** scrollok_spec **/
specification
IntT scrollok_spec(CallContext context, WindowTPtr win, IntT bf);

/** setscrreg_spec **/
//This specification refers to: setscrreg, wsetscrreg
specification
IntT setscrreg_spec(CallContext context, WindowTPtr* win, IntT top, IntT bot);

/** use_env_spec **/
specification
void use_env_spec(CallContext context, IntT boolval);
void onUse_Env(CallContext context, IntT boolval);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

extern const int NUM_FAILS;

void clearok_model(NCursesWindow* curWnd, IntT bf, IntT clearok_spec);
void echo_model(NCursesScreen* curScr, IntT echo_spec);
IntT has_ic_model(NCursesWindow* curWnd);
IntT has_il_model(NCursesWindow* curWnd);
void idcok_model(NCursesWindow* curWnd, IntT bf);
void idlok_model(NCursesWindow* curWnd, IntT bf, IntT idlok_spec);
void immedok_model(NCursesWindow* curWnd, IntT bf);
void leaveok_model(NCursesWindow* curWnd, IntT bf, IntT leaveok_spec);
void noecho_model(NCursesScreen* curScr, IntT noecho_spec);
void noqiflush_model(NCursesWindow* curWnd);
void qiflush_model(NCursesWindow* curWnd);
void scrollok_model(NCursesWindow* curWnd, IntT bf, IntT scrollok_spec);
void setscrreg_model(NCursesWindow* curWnd, IntT top, IntT bot, IntT setscrreg_spec);

bool has_ic_check(NCursesWindow* curWnd, IntT has_ic_spec);
bool has_il_check(NCursesWindow* curWnd, IntT has_il_spec);

#endif

