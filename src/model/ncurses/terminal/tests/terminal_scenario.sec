/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/terminal/tests/terminal_scenario.seh"

#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"
#include "ncurses/char/add_model.seh"
#include "ncurses/window/refresh_media.seh"

static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_terminal_scenario(int argc,char** argv)
{
    //context = createDefaultProcessForNCurses();

    context = createProcessForNCurses(40, 40);

    initReqFilters();

    return true;

}


static void finish_terminal_scenario(void)
{
    terminateNCursesProcess(context);
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool newterm_scen()
{
    CString* res;
    CallContext local_context = createProcessForNCurses(40, 40);

    newterm_spec(local_context, NULL, create_CString("stdout"), create_CString("stdin"));

    res = longname_spec(local_context);

    traceFormattedUserInfo("term: $(obj)", res);

    endwin_spec(local_context);

    terminateNCursesProcess(local_context);

    return true;
}


scenario
bool initscr_scen()
{
    CString* res;
    CallContext local_context = createProcessForNCurses(40, 40);

    filter_spec(local_context);

    initscr_spec(local_context);

    delay_output_spec(local_context, 100);

    termattrs_spec(local_context);

    res = longname_spec(local_context);

    traceFormattedUserInfo("term: $(obj)", res);

    endwin_spec(local_context);

    terminateNCursesProcess(local_context);

    return true;
}


scenario
bool set_term_scen()
{
    NewTermReturnType* res1, *res2;
    CallContext local_context = createProcessForNCurses(40, 40);

    res1 = newterm_spec(local_context, NULL, create_CString("stdout"), create_CString("stdin"));
    res2 = newterm_spec(local_context, create_CString("xterm"), create_CString("stdout"), create_CString("stdin"));
    set_term_spec(local_context, res1->SCREEN_ptr);
    set_term_spec(local_context, res2->SCREEN_ptr);

    delscreen_spec(local_context, res1->SCREEN_ptr);
    delscreen_spec(local_context, res2->SCREEN_ptr);

    endwin_spec(local_context);

    terminateNCursesProcess(local_context);

    return true;
}


scenario
bool vidattr_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    CallContext local_context = createProcessForNCurses(40, 40);

    initscr_spec(local_context);

    ch.letter = 'z';
    addch_spec(local_context, ch, NULL, NULL, true);

    ch.bold = true;
    ch.blink = true;
    ch.letter = 'y';
    vidattr_spec(local_context, ch, false);

    ch.bold = false;
    ch.blink = false;
    ch.reverse = true;
    ch.letter = 'w';
    vidattr_spec(local_context, ch, true);

    endwin_spec(local_context);

    terminateNCursesProcess(local_context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_terminal_terminal_scenario =
{
        .init = init_terminal_scenario,
        .finish = finish_terminal_scenario,
        .actions = {
            vidattr_scen,
            newterm_scen,
            initscr_scen,
            set_term_scen,
            NULL
    }
};

bool main_terminal( int argc, char** argv )
{
    ncurses_terminal_terminal_scenario(argc, argv);

    return true;
}

#ifdef NCURSES_TERMINAL_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );
    
    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_terminal(argc,argv);
    
    //  unloadSUT();
    return 0;
}
#endif
 
