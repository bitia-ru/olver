/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_scenario.seh"
#include "ncurses/terminal/tests/termcap_scenario.seh"

#include "ncurses/window/window_model.seh"
#include "ncurses/terminal/terminal_model.seh"
// #include "ncurses/window/refresh_model.seh"
// #include "ncurses/terminal/control_model.seh"
// #include "ncurses/char/add_model.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_terminal_termcap_simple_scenario()
{
    terminateNCursesProcess(context);
}

bool init_terminal_termcap_simple_scenario(int argc, char** argv)
{
    context = createDefaultProcessForNCurses();
    initReqFilters();

    return true;
}

void finish_terminal_termcap_simple_scenario(void)
{
    cleanup_terminal_termcap_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_terminal_termcap_simple_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool terminal_termcap_simple_scen()
{
    StringTPtr area, area_bak, area_NULL;
    StringTPtr res_ptr;
    IntT res_int;

    area_bak = allocateMemoryBlock(context, 2048);
    area = area_bak;
    area_NULL = NULL_VoidTPtr;

    res_ptr = tgoto_spec(context, create_CString("test %d, %d"), 10, 20);
    res_int = tgetent_spec(context, create_CString("so"));
    res_int = tgetnum_spec(context, create_CString("li"));
    res_int = tgetflag_spec(context, create_CString("am"));
    res_ptr = tgetstr_spec(context, create_CString("so"), NULL);
    res_ptr = tgetstr_spec(context, create_CString("so"), &area_NULL);
    res_ptr = tgetstr_spec(context, create_CString("so"), &area);

    initscr_spec(context);
    area = area_bak;
    area_NULL = NULL_VoidTPtr;

    res_ptr = tgoto_spec(context, create_CString("test %d, %d"), 10, 20);
    res_int = tgetent_spec(context, create_CString("so"));
    res_int = tgetnum_spec(context, create_CString("li"));
    res_int = tgetflag_spec(context, create_CString("am"));
    res_ptr = tgetstr_spec(context, create_CString("so"), NULL);
    res_ptr = tgetstr_spec(context, create_CString("so"), &area_NULL);
    res_ptr = tgetstr_spec(context, create_CString("so"), &area);

    endwin_spec(context);

    deallocateMemoryBlock(context, area_bak);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm ncurses_terminal_termcap_simple_scenario =
{
    .init = init_terminal_termcap_simple_scenario,
    .finish = finish_terminal_termcap_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            terminal_termcap_simple_scen,
            NULL
    }
};
