/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/common_scenario.seh"
#include "ncurses/terminal/tests/control_scenario.seh"

#include "ncurses/window/window_model.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "ncurses/terminal/control_model.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                         Auxiliary Types                        **/
/********************************************************************/

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

void cleanup_terminal_control_simple_scenario()
{
    terminateNCursesProcess(context);
}

bool init_terminal_control_simple_scenario(int argc, char** argv)
{
    context = createDefaultProcessForNCurses();
    initReqFilters();

    return true;
}

void finish_terminal_control_simple_scenario(void)
{
    cleanup_terminal_control_simple_scenario();
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_terminal_control_simple_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool terminal_control_simple_scen()
{
    const int NLINES = 5;
    const int NCOLS = 10;
    NewWinReturnType* winRet;
    NCursesWindow* std_win;

    use_env_spec(context, true);
    use_env_spec(context, false);

    initscr_spec(context);

    winRet = newwin_spec(context, NLINES, NCOLS, 5, 5);
    std_win = getNCursesStdWindow(context);

    clearok_spec(context, winRet->win, true);
    clearok_spec(context, winRet->win, false);
    clearok_spec(context, std_win->address, true);
    clearok_spec(context, std_win->address, false);

    echo_spec(context);
    noecho_spec(context);

    has_ic_spec(context);
    has_il_spec(context);

    idcok_spec(context, winRet->win, true);
    idcok_spec(context, winRet->win, false);
    idcok_spec(context, std_win->address, true);
    idcok_spec(context, std_win->address, false);

    idlok_spec(context, winRet->win, true);
    idlok_spec(context, winRet->win, false);
    idlok_spec(context, std_win->address, true);
    idlok_spec(context, std_win->address, false);

    immedok_spec(context, winRet->win, true);
    immedok_spec(context, winRet->win, false);
    immedok_spec(context, std_win->address, true);
    immedok_spec(context, std_win->address, false);

    leaveok_spec(context, winRet->win, true);
    leaveok_spec(context, winRet->win, false);
    leaveok_spec(context, std_win->address, true);
    leaveok_spec(context, std_win->address, false);

    qiflush_spec(context);
    noqiflush_spec(context);

    scrollok_spec(context, winRet->win, true);
    scrollok_spec(context, winRet->win, false);
    scrollok_spec(context, std_win->address, true);
    scrollok_spec(context, std_win->address, false);

    setscrreg_spec(context, &(winRet->win), 0, NLINES - 1);
    setscrreg_spec(context, &(winRet->win), 0, NLINES - 2);
    setscrreg_spec(context, &(winRet->win), 2, NLINES - 1);
    setscrreg_spec(context, &(winRet->win), 2, 0);
    setscrreg_spec(context, &(winRet->win), 0, NLINES + 1);
    setscrreg_spec(context, NULL, 0, std_win->nlines - 1);
    setscrreg_spec(context, NULL, 0, std_win->nlines - 2);
    setscrreg_spec(context, NULL, 2, std_win->nlines - 1);
    setscrreg_spec(context, NULL, 2, 0);
    setscrreg_spec(context, NULL, 0, std_win->nlines + 1);

    endwin_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm ncurses_terminal_control_simple_scenario =
{
    .init = init_terminal_control_simple_scenario,
    .finish = finish_terminal_control_simple_scenario,
//     .getState = (PtrGetState)getSimpleState,
//     .saveModelState = (PtrSaveModelState)saveSimpleState,
//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,
//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,
    .actions = {
            terminal_control_simple_scen,
            NULL
    }
};
