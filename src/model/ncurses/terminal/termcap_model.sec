/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/terminal/termcap_model.seh"

#pragma SEC subsystem terminal "ncurses.terminal"

/*
   The group of functions 'ncurses.terminal.termcap' consists of:
       tgetent [1]
       tgetflag [1]
       tgetnum [1]
       tgetstr [1]
       tgoto [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    tgetent, tgetflag, tgetnum, tgetstr, tgoto - termcap database emulation (TO BE
    WITHDRAWN)

SYNOPSIS

    #include <term.h>

    int tgetent(char *bp, const char *name);

    int tgetflag(char id[2]);

    int tgetnum(char id[2]);

    char *tgetstr(char id[2], char **area);

    char *tgoto(char *cap, int col, int row);

DESCRIPTION

    The tgetent() function looks up the termcap entry for name. The emulation
    ignores the buffer pointer bp.

    The tgetflag() function gets the boolean entry for id.

    The tgetnum() function gets the numeric entry for id.

    The tgetstr() function gets the string entry for id. If area is not a
    null pointer and does not point to a null pointer, tgetstr() copies the
    string entry into the buffer pointed to by *area and advances the variable
    pointed to by area to the first byte after the copy of the string entry.

    The tgoto() function instantiates the parameters col and row into the
    capability cap and returns a pointer to the resulting string.

    All of the information available in the terminfo database need not be
    available through these functions.

RETURN VALUE

    Upon successful completion, functions that return an integer return OK.
    Otherwise, they return ERR.

    Functions that return pointers return a null pointer on error.

ERRORS

    No errors are defined.
*/

specification
IntT tgetent_spec( CallContext context, /*StringTPtr bp,*/ CString * name )
{
    pre
    {
        return true;
    }
    post
    {
#if 0
        if (tgetent_spec == -1)
        {
            /* tgetent returns -1 on error. */
            REQ("", "", TODO_REQ());

            return true;
        }

        /*
         * LSB standard does not match the real implementation.
         * Manual pages for GNU extension, that is used in real Linux systems, say:
         *   The tgetent routine loads the entry for name. It returns 1 on success,
         *   0 if there is no such entry, and -1 if the terminfo database could not
         *   be found.
         */
        REQ("", "the function should return 0, 1 or -1",
            T(tgetent_spec == 0)
            ||
            T(tgetent_spec == 1)
            ||
            T(tgetent_spec == -1)
           );
#endif // 0

        if ( tgetent_spec != SUT_OK ) {
            /*
             * Otherwise, they return ERR.
             */
            REQ( "tgetent.05.02", "return ERR", tgetent_spec == SUT_ERR );
        } else {
            /*
             * The tgetent() function looks up the termcap entry for name.
             */
            REQ("tgetent.01", "", TODO_REQ());

            /*
             * Upon successful completion, functions that return an integer return OK.
             */
            REQ( "tgetent.05.01", "return OK", tgetent_spec == SUT_OK );
        }

        /*
         * All of the information available in the terminfo database need not be
         * available through these functions.
         */
        REQ( "tgetent.04",
             "All of the information available in the terminfo database need not be available through these functions",
             true
           );

        return true;
    }
}

specification
IntT tgetflag_spec( CallContext context, CString * id )
{
    pre
    {
        /* [id argument should be of length 2] */
        REQ("", "id should have length 2", length_CString(id) == 2);

        return true;
    }
    post
    {
#if 0
        /*
         * LSB standard does not match the real implementation.
         * Manual pages for GNU extension, that is used in real Linux systems, say:
         *   The tgetflag routine gets the boolean entry for id, or zero if it is
         *   not available.
         */
        REQ("", "the function should return 0 or 1", T(tgetflag_spec == 0) || T(tgetflag_spec == 1));
#endif // 0

        if ( tgetflag_spec != SUT_OK ) {
            /*
             * Otherwise, they return ERR.
             */
            REQ( "tgetflag.05.02", "return ERR", tgetflag_spec == SUT_ERR );
        } else {
            /*
             * The tgetflag() function gets the boolean entry for id.
             */
            REQ("tgetflag.01", "", TODO_REQ());

            /*
             * Upon successful completion, functions that return an integer return OK.
             */
            REQ( "tgetflag.05.01", "return OK", tgetflag_spec == SUT_OK );
        }

        /*
         * All of the information available in the terminfo database need not be
         * available through these functions.
         */
        REQ( "tgetflag.04",
             "All of the information available in the terminfo database need not be available through these functions",
             true
           );

        return true;
    }
}

specification
IntT tgetnum_spec(CallContext context, CString* id)
{
    pre
    {
        /* [id argument should be of length 2] */
        REQ("", "id should have length 2", length_CString(id) == 2);

        return true;
    }
    post
    {
#if 0
        /*
         * LSB standard does not match the real implementation.
         * Manual pages for GNU extension, that is used in real Linux systems, say:
         *   The tgetnum routine gets the numeric entry for id, or -1 if it is not
         *   available.
         */
        REQ("", "the function should return the numeric entry for id, or -1", TODO_REQ());
#endif // 0

        if ( tgetnum_spec != SUT_OK ) {
            /*
             * Otherwise, they return ERR.
             */
            REQ( "tgetnum.05.02", "return ERR", tgetnum_spec == SUT_ERR );
        } else {
            /*
             * The tgetnum() function gets the numeric entry for id.
             */
            REQ("tgetnum.01", "", TODO_REQ());

            /*
             * Upon successful completion, functions that return an integer return OK.
             */
            REQ( "tgetnum.05.01", "return OK", tgetnum_spec == SUT_OK );
        }

        /*
         * All of the information available in the terminfo database need not be
         * available through these functions.
         */
        REQ( "tgetnum.04",
             "All of the information available in the terminfo database need not be available through these functions",
             true
           );

        return true;
    }
}

specification
StringTPtr tgetstr_spec( CallContext context, CString * id, StringTPtr * area )
{
    StringTPtr pre_area = NULL_VoidTPtr;

    pre
    {
        if (area != NULL)
            pre_area = *area;

        /* [id argument should be of length 2] */
        REQ("", "id should have length 2", length_CString(id) == 2);

        return true;
    }
    post
    {
        CString* ret_str = NULL;
        CString* ret_area = NULL;

        if ( isNULL_VoidTPtr( tgetstr_spec ) ) {
            /*
             * Functions that return pointers return a null pointer on error.
             */
            REQ( "tgetstr.05", "return a null pointer on error", isNULL_VoidTPtr( tgetstr_spec ) );
        } else {
            ret_str = readCString_VoidTPtr(tgetstr_spec);

            /*
             * The tgetstr() function gets the string entry for id.
             */
            REQ("tgetstr.01", "", TODO_REQ());

            if ((area != NULL) && !isNULL_VoidTPtr(pre_area))
            {
                ret_area = readCString_VoidTPtr(pre_area);

                /*
                 * If area is not a null pointer and does not point to a null pointer, tgetstr()
                 * copies the string entry into the buffer pointed to by *area
                 */
                REQ("tgetstr.02.01", "", TODO_REQ());

                /*
                 * and advances the variable pointed to by area to the first byte after the copy
                 * of the string entry.
                 */
                REQ("tgetstr.02.02", "", TODO_REQ());

                if (ret_str != NULL)
                {
                    REQ("", "return string should be the same as copied to the area", equals(ret_str, ret_area));
                }
            }
        }

        /*
         * All of the information available in the terminfo database need not be
         * available through these functions.
         */
        REQ( "tgetstr.04",
             "All of the information available in the terminfo database need not be available through these functions",
             true
           );

        return true;
    }
}

specification
StringTPtr tgoto_spec( CallContext context, CString * cap, IntT col, IntT row )
{
    pre
    {
        return true;
    }
    post
    {
        if ( isNULL_VoidTPtr( tgoto_spec ) ) {
            /*
             * Functions that return pointers return a null pointer on error.
             */
            REQ( "tgoto.05", "return a null pointer on error", isNULL_VoidTPtr( tgoto_spec ) );
        } else {
            /*
             * The tgoto() function instantiates the parameters col and row into the
             * capability cap
             */
            REQ("tgoto.01.01", "", TODO_REQ());

            /*
             * and returns a pointer to the resulting string.
             */
            REQ("tgoto.01.02", "", TODO_REQ());
        }

        /*
         * All of the information available in the terminfo database need not be
         * available through these functions.
         */
        REQ_UNCHECKABLE(
            "tgoto.04",
            "All of the information available in the terminfo database need not be available through these functions"
        );

        return true;
    }
}
