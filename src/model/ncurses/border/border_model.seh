/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef NCURSES_BORDER_MODEL_SEH
#define NCURSES_BORDER_MODEL_SEH

#include "common/common_model.seh"
#include "ncurses/window/window_model.seh"

#define SUT_NCURSES_ACS(c)  (acs_map->arr[(unsigned char)c])

/* VT100 symbols begin here */
#define SUT_ACS_ULCORNER    SUT_NCURSES_ACS('l') /* upper left corner */
#define SUT_ACS_LLCORNER    SUT_NCURSES_ACS('m') /* lower left corner */
#define SUT_ACS_URCORNER    SUT_NCURSES_ACS('k') /* upper right corner */
#define SUT_ACS_LRCORNER    SUT_NCURSES_ACS('j') /* lower right corner */
#define SUT_ACS_LTEE        SUT_NCURSES_ACS('t') /* tee pointing right */
#define SUT_ACS_RTEE        SUT_NCURSES_ACS('u') /* tee pointing left */
#define SUT_ACS_BTEE        SUT_NCURSES_ACS('v') /* tee pointing up */
#define SUT_ACS_TTEE        SUT_NCURSES_ACS('w') /* tee pointing down */
#define SUT_ACS_HLINE       SUT_NCURSES_ACS('q') /* horizontal line */
#define SUT_ACS_VLINE       SUT_NCURSES_ACS('x') /* vertical line */
#define SUT_ACS_PLUS        SUT_NCURSES_ACS('n') /* large plus or crossover */
#define SUT_ACS_S1          SUT_NCURSES_ACS('o') /* scan line 1 */
#define SUT_ACS_S9          SUT_NCURSES_ACS('s') /* scan line 9 */
#define SUT_ACS_DIAMOND     SUT_NCURSES_ACS('`') /* diamond */
#define SUT_ACS_CKBOARD     SUT_NCURSES_ACS('a') /* checker board (stipple) */
#define SUT_ACS_DEGREE      SUT_NCURSES_ACS('f') /* degree symbol */
#define SUT_ACS_PLMINUS     SUT_NCURSES_ACS('g') /* plus/minus */
#define SUT_ACS_BULLET      SUT_NCURSES_ACS('~') /* bullet */
/* Teletype 5410v1 symbols begin here */
#define SUT_ACS_LARROW      SUT_NCURSES_ACS(',') /* arrow pointing left */
#define SUT_ACS_RARROW      SUT_NCURSES_ACS('+') /* arrow pointing right */
#define SUT_ACS_DARROW      SUT_NCURSES_ACS('.') /* arrow pointing down */
#define SUT_ACS_UARROW      SUT_NCURSES_ACS('-') /* arrow pointing up */
#define SUT_ACS_BOARD       SUT_NCURSES_ACS('h') /* board of squares */
#define SUT_ACS_LANTERN     SUT_NCURSES_ACS('i') /* lantern symbol */
#define SUT_ACS_BLOCK       SUT_NCURSES_ACS('0') /* solid square block */
/*
 * These aren't documented, but a lot of System Vs have them anyway
 * (you can spot pprryyzz{{||}} in a lot of AT&T terminfo strings).
 * The ACS_names may not match AT&T's, our source didn't know them.
 */
#define SUT_ACS_S3          SUT_NCURSES_ACS('p') /* scan line 3 */
#define SUT_ACS_S7          SUT_NCURSES_ACS('r') /* scan line 7 */
#define SUT_ACS_LEQUAL      SUT_NCURSES_ACS('y') /* less/equal */
#define SUT_ACS_GEQUAL      SUT_NCURSES_ACS('z') /* greater/equal */
#define SUT_ACS_PI          SUT_NCURSES_ACS('{') /* Pi */
#define SUT_ACS_NEQUAL      SUT_NCURSES_ACS('|') /* not equal */
#define SUT_ACS_STERLING    SUT_NCURSES_ACS('}') /* UK pound sign */

/*
 * Line drawing ACS names are of the form ACS_trbl, where t is the top, r
 * is the right, b is the bottom, and l is the left.  t, r, b, and l might
 * be B (blank), S (single), D (double), or T (thick).  The subset defined
 * here only uses B and S.
 */
#define ACS_BSSB    ACS_ULCORNER
#define ACS_SSBB    ACS_LLCORNER
#define ACS_BBSS    ACS_URCORNER
#define ACS_SBBS    ACS_LRCORNER
#define ACS_SBSS    ACS_RTEE
#define ACS_SSSB    ACS_LTEE
#define ACS_SSBS    ACS_BTEE
#define ACS_BSSS    ACS_TTEE
#define ACS_BSBS    ACS_HLINE
#define ACS_SBSB    ACS_VLINE
#define ACS_SSSS    ACS_PLUS

#define CHNULL_COVERAGE(ch, chstr)   \
    coverage C_##ch \
    { \
        if(isNULLChTypeT(ch)) return { ch##null, chstr" is null" }; \
        return { ch##notnull, chstr" is not null" }; \
    } \

#define WIN_COVERAGE(win)   \
    coverage Win \
    { \
        if(win == NULL || equals_VoidTPtr(*win, getPtrNCursesStdWindow(context))) \
            return { WinIsNULL, "StdScr Window used" }; \
        else if(getTypedObjectInMemory(*win, &type_NCursesWindow) == NULL) \
            return { WinIsBAD, "Bad window pointer" }; \
        else \
            return { WinIsNotNULL, "User specified window used" }; \
    } \

extern ChTypeTArray* acs_map;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** border_spec **/
//This specification refers to: border, wborder
specification
IntT border_spec(CallContext context, WindowTPtr* win, ChTypeT ls, ChTypeT rs,
    ChTypeT ts, ChTypeT bs, ChTypeT tl, ChTypeT tr, ChTypeT bl, ChTypeT br);

/** box_spec **/
specification
IntT box_spec(CallContext context, WindowTPtr* win,
    ChTypeT verch, ChTypeT horch);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isNULLChTypeT(ChTypeT Ch);
bool isSingleChTypeT(ChTypeT Ch);
void onAcsMapUpdate(CallContext context);

void border_model(NCursesWindow* pDesc, ChTypeT ls,
    ChTypeT rs, ChTypeT ts, ChTypeT bs, ChTypeT tl, ChTypeT tr, ChTypeT bl, ChTypeT br);

void onBorder(CallContext context, WindowTPtr* win, IntT spec);

#endif

