/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/border/tests/border_scenario.seh"
#include "ncurses/border/tests/border_main.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_model.seh"
#include "ncurses/window/window_model.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

#include "ncurses/window/refresh_media.seh"

#include "ncurses/border/border_media.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static const WCharT ChArray[][5] =
{
    { 0,     'c',    'i',    'q',   'y' },
    { 0,     'd',    'j',    'r',   'z' },
    { 0,     'e',    'k',    's',   '+' },
    { 0,     'f',    'l',    't',   '-' },
    { 0,     'g',    'm',    'u',   '%' },
    { 0,     'h',    'n',    'v',   '^' },
    { 'a',   0,      'o',    'w',   '#' },
    { 'b',   'i',    'p',    'x',    0  }
};

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static NewWinReturnType* winRet;
static CByteArray *termInfo;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_border_scenario(int argc, char** argv)
{
    // Init test scenario data
    //context = createProcessForNCurses(5, 5);
    context = createDefaultProcessForNCurses();
    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    initscr_spec(context);

    onAcsMapUpdate(context);

    initReqFilters();

    registerStdTerminal(context);

    setVariables_StdTerminal(context);

    winRet = newwin_spec(context, 30, 30, 5, 5);

    return true;
}

static void finish_border_scenario(void)
{
    endwin_spec(context);
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Utilities                             **/
/********************************************************************/

static void DumpScr(void)
{
    ChTypeTArray* scrDump;
    NCursesWindow* stdWnd = getNCursesStdWindow(context);
    IntT i;

    scrDump = create_ChTypeTArray_ScreenDump(ncursesScreenDump(context), stdWnd->ncols, stdWnd->nlines);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump);

    DUMP("\n\n");
    for(i = 0; i < scrDump->size; i++) DUMP("%c", chtypeAt_ChTypeTArray(scrDump, i).letter);
    DUMP("\n\n");
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool border_scen()
{
    int i2;
    ChTypeT Ch, *arr;
    ChTypeTArray* pChArr = create_ChTypeTArray(8);
    NCursesWindow* stdWnd = getNCursesStdWindow(context);

    arr = pChArr->arr;
    Ch = create_emptyChTypeT();

    iterate(int i = 0; i < sizeof(ChArray[0])/sizeof(ChArray[0][0]); i++;)
    {
        for(i2 = 0; i2 < 8; i2++) arr[i2].letter = ChArray[i2][i];

        border_spec(context, &winRet->win, arr[0], arr[1], arr[2], arr[3], arr[4],
            arr[5], arr[6], arr[7]);

        DumpScr();

        refresh_spec(context, NULL);

        border_spec(context, &stdWnd->address, arr[0], arr[1], arr[2], arr[3], arr[4],
            arr[5], arr[6], arr[7]);

        DumpScr();

        refresh_spec(context, NULL);

        border_spec(context, NULL, arr[0], arr[1], arr[2], arr[3], arr[4],
            arr[5], arr[6], arr[7]);

        DumpScr();

        refresh_spec(context, NULL);
    }

    return true;
}

scenario
bool box_scen()
{
    int i2;
    ChTypeT Ch, *arr;
    ChTypeTArray* pChArr = create_ChTypeTArray(8);
    arr = pChArr->arr;

    Ch = create_emptyChTypeT();

    iterate(int i = 0; i < sizeof(ChArray[0])/sizeof(ChArray[0][0]); i++;)
    {
        for(i2 = 0; i2 < 8; i2++) arr[i2].letter = ChArray[i2][i];

        box_spec(context, &winRet->win, arr[0], arr[1]);

        DumpScr();

        refresh_spec(context, NULL);

        box_spec(context, NULL, arr[0], arr[1]);

        DumpScr();

        refresh_spec(context, NULL);
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_border_scenario =
{
    .init = init_border_scenario,
        .finish = finish_border_scenario,
        .actions = {
            border_scen,
            box_scen,
            NULL
    }
};

#ifdef NCURSES_BORDER_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    main_ncurses_border(argc, argv);

    // unloadSUT();
    return 0;
}

#endif
