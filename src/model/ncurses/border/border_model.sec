/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/window/window_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/border/border_model.seh"

ChTypeTArray* acs_map;

#pragma SEC subsystem border "ncurses.border"

/* 
   The group of functions 'ncurses.border' consists of: 
       border [1]
       box [1]
       wborder [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
    Linux Standard Base Core Specification 3.1
    Copyright (c) 2004, 2005 Free Standards Group

        refers

    The Single UNIX (R) Specification, Version 2Copyright (c) 1997 The Open Group

    NAME

    border, wborder - draw borders from single-byte characters and renditions 

     SYNOPSIS

    #include <curses.h> 

    int border(chtype ls, chtype rs, chtype ts, chtype bs, chtype tl, 
    chtype tr, chtype bl, chtype br); 

    int wborder(WINDOW *win, chtype ls, chtype rs, chtype ts, chtype bs, 
    chtype tl, chtype tr, chtype bl, chtype br); 

     DESCRIPTION

    The border() and wborder() functions draw a border around the edges of the 
    current or specified window. These functions do not advance the cursor position. 
    These functions do not perform special character processing.These functions do 
    not perform wrapping. 

    The arguments in the left-hand column of the following table contain single- 
    byte characters with renditions, which have the following uses in drawing the 
    border: 

    Argument 

    Default 

    Name Usage Value 

    ls Starting-column side ACS_VLINE 

    rs Ending-column side ACS_VLINE 

    ts First-line side ACS_HLINE 

    bs Last-line side ACS_HLINE 

    tl Corner of the first line and the starting column ACS_ULCORNER 

    tr Corner of the first line and the ending column ACS_URCORNER 

    bl Corner of the last line and the starting column ACS_LLCORNER 

    br Corner of the last line and the ending column ACS_LRCORNER If the value 
    of any argument in the left-hand column is 0, then the default value in the 
    right-hand column is used.If the value of any argument in the left-hand column 
    is a multi-column character, the results are undefined. 

     RETURN VALUE

    Upon successful completion, these functions return OK.Otherwise, they return 
    ERR. 

     ERRORS

    No errors are defined. 
*/

//This specification refers to: border, wborder
specification
IntT border_spec(CallContext context, WindowTPtr* win, ChTypeT ls, ChTypeT rs,
    ChTypeT ts, ChTypeT bs, ChTypeT tl, ChTypeT tr, ChTypeT bl, ChTypeT br)
{
    NCursesWindow* WndModel;
    NCursesWindow* WndLocal;

    pre
    {
        if(win == NULL)
        {
            FILTER("border");

            WndLocal = getNCursesStdWindow(context);
        }
        else
        {
            FILTER("wborder");

            WndLocal = getWindow(win);
        }

        /*
         * If the value of any argument in the left-hand column is a multi-column 
         * character, the results are undefined.
         */
        REQ("app.border.06.02;app.wborder.06.02",
            "left-hand column's any argument's value is a multi-column ch => undefined results",
            isSingleChTypeT(ls) && isSingleChTypeT(rs) && isSingleChTypeT(ts) && 
            isSingleChTypeT(bs) && isSingleChTypeT(tl) && isSingleChTypeT(tr) && 
            isSingleChTypeT(bl) && isSingleChTypeT(br));

        WndModel = createNCursesWindow_Local(WndLocal);
        border_model(WndModel, ls, rs, ts, bs, tl, tr, bl, br);

        return true;
    }

    coverage AllNULL
    {
        if(isNULLChTypeT(ls) || isNULLChTypeT(rs) || isNULLChTypeT(ts) || 
            isNULLChTypeT(bs) || isNULLChTypeT(tl) || isNULLChTypeT(tr) || 
            isNULLChTypeT(bl) || isNULLChTypeT(br))
            return { FoundNULL, "NULL-ch found" };

        return { NotFoundNULL, "NULL-ch not found" };
    }

    CHNULL_COVERAGE(ls, "ls")
    CHNULL_COVERAGE(rs, "rs")
    CHNULL_COVERAGE(ts, "ts")
    CHNULL_COVERAGE(bs, "bs")
    CHNULL_COVERAGE(tl, "tl")
    CHNULL_COVERAGE(tr, "tr")
    CHNULL_COVERAGE(bl, "bl")
    CHNULL_COVERAGE(br, "br")
    
    WIN_COVERAGE(win)

    post
    {
        /*
         * Otherwise, they return ERR.
         */
        if(!WndModel)
        {
            REQ("border.07.02;wborder.07.02", "shall return ERR", border_spec == SUT_ERR);

            return true;
        }

        /*
         * The border() and wborder() functions draw a border around the edges of the 
         * current or specified window.
         */
        /*
         * These functions do not perform special character processing.
         */
        /*
         * These functions do not perform wrapping.
         */
        /*
         * If the value of any argument in the left-hand column is 0, then the default 
         * value in the right-hand column is used.
         */
        /*
         * The arguments in the left-hand column of the following table contain single- 
         * byte characters with renditions, which have the following uses in drawing the 
         * border: Argument Default Name Usage Value ls Starting-column side ACS_VLINE rs 
         * Ending-column side ACS_VLINE ts First-line side ACS_HLINE bs Last-line side 
         * ACS_HLINE tl Corner of the first line and the starting column ACS_ULCORNER tr 
         * Corner of the first line and the ending column ACS_URCORNER bl Corner of the 
         * last line and the starting column ACS_LLCORNER br Corner of the last line and 
         * the ending column ACS_LRCORNER If the value of any argument in the left-hand 
         * column is 0, then the default value in the right-hand column is used.If the 
         * value of any argument in the left-hand column is a multi-column character, the 
         * results are undefined.
         */
        REQ("border.01;wborder.01;border.03;wborder.03;border.04;wborder.04;border.06.01;wborder.06.01;border.05;wborder.05",
            "shall draw a border", check_NCursesWindows(WndModel, WndLocal, CH_ALL & ~CH_CURSOR , -1));

        /*
         * These functions do not advance the cursor position.
         */
        REQ("border.02;wborder.02", "do not advance the cursor position",
            check_NCursesWindows(WndModel, WndLocal, CH_CURSOR, -1));

        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("border.07.01;wborder.07.01", "shall return OK", border_spec == SUT_OK);

        return true;
    }

    FILTER_CLEAN;
}

void onBorder(CallContext context, WindowTPtr* win, IntT spec)
{
    if(spec == SUT_OK)
    {
        if(win == NULL) win = getLPtrNCursesStdWindow(context);

        updateNCursesWindowMayNULL(context, win);
        refresh_WindowTPtr(context, win, false);
    }
}


/*
    Linux Standard Base Core Specification 3.1
    Copyright (c) 2004, 2005 Free Standards Group

        refers

    The Single UNIX (R) Specification, Version 2 
    Copyright (c) 1997 The Open Group

    NAME

    box - draw borders from single-byte characters and renditions 

    SYNOPSIS

     #include <curses.h> int box(WINDOW *win, chtype verch, chtype horch); 

    DESCRIPTION

    The box() function draws a border around the edges of the specified window. 
    This function does not advance the cursor position. This function does not 
    perform special character processing. This function does not perform wrapping. 
    The function box(win, verch, horch) has an effect equivalent to: 


    wborder(win, verch, verch, horch, horch, 0, 0, 0, 0); 


    RETURN VALUE

    Upon successful completion, box() returns OK. Otherwise, it returns ERR. 

    ERRORS

    No errors are defined.
*/

specification
IntT box_spec(CallContext context, WindowTPtr* win, ChTypeT verch, ChTypeT horch)
{
    NCursesWindow* WndLocal;
    NCursesWindow* WndModel;
    ChTypeT NULL_ChTypeT = {0,0,0,0,0,0,0,0,0,0,0};//create_emptyChTypeT(); - ?

    pre
    {
        WndLocal = win == NULL ? getNCursesStdWindow(context) : getWindow(win);

        if(WndModel = createNCursesWindow_Local(WndLocal))
            border_model(WndModel, verch, verch, horch, horch,
                NULL_ChTypeT, NULL_ChTypeT, NULL_ChTypeT, NULL_ChTypeT);

        return true;
    }

    WIN_COVERAGE(win)
    
    coverage AllNULL
    {
        if(isNULLChTypeT(verch) || isNULLChTypeT(horch)) return { FoundNULL, "NULL-ch found" };
        return { NotFoundNULL, "NULL-ch not found" };
    }
    
    CHNULL_COVERAGE(verch, "verch")
    CHNULL_COVERAGE(horch, "horch")

    post
    {
        /*
         * Otherwise, it returns ERR.
         */
        if(!WndModel)
        {
            REQ("box.06.02", "shall return ERR", box_spec == SUT_ERR);

            return true;
        }
        
        /*
         * The box() function draws a border around the edges of the specified window.
         */
        /*
         * The function box(win, verch, horch) has an effect equivalent to: 
         * wborder(win, verch, verch, horch, horch, 0, 0, 0, 0);
         */
        /*
         * This function does not perform wrapping.
         */
        /*
         * This function does not perform special character processing.
         */
        REQ("box.01;box.05;box.04;box.03", "function draws a border around the edges",
            check_NCursesWindows(WndModel, WndLocal, CH_ALL & ~CH_CURSOR , -1));

        /*
         * This function does not advance the cursor position.
         */
        REQ("box.02", "does not advance the cursor position",
            check_NCursesWindows(WndModel, WndLocal, CH_CURSOR, -1));

        /*
         * Upon successful completion, box() returns OK.
         */
        REQ("box.06.01", "return value", box_spec == SUT_OK);

        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isNULLChTypeT(ChTypeT Ch)
{
    ChTypeT NULL_ChTypeT = {0,0,0,0,0,0,0,0,0,0,0};
    return equals_ChTypeT(Ch, NULL_ChTypeT/*create_emptyChTypeT() - ?*/);
}

bool isSingleChTypeT(ChTypeT Ch)
{
    return /* TODO: (base1/demo) isprintable Ch */ true;
}

void border_model(NCursesWindow* pDesc, ChTypeT ls,
    ChTypeT rs, ChTypeT ts, ChTypeT bs, ChTypeT tl, ChTypeT tr, ChTypeT bl, ChTypeT br)
{
    IntT i;

    if(!pDesc) return;

    if(isNULLChTypeT(ls)) ls = SUT_ACS_VLINE;
    if(isNULLChTypeT(rs)) rs = SUT_ACS_VLINE;
    if(isNULLChTypeT(ts)) ts = SUT_ACS_HLINE;
    if(isNULLChTypeT(bs)) bs = SUT_ACS_HLINE;
    if(isNULLChTypeT(tl)) tl = SUT_ACS_ULCORNER;
    if(isNULLChTypeT(tr)) tr = SUT_ACS_URCORNER;
    if(isNULLChTypeT(bl)) bl = SUT_ACS_LLCORNER;
    if(isNULLChTypeT(br)) br = SUT_ACS_LRCORNER;

    for(i = 1; i < pDesc->nlines-1; i++) setElement_NCursesWindow_YX(pDesc, i, 0, ls);
    for(i = 1; i < pDesc->nlines-1; i++) setElement_NCursesWindow_YX(pDesc, i, pDesc->ncols-1, rs);
    for(i = 1; i < pDesc->ncols-1; i++) setElement_NCursesWindow_YX(pDesc, 0, i, ts);
    for(i = 1; i < pDesc->ncols-1; i++) setElement_NCursesWindow_YX(pDesc, pDesc->nlines-1, i, bs);

    setElement_NCursesWindow_YX(pDesc, 0, 0, tl);
    setElement_NCursesWindow_YX(pDesc, 0, pDesc->ncols-1, tr);
    setElement_NCursesWindow_YX(pDesc, pDesc->nlines-1, 0, bl);
    setElement_NCursesWindow_YX(pDesc, pDesc->nlines-1, pDesc->ncols-1, br);

    pushNCursesWindow(pDesc);
}
