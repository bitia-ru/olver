/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/window_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/border/border_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesBorderSubsystem(void)
{
    // Set up mediators
    set_mediator_border_spec(border_media);
    set_mediator_box_spec(box_media);

    // Set up formatters
    registerTSFormatter("chtype", (TSFormatterFuncType)chtype_formatter);
}

/********************************************************************/
/**                           Instruments                          **/
/********************************************************************/

void onAcsMapUpdate(CallContext context)
{
    IntT sz = 0;
    TSCommand command;
    
    if(acs_map != NULL) return;
    
    command = create_TSCommand();

    format_TSCommand( &command, "acsmap_update:");

    executeCommandInContext( context, &command );
    if (!isBadVerdict())
    {
        sz = readInt_TSStream(&command.response);

        acs_map = create_ChTypeTArray(sz);

        while(sz--)
            setChTypeAt_ChTypeTArray(acs_map, sz,
                readChTypeT_TSStream(&command.response));
    }

    destroy_TSCommand(&command);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** border_spec **/
//This mediator refers to: border, wborder
mediator border_media for specification
IntT border_spec(CallContext context, WindowTPtr* win, ChTypeT ls, ChTypeT rs,
    ChTypeT ts, ChTypeT bs, ChTypeT tl, ChTypeT tr, ChTypeT bl, ChTypeT br)
{
    call
    {
        IntT res;

        TSCommand command = create_TSCommand();

        if(win != NULL) format_TSCommand(&command,
                "wborder:$(ptr)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)",
                create_VoidTPtrObj(*win),
                create_ChTypeTObj(ls),
                create_ChTypeTObj(rs),
                create_ChTypeTObj(ts),
                create_ChTypeTObj(bs),
                create_ChTypeTObj(tl),
                create_ChTypeTObj(tr),
                create_ChTypeTObj(bl),
                create_ChTypeTObj(br));

        else format_TSCommand(&command,
                "border:$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)$(chtype)",
                create_ChTypeTObj(ls),
                create_ChTypeTObj(rs),
                create_ChTypeTObj(ts),
                create_ChTypeTObj(bs),
                create_ChTypeTObj(tl),
                create_ChTypeTObj(tr),
                create_ChTypeTObj(bl),
                create_ChTypeTObj(br));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    
    state
    {
        onBorder(context, win, border_spec);
    }
}



/** box_spec **/

mediator box_media for specification
IntT box_spec(CallContext context, WindowTPtr* win, ChTypeT verch, ChTypeT horch)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        if(win == NULL) win = getLPtrNCursesStdWindow(context);

        format_TSCommand(&command, "box:$(ptr)$(chtype)$(chtype)",
            create_VoidTPtrObj(*win),
            create_ChTypeTObj(verch),
            create_ChTypeTObj(horch)
            );

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onBorder(context, win, box_spec);
    }
}
