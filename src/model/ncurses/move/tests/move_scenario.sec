/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/move/tests/move_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"

#include "ncurses/move/move_media.seh"

#include "ncurses/window/window_media.seh"
#include "ncurses/input/char_media.seh"

#include "ncurses/char/add_media.seh"
#include "ncurses/char/input_media.seh"
#include "ncurses/ncurses/chtypearray.seh"

#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/window/refresh_model.seh"

static CallContext context, context1, context2;
static CByteArray *termInfo;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_move_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();
    context1 = createDefaultProcessForNCurses();
    context2 = createDefaultProcessForNCurses();
    initReqFilters();

    return true;
}


static void finish_move_scenario(void)
{
      TEST_SCENARIO_VERDICT_VERBOSE(ncurses_move_scenario);
      terminateNCursesProcess(context);
      terminateNCursesProcess(context1);
      terminateNCursesProcess(context2);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_mvcur_move_scen()
{
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NCursesWindow* stdWnd;
    IntT res;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;

    ch.letter = 'w';

     initscr_spec(context);
     stdWnd = getNCursesStdWindow(context);

    res = mvcur_spec(context, stdWnd->cursorPos, stdWnd->cursorPos);

    res = mvcur_spec(context, stdWnd->cursorPos, pos);

    ch = inch_spec(context, NULL, pos);

    ch = inch_spec(context, NULL, create_NCursesPosition(0, 0));

    res = mvcur_spec(context, stdWnd->cursorPos, create_NCursesPosition(10000000, 10000000));

    res = mvcur_spec(context, stdWnd->cursorPos, create_NCursesPosition(-1000000, -1000000));

    initscr_spec(context1);
    res = move_spec(context1, NULL, pos);

    initscr_spec(context2);
    winRet = newwin_spec( context2, 13, 13, 5, 5);
    res = move_spec(context2, &(winRet->win), pos);

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_move_scenario =
{
    .init = init_move_scenario,
        .finish = finish_move_scenario,
        .actions = {
            ncurses_mvcur_move_scen,
            NULL
    }
};

bool main_ncurses_move( int argc, char** argv )
{
    ncurses_move_scenario(argc, argv);
    return true;
}


#ifdef NCURSES_MOVE_LOCAL_MAIN
/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}
//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_ncurses_move(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
