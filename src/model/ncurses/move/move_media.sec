/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/move/move_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesMoveSubsystem(void)
{
  // Set up mediators
    set_mediator_move_spec(move_media);
    set_mediator_mvcur_spec(mvcur_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** move_spec **/
//This mediator refers to: move, wmove
mediator move_media for specification
IntT move_spec( CallContext context, WindowTPtr* win,
               NCursesPosition* cursorPos)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        if(win !=NULL)
        {
            format_TSCommand( &command, "wmove:$(ptr)$(int)$(int)",
                create_VoidTPtrObj(*win),
                create_IntTObj(cursorPos->y), create_IntTObj(cursorPos->x));
        }
        else
        {        
            format_TSCommand( &command, "move:$(int)$(int)",
                create_IntTObj(cursorPos->y), create_IntTObj(cursorPos->x));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        //onNCursesUniversal(context, win, move_spec);
        onMove(context, win, cursorPos, move_spec);
    }
}



/** mvcur_spec **/
mediator mvcur_media for specification
IntT mvcur_spec( CallContext context, NCursesPosition* cursorPosOld,
                NCursesPosition* cursorPosNew)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mvcur:$(int)$(int)$(int)$(int)",
            create_IntTObj(cursorPosOld->y), create_IntTObj(cursorPosOld->x),
            create_IntTObj(cursorPosNew->y), create_IntTObj(cursorPosNew->x));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onMvcur(context, cursorPosOld, cursorPosNew, mvcur_spec);
        //onNCursesUniversal(context, NULL, mvcur_spec);
    }
}



