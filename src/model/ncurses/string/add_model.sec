/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/ncurses/ncurses_data.seh"
#include "data/ncurses_model.seh"
#include "ncurses/string/add_model.seh"


#pragma SEC subsystem string "ncurses.string"



/*
   The group of functions 'ncurses.string.add' consists of:
       addnstr [1]
       addstr [1]
       mvaddnstr [1]
       mvaddstr [1]
       mvwaddnstr [1]
       mvwaddstr [1]
       waddnstr [1]
       waddstr [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

-------------------------------------------------------------------------------

NAME

    addnstr, addstr, mvaddnstr, mvaddstr, mvwaddnstr, mvwaddstr waddnstr,
    waddstr - add a string of multi-byte characters without rendition to a
    window and advance cursor

SYNOPSIS

    #include <curses.h>
    int addnstr(const char *str, int n);
    int addstr(const char *str);
    int mvaddnstr(int y, int x, const char *str, int n);
    int mvaddstr(int y, int x, const char *str);
    int mvwaddnstr(WINDOW *win, int y, int x, const char *str, int n);
    int mvwaddstr(WINDOW *win, int y, int x, const char *str);
    int waddnstr(WINDOW *win, const char *str, int n);
    int waddstr(WINDOW *win, const char *str);

DESCRIPTION

    These functions write the characters of the string str on the current or
    specified window starting at the current or specified position using the
    background rendition.

    These functions advance the cursor position. These functions perform
    special character processing. These functions perform wrapping.

    The addstr(), mvaddstr(), mvwaddstr() and waddstr() functions are similar
    to calling mbstowcs() on str, and then calling addwstr(), mvaddwstr(),
    mvwaddwstr() and waddwstr(), respectively.

    The addnstr(), mvaddnstr(), mvwaddnstr() and waddnstr() functions use at
    most n bytes from str. These functions add the entire string when n is -1.
    These functions are similar to calling mbstowcs() on the first n bytes of
    str, and then calling addwstr(), mvaddwstr(), mvwaddwstr() and waddwstr(),
    respectively.

RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they
    return ERR.

ERRORS

    No errors are defined.
*/

//This specification refers to: mvwaddnstr, waddnstr, mvwaddstr, waddstr,
//mvaddnstr, addnstr, mvaddstr, addstr
specification
IntT addstr_spec( CallContext context,  WindowTPtr* win, NCursesPosition*pos,  CString* str, IntT* n)
{
    NCursesWindow* modifiedWindow;

    if (win!=NULL)
    {
        if (n!=NULL){
            if (pos!=NULL){  FILTER("mvwaddnstr"); }
            else {   FILTER("waddnstr"); }
        }
        else{
            if (pos!=NULL) { FILTER("mvwaddstr");  }
            else{ FILTER("waddstr"); }
        }
    }
    else
    {
        if (n!=NULL){
            if (pos!=NULL){ FILTER("mvaddnstr"); }
            else{ FILTER("addnstr"); }
        }
        else{
            if (pos!=NULL){ FILTER("mvaddstr"); }
            else{ FILTER("addstr"); }
        }
    }

    pre
    {
        modifiedWindow = addstr_model(context, win, pos,  str, n);

        return true;
    }
    post
    {
        /*
        * These functions are similar to calling mbstowcs() on the first n bytes of str,
        * and then calling addwstr(), mvaddwstr(), mvwaddwstr() and waddwstr(),
        * respectively.
        */
        REQ("addnstr.07;mvaddnstr.07;mvwaddnstr.07;waddnstr.07", "", TODO_REQ());

        /*
        * The addstr(), mvaddstr(), mvwaddstr() and waddstr() functions are similar to
        * calling mbstowcs() on str, and then calling addwstr(), mvaddwstr(), mvwaddwstr()
        * and waddwstr(), respectively.
        */
        REQ("addstr.05;mvaddstr.05;mvwaddstr.05;waddstr.05", "", TODO_REQ());


        if (addstr_spec!=SUT_EOK)
        {
            /*
            * Otherwise, they return ERR.
            */
            REQ("addnstr.08.02;addstr.08.02;mvaddnstr.08.02;mvaddstr.08.02;mvwaddnstr.08.02;mvwaddstr.08.02;waddnstr.08.02;waddstr.08.02",
                "Function shall return ERR", addstr_spec==SUT_ERR);
        }
        else
        {
            NCursesWindow* curWnd=getWindowMayNULL(context, win);

            /*
            * Upon successful completion, these functions return OK.
            */
            REQ("addnstr.08.01;addstr.08.01;mvaddnstr.08.01;mvaddstr.08.01;mvwaddnstr.08.01;mvwaddstr.08.01;waddnstr.08.01;waddstr.08.01",
                "Function shall return OK", addstr_spec == SUT_EOK);


            /*
            * [Compare model window with the real window]
            */
            REQ("", "Data in the window shall be valid", check_NCursesWindows(modifiedWindow, curWnd, CH_ALL, 10));

        }

        return true;
    }
    FILTER_CLEAN;
}


NCursesWindow*  addstr_model( CallContext context, WindowTPtr* win, NCursesPosition*pos,  CString* str, IntT* n)
{
    NCursesWindow*   curWnd = createNCursesWindow_Local(getWindowMayNULL(context, win));
    NCursesPosition* curPos = getWindowPositionMayNULL(curWnd, pos);
    IntT numChars;
    IntT insPos;
    IntT i;

    curWnd->cursorPos->x = curPos->x;
    curWnd->cursorPos->y = curPos->y;


    numChars=length_CString(str);

    if (n!=NULL)
    {
        if (*n==-1)
        {
            /*
            * These functions add the entire string when n is -1.
            */
            IMPLEMENT_REQ("addnstr.06;mvaddnstr.06;mvwaddnstr.06;waddnstr.06");

            numChars=length_CString(str);

        }
        else
        {
            /*
            * The addnstr(), mvaddnstr(), mvwaddnstr() and waddnstr() functions use at most n
            * bytes from str.
            */
            IMPLEMENT_REQ("addnstr.05;mvaddnstr.05;mvwaddnstr.05;waddnstr.05");

            numChars = min(*n, length_CString(str));
        }
    }

    for (i=0;i<numChars;i++)
    {
        ChTypeT ch = create_ChTypeTWithAttr(curWnd->attrs, curWnd->bkgd, charAt_CString( str, i));

        /*
        * These functions perform special character processing.
        */
        IMPLEMENT_REQ("addnstr.03;addstr.03;mvaddnstr.03;mvaddstr.03;mvwaddnstr.03;mvwaddstr.03;waddnstr.03;waddstr.03");

        if(!addSpecChar(curWnd, curWnd->cursorPos, ch, true, false))
        {

            /*
            * These functions perform wrapping.
            */
            IMPLEMENT_REQ("addnstr.04;addstr.04;mvaddnstr.04;mvaddstr.04;mvwaddnstr.04;mvwaddstr.04;waddnstr.04;waddstr.04");

            /*
            * These functions write the characters of the string str on the current or
            * specified window starting at the current or specified position using the
            * background rendition.
            */
            IMPLEMENT_REQ("addnstr.01;addstr.01;mvaddnstr.01;mvaddstr.01;mvwaddnstr.01;mvwaddstr.01;waddnstr.01;waddstr.01");

            setElement_NCursesWindow(curWnd, curWnd->cursorPos, ch);

            /*
            * These functions advance the cursor position.
            */
            IMPLEMENT_REQ("addnstr.02;addstr.02;mvaddnstr.02;mvaddstr.02;mvwaddnstr.02;mvwaddstr.02;waddnstr.02;waddstr.02");

            changeCursorPos(curWnd, curWnd->cursorPos, 1);

            if(curWnd->cursorPos->y == curWnd->nlines && curWnd->scroll)
            {
                scrollLineNcursesWindow(curWnd);
            }
        }
    }

    pushNCursesWindow(curWnd);

    return curWnd;
}

void onAddstr( CallContext context, WindowTPtr* win, NCursesPosition*pos,  CString* str, IntT* n, IntT addstr_spec)
{
    if (addstr_spec==SUT_EOK)
    {
        updateNCursesWindowMayNULL(context, win);
        refresh_WindowTPtr(context, win, 0);
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
