/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/string/scanf_media.seh"
#include "common/common_media.seh"
#include "process/process/process_common.seh"
#include "ncurses/input/string_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initNcursesStringScanfSubsystem(void)
{
    // Set up mediators
    // set_mediator_mvscanw_spec ( mvscanw_media  );
    // set_mediator_mvwscanw_spec( mvwscanw_media );
    set_mediator_scanw_spec      ( scanw_media    );
    set_mediator_vw_scanw_spec   ( vw_scanw_media );
    set_mediator_vwscanw_spec    ( vwscanw_media  );
    // set_mediator_wscanw_spec  ( wscanw_media   );

    // Set up mediators for helper functions
    set_mediator_getstr_noErrorFromReq_spec( getstr_noErrorFromReq_media );

    // Set up formatters
    registerTSFormatter( "typedlist"    , (TSFormatterFuncType)typedlist_formatter     );
    registerTSFormatter( "dotsarguments", (TSFormatterFuncType)dotsarguments_formatter );
    registerTSFormatter( "wstr"         , (TSFormatterFuncType)wstring_formatter       );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** mvscanw_spec **/
/****
mediator mvscanw_media for specification
ReturnType mvscanw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mvscanw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/

/** mvwscanw_spec **/
/****
mediator mvwscanw_media for specification
ReturnType mvwscanw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mvwscanw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/

/** scanw_spec **/
mediator scanw_media for specification
IntT scanw_spec
         ( CallContext context, WindowTPtr * win, NCursesPosition * pos, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        char * funcName;
        switch ( 10 * ( win == NULL ? 0 : 1 ) + ( pos == NULL ? 0 : 1 ) ) {
            case  0 : funcName = "scanw"   ; break;
            case  1 : funcName = "mvscanw" ; break;
            case 10 : funcName = "wscanw"  ; break;
            case 11 : funcName = "mvwscanw"; break;
        }

        add_List( arguments, 0, fmt );
        if ( pos != NULL ) {
            add_List( arguments, 0, create_IntTObj( pos->y ) );
            add_List( arguments, 1, create_IntTObj( pos->x ) );
        }
        if ( win != NULL ) { add_List( arguments, 0, create_VoidTPtrObj( * win ) ); }

        res = functionWithDotsCall( context, funcName, arguments, true, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

        if ( win != NULL ) { remove_List( arguments, 0 ); }
        if ( pos != NULL ) {
            remove_List( arguments, 0 );
            remove_List( arguments, 0 );
        }
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onScanw( context, win, pos, fmt, arguments, scanw_spec );
    }
}

/** vw_scanw_spec **/
mediator vw_scanw_media for specification
IntT vw_scanw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        add_List( arguments, 0, fmt                         );
        add_List( arguments, 0, create_VoidTPtrObj( * win ) );

        res = functionWithDotsCall
                  ( context, "vw_scanw", arguments, true, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

                                                  remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onScanw( context, win, NULL, fmt, arguments, vw_scanw_spec );
    }
}

/** vwscanw_spec **/
mediator vwscanw_media for specification
IntT vwscanw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        add_List( arguments, 0, fmt                         );
        add_List( arguments, 0, create_VoidTPtrObj( * win ) );

        res = functionWithDotsCall( context, "vwscanw", arguments, true, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

                                                  remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onScanw( context, win, NULL, fmt, arguments, vwscanw_spec );
    }
}

/** wscanw_spec **/
/****
mediator wscanw_media for specification
ReturnType wscanw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "wscanw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

/** getstr_noErrorFromReq_spec **/
mediator getstr_noErrorFromReq_media for specification
IntT getstr_noErrorFromReq_spec( CallContext context, WindowTPtr * win, NCursesPosition * pos, StringTPtr str )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        if(win == NULL)
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "getstr:$(ptr)",
                    create_VoidTPtrObj(str));
            }
            else
            {
                format_TSCommand( &command,
                    "mvgetstr:$(int)$(int)$(ptr)",
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str));
            }
        }
        else
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "wgetstr:$(ptr)$(ptr)",
                    create_VoidTPtrObj(*win),
                    create_VoidTPtrObj(str));
            }
            else
            {
                format_TSCommand( &command,
                    "mvwgetstr:$(ptr)$(int)$(int)$(ptr)",
                    create_VoidTPtrObj(*win),
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str));
            }
        }

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onGetstr(context, win, pos, str, getstr_noErrorFromReq_spec);
    }
}
