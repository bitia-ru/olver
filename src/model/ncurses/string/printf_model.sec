/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/ncurses/ncurses_data.seh"
#include "data/ncurses_model.seh"
#include "ncurses/string/printf_model.seh"
#include "ncurses/string/add_model.seh"
#include "process/process/process_common.seh"

#pragma SEC subsystem string "ncurses.string"

/*
   The group of functions 'ncurses.string.printf' consists of:
       mvprintw [1]
       mvwprintw [1]
       printw [1]
       vw_printw [1]
       vwprintw [1]
       wprintw [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    mvprintw, mvwprintw, printw, wprintw - print formatted output in window

SYNOPSIS

    #include <curses.h>

    int mvprintw(int y, int x, char *fmt, ...);

    int mvwprintw(WINDOW *win, int y, int x, char *fmt, ...);

    int printw(char *fmt, ...);

    int wprintw(WINDOW *win, char *fmt, ...);

DESCRIPTION

    The mvprintw(), mvwprintw(), printw() and wprintw() functions are analogous to printf(). The effect of these functions is as though sprintf() were used to format the string, and then waddstr() were used to add that multi-byte string to the current or specified window at the current or specified cursor position.

RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they return ERR.

ERRORS

    No errors are defined.
*/
specification
IntT printw_spec
         ( CallContext context, WindowTPtr * win, NCursesPosition * pos, CString * fmt, List /* NULL */ * arguments )
{
    NCursesWindow * modifiedWindow;

    switch ( 10 * ( win == NULL ? 0 : 1 ) + ( pos == NULL ? 0 : 1 ) ) {
        case  0 : FILTER( "printw"    ); break;
        case  1 : FILTER( "mvprintw"  ); break;
        case 10 : FILTER( "wprintw"   ); break;
        case 11 : FILTER( "mvwprintw" ); break;
    }

    pre
    {
        modifiedWindow = printw_model( context, win, pos, fmt, arguments );
        //modifiedWindow = addstr_model( context, win, pos, fmt, NULL );

        return true;
    }
    post
    {
        /*
         * The mvprintw(), mvwprintw(), printw() and wprintw() functions are analogous to printf().
         */
        REQ( "mvprintw.01;mvwprintw.01;printw.01;wprintw.01", "", TODO_REQ() );

        /*
         * The effect of these functions is as though sprintf() were used to format the
         * string, and then waddstr() were used to add that multi-byte string to the
         * current or specified window at the current or specified cursor position.
         */
        REQ( "mvprintw.02;mvwprintw.02;printw.02;wprintw.02", "", TODO_REQ() );

        if ( printw_spec != SUT_EOK )
        {
            /*
            * [Upon successful completion, these functions return OK.]
            * Otherwise, they return ERR.
            */
            REQ( "mvprintw.03.02;mvwprintw.03.02;printw.03.02;wprintw.03.02",
                 "these functions return ERR", printw_spec == SUT_ERR
               );
        }
        else
        {
            NCursesWindow * curWnd = getWindowMayNULL( context, win );

            /*
            * Upon successful completion, these functions return OK.
            */
            REQ( "mvprintw.03.01;mvwprintw.03.01;printw.03.01;wprintw.03.01",
                 "these functions return OK", printw_spec == SUT_EOK
               );

            /*
            * [Compare model window with the real window]
            */
            //REQ( "", "Data in the window shall be valid", check_NCursesWindows( modifiedWindow, curWnd, CH_ALL, 10 ) );
            {
                bool v = check_NCursesWindows( modifiedWindow, curWnd, CH_ALL, 10 );
                assertion( v, "printw_spec : check_NCursesWindows return false" );
                REQ( "", "Data in the window shall be valid", v );
            }
        }

        return true;
    }

    FILTER_CLEAN;
}

void onPrintw( CallContext context, WindowTPtr * win, NCursesPosition * pos,
               CString * fmt, List /* NULL */ * arguments, IntT printw_spec
             )
{
    if ( printw_spec == SUT_EOK )
    {
        updateNCursesWindowMayNULL( context, win );
        refresh_WindowTPtr( context, win, 0 );
    }
}

NCursesWindow * printw_model( CallContext context, WindowTPtr * win, NCursesPosition * pos,
                              CString * fmt, List /* NULL */ * arguments
                            )
{
    CString * expectedResult = getExpectedResult( "printw" );
    NCursesWindow   * curWnd = createNCursesWindow_Local( getWindowMayNULL( context, win ) );
    NCursesPosition * curPos = getWindowPositionMayNULL( curWnd, pos );

    int i;

    curWnd->cursorPos->x = curPos->x;
    curWnd->cursorPos->y = curPos->y;

    for ( i = 0; i < length_CString( expectedResult ); i++ ) {
        ChTypeT ch = create_ChTypeTWithAttr( curWnd->attrs, curWnd->bkgd, charAt_CString( expectedResult, i ) );
        if( ! addSpecChar( curWnd, curWnd->cursorPos, ch, true, false ) ) {
            setElement_NCursesWindow( curWnd, curWnd->cursorPos, ch );
            changeCursorPos( curWnd, curWnd->cursorPos, 1 );
            if( curWnd->cursorPos->y == curWnd->nlines && curWnd->scroll ) { scrollLineNcursesWindow( curWnd ); }
        }
    }

    pushNCursesWindow( curWnd );

    return curWnd;
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

vw_printw - print formatted output in window

SYNOPSIS

    #include <stdarg.h>
    #include <curses.h>

    int vw_printw(WINDOW *,    char *, va_list varglist);

DESCRIPTION

    The vw_printw() function achieves the same effect as wprintw() using a variable
    argument list. The third argument is a va_list, as defined in <stdarg.h>.

RETURN VALUE

    Upon successful completion, vw_printw() returns OK. Otherwise, it returns ERR.

ERRORS

    No errors are defined.
*/
specification
IntT vw_printw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    NCursesWindow * modifiedWindow;

    FILTER( "vw_printw" );

    pre
    {
        modifiedWindow = printw_model( context, win, NULL, fmt, arguments );

        return true;
    }
    post
    {
        /*
         * The vw_printw() function achieves the same effect as wprintw() using a variable
         * argument list.
         */
        REQ( "vw_printw.01", "", TODO_REQ() );

        /*
         * The third argument is a va_list, as defined in <stdargs.h>.
         */
        REQ( "vw_printw.02", "The third argument is a va_list", true );

        if ( vw_printw_spec != SUT_EOK )
        {
            /*
            * [Upon successful completion, vwprintw() returns OK.]
            * Otherwise, it returns ERR.
            */
            REQ( "vw_printw.03.02", "vw_printw() return ERR", vw_printw_spec == SUT_ERR );
        }
        else
        {
            NCursesWindow * curWnd = getWindowMayNULL( context, win );

            /*
            * Upon successful completion, vwprintw() returns OK.
            */
            REQ( "vw_printw.03.01", "Upon successful completion, vw_printw() returns OK", vw_printw_spec == SUT_EOK );

            /*
            * [Compare model window with the real window]
            */
            REQ( "", "Data in the window shall be valid", check_NCursesWindows( modifiedWindow, curWnd, CH_ALL, 10 ) );
        }

        return true;
    }

    FILTER_CLEAN;
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    vwprintw - print formatted output in window (TO BE WITHDRAWN)

SYNOPSIS

    #include <varargs.h>
    #include <curses.h>

    int vwprintw(WINDOW *, char *, va_list varglist);

DESCRIPTION

    The vwprintw() function achieves the same effect as wprintw() using a variable
    argument list. The third argument is a va_list, as defined in <varargs.h>.

RETURN VALUE

    Upon successful completion, vwprintw() returns OK. Otherwise, it returns ERR.

ERRORS

    No errors are defined.
*/
specification
IntT vwprintw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    NCursesWindow * modifiedWindow;

    FILTER( "vwprintw" );

    pre
    {
        modifiedWindow = printw_model( context, win, NULL, fmt, arguments );

        return true;
    }
    post
    {
        /*
         * The vwprintw() function achieves the same effect as wprintw() using a variable
         * argument list.
         */
        REQ( "vwprintw.01", "", TODO_REQ() );

        /*
         * The third argument is a va_list, as defined in <varargs.h>.
         */
        REQ( "vwprintw.02", "The third argument is a va_list", true );

        if ( vwprintw_spec != SUT_EOK )
        {
            /*
            * [Upon successful completion, vwprintw() returns OK.]
            * Otherwise, it returns ERR.
            */
            REQ( "vwprintw.03.02", "vwprintw() return ERR", vwprintw_spec == SUT_ERR );
        }
        else
        {
            NCursesWindow * curWnd = getWindowMayNULL( context, win );

            /*
            * Upon successful completion, vwprintw() returns OK.
            */
            REQ( "vwprintw.03.01", "Upon successful completion, vwprintw() returns OK", vwprintw_spec == SUT_EOK );

            /*
            * [Compare model window with the real window]
            */
            REQ( "", "Data in the window shall be valid", check_NCursesWindows( modifiedWindow, curWnd, CH_ALL, 10 ) );
        }

        return true;
    }

    FILTER_CLEAN;
}

