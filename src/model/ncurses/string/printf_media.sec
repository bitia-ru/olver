/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/string/printf_media.seh"
#include "common/common_media.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initNcursesStringPrintfSubsystem(void)
{
    // Set up mediators
    // set_mediator_mvprintw_spec ( mvprintw_media  );
    // set_mediator_mvwprintw_spec( mvwprintw_media );
    set_mediator_printw_spec      ( printw_media    );
    set_mediator_vw_printw_spec   ( vw_printw_media );
    set_mediator_vwprintw_spec    ( vwprintw_media  );
    // set_mediator_wprintw_spec  ( wprintw_media   );

    // Set up formatters
    registerTSFormatter( "typedlist"    , (TSFormatterFuncType)typedlist_formatter     );
    registerTSFormatter( "dotsarguments", (TSFormatterFuncType)dotsarguments_formatter );
    registerTSFormatter( "wstr"         , (TSFormatterFuncType)wstring_formatter       );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** mvprintw_spec **/
/****
mediator mvprintw_media for specification
ReturnType mvprintw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mvprintw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/

/** mvwprintw_spec **/
/****
mediator mvwprintw_media for specification
ReturnType mvwprintw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mvwprintw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/

/** printw_spec **/
mediator printw_media for specification
IntT printw_spec
         ( CallContext context, WindowTPtr * win, NCursesPosition * pos, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        char * funcName;
        switch ( 10 * ( win == NULL ? 0 : 1 ) + ( pos == NULL ? 0 : 1 ) ) {
            case  0 : funcName = "printw"   ; break;
            case  1 : funcName = "mvprintw" ; break;
            case 10 : funcName = "wprintw"  ; break;
            case 11 : funcName = "mvwprintw"; break;
        }

        add_List( arguments, 0, fmt );
        if ( pos != NULL ) {
            add_List( arguments, 0, create_IntTObj( pos->y ) );
            add_List( arguments, 1, create_IntTObj( pos->x ) );
        }
        if ( win != NULL ) { add_List( arguments, 0, create_VoidTPtrObj( * win ) ); }

        res = functionWithDotsCall( context, funcName, arguments, false, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

        if ( win != NULL ) { remove_List( arguments, 0 ); }
        if ( pos != NULL ) {
            remove_List( arguments, 0 );
            remove_List( arguments, 0 );
        }
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onPrintw( context, win, pos, fmt, arguments, printw_spec );
    }
}

/** vw_printw_spec **/
mediator vw_printw_media for specification
IntT vw_printw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        add_List( arguments, 0, fmt                         );
        add_List( arguments, 0, create_VoidTPtrObj( * win ) );

        res = functionWithDotsCall
                  ( context, "vw_printw", arguments, false, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

                                                  remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onPrintw( context, win, NULL, fmt, arguments, vw_printw_spec );
    }
}

/** vwprintw_spec **/
mediator vwprintw_media for specification
IntT vwprintw_spec( CallContext context, WindowTPtr * win, CString * fmt, List /* NULL */ * arguments )
{
    call
    {
        IntT res;

        add_List( arguments, 0, fmt                         );
        add_List( arguments, 0, create_VoidTPtrObj( * win ) );

        res = functionWithDotsCall
                  ( context, "vwprintw", arguments, false, NULL, NULL, NULL, NULL, NULL, NULL, & timestamp );

                                                  remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), fmt );    remove_List( arguments, 0 );

        return res;
    }
    state
    {
        onPrintw( context, win, NULL, fmt, arguments, vwprintw_spec );
    }
}

/** wprintw_spec **/
/****
mediator wprintw_media for specification
ReturnType wprintw_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "wprintw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/
