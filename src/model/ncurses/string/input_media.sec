/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/string/input_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesStringInputSubsystem(void)
{
  // Set up mediators
    set_mediator_instr_spec(instr_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** instr_spec **/
//This mediator refers to: mvwinnstr, winnstr, mvwinstr, winstr, 
//mvinnstr, innstr, mvinstr, instr
mediator instr_media for specification
InStrReturnType* instr_spec( CallContext context, WindowTPtr* win, NCursesPosition* pos,  IntT* n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;
        CString* str;
        InStrReturnType* rval;
        
        if (win!=NULL)
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwinnstr:$(ptr)$(int)$(int)$(int)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x), create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "winnstr:$(ptr)$(int)", create_VoidTPtrObj(*win), create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwinstr:$(ptr)$(int)$(int)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x));
                }
                else
                {
                    format_TSCommand( &command, "winstr:$(ptr)", create_VoidTPtrObj(*win));
                }
            }
        }
        else
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvinnstr:$(int)$(int)$(int)", create_IntTObj(pos->y), create_IntTObj(pos->x), create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "innstr:$(int)", create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvinstr:$(int)$(int)", create_IntTObj(pos->y), create_IntTObj(pos->x));
                }
                else
                {
                    format_TSCommand( &command, "instr");
                }
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            res=readInt_TSStream(&command.response);
            str=readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        rval = create_InStrReturnType(res, str);
        return rval;
    }
    state
    {
        onInstr(context, win, pos,  n, instr_spec);
    }
}


