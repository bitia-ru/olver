/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/string/add_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesStringAddSubsystem(void)
{
  // Set up mediators
    set_mediator_addstr_spec(addstr_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** addstr_spec **/
//This mediator refers to: mvwaddnstr, waddnstr, mvwaddstr, waddstr,
//mvaddnstr, addnstr, mvaddstr, addstr
mediator addstr_media for specification
IntT addstr_spec( CallContext context,  WindowTPtr* win, NCursesPosition*pos,  CString* str, IntT* n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;
        
        if (win!=NULL)
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwaddnstr:$(ptr)$(int)$(int)$(str)$(int)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x), str, create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "waddnstr:$(ptr)$(str)$(int)", create_VoidTPtrObj(*win), str, create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwaddstr:$(ptr)$(int)$(int)$(str)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x), str);
                }
                else
                {
                    format_TSCommand( &command, "waddstr:$(ptr)$(str)", create_VoidTPtrObj(*win), str);
                }
            }
        }
        else
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvaddnstr:$(int)$(int)$(str)$(int)", create_IntTObj(pos->y), create_IntTObj(pos->x), str, create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "addnstr:$(str)$(int)", str, create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvaddstr:$(int)$(int)$(str)", create_IntTObj(pos->y), create_IntTObj(pos->x), str);
                }
                else
                {
                    format_TSCommand( &command, "addstr:$(str)", str);
                }
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAddstr(context, win, pos,  str, n, addstr_spec);
    }
}


