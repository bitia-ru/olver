/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "ncurses/string/tests/printf_scenario.seh"
#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/string/printf_model.seh"
#include "ncurses/string/input_model.seh"
#include "ncurses/string/add_model.seh"
#include "ncurses/window/refresh_model.seh"
#include "ncurses/move/move_model.seh"
#include "util/format/tests/format_sheafs.seh"
#include "util/format/tests/printf_scenario_data.seh"
#include "process/process/process_common.seh"
#include "config/test_system_config.h"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static bool needConformanceTestQuality;
static bool moveCallAllowed;

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_ncurses_string_printf_scenario(int argc,char** argv)
{
    needConformanceTestQuality = ( TEST_QUALITY_LEVEL == CONFORMANCE_TEST_QUALITY_LEVEL );
    moveCallAllowed = ( TARGET_DATA_TYPES_ARCH != LSB_ARCH_AMD64 && TARGET_DATA_TYPES_ARCH != LSB_ARCH_IA64 );
    context = createDefaultProcessForNCurses();
    if ( ( printedSheafs = createPrintedSheafs() ) == NULL ) { return false; }
    initReqFilters();
    initscr_spec( context );
    return true;
}

static void finish_ncurses_string_printf_scenario(void)
{
    terminateNCursesProcess(context);
    verbose( "\n" );
    TEST_SCENARIO_VERDICT_VERBOSE( ncurses_string_printf_scenario );
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_string_printw_scen()
{
    NewWinReturnType * winRet = newwin_spec( context, 30, 30, 5, 5 );
    WindowTPtr * windows[ 2 ];
    int winI;
    windows[ 0 ] = NULL         ;
    windows[ 1 ] = & winRet->win;

    for ( winI = 0; winI < sizeof( windows ) / sizeof( windows[ 0 ] ); winI++ ) {
        WindowTPtr * win = windows[ winI ];
        int posI;
        for ( posI = 1; posI <= 2; posI++ ) {
            NCursesPosition * pos;
            int maxPrintedSheafI = ( needConformanceTestQuality ? 200 : 3960 );
            int printedSheafI;
            if ( ! moveCallAllowed ) { maxPrintedSheafI = 0; }
            switch ( posI ) {
                case 1: pos = NULL                          ; break;
                case 2: pos = create_NCursesPosition( 0, 0 ); break;
            }
            verbose( "ncurses_string_printw_scen : %d %d\n", winI, posI );
            dotPrint( 0, 0 );
            //for ( printedSheafI = 0; printedSheafI < size_List( printedSheafs ); printedSheafI++ ) {
            for ( printedSheafI = 0; printedSheafI <= maxPrintedSheafI; printedSheafI++ ) {
                PrintedSheaf * printedSheaf = get_List( printedSheafs, printedSheafI );
                //String * formatAsString = toString( printedSheaf->format );
                //verbose( "ncurses_string_printf_scen : %d %d %d\n", winI, posI, printedSheafI );
                //if ( printedSheafI > 3960 ) {
                //    verbose( "ncurses_string_printf_scen : format is %s\n", toCharArray_String( formatAsString ) );
                //}
                if ( moveCallAllowed ) { move_spec( context, win, create_NCursesPosition( 0, 0 ) ); }
                setExpectedResultAndReqIds( "printw", printedSheaf->result, printedSheaf->reqIds );
                dotPrint( 10, 100 );
                printw_spec( context, win, pos, printedSheaf->format, printedSheaf->data );
                //addstr_spec( context, win, pos, printedSheaf->result, NULL );
            } // for printedSheafI
            refresh_spec( context, win );
            verbose( "\n" );
        } // for posI
    } // for winI

    endwin_spec( context );

    return true;
}

scenario
bool ncurses_string_vw_printw_scen()
{
    NewWinReturnType * winRet = newwin_spec( context, 30, 30, 5, 5 );
    WindowTPtr * win = & winRet->win;
    int maxPrintedSheafI = ( needConformanceTestQuality ? 200 : 3960 );
    int printedSheafI;
    if ( ! moveCallAllowed ) { maxPrintedSheafI = 0; }

    verbose( "ncurses_string_vw_printf_scen\n" );
    dotPrint( 0, 0 );
    for ( printedSheafI = 0; printedSheafI <= maxPrintedSheafI; printedSheafI++ ) {
        PrintedSheaf * printedSheaf = get_List( printedSheafs, printedSheafI );
        if ( moveCallAllowed ) { move_spec( context, win, create_NCursesPosition( 0, 0 ) ); }
        setExpectedResultAndReqIds( "printw", printedSheaf->result, printedSheaf->reqIds );
        dotPrint( 10, 100 );
        vw_printw_spec( context, win, printedSheaf->format, printedSheaf->data );
    } // for printedSheafI
    refresh_spec( context, win );
    verbose( "\n" );

    endwin_spec( context );

    return true;
}

scenario
bool ncurses_string_vwprintw_scen()
{
    NewWinReturnType * winRet = newwin_spec( context, 30, 30, 5, 5 );
    WindowTPtr * win = & winRet->win;
    int maxPrintedSheafI = ( needConformanceTestQuality ? 200 : 3960 );
    int printedSheafI;
    if ( ! moveCallAllowed ) { maxPrintedSheafI = 0; }

    verbose( "ncurses_string_vwprintf_scen\n" );
    dotPrint( 0, 0 );
    for ( printedSheafI = 0; printedSheafI <= maxPrintedSheafI; printedSheafI++ ) {
        PrintedSheaf * printedSheaf = get_List( printedSheafs, printedSheafI );
        if ( moveCallAllowed ) { move_spec( context, win, create_NCursesPosition( 0, 0 ) ); }
        setExpectedResultAndReqIds( "printw", printedSheaf->result, printedSheaf->reqIds );
        dotPrint( 10, 100 );
        vwprintw_spec( context, win, printedSheaf->format, printedSheaf->data );
    } // for printedSheafI
    refresh_spec( context, win );
    verbose( "\n" );

    endwin_spec( context );

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm ncurses_string_printf_scenario =
{
    .init = init_ncurses_string_printf_scenario,
    .finish = finish_ncurses_string_printf_scenario,
    .actions = { ncurses_string_printw_scen   ,
                 ncurses_string_vw_printw_scen,
                 ncurses_string_vwprintw_scen ,
                 NULL
               }
};

bool main_ncurses_string_printf( int argc, char** argv )
{
    ncurses_string_printf_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_STRING_PRINTF_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initNcurses();
}

int main(int argc, char** argv)
{
    set_assertion_exit_callback();
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile( "trace.xml_CTesK" );

    // Run test scenario
    main_ncurses_string_printf( argc, argv );

    //  unloadSUT();
    return 0;
}

#endif
