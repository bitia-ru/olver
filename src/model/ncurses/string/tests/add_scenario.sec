/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/string/tests/add_scenario.seh"
#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/string/add_model.seh"
#include "ncurses/string/input_model.seh"
#include "ncurses/window/refresh_model.seh"


static CallContext context;

#define NUM_POS 4

static NCursesPosition* positions[NUM_POS];
static CString*         strings[NUM_POS];
static IntT*            numChars[NUM_POS];
static WindowTPtr*      windows[NUM_POS];


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_nstring_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();
    
    initReqFilters();
    
    return true;
    
}


static void finish_nstring_scenario(void)
{    
    terminateNCursesProcess(context);   
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool io_nstring_scen()
{
    NewWinReturnType* winRet1, *winRet2;
    NCursesPosition* pos =create_NCursesPosition(10 ,10);
    CString* str = create_CString("string");
    InitScrReturnType* retScr;
    IntT n1=5, n2=10, n3=100, nMinusOne=-1;
    IntT i,j,k,s;

    retScr=initscr_spec(context);

    windows[0] = NULL;
    winRet1 = newwin_spec( context, 30, 30, 5, 5);
    windows[1] = &(winRet1->win);
    windows[2] = NULL;
    winRet2 = newwin_spec( context, 40, 10, 7, 7);
    windows[3] = &(winRet2->win);

    positions[0] = create_NCursesPosition(retScr->cols/2, retScr->lines-3);
    positions[1] = NULL;
    positions[2] = create_NCursesPosition(retScr->cols-3, retScr->lines-2);
    positions[3] = create_NCursesPosition(0, 0);

    strings[0] = create_CString("x");
    strings[1] = create_CString("ytring1");
    strings[2] = create_CString("ztring2");
    strings[3] = create_CString("wtring2string2string2string2");

    numChars[0] = NULL;
    numChars[1] = &n1;
    numChars[2] = &n2;
    numChars[3] = &n3;

    
    for (i=0;i<NUM_POS;i++)
    {
        for (j=0;j<NUM_POS;j++)
        {
            for (k=0;k<NUM_POS;k++)
            {
                for (s=0;s<NUM_POS;s++)
                {
                    traceFormattedUserInfo("add point: %d %d %d %d\n", i, j, k, s);
                    addstr_spec(context,  windows[i], positions[j],  strings[k], numChars[s]);
                }
                refresh_spec(context, windows[i]);
            }
        }
    }

    for (i=0;i<NUM_POS;i++)
    {
        for (j=0;j<NUM_POS;j++)
        {
            for (k=0;k<NUM_POS;k++)
            {
                traceFormattedUserInfo("add point: %d %d %d\n", i, j, k);
                addstr_spec(context,  windows[i], positions[j],  strings[k], &nMinusOne);
            }
            refresh_spec(context, windows[i]);
        }
    }

    for (i=0;i<NUM_POS;i++)
    {
        for (j=0;j<NUM_POS;j++)
        {
            for (s=0;s<NUM_POS;s++)
            {
                traceFormattedUserInfo("input point: %d %d %d\n", i, j, s);
                instr_spec(context,  windows[i], positions[j], numChars[s]);
            }
        }
    }

    endwin_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm nstring_scenario =
{
        .init = init_nstring_scenario,
        .finish = finish_nstring_scenario,
        .actions = {
            io_nstring_scen,
            NULL
    }
};

bool main_ncurses_nstring( int argc, char** argv )
{
    nstring_scenario(argc, argv);
    
    return true;
}


#ifdef NCURSES_STRING_ADD_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initNcurses();

}

int main(int argc, char** argv)
{
    set_assertion_exit_callback();
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );
    
    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");
    
    // Run test scenario
    main_ncurses_nstring(argc,argv);
    
    //  unloadSUT();
    return 0;
}
#endif


