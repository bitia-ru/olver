/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/window_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/input/timeout_media.seh"
#include "ncurses/input/timeout_model.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesInputTimeoutSubsystem(void)
{
    // Set up mediators
    set_mediator_notimeout_spec(notimeout_media);
    set_mediator_timeout_spec(timeout_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** notimeout_spec **/
mediator notimeout_media for specification
IntT notimeout_spec(CallContext context, WindowTPtr* win, IntT bf)
{
    call
    {
        IntT res;
        NCursesWindow* stdWnd = getNCursesStdWindow(context);
        TSCommand command = create_TSCommand();

        if(win == NULL) win = &stdWnd->address;

        format_TSCommand(&command, "notimeout:$(ptr)$(int)",
            create_VoidTPtrObj(*win), create_IntTObj(bf));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onNCursesUniversal(context, win, notimeout_spec);
    }
}


/** timeout_spec **/
//This mediator refers to: timeout, wtimeout
mediator timeout_media for specification
void timeout_spec(CallContext context, WindowTPtr* win, IntT delay)
{
    call
    {
        TSCommand command = create_TSCommand();

        if(win != NULL)
            format_TSCommand(&command, "wtimeout:$(ptr)$(int)",
                create_VoidTPtrObj(*win), create_IntTObj(delay));
        else
            format_TSCommand(&command, "timeout:$(int)", create_IntTObj(delay));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }

    state
    {
        onNCursesUniversal(context, win, SUT_OK);
    }
}

