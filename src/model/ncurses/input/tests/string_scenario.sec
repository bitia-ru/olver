/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/input/tests/string_scenario.seh"

#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/window/window_media.seh"

#include "ncurses/char/add_media.seh"
#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"

#include "ncurses/ncurses/ncurses_data.seh"

#include "ncurses/input/string_media.seh"
#include "ncurses/input/char_media.seh"
#include "ncurses/clear/clear_media.seh"
#include "ncurses/window/refresh_media.seh"
#include "ncurses/move/move_media.seh"

static CallContext context;
static StringTPtr  str;
static CByteArray* scrDump;
static ChTypeTArray* arr;
static NCursesWindow* stdWnd;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_input_string_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(40, 40);

    initscr_spec(context);
    stdWnd = getNCursesStdWindow(context);
    initReqFilters();

    registerStdTerminal(context);
    setVariables_StdTerminal(context);

    readTerminfo(context, create_CString(OLVERCT_TERMINFO_PATH));

    str = allocateMemoryBlock(context, 1024);

    return true;   
}


static void finish_input_string_scenario(void)
{
    endwin_spec(context); 
    TEST_SCENARIO_VERDICT_VERBOSE(string_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_input_string_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    CString* str_ba = create_CString("\tc\n");
    CByteArray* ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                            length_CString(str_ba));
    IntT res, i, size = length_CString(str_ba);
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    NCursesTerminal* term = getNCursesStdTerminal(context);
    List* lst = term->inserted_character_buffer;
    Object* ob;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);

    ch.bold=true;          // Extra bright or bold
    ch.letter='Q';

    ncursesInputString(context, ba);

    res = getnstr_spec(context, NULL, NULL, str, 4);

    str_ba = create_CString("d\blourier\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                        length_CString(str_ba));

    ncursesInputString(context, ba);
    res = getnstr_spec(context, NULL, pos, str, 3);

    str_ba = create_CString("anatbel\rmax_po\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                            length_CString(str_ba));
    ncursesInputString(context, ba);
    res = getnstr_spec(context, &winRet->win, NULL, str, 2);

    res = getnstr_spec(context, &winRet->win, pos, str, 1);

    str_ba = create_CString("\tc\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                                length_CString(str_ba));
    ncursesInputString(context, ba);
    res = getstr_spec(context, NULL, NULL, str);

    str_ba = create_CString("d\blourier\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                            length_CString(str_ba));

    ncursesInputString(context, ba);
    res = getstr_spec(context, NULL, pos, str);

    str_ba = create_CString("anatbel\rmax_po\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str_ba),
                                length_CString(str_ba));
    ncursesInputString(context, ba);
    res = getstr_spec(context, &winRet->win, NULL, str);

    res = getstr_spec(context, &winRet->win, pos, str);

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm string_scenario =
{
    .init = init_input_string_scenario,
        .finish = finish_input_string_scenario,
        .actions = {
            ncurses_input_string_scen,
            NULL
    }
};

bool main_ncurses_input_string( int argc, char** argv )
{
    string_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_INPUT_STRING_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}
//static AssertionExit system_assertion_handler;

//void myAssertionExit(const string * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );
    
    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");    
    // Run test scenario
    main_ncurses_input_string(argc,argv);
    
    //  unloadSUT();
    return 0;
}
#endif
