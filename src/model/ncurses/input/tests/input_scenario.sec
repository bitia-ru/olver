/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/input/tests/input_scenario.seh"

#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"

#include "ncurses/char/add_media.seh"
#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"

#include "ncurses/input/char_media.seh"
#include "ncurses/input/string_media.seh"
#include "ncurses/input/input_media.seh"

#include "ncurses/color/color_media.seh"

#include "ncurses/move/move_media.seh"

#include "ncurses/window/window_media.seh"
#include "ncurses/window/refresh_media.seh"
#include "ncurses/window/scroll_media.seh"

#include "ncurses/terminal/terminfo_media.seh"
#include "ncurses/terminal/control_media.seh"

#include "ncurses/misc/misc_media.seh"

#include "ncurses/ncurses/ncurses_data.seh"

static CallContext context;
static VoidTPtr ptr;

#define MAXSIZE 1024
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_input_input_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(40, 40);

    initscr_spec(context);
    initReqFilters();

    registerStdTerminal(context);
    setVariables_StdTerminal(context);

    readTerminfo(context, create_CString(OLVERCT_TERMINFO_PATH));

    ptr = allocateMemoryBlock(context, MAXSIZE);

    setTSTimeModel(LinearTSTime);

    return true;
}


static void finish_input_input_scenario(void)
{
    endwin_spec(context);
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_input_input_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_input_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp;
    CString* str = create_CString("\n\tce\bq\r\n");
    CByteArray* ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));
    IntT res, size = length_CString(str);
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;

    winRet = newwin_spec( context, 30, 30, 5, 5);
    tmp = getWindow(&winRet->win);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);

    ch.bold=true;          // Extra bright or bold
    ch.letter='W';

    ungetch_spec(context, 'd');

    addch_spec(context, ch, &winRet->win, create_NCursesPosition(26, 0), false);
    addch_spec(context, ch, &winRet->win, create_NCursesPosition(8, 1), false);
    ch.letter = 'A';
    addch_spec(context, ch, &winRet->win, create_NCursesPosition(7, 7), false);
    move_spec(context, &winRet->win, create_NCursesPosition(0, 0));

    ungetch_spec(context, 'Z');
    ncursesInputString(context, ba);

    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);

    return true;
}
/* Full OLVER Edition Source End */
/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_input_scen2()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp;
    CString* str = create_CString("\tc\n");
    CByteArray* ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));
    IntT res, size = length_CString(str);
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    scrollok_spec(context, winRet->win, 1);

    tmp = getWindow(&winRet->win);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);

    ch.bold=true;          // Extra bright or bold
    ch.letter='W';

    addch_spec(context, ch, &winRet->win, create_NCursesPosition(26, 29), false);
    addch_spec(context, ch, &winRet->win, create_NCursesPosition(25, 29), false);

    ncursesInputString(context, ba);

    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);
    res = getch_spec(context, &winRet->win, NULL);

    refresh_spec(context, NULL);

    return true;
}
/* Full OLVER Edition Source End */

bool func(IntT k, IntT p)
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp, *stdWnd = getNCursesStdWindow(context);
    CString* str;
    CByteArray* ba;
    IntT res, i, scanf_tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;

    VERBOSE("func called\n");

    winRet = newwin_spec( context, 30, 30, 5, 5);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);

    str = create_CString("qwerty\ras\tdf\bgh\n*\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));

    switch(k)
    {
        case 0:
            raw_spec(context); break;
        case 1:
            nocbreak_spec(context); break;
        case 2:
            noraw_spec(context); break;
        case 3:
            cbreak_spec(context); break;
        default:
            break;
    }

    keypad_spec(context, &stdWnd->address, 0);

    if(p)
        nl_spec(context);
    else
        nonl_spec(context);

    ncursesInputString(context, ba);

    for(i=0;i<length_CString(str);i++)
    {
        res = getch_spec(context, NULL, NULL);
    }

    return true;
}

IntT Diff(IntT d, IntT num)
{
    IntT i, arr[10];

    for(i=0;i<10;i++)
        arr[i]=0;

    for(i=0;i<num;i++)
    {
        if(arr[d%10] || d%10>=num)
            return 0;
        arr[d%10]=1;
        d/=10;
    }

    return 1;
}
/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_cbreak_scen2()
{
    iterate(int d=213;d<214;d++;)
    {
        move_spec(context, NULL, create_NCursesPosition(0, 0));
        if(Diff(d, 4))
        {
            iterate(int p=0;p<2;p++;)
            {
                IntT q = d;
                iterate(int k=0;k<4;k++;)
                {
                    func(d%10, p);
                    d/=10;
                }
            }
        }
    }

    return true;
}
/* Full OLVER Edition Source End */

scenario
bool ncurses_input_cbreak_scen3()
{
    func(0, 0);
    func(1, 0);
    func(2, 0);
    func(3, 0);
    func(2, 1);
    func(1, 1);
    func(0, 1);

    func(1, 0);
    func(2, 0);
    func(3, 0);
    func(2, 1);
    func(1, 1);
    func(0, 1);

    return true;
}

/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_cbreak_scen4()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp, *stdWnd = getNCursesStdWindow(context);
    CString* str;
    CByteArray* ba;
    IntT res, i, scanf_tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;

    winRet = newwin_spec( context, 30, 30, 5, 5);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);

    str = create_CString("qwerty\ras\tdf\bgh\n*\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));

    cbreak_spec(context);

    nl_spec(context);

    ncursesInputString(context, ba);

    res = getch_spec(context, NULL, create_NCursesPosition(0, stdWnd->nlines-1));

    for(i=0;i<length_CString(str)-1;i++)
    {
        res = getch_spec(context, NULL, NULL);
    }

    return true;
}
/* Full OLVER Edition Source End */
/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_cbreak_last_newline()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp, *stdWnd = getNCursesStdWindow(context);
    CString* str;
    CByteArray* ba;
    IntT res, i, scanf_tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;
    NCursesTerminal* term = getNCursesStdTerminal(context);

    move_spec(context, NULL, create_NCursesPosition(0, stdWnd->nlines-1));

    func(0, 0);
    func(1, 1);
    func(2, 1);

    str = create_CString("qwerty\ras\tdf\bgh\n*\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));

    cbreak_spec(context);

    nl_spec(context);

    ncursesInputString(context, ba);

    for(i=0;i<length_CString(str)-2;i++)
    {
        res = getch_spec(context, NULL, NULL);
    }

    napms_spec(context, 3000);

    res = getch_spec(context, NULL, NULL);

    return true;
}
/* Full OLVER Edition Source End */
/* Full OLVER Edition Source Start */
scenario
bool ncurses_input_cbreak_last_newline2()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp, *stdWnd = getNCursesStdWindow(context);
    CString* str;
    CByteArray* ba;
    IntT res, i, scanf_tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;
    NCursesTerminal* term = getNCursesStdTerminal(context);

    str = create_CString("q\np\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));

    ncursesInputString(context, ba);

    res = getch_spec(context, NULL, create_NCursesPosition(10, stdWnd->nlines-1));

    res = getch_spec(context, NULL, create_NCursesPosition(0, stdWnd->nlines-1));

    res = getch_spec(context, NULL, create_NCursesPosition(0, stdWnd->nlines-1));

    return true;
}
/* Full OLVER Edition Source End */

scenario
bool ncurses_input_flushinp_scen()
{
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet;
    NCursesWindow *tmp, *stdWnd = getNCursesStdWindow(context);
    CString* str;
    CByteArray* ba;
    IntT res, i, scanf_tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    Object* ob;
    NCursesTerminal* term = getNCursesStdTerminal(context);

    refresh_spec(context, NULL);
//    move_spec(context, NULL, create_NCursesPosition(0, 0));

    str = create_CString("qwerty\ras\tdf\bgh\n*\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));

    cbreak_spec(context);

    nl_spec(context);

    ncursesInputString(context, ba);

    ungetch_spec(context, 'A');

    flushinp_spec(context);

    str = create_CString("plokmijn\n");
    ba = create_CByteArray( (ByteT*) toCharArray_CString(str), length_CString(str));
    ncursesInputString(context, ba);

    refresh_spec(context, NULL);

    getch_spec(context, NULL, NULL);

    return true;
}
scenario
bool ncurses_input_halfdelay_scen()
{
    IntT res, i;
    NCursesWindow *stdWnd = getNCursesStdWindow(context);

    refresh_spec(context, NULL);

    halfdelay_spec(context, 10);

    for(i=0;i<3;i++)
    {
        VERBOSE("Getch called\n");
        res = getch_spec(context, NULL, create_NCursesPosition(10, 10));
        VERBOSE("Getch called\n");
        res = getch_spec(context, &stdWnd->address, create_NCursesPosition(10, 10));
    }

     res = getch_spec(context, &stdWnd->address, create_NCursesPosition(0, 0));

     return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_input_input_scenario =
{
    .init = init_input_input_scenario,
        .finish = finish_input_input_scenario,
        .actions = {
            ncurses_input_halfdelay_scen,
            ncurses_input_cbreak_scen3,
            ncurses_input_flushinp_scen,
            NULL
    }
};

bool main_ncurses_input_input( int argc, char** argv )
{
    ncurses_input_input_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_INPUT_INPUT_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_ncurses_input_input(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif

