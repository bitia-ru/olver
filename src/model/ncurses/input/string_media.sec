/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/input/string_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesInputStringSubsystem(void)
{
  // Set up mediators
    set_mediator_getnstr_spec(getnstr_media);
    set_mediator_getstr_spec(getstr_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** getnstr_spec **/
//This mediator refers to: mvwgetnstr, wgetnstr, mvgetnstr, getnstr
mediator getnstr_media for specification
IntT getnstr_spec( CallContext context, WindowTPtr* win, NCursesPosition* pos,
                   StringTPtr str, IntT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        if(win == NULL)
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "getnstr:$(ptr)$(int)",
                    create_VoidTPtrObj(str), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command,
                    "mvgetnstr:$(int)$(int)$(ptr)$(int)",
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str), create_IntTObj(n));
            }
        }
        else
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "wgetnstr:$(ptr)$(ptr)$(int)",
                    create_VoidTPtrObj(*win),
                    create_VoidTPtrObj(str), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command,
                    "mvwgetnstr:$(ptr)$(int)$(int)$(ptr)$(int)",
                    create_VoidTPtrObj(*win),
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str), create_IntTObj(n));
            }
        }
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onGetnstr(context, win, pos, str, n, getnstr_spec);
    }
}



/** getstr_spec **/
//This mediator refers to: mvwgetstr, wgetstr, mvgetstr, getstr
mediator getstr_media for specification
IntT getstr_spec( CallContext context, WindowTPtr* win, NCursesPosition* pos,
                   StringTPtr str)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        if(win == NULL)
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "getstr:$(ptr)",
                    create_VoidTPtrObj(str));
            }
            else
            {
                format_TSCommand( &command,
                    "mvgetstr:$(int)$(int)$(ptr)",
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str));
            }
        }
        else
        {
            if(pos == NULL)
            {
                format_TSCommand( &command, "wgetstr:$(ptr)$(ptr)",
                    create_VoidTPtrObj(*win),
                    create_VoidTPtrObj(str));
            }
            else
            {
                format_TSCommand( &command,
                    "mvwgetstr:$(ptr)$(int)$(int)$(ptr)",
                    create_VoidTPtrObj(*win),
                    create_IntTObj(pos->y), create_IntTObj(pos->x),
                    create_VoidTPtrObj(str));
            }
        }
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onGetstr(context, win, pos, str, getstr_spec);
    }
}


