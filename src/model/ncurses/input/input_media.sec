/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/input/input_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesInputSubsystem(void)
{
  // Set up mediators
    set_mediator_cbreak_spec(cbreak_media);
    set_mediator_flushinp_spec(flushinp_media);
    set_mediator_halfdelay_spec(halfdelay_media);
    set_mediator_nl_spec(nl_media);
    set_mediator_nocbreak_spec(nocbreak_media);
    set_mediator_nonl_spec(nonl_media);
    set_mediator_noraw_spec(noraw_media);
    set_mediator_raw_spec(raw_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cbreak_spec **/

mediator cbreak_media for specification
IntT cbreak_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "cbreak" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onCbreak(context, cbreak_spec);
    }
}



/** flushinp_spec **/

mediator flushinp_media for specification
IntT flushinp_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "flushinp" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onFlushinp(context, flushinp_spec);
    }
}



/** halfdelay_spec **/

mediator halfdelay_media for specification
IntT halfdelay_spec( CallContext context, IntT tenth )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "halfdelay:$(int)", create_IntTObj(tenth));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onHalfdelay(context, tenth, halfdelay_spec);
    }
}



/** nl_spec **/
mediator nl_media for specification
IntT nl_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "nl" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onNl(context, nl_spec);
    }
}


/** nocbreak_spec **/
mediator nocbreak_media for specification
IntT nocbreak_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "nocbreak" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onNocbreak(context, nocbreak_spec);
    }
}


/** nonl_spec **/
mediator nonl_media for specification
IntT nonl_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "nonl" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onNonl(context, nonl_spec);
    }
}


/** noraw_spec **/
mediator noraw_media for specification
IntT noraw_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "noraw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onNoraw(context, noraw_spec);
    }
}


/** raw_spec **/
mediator raw_media for specification
IntT raw_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "raw" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onRaw(context, raw_spec);
    }
}



