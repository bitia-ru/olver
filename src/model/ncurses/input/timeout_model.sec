/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/input/timeout_model.seh"
#include "ncurses/border/border_model.seh"

#pragma SEC subsystem input "ncurses.input"



/*
   The group of functions 'ncurses.input.timeout' consists of:
       notimeout [1]
       timeout [1]
       wtimeout [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*

Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2Copyright (c) 1997 The Open Group

NAME

notimeout, timeout, wtimeout - control blocking on input

 SYNOPSIS

#include <curses.h>

int notimeout(WINDOW *win, bool bf);

void timeout(int delay);

void wtimeout(WINDOW *win, int delay);

 DESCRIPTION

The notimeout() function specifies whether Timeout Mode or No Timeout Mode is
in effect for the screen associated with the specified window. If bf is TRUE,
this screen is set to No Timeout Mode.If bf is FALSE, this screen is set to
Timeout Mode.The initial state is FALSE. The timeout() and wtimeout()
functions set blocking or non-blocking read for the current or specified window
based on the value of delay: The delay < 0 One or more blocking reads
(indefinite waits for input) are used. delay = 0 One or more non-blocking
reads are used. Any Curses input function will fail if every character of the
requested string is not immediately available. delay > 0 Any Curses input
function blocks for delay milliseconds and fails if there is still no input.

 RETURN VALUE

Upon successful completion, the notimeout() function returns OK. Otherwise, it
returns ERR.

The timeout() and wtimeout() functions do not return a value.

 ERRORS

No errors are defined.

*/

specification
IntT notimeout_spec(CallContext context, WindowTPtr* win, IntT bf)
{
    NCursesWindow* WndLocal;
    NCursesWindow* WndModel;

    pre
    {
        WndLocal = win == NULL ? getNCursesStdWindow(context) : getWindow(win);
        WndModel = createNCursesWindow_Local(WndLocal);

        return true;
    }

    coverage C_bf
    {
        if(bf == 0)
            return { BfFALSE, "bf is FALSE" };
        else return { BfTRUE, "bf is TRUE" };
    }

    WIN_COVERAGE(win)

    post
    {
        if(!WndModel)
        {
            /*
             * Otherwise, it returns ERR.
             */
            REQ("notimeout.04.02", "shall return ERR", notimeout_spec == SUT_ERR);

            return true;
        }

        /*
         * Modeling...
         */
        WndModel->notimeout = !(bf == 0);

        /*
         * The notimeout() function specifies whether Timeout Mode or No Timeout Mode is
         * in effect for the screen associated with the specified window.
         */
        /*
         * If bf is TRUE, this screen is set to No Timeout Mode.
         */
        /*
         * If bf is FALSE, this screen is set to Timeout Mode.
         */
        REQ("notimeout.01;notimeout.02.01;notimeout.02.02", "shall set the correct mode",
            check_NCursesWindows(WndLocal, WndModel, CH_ALL, -1));

        /*
         * Upon successful completion, the notimeout() function returns OK.
         */
        REQ("notimeout.04.01", "shall return OK", notimeout_spec == SUT_OK);

        return true;
    }
}

/** timeout_spec **/
//This specification refers to: timeout, wtimeout
specification
void timeout_spec(CallContext context, WindowTPtr* win, IntT delay)
{
    NCursesWindow* WndLocal;
    NCursesWindow* WndModel;

    pre
    {
        if(win == NULL)
        {
            FILTER("timeout");
            WndLocal = getNCursesStdWindow(context);
        }
        else
        {
            FILTER("wtimeout");
            WndLocal = getWindow(win);
        }

        WndModel = createNCursesWindow_Local(WndLocal);

        return true;
    }

    coverage Delay
    {
        if(delay < 0)
            return { NegDelay, "delay is negative" };
        else if(delay > 0) return { PosDelay, "delay is positive" };
        else return { ZeroDelay, "delay is zero" };
    }

    WIN_COVERAGE(win)

    post
    {
        if(!WndModel) /* [?do_nothing] */
            return true;

        /*
         * Modeling...
         */
        WndModel->delay = delay;

        /*
         * The timeout() and wtimeout() functions set blocking or non-blocking read for 
         * the current or specified window based on the value of delay:
         *
         * The delay < 0 One or more blocking reads (indefinite waits for input) are 
         * used.
         */
        /*
         * The timeout() and wtimeout() functions set blocking or non-blocking read for 
         * the current or specified window based on the value of delay:
         *
         * delay = 0 One or more non-blocking reads are used. Any Curses input function 
         * will fail if every character of the requested string is not immediately 
         * available.
         */
        /*
         * The timeout() and wtimeout() functions set blocking or non-blocking read for 
         * the current or specified window based on the value of delay:
         *
         * delay > 0 Any Curses input function blocks for delay milliseconds and fails 
         * if there is still no input.
         */
        REQ("timeout.01.01;timeout.01.02;timeout.01.03;wtimeout.01.01;wtimeout.01.02;wtimeout.01.03",
            "shall set the correct delay", check_NCursesWindows(WndLocal, WndModel, CH_ALL, -1));

        return true;
    }

    FILTER_CLEAN;
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
