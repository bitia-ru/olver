/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */
#include "ncurses/input/input_model.seh"


#pragma SEC subsystem input "ncurses.input"



/*
   The group of functions 'ncurses.input.input' consists of:
       cbreak [1]
       flushinp [1]
       halfdelay [1]
       nl [1]
       nocbreak [1]
       nonl [1]
       noraw [1]
       raw [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    cbreak, nocbreak, noraw, raw - input mode control functions

SYNOPSIS

    #include <curses.h>

    int cbreak(void);

    int nocbreak(void);

    int noraw(void);

    int raw(void);

DESCRIPTION

    The cbreak() function sets the input mode for the current terminal to cbreak
    mode and overrides a call to raw(). The nocbreak() function sets the input mode
    for the current terminal to Cooked Mode without changing the state of ISIG and
    IXON.

    The noraw() function sets the input mode for the current terminal to Cooked
    Mode and sets the ISIG and IXON flags.

    The raw() function sets the input mode for the current terminal to Raw Mode.

RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they return
    ERR.

ERRORS

    No errors are defined.
*/

specification
IntT cbreak_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { SetInputModeToCbreakAndOverridesCallToRaw,
                 "Sets the input mode for the current terminal to cbreak mode and overrides a call to raw()"
               };
    }
    post
    {
        if(cbreak_spec == SUT_ERR)
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("cbreak.02.02", "", TODO_REQ());

            return true;
        }

        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("cbreak.02.01",
            "Upon successful completion return OK",
            cbreak_spec == SUT_OK);

        /*
         * The cbreak() function sets the input mode for the current terminal
         * to cbreak mode and overrides a call to raw().
         */
        REQ("cbreak.01", "", TODO_REQ());

        return true;
    }
}
void onCbreak( CallContext context, IntT cbreak_spec)
{
    if(cbreak_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->input_mode |= MODE_CBREAK;
    }
}


specification
IntT nocbreak_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { SetInputModeToCookedModeWithoutChangingISIGAndIXON,
                 "Sets the input mode for the current terminal to Cooked Mode without changing the state of ISIG and IXON"
               };
    }
    post
    {
        if(nocbreak_spec == SUT_ERR)
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("nocbreak.02.02", "", TODO_REQ());

            return true;
        }

        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("nocbreak.02.01",
            "Upon successful completion return OK",
            nocbreak_spec == SUT_OK);

        /*
         * The nocbreak() function sets the input mode for the current
         * terminal to Cooked Mode without changing the state of ISIG
         * and IXON.
         */
        REQ("nocbreak.01", "", TODO_REQ());

        return true;
    }
}
void onNocbreak( CallContext context, IntT nocbreak_spec)
{
    if(nocbreak_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->input_mode &= ~(MODE_CBREAK);
        term->halfdelay = 0;
    }
}


specification
IntT noraw_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { SetInputModeToCookedModeAndSetISIGAndIXON,
                 "Sets the input mode for the current terminal to Cooked Mode and sets the ISIG and IXON"
               };
    }
    post
    {
        /*
         * The noraw() function sets the input mode for the current terminal to Cooked
         * Mode and sets the ISIG and IXON flags.
         */
        REQ("noraw.01", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("noraw.02.01", "", TODO_REQ());

        /*
         * Otherwise, they return ERR.
         */
        REQ("noraw.02.02", "", TODO_REQ());

        return true;
    }
}
void onNoraw( CallContext context, IntT noraw_spec)
{
    if(noraw_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->input_mode &= ~(MODE_RAW | MODE_CBREAK);
        term->halfdelay = 0;
    }
}


specification
IntT raw_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { SetInputModeToRawMode, "Sets the input mode for the current terminal to Raw Mode" };
    }
    post
    {
        /*
         * The raw() function sets the input mode for the current terminal to Raw Mode.
         */
        REQ("raw.01", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("raw.02.01", "", TODO_REQ());

        /*
         * Otherwise, they return ERR.
         */
        REQ("raw.02.02", "", TODO_REQ());

        return true;
    }
}
void onRaw( CallContext context, IntT raw_spec)
{
    if(raw_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->input_mode |= MODE_RAW | MODE_CBREAK;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    flushinp - discard input

SYNOPSIS

    #include <curses.h>

    int flushinp(void);

DESCRIPTION

    The flushinp() function discards (flushes) any characters in the input
    buffer associated with the current screen.

RETURN VALUE

    The flushinp() function always returns OK.

ERRORS

    No errors are defined.
*/
specification
IntT flushinp_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { DiscardCharactersInInputBuffer, "Discard any characters in the input buffer" };
    }
    post
    {
        /*
         * The flushinp() function always returns OK.
         */
        REQ("flushinp.02",
            "Always returns OK",
            flushinp_spec == SUT_OK);

        /*
         * The flushinp() function discards (flushes) any characters in the
         * input buffer associated with the current screen.
         */
        REQ("flushinp.01", "", TODO_REQ());

        return true;
    }
}
void onFlushinp( CallContext context, IntT flushinp_spec)
{
    if(flushinp_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);

        clear_List(term->inserted_character_buffer);
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    halfdelay - control input character delay mode

SYNOPSIS

    #include <curses.h>

    int halfdelay(int tenths);

DESCRIPTION

    The halfdelay() function sets the input mode for the current window to
    Half-Delay Mode and specifies tenths tenths of seconds as the half-delay
    interval. The tenths argument must be in a range from 1 up to and
    including 255.

RETURN VALUE

    Upon successful completion, halfdelay() returns OK. Otherwise, it
    returns ERR.

ERRORS

    No errors are defined.
*/

specification
IntT halfdelay_spec( CallContext context, IntT tenth )
{
    pre
    {
        /*
         * The tenths argument must be in a range from 1 up to and
         * including 255.
         */
        REQ("halfdelay.02",
            "Tenths argument must be from 1 to 255",
            tenth>=1 && tenth<=255);

        return true;
    }
    post
    {
        if(halfdelay_spec == SUT_ERR)
        {
            /*
             * Otherwise, it returns ERR.
             */
            REQ("halfdelay.03.02", "", TODO_REQ());

            return true;
        }

        /*
         * Upon successful completion, halfdelay() returns OK.
         */
        REQ("halfdelay.03.01",
            "Upon successful completion returns OK",
            halfdelay_spec == SUT_OK);



        return true;
    }
}
void onHalfdelay( CallContext context, IntT tenth, IntT halfdelay_spec )
{
    if(halfdelay_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->input_mode |=MODE_CBREAK;
        term->halfdelay = tenth;
    }
}
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2
Copyright (c) 1997 The Open Group

NAME

    nl, nonl - enable/disable newline translation

SYNOPSIS

    #include <curses.h>

    int nl(void);

    int nonl(void);

DESCRIPTION

    The nl() function enables a mode in which carriage return is translated to
    newline on input. The nonl() function disables the above translation.
    Initially, the above translation is enabled.

RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they return
    ERR.

ERRORS

    No errors are defined.
*/

specification
IntT nl_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { EnableNewlineTranslation, "Enable newline translation" };
    }
    post
    {
        if(nl_spec == SUT_ERR)
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("nl.03.02", "", TODO_REQ());

            return true;
        }
        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("nl.03.01",
            "Upon successful completion return OK",
            nl_spec == SUT_OK);

        /*
         * The nl() function enables a mode in which carriage return is
         * translated to newline on input.
         */
        REQ("nl.01", "", TODO_REQ());

        /*
         * Initially, the above translation is enabled.
         */
        REQ("nl.02", "", TODO_REQ());

        return true;
    }
}

void onNl( CallContext context, IntT nl_spec)
{
    if(nl_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->nl = 1;
    }
}


specification
IntT nonl_spec( CallContext context)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { DisableNewlineTranslation, "Disable newline translation" };
    }
    post
    {
        if(nonl_spec == SUT_ERR)
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("nonl.03.02", "", TODO_REQ());

            return true;
        }
        /*
         * Upon successful completion, these functions return OK.
         */
        REQ("nonl.03.01",
            "Upon successful completion return OK",
            nonl_spec == SUT_OK);

        /*
         * The nonl() function disables the above translation.
         */
        REQ("nonl.01", "", TODO_REQ());

        /*
         * Initially, the above translation is enabled.
         */
        REQ("nonl.02", "", TODO_REQ());

        return true;
    }
}

void onNonl( CallContext context, IntT nonl_spec)
{
    if(nonl_spec == SUT_OK)
    {
        NCursesTerminal* term = getNCursesStdTerminal(context);
        term->nl = 0;
    }
}
