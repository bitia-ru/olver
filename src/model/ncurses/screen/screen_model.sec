/*
 * File: ncurses/screen/screen_model.sec
 *
 * Author:
 * Version:  $Id: screen_model.sec,v 1.10 2007/09/25 15:14:51 ivanov Exp $
 *
 * Copyright (c) 2005 ISP RAS.
 * 25, B.Communisticheskaya, Moscow, Russia.
 * All rights reserved.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "ncurses/window/window_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/screen/screen_model.seh"

#pragma SEC subsystem screen "ncurses.screen"

/*
   The group of functions 'ncurses.screen' consists of:
       scr_dump [1]
       scr_init [1]
       scr_restore [1]
       scr_set [1]
 */

#ifdef NewCTesK
/*
 * Покрытие по входному параметру типа StringTPtr (char *).
 */
coverage CoverageForFileName( StringTPtr fileName ) {
    if ( isInvalidFileName( fileName ) ) { return { BadFileName    , "Bad File Name"     }; }
                                    else { return { CorrectFileName, "Correct File Name" }; }
}
#endif // NewCTesK

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX (R) Specification, Version 2Copyright (c) 1997 The Open Group

NAME

scr_dump, scr_init, scr_restore, scr_set - screen file input/output functions

 SYNOPSIS

#include <curses.h>

int scr_dump(const char *filename);

int scr_init(const char *filename);

int scr_restore(const char *filename);

int scr_set(const char *filename);

 DESCRIPTION

The scr_dump() function writes the current contents of the virtual screen to
the file named by filename in an unspecified format.

The scr_restore() function sets the virtual screen to the contents of the file
named by filename, which must have been written using scr_dump(). The next
refresh operation restores the screen to the way it looked in the dump file.

The scr_init() function reads the contents of the file named by filename and
uses them to initialise the Curses data structures to what the terminal
currently has on its screen. The next refresh operation bases any updates on
this information, unless either of the following conditions is true:

The terminal has been written to since the virtual screen was dumped to
filename

The terminfo capabilities rmcup and nrrmc are defined for the current terminal.


The scr_set() function is a combination of scr_restore() and scr_init().It
tells the program that the information in the file named by filename is what is
currently on the screen, and also what the program wants on the screen. This
can be thought of as a screen inheritance function.

 RETURN VALUE

On successful completion, these functions return OK.Otherwise, they return ERR.


 ERRORS

No errors are defined.
*/

specification
IntT scr_dump_spec(CallContext context, StringTPtr FileName)
{
    pre
    {
        return true;
    }
#ifdef NewCTesK
    coverage scr_dump_coverage = CoverageForFileName( FileName );
#else
    FILENAME_COVERAGE(FileName)
#endif // NewCTesK
    post
    {
        if(isInvalidFileName(FileName))
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("scr_dump.03.02", "shall return ERR", scr_dump_spec == SUT_ERR);

            return true;
        }

        /*
         * The scr_dump() function writes the current contents of the virtual screen to
         * the file named by filename in an unspecified format.
         */
        REQ("scr_dump.01", "shall writes to the file", TODO_REQ());

        /*
         * On successful completion, these functions return OK.
         */
        REQ("scr_dump.03.01", "shall return OK", scr_dump_spec == SUT_OK);

        return true;
    }
}

specification
IntT scr_init_spec(CallContext context, StringTPtr FileName)
{
    pre
    {
        return true;
    }
#ifdef NewCTesK
    coverage scr_init_coverage = CoverageForFileName( FileName );
#else
    FILENAME_COVERAGE(FileName)
#endif // NewCTesK
    post
    {
        if(isInvalidFileName(FileName))
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("scr_init.03.02", "shall return ERR", scr_init_spec == SUT_ERR);

            return true;
        }

        /*
         * The scr_init() function reads the contents of the file named by filename and
         * uses them to initialise the Curses data structures to what the terminal
         * currently has on its screen.
         */
        REQ("scr_init.01", "initialize the Cuses data structures", TODO_REQ());

        /*
         * The next refresh operation bases any updates on this information, unless either
         * of the following conditions is true:
         *
         * The terminal has been written to since the virtual screen was dumped to
         * filename
         */
        REQ("scr_init.02.01", "", TODO_REQ());

        /*
         * The next refresh operation bases any updates on this information, unless either
         * of the following conditions is true:
         *
         * The terminfo capabilities rmcup and nrrmc are defined for the current terminal.
         */
        REQ("scr_init.02.02", "", TODO_REQ());

        /*
         * On successful completion, these functions return OK.
         */
        REQ("scr_init.03.01", "shall return OK", scr_init_spec == SUT_OK);

        return true;
    }
}

specification
IntT scr_restore_spec(CallContext context, StringTPtr FileName)
{
    NCursesWindow* WndLocal;
    NCursesWindow* WndModel;

    pre
    {
        WndModel = createNCursesWindow_Local(getNCursesStdWindow(context));

        return true;
    }
#ifdef NewCTesK
    coverage scr_restore_coverage = CoverageForFileName( FileName );
#else
    FILENAME_COVERAGE(FileName)
#endif // NewCTesK
    post
    {
        if(isInvalidFileName(FileName))
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("scr_restore.03.02", "shall return ERR", scr_restore_spec == SUT_ERR);

            return true;
        }

        WndLocal = getNCursesStdWindow(context);

        /*
         * The scr_restore() function sets the virtual screen to the contents of the file
         * named by filename, which must have been written using scr_dump().
         */
        /*
         * The next refresh operation restores the screen to the way it looked in the dump
         * file.
         */
        REQ("scr_restore.01;scr_restore.02", "shall restore correctly",
            check_NCursesWindows(WndModel, WndLocal, CH_DATA, -1));

        /*
         * On successful completion, these functions return OK.
         */
        REQ("scr_restore.03.01", "shall return OK", scr_restore_spec == SUT_OK);

        return true;
    }
}

specification
IntT scr_set_spec(CallContext context, StringTPtr FileName)
{
    NCursesWindow* WndLocal;
    NCursesWindow* WndModel;

    pre
    {
        WndModel = createNCursesWindow_Local(getNCursesStdWindow(context));

        return true;
    }
#ifdef NewCTesK
    coverage scr_set_coverage = CoverageForFileName( FileName );
#else
    FILENAME_COVERAGE(FileName)
#endif // NewCTesK
    post
    {
        if(isInvalidFileName(FileName))
        {
            /*
             * Otherwise, they return ERR.
             */
            REQ("scr_set.03.02", "shall return ERR", scr_set_spec == SUT_ERR);

            return true;
        }

        WndLocal = getNCursesStdWindow(context);

        /*
         * The scr_set() function is a combination of scr_restore() and scr_init().
         */
        /*
         * It tells the program that the information in the file named by filename is what
         * is currently on the screen, and also what the program wants on the screen. This
         * can be thought of as a screen inheritance function.
         */
        REQ("scr_set.01;scr_set.02", "is a combination of restore and init",
            check_NCursesWindows(WndModel, WndLocal, CH_ALL, -1));

        /*
         * On successful completion, these functions return OK.
         */
        REQ("scr_set.03.01", "shall return OK", scr_set_spec == SUT_OK);

        return true;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isInvalidFileName(StringTPtr sFileName)
{
    return equals_VoidTPtr(sFileName, NULL_VoidTPtr);
}
