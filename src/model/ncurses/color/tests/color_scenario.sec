/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/color/tests/color_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/char/add_media.seh"

#include "ncurses/color/color_media.seh"
#include "process/process/process_model.seh"

#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"
#include "ncurses/window/window_media.seh"

#include "ncurses/ncurses/ncurses_data.seh"

#include "math/math/math_data.seh"

static CallContext context;

static CByteArray *termInfo;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_color_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(20, 40);
    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    initscr_spec(context);

    initReqFilters();

    registerStdTerminal(context);  

    has_colors_spec(context);
    can_change_color_spec(context);

    start_color_spec(context);

    setVariables_StdTerminal(context);  
    return true;   
}

static void finish_color_scenario(void)
{
    endwin_spec(context); 
    TEST_SCENARIO_VERDICT_VERBOSE(color_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool ncurses_color_has_colors_scen()
{
    IntT res;

    res = has_colors_spec(context);

    return true;
}

scenario
bool ncurses_color_can_change_color_scen()
{
    IntT res;

    res = can_change_color_spec(context);

    return true;
}

scenario
bool ncurses_color_init_color_scen()
{
    IntT res;

    res = init_color_spec(context, 1, create_RGBColor(3, 2, 1));

    return true;
}
scenario
bool ncurses_color_color_content_scen()
{
    IntT res;
    RGBColor* rgb_color = create_RGBColor(0, 0, 0);

    res = color_content_spec(context, 1, rgb_color);

    return true;
}

scenario
bool ncurses_color_init_pair_scen()
{
    IntT res;

    res = init_pair_spec(context, 1,
        create_ColorPair(SUT_COLOR_BLACK, SUT_COLOR_WHITE));

    return true;
}
scenario
bool ncurses_color_pair_content_scen()
{
    IntT res;
    ColorPair* color_pair = create_ColorPair(3, 3);

    res = pair_content_spec(context, 1, color_pair);

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm color_scenario =
{
    .init = init_color_scenario,
        .finish = finish_color_scenario,
        .actions = {
            ncurses_color_has_colors_scen,
            ncurses_color_can_change_color_scen,
            ncurses_color_init_color_scen,
            ncurses_color_color_content_scen,
            ncurses_color_init_pair_scen,
            ncurses_color_pair_content_scen,
            NULL
    }
};

bool main_ncurses_color( int argc, char** argv )
{
    color_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_COLOR_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );
    
    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_ncurses_color(argc,argv);
    
    //  unloadSUT();
    return 0;
}
#endif
