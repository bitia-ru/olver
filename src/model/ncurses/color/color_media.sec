/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/color/color_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesColorSubsystem(void)
{
  // Set up mediators
    set_mediator_can_change_color_spec(can_change_color_media);
    set_mediator_color_content_spec(color_content_media);
    set_mediator_has_colors_spec(has_colors_media);
    set_mediator_init_color_spec(init_color_media);
    set_mediator_init_pair_spec(init_pair_media);
    set_mediator_pair_content_spec(pair_content_media);
    set_mediator_start_color_spec(start_color_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** can_change_color_spec **/

mediator can_change_color_media for specification
IntT can_change_color_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "can_change_color" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onCanChangeColor(context, can_change_color_spec);
    }
}



/** color_content_spec **/

mediator color_content_media for specification
IntT color_content_spec(CallContext context, ShortT color, RGBColor* rgb_color)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "color_content:$(short)",
            create_ShortTObj(color));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            rgb_color->red = readShort_TSStream(&command.response);
            rgb_color->green = readShort_TSStream(&command.response);
            rgb_color->blue = readShort_TSStream(&command.response);
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onColor_content(context, color, rgb_color, color_content_spec);
    }
}



/** has_colors_spec **/
mediator has_colors_media for specification
IntT has_colors_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "has_colors" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onHasColors(context, has_colors_spec);
    }
}


/** init_color_spec **/

mediator init_color_media for specification
IntT init_color_spec(   CallContext context, ShortT color, RGBColor* rgb_color)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command,
            "init_color:$(short)$(short)$(short)$(short)",
            create_ShortTObj(color), create_ShortTObj(rgb_color->red),
            create_ShortTObj(rgb_color->green),
            create_ShortTObj(rgb_color->blue));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onInit_color(context, color, rgb_color, init_color_spec);
    }
}



/** init_pair_spec **/

mediator init_pair_media for specification
IntT init_pair_spec( CallContext context, ShortT pair, ColorPair* color_pair)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "init_pair:$(short)$(short)$(short)", 
            create_ShortTObj(pair), create_ShortTObj(color_pair->foreground),
            create_ShortTObj(color_pair->background));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onInit_pair(context, pair, color_pair, init_pair_spec);
    }
}



/** pair_content_spec **/

mediator pair_content_media for specification
IntT pair_content_spec( CallContext context, ShortT pair,
                        ColorPair* color_pair)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "pair_content:$(short)",
            create_ShortTObj(pair));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            color_pair->foreground = readShort_TSStream(&command.response);
            color_pair->background = readShort_TSStream(&command.response);
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPair_content(context, pair, color_pair, pair_content_spec);
    }
}



/** start_color_spec **/

mediator start_color_media for specification
IntT start_color_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "start_color" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onStartColor(context, start_color_spec);
    }
}



IntT COLOR_PAIR( CallContext context, IntT n)
{
    TSCommand command = create_TSCommand();
    IntT res;

    format_TSCommand( &command, "COLOR_PAIR:$(int)", create_IntTObj(n));
    executeCommandInContext( context, &command );
    if (!isBadVerdict())
    {
        res = readInt_TSStream(&command.response);
    }
    
    destroy_TSCommand(&command);
    
    return res;
}
IntT PAIR_NUMBER( CallContext context, IntT value)
{
    TSCommand command = create_TSCommand();
    IntT res;

    format_TSCommand( &command, "PAIR_NUMBER:$(int)", create_IntTObj(value));
    executeCommandInContext( context, &command );
    if (!isBadVerdict())
    {
        res = readInt_TSStream(&command.response);
    }
    
    destroy_TSCommand(&command);
    
    return res;
}
