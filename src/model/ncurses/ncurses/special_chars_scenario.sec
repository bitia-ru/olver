/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/string/add_model.seh"
#include "ncurses/string/insert_model.seh"
#include "ncurses/char/add_model.seh"
#include "ncurses/char/insert_model.seh"
#include "ncurses/window/refresh_model.seh"
#include "ncurses/terminal/control_model.seh"


static CallContext context;

#define NUM_POS 4

static NCursesPosition* positions[NUM_POS];
static CString*         strings[NUM_POS];
static ChTypeT          characters[NUM_POS];

static IntT window_widths[NUM_POS]={10, 20, 60, 35};
static IntT window_heights[NUM_POS]={10, 5, 16, 20};
static IntT window_begx[NUM_POS]={10, 30, 5, 40};
static IntT window_begy[NUM_POS]={10, 15, 7, 3};



/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_special_chars_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();

    initReqFilters();

    return true;

}


static void finish_special_chars_scenario(void)
{
    terminateNCursesProcess(context);
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool io_special_chars_scen()
{
    WindowTPtr curWin;
    int i=0, j, k;
    initscr_spec(context);

    strings[0] = create_CString("x\n\n\nd\bdd\rb");
    strings[1] = create_CString("y\n\t\b\tzzzg");
    strings[2] = create_CString("\n\n\n\n\n\n\n\tstring");
    strings[3] = create_CString("\b\b\b\bvval\rue");

    characters[0]=create_emptyChTypeT();
    characters[0].letter = '\n';
    characters[1]=create_emptyChTypeT();
    characters[1].letter = '\r';
    characters[2]=create_emptyChTypeT();
    characters[2].letter = '\b';
    characters[3]=create_emptyChTypeT();
    characters[3].letter = '\t';

    for (i=-1;i<NUM_POS;i++)
    {
        if (i==-1)
        {
            NCursesWindow *stdwnd = getNCursesStdWindow(context);
            curWin= stdwnd->address;

            positions[0] = create_NCursesPosition(stdwnd->ncols/2, stdwnd->nlines/2);
            positions[1] = NULL;
            positions[2] = create_NCursesPosition(stdwnd->ncols-5, stdwnd->nlines-1);
            positions[3] = create_NCursesPosition(0, 0);

        }
        else
        {
            NewWinReturnType* winRet = newwin_spec( context, window_heights[i],
                window_widths[i], window_begy[i], window_begx[i]);
            curWin = winRet->win;

            positions[0] = create_NCursesPosition(window_widths[i]/2, window_heights[i]/2);
            positions[1] = NULL;
            positions[2] = create_NCursesPosition(window_widths[i]-3, window_heights[i]-1);
            positions[3] = create_NCursesPosition(0, 0);
        }

        scrollok_spec(context, curWin, true);

        for (j=0;j<NUM_POS;j++)
        {
            for (k=0;k<NUM_POS;k++)
            {
                if (k/2 == 0)
                {
                    insch_spec(context, characters[k], &curWin, positions[j]);
                    addstr_spec(context,  &curWin, positions[j],  strings[k], NULL);
                    refresh_spec(context, &curWin);
                }
                else
                {
                    addch_spec(context, characters[k], &curWin, positions[j], false);
                    insstr_spec(context,  &curWin, positions[j],  strings[k], NULL);
                    refresh_spec(context, &curWin);
                }
            }
        }
    }

    endwin_spec(context);

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_special_chars_scenario =
{
        .init = init_special_chars_scenario,
        .finish = finish_special_chars_scenario,
        .actions = {
            io_special_chars_scen,
            NULL
    }
};

bool main_special_chars( int argc, char** argv )
{
    ncurses_special_chars_scenario(argc, argv);

    return true;
}


#ifdef NCURSES_SPECIAL_CHARACTERS_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initNcurses();

}

int main(int argc, char** argv)
{
    set_assertion_exit_callback();
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    main_special_chars(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif


