/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef COMMON_CHTYPE_ARRAY_SEH
#define COMMON_CHTYPE_ARRAY_SEH

#include <atl/object.h>
#include "data/embed_model.seh"


/********************************************************************/
/**                             ChTypeT                            **/
/********************************************************************/

/*
The following symbolic constants are used to manipulate attribute bits in objects of type chtype: 

A_ALTCHARSET   Alternate character set
A_BLINK        Blinking
A_BOLD         Extra bright or bold
A_DIM          Half bright
A_INVIS        Invisible
A_PROTECT      Protected
A_REVERSE      Reverse video
A_STANDOUT     Best highlighting mode of the terminal
A_UNDERLINE    Underlining
*/

typedef struct ChTypeT
{
    bool   altcharset;   // Alternate character set
    bool   blink;        // Blinking
    bool   bold;         // Extra bright or bold
    bool   dim;          // Half bright
    bool   invis;        // Invisible
    bool   protect;      // Protected
    bool   reverse;      // Reverse video
    bool   standout;     // Best highlighting mode of the terminal
    bool   underline;    // Underlining
    
    IntT   colorPair;
    WCharT letter;
} ChTypeT;

ChTypeT create_emptyChTypeT();
bool equals_ChTypeT(ChTypeT a, ChTypeT b);


specification typedef struct ChTypeT ChTypeTObj;

ChTypeTObj* create_ChTypeTObj(ChTypeT ch);


/********************************************************************/
/**                            ChTypeTArray                        **/
/********************************************************************/
struct _chtype_array
{
    ChTypeT* arr;
    UIntT    size;
};

#ifdef __SEC__
  #pragma SEC file
  specification typedef struct _chtype_array ChTypeTArray;
#else
  typedef struct _chtype_array ChTypeTArray;
  extern const Type type_ChTypeTArray;
#endif


bool equals_ChTypeTArray(ChTypeTArray* arr1, ChTypeTArray* arr2);


/*
 * Constructs a newly allocated ChTypeTArray object
 */
ChTypeTArray* create_ChTypeTArray(UIntT size);

/*
 * Returns the value of this ChTypeTArray as a ChTypeT*.
 */
ChTypeT* chTypeArray_ChTypeTArray( ChTypeTArray* self );

/*
 * Returns the size of this ChTypeTArray.
 */
UIntT size_ChTypeTArray( ChTypeTArray* self );

/*
 * Returns the chtype at the specified offset from the beginning of this
 * ChTypeTArray.
 */
ChTypeT chtypeAt_ChTypeTArray( ChTypeTArray* self, UIntT offset );

/*
 * Sets the value of the chtype at the specified offset from the beginning of
 * this ChTypeTArray.
 */
void setChTypeAt_ChTypeTArray( ChTypeTArray* self, UIntT offset, ChTypeT value );


#endif
