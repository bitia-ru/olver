/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef NCURSES_DATA_SEH
#define NCURSES_DATA_SEH


#include "data/embed_model.seh"
#include "common/cstring.seh"
#include "common/common_media.seh"
#include "ncurses/ncurses/chtypearray.seh"


#define NCURSES_TERMINAL    "olverct"
#define NCURSES_DEFX        80
#define NCURSES_DEFY        25

#define OLVERCT_TERMINFO_PATH   "./terminfo/olverct.terminfo"


#define max(a,b)    (((a) > (b)) ? (a) : (b))
#define min(a,b)    (((a) < (b)) ? (a) : (b))

typedef VoidTPtr TerminalTPtr;
typedef VoidTPtr ScreenTPtr;
typedef VoidTPtr WindowTPtr;


typedef struct NcursesRestrictedAttrT
{
    bool    blink;       // Blinking
    bool    bold;        // Extra bright or bold
    bool    dim;         // Half bright
    bool    reverse;     // Reverse video
    bool    standout;    // Best highlighting mode of the terminal
    bool    underline;   // Underlining

}NcursesRestrictedAttrT;

specification typedef struct NCursesTerminfo
{
    Map* mp_bool;
    Map* mp_str;
    Map* mp_num;
} NCursesTerminfo;

specification typedef struct Pdat
{
    ShortT _pad_y;
    ShortT _pad_x;
    ShortT _pad_top;
    ShortT _pad_left;
    ShortT _pad_bottom;
    ShortT _pad_right;
} Pdat;

#define MAX_BUFFER_SIZE 135

#define SUT_ERR     (-1)
#define SUT_OK      (0)

#define SUT_WA_ALTCHARSET   SUT_A_ALTCHARSET
#define SUT_WA_ATTRIBUTES   SUT_A_ATTRIBUTES
#define SUT_WA_BLINK        SUT_A_BLINK
#define SUT_WA_BOLD         SUT_A_BOLD
#define SUT_WA_DIM          SUT_A_DIM
#define SUT_WA_HORIZONTAL   SUT_A_HORIZONTAL
#define SUT_WA_INVIS        SUT_A_INVIS
#define SUT_WA_LEFT         SUT_A_LEFT
#define SUT_WA_LOW          SUT_A_LOW
#define SUT_WA_NORMAL       SUT_A_NORMAL
#define SUT_WA_PROTECT      SUT_A_PROTECT
#define SUT_WA_REVERSE      SUT_A_REVERSE
#define SUT_WA_RIGHT        SUT_A_RIGHT
#define SUT_WA_STANDOUT     SUT_A_STANDOUT
#define SUT_WA_TOP          SUT_A_TOP
#define SUT_WA_UNDERLINE    SUT_A_UNDERLINE
#define SUT_WA_VERTICAL     SUT_A_VERTICAL
#define SUT_A_REVERSE       SUT_NCURSES_BITS(1UL,10)

#define SUT_COLOR_BLACK     0
#define SUT_COLOR_RED       1
#define SUT_COLOR_GREEN     2
#define SUT_COLOR_YELLOW    3
#define SUT_COLOR_BLUE      4
#define SUT_COLOR_MAGENTA   5
#define SUT_COLOR_CYAN      6
#define SUT_COLOR_WHITE     7

#define SUT__SUBWIN         0x01
#define SUT__ENDLINE        0x02
#define SUT__FULLWIN        0x04
#define SUT__ISPAD          0x10
#define SUT__HASMOVED       0x20

#define SUT_KEY_CODE_YES    0400
#define SUT_KEY_BREAK       0401
#define SUT_KEY_MIN         0401
#define SUT_KEY_DOWN        0402
#define SUT_KEY_UP          0403
#define SUT_KEY_LEFT        0404
#define SUT_KEY_RIGHT       0405
#define SUT_KEY_HOME        0406
#define SUT_KEY_BACKSPACE   0407
#define SUT_KEY_F0          0410
#define SUT_KEY_DL          0510
#define SUT_KEY_IL          0511
#define SUT_KEY_DC          0512
#define SUT_KEY_IC          0513
#define SUT_KEY_EIC         0514
#define SUT_KEY_CLEAR       0515
#define SUT_KEY_EOS         0516
#define SUT_KEY_EOL         0517
#define SUT_KEY_SF          0520
#define SUT_KEY_SR          0521
#define SUT_KEY_NPAGE       0522
#define SUT_KEY_PPAGE       0523
#define SUT_KEY_STAB        0524
#define SUT_KEY_CTAB        0525
#define SUT_KEY_CATAB       0526
#define SUT_KEY_ENTER       0527
#define SUT_KEY_SRESET      0530
#define SUT_KEY_RESET       0531
#define SUT_KEY_PRINT       0532
#define SUT_KEY_LL          0533
#define SUT_KEY_A1          0534
#define SUT_KEY_A3          0535
#define SUT_KEY_B2          0536
#define SUT_KEY_C1          0537
#define SUT_KEY_C3          0540
#define SUT_KEY_BTAB        0541
#define SUT_KEY_BEG         0542
#define SUT_KEY_CANCEL      0543
#define SUT_KEY_CLOSE       0544
#define SUT_KEY_COMMAND     0545
#define SUT_KEY_COPY        0546
#define SUT_KEY_CREATE      0547
#define SUT_KEY_END         0550
#define SUT_KEY_EXIT        0551
#define SUT_KEY_FIND        0552
#define SUT_KEY_HELP        0553
#define SUT_KEY_MARK        0554
#define SUT_KEY_MESSAGE     0555
#define SUT_KEY_MOVE        0556
#define SUT_KEY_NEXT        0557
#define SUT_KEY_OPEN        0560
#define SUT_KEY_OPTIONS     0561
#define SUT_KEY_PREVIOUS    0562
#define SUT_KEY_REDO        0563
#define SUT_KEY_REFERENCE   0564
#define SUT_KEY_REFRESH     0565
#define SUT_KEY_REPLACE     0566
#define SUT_KEY_RESTART     0567
#define SUT_KEY_RESUME      0570
#define SUT_KEY_SAVE        0571
#define SUT_KEY_SBEG        0572
#define SUT_KEY_SCANCEL     0573
#define SUT_KEY_SCOMMAND    0574
#define SUT_KEY_SCOPY       0575
#define SUT_KEY_SCREATE     0576
#define SUT_KEY_SDC         0577
#define SUT_KEY_SDL         0600
#define SUT_KEY_SELECT      0601
#define SUT_KEY_SEND        0602
#define SUT_KEY_SEOL        0603
#define SUT_KEY_SEXIT       0604
#define SUT_KEY_SFIND       0605
#define SUT_KEY_SHELP       0606
#define SUT_KEY_SHOME       0607
#define SUT_KEY_SIC         0610
#define SUT_KEY_SLEFT       0611
#define SUT_KEY_SMESSAGE    0612
#define SUT_KEY_SMOVE       0613
#define SUT_KEY_SNEXT       0614
#define SUT_KEY_SOPTIONS    0615
#define SUT_KEY_SPREVIOUS   0616
#define SUT_KEY_SPRINT      0617
#define SUT_KEY_SREDO       0620
#define SUT_KEY_SREPLACE    0621
#define SUT_KEY_SRIGHT      0622
#define SUT_KEY_SRSUME      0623
#define SUT_KEY_SSAVE       0624
#define SUT_KEY_SSUSPEND    0625
#define SUT_KEY_SUNDO       0626
#define SUT_KEY_SUSPEND     0627
#define SUT_KEY_UNDO        0630
#define SUT_KEY_MOUSE       0631
#define SUT_KEY_RESIZE      0632
#define SUT_KEY_MAX         0777

#define SUT_PAIR_NUMBER(a)              (((a)&A_COLOR)>>8)
#define SUT_NCURSES_BITS(mask,shift)    ((mask)<<((shift)+8))
#define SUT_A_CHARTEXT                  (SUT_NCURSES_BITS(1UL,0)-1UL)
#define SUT_A_NORMAL                    0L
#define SUT_NCURSES_ATTR_SHIFT          8
#define SUT_A_COLOR                     SUT_NCURSES_BITS(((1UL)<<8)-1UL,0)
#define SUT_A_BLINK                     SUT_NCURSES_BITS(1UL,11)
#define SUT_A_DIM                       SUT_NCURSES_BITS(1UL,12)
#define SUT_A_BOLD                      SUT_NCURSES_BITS(1UL,13)
#define SUT_A_ALTCHARSET                SUT_NCURSES_BITS(1UL,14)
#define SUT_A_INVIS                     SUT_NCURSES_BITS(1UL,15)
#define SUT_A_PROTECT                   SUT_NCURSES_BITS(1UL,16)
#define SUT_A_HORIZONTAL                SUT_NCURSES_BITS(1UL,17)
#define SUT_A_LEFT                      SUT_NCURSES_BITS(1UL,18)
#define SUT_A_LOW                       SUT_NCURSES_BITS(1UL,19)
#define SUT_A_RIGHT                     SUT_NCURSES_BITS(1UL,20)
#define SUT_A_TOP                       SUT_NCURSES_BITS(1UL,21)
#define SUT_A_VERTICAL                  SUT_NCURSES_BITS(1UL,22)
#define SUT_A_STANDOUT                  SUT_NCURSES_BITS(1UL,8)
#define SUT_A_UNDERLINE                 SUT_NCURSES_BITS(1UL,9)
#define SUT_COLOR_PAIR(n)               SUT_NCURSES_BITS(n,0)
#define SUT_A_ATTRIBUTES                SUT_NCURSES_BITS(~(1UL-1UL),0)

typedef struct NcursesAttrT
{
    bool    altcharset;  // Alternate character set
    bool    blink;       // Blinking
    bool    bold;        // Extra bright or bold
    bool    dim;         // Half bright
    bool    horizontal;  // Horizontal highlight
    bool    invis;       // Invisible
    bool    left;        // Left highlight
    bool    low;         // Low highlight
    bool    protect;     // Protected
    bool    reverse;     // Reverse video
    bool    right;       // Right highlight
    bool    standout;    // Best highlighting mode of the terminal
    bool    top;         // Top highlight
    bool    underline;   // Underlining
    bool    vertical;    // Vertical highlight

    IntT    colorPair;
}NcursesAttrT;

bool equals_NCursesAttrT(NcursesAttrT attr1, NcursesAttrT attr2);

NcursesAttrT create_emptyNcursesAttrT();

NcursesAttrT create_AttrFromRestrictedNcursesAttrT(NcursesRestrictedAttrT attr);


specification typedef struct NCursesPosition
{
    IntT x;
    IntT y;
} NCursesPosition;

NCursesPosition* create_NCursesPosition(IntT x,IntT y);
NcursesAttrT create_AttrFromRestrictedNcursesAttrT(NcursesRestrictedAttrT attr);

bool equals_NCursesPosition(NCursesPosition* pos1, NCursesPosition* pos2);


specification typedef struct  NcursesAttrT NcursesAttrTObj;

NcursesAttrTObj* create_NcursesAttrTObj(NcursesAttrT attr);
NcursesAttrTObj* create_RestrictedNcursesAttrTObj(NcursesRestrictedAttrT attr);


specification typedef struct NCursesWindow
{
    WindowTPtr address;
    bool refresh;

    NCursesPosition* cursorPos;
    IntT  nlines;
    IntT  ncols;
    IntT  begy;
    IntT  begx;
    IntT  parx;
    IntT  pary;
    IntT  keypad;
    IntT  flags;
    NcursesAttrT attrs;
    ChTypeT bkgd;
    bool notimeout;
    bool clear;
    bool leaveok;

    bool scroll;
    bool sync;
    bool idlok;
    bool idcok;
    bool immed;

//    bool use_keypad;
    IntT delay;
    IntT regtop;
    IntT regbottom;
//    IntT parx;
//    IntT pary;
    WindowTPtr parent;
    Pdat* pad;
//    IntT yoffset;
//    cchar_t _bkgrnd;

    ChTypeTArray *wnd_image; // == wnd_image[y][x]
    CByteArray* need_refresh;
//    bool isPad;
    bool wasMediatorFailed;
} NCursesWindow;

NCursesWindow* create_NCursesWindow(WindowTPtr win,  IntT nlines, IntT ncols,
                                    IntT begin_y, IntT begin_x, WindowTPtr par);

NCursesWindow* create_defaultNCursesWindow(CallContext context, WindowTPtr address, IntT lines, IntT cols);

typedef struct SlkSoftkeyT
{
    //IntT key_pos;
    IntT justify;
    CString * label;
}SlkSoftkeyT;

typedef struct SlkStructT
{
    IntT fmt;
    SlkSoftkeyT slk_labels[8];
    bool invis;
    ChTypeT attrs;
}SlkStructT;

specification typedef struct NCursesScreen
{
    ScreenTPtr address;
    CString *term;
    Object  *inFile;
    Object  *outFile;
} NCursesScreen;

NCursesScreen* create_NCursesScreen(ScreenTPtr address,  CString* term, CString* inFile, CString* outFile);

#define MODE_COOKED     0
#define MODE_CBREAK     1
#define MODE_HALFDELAY  2
#define MODE_RAW        4

specification typedef struct NCursesTerminal
{
    TerminalTPtr address;
    NCursesScreen* screen;
    Map* initialized_colors;
    Map* initialized_color_pairs;
    List* inserted_character_buffer;
    IntT cursor_visibility;
    IntT intrflush;
    IntT meta;
    IntT COLORS;
    IntT COLOR_PAIRS;
    IntT has_colors;
    IntT can_change_color;
    IntT start_color;
    IntT nl;
    IntT input_mode;
    IntT baudrate;
    IntT halfdelay;
    NCursesTerminfo* terminfo;
    CString* type;
    SlkStructT slk;
} NCursesTerminal;

NCursesTerminal* create_NCursesTerminal(CallContext context, TerminalTPtr cur_term);

// returns cur_term for a given process
NCursesTerminal *getNCursesStdTerminal(CallContext context);

NCursesScreen *getNCursesStdScreen(CallContext context);

// returns stdscr for a given process
NCursesWindow *getNCursesStdWindow(CallContext context);

NCursesTerminal* getNCursesTerminal( TerminalTPtr ptr );

// Find object in memory
NCursesScreen *getScreen(ScreenTPtr* screen);
NCursesWindow *getWindow(WindowTPtr* window);
NCursesTerminal *getTerminal(TerminalTPtr* window);

void registerNCursesWindow( WindowTPtr ptr, NCursesWindow* data );
void unregisterNCursesWindow( WindowTPtr ptr );

void registerNCursesScreen( ScreenTPtr ptr, Object* data );
void unregisterNCursesScreen( ScreenTPtr ptr );

void registerNCursesTerminal( TerminalTPtr ptr, Object* data );
void unregisterNCursesTerminal( TerminalTPtr ptr );

void initNCursesData();

bool processSpecialCharacter(NCursesWindow*  win, IntT x, IntT y, ChTypeT ch);
void chtype_formatter(TSStream *stream, ChTypeTObj* ch);


ChTypeT readChTypeT_TSStream(TSStream* stream);
NcursesAttrT readNcursesAttrs_TSStream(TSStream* stream);

void changeCursorPos(NCursesWindow* curWnd, NCursesPosition* cursorPos,
                        IntT offset);

ChTypeT create_ChTypeTWithAttr(NcursesAttrT attrs, ChTypeT bkgd, CharT ch);
ChTypeT combineChTypeTWithAttrs(NcursesAttrT attrs, ChTypeT ch);
ChTypeT TurnOff_ChTypeT(ChTypeT ch, ChTypeT attrs);
ChTypeT TurnOn_ChTypeT(ChTypeT ch, ChTypeT attrs);

bool processAddSpecialCharacter(NCursesWindow*  win, IntT x, IntT y, ChTypeT ch);
bool processInsertSpecialCharacter(NCursesWindow*  win, IntT x, IntT y, ChTypeT ch);
void scrollLineNcursesWindow(NCursesWindow* wnd);

void setElement_NCursesWindow(NCursesWindow* curWnd,
                               NCursesPosition* pos,
                               ChTypeT ch);
void setElement_NCursesWindow_Refresh(NCursesWindow* curWnd,
                               NCursesPosition* pos,
                               ChTypeT ch, IntT refresh);
ChTypeT getElement_NCursesWindow(NCursesWindow* curWnd,
                               NCursesPosition* pos);

void setElement_NCursesWindow_Offset(NCursesWindow* curWnd,
                                     IntT offsetFromBeginning,
                                     ChTypeT ch);

ChTypeT getElement_NCursesWindow_Offset(NCursesWindow* curWnd,
                                        IntT offsetFromBeginning);

void setElement_NCursesWindow_YX(NCursesWindow* curWnd,
                               IntT y, IntT x,
                               ChTypeT ch);

ChTypeT getElement_NCursesWindow_YX(NCursesWindow* curWnd,
                               IntT y, IntT x);

IntT isSpecChar(ChTypeT ch);
bool addSpecChar(NCursesWindow* curWnd, NCursesPosition* pos, ChTypeT ch, bool wrap, bool insertOperation);
void addNewline(NCursesWindow* curWnd, NCursesPosition* pos, ChTypeT ch, bool wrap, bool insertOperation);
void addTab(NCursesWindow* curWnd, NCursesPosition* pos, ChTypeT ch, bool wrap, bool insertOperation);
void addBackspace(NCursesWindow* curWnd, NCursesPosition* pos, ChTypeT ch, bool wrap);
void addCarriageReturn(NCursesWindow* curWnd, NCursesPosition* pos,ChTypeT ch, bool wrap);
void shiftWindow(NCursesWindow* curWnd, IntT pos, IntT offset, bool wrap);

NCursesPosition* getAbsoluteScreenPosition(NCursesWindow* wnd,
                                           NCursesPosition* pos);
NCursesPosition* getRelativeScreenPosition(NCursesWindow* win,
                                           NCursesPosition* pos);

NcursesAttrT getAttrFromChType(ChTypeT ch);

ChTypeT getWindowBkgd(NCursesWindow* wnd);
void setWindowBkgd(NCursesWindow* wnd, ChTypeT bkgd);

NcursesAttrT getWindowAttrs(NCursesWindow* wnd);
void setWindowAttrs(NCursesWindow* wnd, NcursesAttrT attrs);

specification typedef struct Rect
{
    IntT left;
    IntT upper;
    IntT right;
    IntT lower;
} Rect;

Rect* create_Rect( IntT left, IntT upper, IntT right, IntT lower);
//Rect coordinates are absolute
Rect* getIntersectingRect(NCursesWindow* src, NCursesWindow* dst);

TerminalTPtr get_cur_term( CallContext context);
void registerStdTerminal(CallContext context);


specification typedef struct RGBColor
{
    ShortT red;
    ShortT green;
    ShortT blue;
} RGBColor;

RGBColor* create_RGBColor( ShortT red, ShortT green, ShortT blue);

specification typedef struct ColorPair
{
    ShortT foreground;
    ShortT background;
} ColorPair;

ColorPair* create_ColorPair( ShortT foreground, ShortT background);

IntT getCOLORS( CallContext context);
IntT getCOLOR_PAIRS( CallContext context);

void setVariables_StdTerminal(CallContext context);

void curses_attr_formatter(TSStream *stream, NcursesAttrTObj* attr);

bool isMappedWindow(NCursesWindow* wnd);

#define SUT_UNGETCH (1<<31)

IntT ungetch_char(CallContext context, IntT letter);
IntT ungetch_array(CallContext context, VoidTPtr ptr);

void incrementCursorPos(NCursesWindow* curWnd, NCursesPosition* cursorPos);
void newlineCursorPos(NCursesWindow* curWnd, NCursesPosition* cursorPos);

specification typedef struct Ldat
{
    List* text;
    UIntT firstchar;
    UIntT lastchar;
    UIntT oldindex;
} Ldat;

Ldat* create_Ldat(List* lst, UIntT firstchar, UIntT lastchar,UIntT oldindex);

Ldat* readLdat_TSStream(CallContext context, TSStream* stream);


Pdat* create_Pdat( ShortT _pad_y, ShortT _pad_x, ShortT _pad_top,
                  ShortT _pad_left, ShortT _pad_bottom, ShortT _pad_right);

Pdat* create_emptyPdat();

Pdat* readPdat_TSStream(CallContext context, TSStream* stream);

specification typedef struct WindowState
{
    ShortT _cury;
    ShortT _curx;
    ShortT _maxy;
    ShortT _maxx;
    ShortT _begy;
    ShortT _begx;
    ShortT _flags;
    NcursesAttrT _attrs;
    ChTypeT _bkgd;
    IntT _notimeout;
    IntT _clear;
    IntT _leaveok;
    IntT _scroll;
    IntT _idlok;
    IntT _idcok;
    IntT _immed;
    IntT _sync;
    IntT _use_keypad;
    IntT _delay;
    List* _line;
    ShortT _regtop;
    ShortT _regbottom;
    IntT _parx;
    IntT _pary;
    WindowTPtr _parent;
    Pdat* _pad;
    ShortT _yoffset;
    //Additional pointer to self WINDOW
    WindowTPtr self;
} WindowState;

WindowState* create_WindowState(ShortT _cury,
                                ShortT _curx,
                                ShortT _maxy,
                                ShortT _maxx,
                                ShortT _begy,
                                ShortT _begx,
                                ShortT _flags,
                                NcursesAttrT _attrs,
                                ChTypeT _bkgd,
                                IntT _notimeout,
                                IntT _clear,
                                IntT _leaveok,
                                IntT _scroll,
                                IntT _idlok,
                                IntT _idcok,
                                IntT _immed,
                                IntT _sync,
                                IntT _use_keypad,
                                IntT _delay,
                                List* _line,
                                ShortT _regtop,
                                ShortT _regbottom,
                                IntT _parx,
                                IntT _pary,
                                VoidTPtr _parent,
                                Pdat* _pad,
                                ShortT _yoffset,
                                WindowTPtr self);

WindowState* create_emptyWindowState();

WindowState* window_state(CallContext context, WindowTPtr ptr);
WindowState* readWindowState_TSStream(CallContext context, TSStream* stream,
                                      WindowTPtr ptr);
NcursesAttrT readNcursesAttr_TSStream(TSStream* stream);

NCursesWindow* createNCursesWindow_WindowState(WindowState* ws);
void updateNCursesWindow_WindowState( NCursesWindow* wnd, WindowState* ws);
void updateNCursesWindow(CallContext context, WindowTPtr ptr);
void updateNCursesWindowMayNULL(CallContext context, WindowTPtr* win);


NCursesWindow* getWindowMayNULL(CallContext context, WindowTPtr* win);
NCursesPosition* getWindowPositionMayNULL(NCursesWindow* curWnd, NCursesPosition* position);
WindowTPtr getPtrNCursesStdWindow(CallContext context);
WindowTPtr* getLPtrNCursesStdWindow(CallContext context);
WindowTPtr getPtrNCursesWindowMayNULL(CallContext context, WindowTPtr* win);
IntT getTermNLines(CallContext context);
IntT getTermNCols(CallContext context);


void DUMP_List_Ldat(List* lst);
void DUMP_wnd(NCursesWindow* wnd);
void DUMP_refreshed_wnd(NCursesWindow* wnd);
void DUMP_image(ChTypeTArray* chA, IntT ncols, IntT nlines);
void DUMP_RealScreen(CallContext context);
void DUMP_ModelScreen(CallContext context);
void DUMP_screens(CallContext context);
void onNCursesUniversal( CallContext context, WindowTPtr* win, IntT _spec);

void setNCursesStdTerminal(CallContext context,  TerminalTPtr term);
void setNCursesStdWindow(CallContext context,  WindowTPtr win);
TerminalTPtr getNCursesCurrentTerminal(CallContext context);
WindowTPtr getNCursesCurrentWindow(CallContext context);
List* getNCursesInitedTerminals(CallContext context);
bool getTerminalFilterSet(CallContext context);
void setTerminalFilterSet(CallContext context, bool val);
void setTermNLines(CallContext context, IntT val);
void setTermNCols(CallContext context, IntT val);
bool get_use_env(CallContext context);
void set_use_env(CallContext context, IntT boolval);

/************************************************************************/
/*          NCursesWindow checking functions and defines                */
/************************************************************************/
#define CH_ADDR     (1)
#define CH_CURSOR   (1<<1)
#define CH_NLINES   (1<<2)
#define CH_NCOLS    (1<<3)
#define CH_BEGX     (1<<4)
#define CH_BEGY     (1<<5)
#define CH_KEYPAD   (1<<6)
#define CH_ATTRS    (1<<7)
#define CH_BKGD     (1<<8)
#define CH_PARENT   (1<<9)
#define CH_DATA     (1<<10)
#define CH_PAD      (1<<11)
#define CH_SCROLL   (1<<12)
#define CH_PARX     (1<<13)
#define CH_PARY     (1<<14)
#define CH_TIMEOUT  (1<<15)
#define CH_SYNC     (1<<16)

#define CH_ALL      (0xffffffff)


NCursesWindow* createNCursesWindow_Local(NCursesWindow* wnd);
bool equals_NCursesAttrs(NcursesAttrT first, NcursesAttrT second);
bool check_NCursesWindows(NCursesWindow* model, NCursesWindow* local,
                          IntT flags, IntT numFails);
bool check_NCursesWindow(CallContext context, WindowTPtr* win,
                         IntT flags, IntT numFails);

bool equals_NCursesAttrsWithoutColor(NcursesAttrT first, NcursesAttrT second);

/************************************************************************/
/*                                                                      */
/************************************************************************/
void updateElement_NCursesWindow(NCursesWindow* curWnd,
                               NCursesPosition* pos,
                               ChTypeT ch);
void updateElement_NCursesWindow_YX(NCursesWindow* curWnd,
                               IntT y, IntT x,
                               ChTypeT ch);

Object * getNCursesState();
void setNCursesState(Object*);

void addWindow_ProcessId(ProcessId processId, NCursesWindow* wnd);
void removeWindow_ProcessId(ProcessId processId, NCursesWindow* wnd);

bool windowHasChildren(WindowTPtr win);

void DUMP_ws(WindowState* ws);

CallContext createDefaultProcessForNCurses();
CallContext createProcessForNCurses(IntT xSize, IntT ySize);
CallContext createProcessWithTerminal(CharT* termname, IntT xSize, IntT ySize);
void terminateNCursesProcess(CallContext context);

CByteArray *ncursesScreenDump(CallContext context);
CByteArray *ncursesReadTerminfo(CallContext context);
void ncursesInputString(CallContext context, CByteArray *charArray);
/************************************************************************/
/*                          Terminfo                                    */
/************************************************************************/
CString* readTerminfo(CallContext context, CString* path);
CString* readTerminfo_Terminfo(CallContext context, NCursesTerminfo* terminfo, CString* path);
CString* getEnt(CString* arr, IntT* i);
CString* getPart(CString* arr, IntT* i, IntT* type);
NCursesTerminfo* create_NCursesTerminfo();
IntT makeInt(CString* arr);
void addItem_NCursesTerminfo(CallContext context, CString* key, Object* val,
                             IntT type);
void addItem_NCursesTerminfo_Terminfo(CallContext context, NCursesTerminfo* terminfo, CString* key,
                                      Object* val, IntT type);
Object* getItem_NCursesTerminfo(CallContext context, CString* key);
Object* getItem_NCursesTerminfo_Terminfo(CallContext context, NCursesTerminfo* terminfo, CString* key);
void delItem_NCursesTerminfo(CallContext context, CString* key, IntT type);
void delItem_NCursesTerminfo_Terminfo(CallContext context, NCursesTerminfo* terminfo, CString* key, IntT type);

/************************************************************************/
/*                          Screen                                      */
/************************************************************************/
IntT readStrStop(IntT letter);
ChTypeTArray* create_ChTypeTArray_ScreenDump(CByteArray* ba, UIntT ncols,
                                             UIntT nlines);
void readLine_ScreenDump(ChTypeTArray* chA, CByteArray* ba, IntT* cur,
                         IntT ncols);
IntT readInt_CByteArray(CByteArray* ba, IntT* cur);
IntT lastLine_CByteArray(CByteArray* ba, IntT cur);

void create_stdScreenContent(IntT ncols, IntT nlines);
void set_stdScreenContent(ChTypeTArray* arr);
void create_doupdate_screen(IntT ncols, IntT nlines);
ChTypeTArray* get_stdScreenContent();
void update_stdScreenContent(CallContext context, NCursesWindow* curWnd,
                             IntT y, IntT x);
ChTypeT getElement_stdScreenContent_YX(CallContext context, IntT y, IntT x);
ChTypeTArray* get_doupdate_screen();
void update_doupdate_screen(CallContext context, NCursesWindow* curWnd,
                             IntT y, IntT x);
void set_refresh_forbidden(IntT val);
IntT get_refresh_forbidden();
void set_endwin_no_refresh(IntT val);
IntT get_endwin_no_refresh();
void erase_ChTypeTArray(ChTypeTArray* chA);
void setRefresh_NCursesWindow(NCursesWindow* curWnd, NCursesPosition* pos,
                              IntT val);
IntT getRefresh_NCursesWindow(NCursesWindow* curWnd, NCursesPosition* pos);
void pushNCursesWindow(NCursesWindow* curWnd);
NCursesWindow* popNCursesWindow();
void refresh_WindowTPtr(CallContext context, WindowTPtr* win, IntT refresh);
void wsyncdown_NCursesWindow(NCursesWindow* win);
void wsyncup_NCursesWindow(NCursesWindow* win);
void wsyncup_NCursesWindow_Element(NCursesWindow* win, NCursesPosition* pos);
void wcursyncup_NCursesWindow(NCursesWindow* win);
void wnoutrefresh_WindowTPtr(CallContext context, WindowTPtr* win);
void pnoutrefresh_NCursesWindow(CallContext context, NCursesWindow* curWnd);
IntT compareScreens(ChTypeTArray* arr0, ChTypeTArray* arr1);
IntT compareScreens_Context(CallContext context);

LinearTimeMark delta(TimeInterval timestamp);
IntT delta_gt_ms(TimeInterval timestamp, IntT ms);
/************************************************************************/
/*                         Global Init Function                         */
/************************************************************************/
void initNcurses(void);

/************************************************************************/
/*                                 RipoffLine                           */
/************************************************************************/

#define MAX_RIP_LINES 5

typedef bool RipCallbackFunc;

specification typedef struct RipLineT
{
    IntT line;
    RipCallbackFunc init;
    WindowTPtr win;
    IntT win_columns;
}RipLineT;

RipLineT * create_RipLineT(IntT line, RipCallbackFunc init, WindowTPtr win, IntT win_columns);
List * getRipLines(CallContext context);
void addRipLine(CallContext context, RipLineT * ripline);
RipLineT * findRipLine_byWinOrigin(List * riplist,WindowState * win_state, IntT Scr_nLines);

void advanceCursorOnePos(NCursesWindow* curWnd);

/*****/

SlkStructT create_defaultSlkStruct(CallContext context);

void setSlkFormat(CallContext context, IntT fmt);
IntT getSlkFormat(CallContext context);

#endif
