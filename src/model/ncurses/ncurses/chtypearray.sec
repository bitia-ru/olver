/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "ncurses/ncurses/chtypearray.seh"

#include <utils/boolean.h>
#include <utils/assertion.h>

#include <string.h>
#include "common/verbose.h"

// Temporary here
#include "ts/version.hh"


/********************************************************************/
/**                             ChTypeT                            **/
/********************************************************************/
specification typedef struct ChTypeT ChTypeTObj = {};

ChTypeTObj* create_ChTypeTObj(ChTypeT ch)
{
    
    return create(&type_ChTypeTObj, ch.altcharset, ch.blink, ch.bold, ch.dim, 
        ch.invis, ch.protect, ch.reverse, ch.standout, ch.underline,
        ch.colorPair, ch.letter);    
}



ChTypeT create_emptyChTypeT()
{
    ChTypeT res;
    
    res.altcharset = false;
    res.blink = false;
    res.bold = false;
    res.colorPair = 0;
    res.dim = false;
    res.invis = false;
    res.letter = ' ';
    res.protect = false;
    res.reverse = false;
    res.standout = false;
    res.underline = false;

    return res;
}

bool equals_ChTypeT(ChTypeT a, ChTypeT b)
{
    if(! (a.altcharset ? b.altcharset : !b.altcharset))
        return false;
    
    if(! (a.blink ? b.blink : !b.blink))
        return false;
    
    if(! (a.bold ? b.bold : !b.bold))
        return false;
    
    if(! (a.colorPair == b.colorPair))
        return false;
    
    if(! (a.dim ? b.dim : !b.dim))
        return false;
    
    if(! (a.invis ? b.invis : !b.invis))
        return false;
    
    if(! (a.letter == b.letter))
        return false;
    
    if(! (a.protect ? b.protect : !b.protect))
        return false;
    
    if(! (a.reverse ? b.reverse : !b.reverse))
        return false;
    
    if(! (a.standout ? b.standout : !b.standout))
        return false;
    
    if(! (a.underline ? b.underline : !b.underline))
        return false;
    
    return true;
}


/********************************************************************/
/**                           ChTypeTArray                         **/
/********************************************************************/
static void _init_chtype_array( struct _chtype_array* arr, UIntT len)
{
    IntT i;

    arr->size=len;
    arr->arr = malloc(len*sizeof(ChTypeT));
    assertion( arr->arr != NULL, FORMAT("Failed to allocate memory, length %u"),
        len*sizeof(ChTypeT)
        );

    memset(arr->arr, 0, len*sizeof(ChTypeT));

    for (i=0;i<len;i++)
    {
        arr->arr[i].letter=(WCharT)-1;
    }

}

static void init_ChTypeTArray( struct _chtype_array *arr, va_list *arg_list )
{
    unsigned int len = va_arg( *arg_list, unsigned int);

    _init_chtype_array(arr, len);
}

static void copy_ChTypeTArray(struct _chtype_array* src, struct _chtype_array* dst)
{
    size_t malloc_size=((size_t)src->size)*(sizeof(ChTypeT));
    
    dst->size=src->size;
    dst->arr=(ChTypeT*)malloc(malloc_size);
    
    memcpy(dst->arr, src->arr, malloc_size);
}

static int compare_ChTypeTArray( struct _chtype_array *left, struct _chtype_array *right )
{
    IntT i;
    if (left->size!=right->size)
    {
        return 1;
    }
    for (i=0;i<left->size;i++)
    {
        if (!equals_ChTypeT(left->arr[i], right->arr[i])
            && left->arr[i].letter!=(WCharT)-1
            && right->arr[i].letter!=(WCharT)-1)
        {
            return 1;
        }
    }
    
    return 0;
}

static String* to_string_ChTypeTArray( struct _chtype_array *obj )
{
    return create_String("Not implemented yet");
}

static void destroy_ChTypeTArray( struct _chtype_array *obj )
{
    free(obj->arr);
}

#if CTESK_VERSION >= 25247
static String* to_xml_ChTypeTArray( struct _chtype_array* obj )
{
 return to_XML_spec( "ChTypeTArray", to_string_ChTypeTArray( obj ) );
} 

specification typedef struct _chtype_array ChTypeTArray = {
    .init      = (Init)init_ChTypeTArray,
    .copy      = (Copy)copy_ChTypeTArray,
    .compare   = (Compare)compare_ChTypeTArray,
    .to_string = (ToString)to_string_ChTypeTArray,
    .to_XML    = (ToXML)to_xml_ChTypeTArray,
    .destroy   = (Destroy)destroy_ChTypeTArray
};

#else // Old CTesK

const Type type_ChTypeTArray =
{
        "ChTypeTArray",
        sizeof(struct _chtype_array),
        &type_Object,
        (Init)init_ChTypeTArray,
        (Copy)copy_ChTypeTArray,
        (Compare)compare_ChTypeTArray,
        (ToString)to_string_ChTypeTArray,
        (CheckInvariant)check_invariant_Default,
        (Enumerate)enumerate_Default,
        (Destroy)destroy_ChTypeTArray
};
#endif


bool equals_ChTypeTArray(ChTypeTArray* arr1, ChTypeTArray* arr2)
{
    int size, i;
    
    if(arr1->size != arr2->size)
    {
        DUMP("equals_ChTypeTArray failed: arr1->size != arr2->size\n");
        return false;
    }
    
    size = arr1->size;
    
    for(i = 0; i < size; i++)
        if( arr1->arr[i].letter!=(WCharT)-1 && arr2->arr[i].letter!=(WCharT)-1
            && !equals_ChTypeT(arr1->arr[i], arr2->arr[i]))
        {
            DUMP("equals_ChTypeTArray failed for %dth element:$(obj)!=$(obj)\n",
                i,  create_ChTypeTObj(arr1->arr[i]),
                create_ChTypeTObj(arr2->arr[i]));
            
            return false;
        }
        
        return true;    
}

/*
 * Constructs a newly allocated ChTypeTArray object
 */
ChTypeTArray* create_ChTypeTArray(UIntT size)
{
    /*ChTypeTArray* chA = create(&type_ChTypeTArray, size);
    erase_ChTypeTArray(chA);*/

    return create(&type_ChTypeTArray, size);
}

/*
 * Returns the value of this ChTypeTArray as a ChTypeT*.
 */
ChTypeT* chTypeArray_ChTypeTArray( ChTypeTArray* self )
{
    return self->arr;
}

/*
 * Returns the size of this ChTypeTArray.
 */
UIntT size_ChTypeTArray( ChTypeTArray* self )
{
    return self->size;
}

/*
 * Returns the chtype at the specified offset from the beginning of this
 * ChTypeTArray.
 */
ChTypeT chtypeAt_ChTypeTArray( ChTypeTArray* self, UIntT offset )
{
    return (self->arr)[offset];
}

/*
 * Sets the value of the chtype at the specified offset from the beginning of
 * this ChTypeTArray.
 */
void setChTypeAt_ChTypeTArray( ChTypeTArray* self, UIntT offset, ChTypeT value )
{
    (self->arr)[offset] = value;
}

