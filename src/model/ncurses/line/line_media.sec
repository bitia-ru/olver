/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/line/line_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesLineSubsystem(void)
{
  // Set up mediators
    set_mediator_hline_spec(hline_media);
    set_mediator_vline_spec(vline_media);
    set_mediator_insertln_spec(insertln_media);
    set_mediator_insdelln_spec(insdelln_media);
    set_mediator_ripoffline_spec(ripoffline_media);
  
    registerTSFormatter("chtype",(TSFormatterFuncType)chtype_formatter);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** hline_spec **/
//This mediator refers to: hline, mvhline, mvwhline, whline
mediator hline_media for specification
IntT hline_spec( CallContext context, WindowTPtr* win, NCursesPosition* position, ChTypeT ch, IntT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;

        if (win!=NULL)
        {
            if (position!=NULL)
            {
                format_TSCommand( &command, "mvwhline:$(ptr)$(int)$(int)$(chtype)$(int)", create_VoidTPtrObj(*win), create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command, "whline:$(ptr)$(chtype)$(int)", create_VoidTPtrObj(*win), create_ChTypeTObj(ch), create_IntTObj(n));
            }
        }
        else
        {
            if (position!=NULL)
            {
                format_TSCommand( &command, "mvhline:$(int)$(int)$(chtype)$(int)", create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command, "hline:$(chtype)$(int)", create_ChTypeTObj(ch), create_IntTObj(n));
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onHline(context, win, position, ch, n , hline_spec);
    }
}

/** vline_spec **/
//This mediator refers to: mvwvline, wvline, mvvline, vline
mediator vline_media for specification
IntT vline_spec( CallContext context, WindowTPtr* win, NCursesPosition* position, ChTypeT ch, IntT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;

        if (win!=NULL)
        {
            if (position!=NULL)
            {
                format_TSCommand( &command, "mvwvline:$(ptr)$(int)$(int)$(chtype)$(int)", create_VoidTPtrObj(*win), create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command, "wvline:$(ptr)$(chtype)$(int)", create_VoidTPtrObj(*win), create_ChTypeTObj(ch), create_IntTObj(n));
            }
        }
        else
        {
            if (position!=NULL)
            {
                format_TSCommand( &command, "mvvline:$(int)$(int)$(chtype)$(int)", create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch), create_IntTObj(n));
            }
            else
            {
                format_TSCommand( &command, "vline:$(chtype)$(int)", create_ChTypeTObj(ch), create_IntTObj(n));
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onVline(context, win, position, ch, n , vline_spec);
    }
}

/** insertln_spec **/
//This mediator refers to: insertln, winsertln
mediator insertln_media for specification
IntT insertln_spec( CallContext context, WindowTPtr* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;

        if (win!=NULL)
        {
            format_TSCommand( &command, "winsertln:$(ptr)", create_VoidTPtrObj(*win));
        }
        else
        {
            format_TSCommand( &command, "insertln");
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onInsertln(context, win, insertln_spec);
    }
}


/** insdelln_spec **/
//This mediator refers to: insdelln, winsdelln
mediator insdelln_media for specification
IntT insdelln_spec( CallContext context, WindowTPtr* win, IntT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;

        if (win!=NULL)
        {
            format_TSCommand( &command, "winsdelln:$(ptr)$(int)", create_VoidTPtrObj(*win), create_IntTObj(n));
        }
        else
        {
            format_TSCommand( &command, "insdelln:$(int)", create_IntTObj(n));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onInsdelln(context, win, n, insdelln_spec);
    }
}


/** ripoffline_spec **/

mediator ripoffline_media for specification
IntT ripoffline_spec( CallContext context, IntT line, RipCallbackFunc init)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = -1;
        
        format_TSCommand( &command, "ripoffline:$(int)$(int)", 
                          create_IntTObj(line), create_IntTObj((IntT)init)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onRipoffline(context, line, init, ripoffline_spec );
    }
}





