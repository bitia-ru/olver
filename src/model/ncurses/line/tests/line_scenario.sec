 /*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/line/tests/line_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/ncurses/ncurses_data.seh"

#include "ncurses/line/line_media.seh"
#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/window/window_media.seh"
#include "ncurses/window/refresh_media.seh"


static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_line_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();

    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(SERIALIZATION_TIME);

    return true;
}


static void finish_line_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_line_scenario);
    terminateNCursesProcess(context);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool line_scen()
{
    NewWinReturnType* winRet;
    CByteArray * dump1;
    ChTypeTArray * carr1;
    NCursesWindow * stdwin;
    int i;

    ChTypeT ch = {
        false,   // Alternate character set
        false,        // Blinking
        false,         // Extra bright or bold
        false,          // Half bright
        false,        // Invisible
        false,      // Protected
        false,      // Reverse video
        false,     // Best highlighting mode of the terminal
        false,    // Underlining
        false,
        'a'
    };

    initscr_spec(context);

    winRet = newwin_spec( context, 20, 20, 0, 0);

    // clearing
    refresh_spec(context, NULL);
    refresh_spec(context, &(winRet->win));

    hline_spec(context, NULL, create_NCursesPosition(3, 3), ch, 10); refresh_spec(context, NULL);
    hline_spec(context, &(winRet->win), create_NCursesPosition(3, 3), ch, 10); refresh_spec(context, &(winRet->win));

    hline_spec(context, NULL, NULL, ch, 10);    refresh_spec(context, NULL);
    hline_spec(context, NULL, NULL, ch, 200);   refresh_spec(context, NULL);
    hline_spec(context, &(winRet->win), NULL, ch, 10);  refresh_spec(context, &(winRet->win));
    hline_spec(context, &(winRet->win), NULL, ch, 200); refresh_spec(context, &(winRet->win));


    vline_spec(context, NULL, create_NCursesPosition(10, 10), ch, 20);   refresh_spec(context, NULL);
    vline_spec(context, &(winRet->win), create_NCursesPosition(3, 7), ch, 5);  refresh_spec(context, &(winRet->win));

    vline_spec(context, NULL, NULL, ch, 10);    refresh_spec(context, NULL);
    vline_spec(context, NULL, NULL, ch, 200);   refresh_spec(context, NULL);
    vline_spec(context, &(winRet->win), NULL, ch, 10);  refresh_spec(context, &(winRet->win));
    vline_spec(context, &(winRet->win), NULL, ch, 200); refresh_spec(context, &(winRet->win));

    insertln_spec(context, NULL);    refresh_spec(context, NULL);
    insertln_spec(context, &(winRet->win)); refresh_spec(context, &(winRet->win));

    insdelln_spec(context, NULL, 3);     refresh_spec(context, NULL);
    insdelln_spec(context, &(winRet->win), 3);  refresh_spec(context, &(winRet->win));
    insdelln_spec(context, NULL, -5);     refresh_spec(context, NULL);
    insdelln_spec(context, &(winRet->win), -5); refresh_spec(context, &(winRet->win));

/*
    dump1 = ncursesScreenDump(context);
    stdwin = getNCursesStdWindow(context);
    carr1 = create_ChTypeTArray_ScreenDump(dump1, stdwin->ncols, stdwin->nlines);
    for(i=0;i<dump1->length;i++)
    {
        DUMP("%c", byteAt_CByteArray(dump1, i));
    }
    DUMP_image(get_stdScreenContent(), stdwin->ncols, stdwin->nlines);
/**/

    endwin_spec(context);

    return true;
}

scenario
bool ripoffline_6_scen()
{
    ripoffline_spec(context, -1, true);
    ripoffline_spec(context, -1, true);
    ripoffline_spec(context, -1, true);
    ripoffline_spec(context, -1, true);
    ripoffline_spec(context, -1, true);
    ripoffline_spec(context, -1, true);

    initscr_spec(context);
    /* [Do nothing] */
    endwin_spec(context);

    return true;
}

scenario
bool small_scen()
{
    if(context.process != 0)
    {
        terminateNCursesProcess(context);
    }

    context = createDefaultProcessForNCurses();

    iterate(int i=0;i<7;i++;)
    switch(i)
    {
        case 0: ripoffline_spec(context, 1, true);
            break;
        case 1: ripoffline_spec(context, -1, true);
            break;
        case 2: ripoffline_spec(context, 1, true);
                ripoffline_spec(context, -1, true);
            break;
        case 3: ripoffline_spec(context, -1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
            break;
        case 4: ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, 1, true);
            break;
        case 5: ripoffline_spec(context, -1, true);
                ripoffline_spec(context, -1, true);
                ripoffline_spec(context, -1, true);
                ripoffline_spec(context, -1, true);
                ripoffline_spec(context, -1, true);
            break;
        case 6: ripoffline_spec(context, 1, true);
                ripoffline_spec(context, -1, true);
                ripoffline_spec(context, 1, true);
                ripoffline_spec(context, -1, true);
                ripoffline_spec(context, 1, true);
            break;
        default:
            return false;
    }

    initscr_spec(context);
    /* [Do nothing] */
    endwin_spec(context);

    return true;
}

scenario
bool ripoffline_scen()
{
    iterate(IntT i1=-1;i1<2;i1++;)
    {
        iterate(IntT i2=-1;i2<2;i2++;i1)
        {
            iterate(IntT i3=-1;i3<2;i3++;i2)
            {
                iterate(IntT i4=-1;i4<2;i4++;i3)
                {
                    iterate(IntT i5=-1;i5<2;i5+=2;i4)
                    {
                        if(context.process != 0)
                        {
                            terminateNCursesProcess(context);
                        }

                        context = createDefaultProcessForNCurses();

                        DUMP(" %d",i1);
                        ripoffline_spec(context, i1, true);

                        DUMP(" %d",i2);
                        ripoffline_spec(context, i2, true);

                        DUMP(" %d",i3);
                        ripoffline_spec(context, i3, true);

                        DUMP(" %d",i4);
                        ripoffline_spec(context, i4, true);

                        DUMP(" %d",i5);
                        ripoffline_spec(context, i5, true);

                        iterate(IntT i6=-1;i6<2;i6+=2;i5)
                        {
                            DUMP(" %d",i6);
                            ripoffline_spec(context, i6, true);
                        }

                        DUMP("~\n");

                        initscr_spec(context);
                        /* [Do nothing] */
                        endwin_spec(context);
                    }
                }
            }
        }
    }

    return true;
}

Object* getLineScenarioGenState(void)
{
    return NULL;
}

Object* saveLineState(void)
{
    return clone(getNCursesState());
}

void restoreLineState(Object* saved_state)
{
    setNCursesState(saved_state);
}

bool isLineModelStateStationary(void)
{
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_line_scenario =
{
    .init = init_line_scenario,
    .finish = finish_line_scenario,

    .actions =
    {
            line_scen,
            NULL
    }
};

scenario ndfsm ncurses_line_rip_6_scenario = /*[ fedora fails! ]*/
{
    .init = init_line_scenario,
    .finish = finish_line_scenario,
    .getState = getLineScenarioGenState,

    .saveModelState = (PtrSaveModelState)saveLineState,
    .restoreModelState = (PtrRestoreModelState)restoreLineState,
    .isStationaryState = (PtrIsStationaryState)isLineModelStateStationary,

    .actions =
    {
            ripoffline_6_scen,
            NULL
    }
};

scenario ndfsm ncurses_line_rip_scenario =
{
    .init = init_line_scenario,
    .finish = finish_line_scenario,
    .getState = getLineScenarioGenState,

    .saveModelState = (PtrSaveModelState)saveLineState,
    .restoreModelState = (PtrRestoreModelState)restoreLineState,
    .isStationaryState = (PtrIsStationaryState)isLineModelStateStationary,

    .actions =
    {
            ripoffline_scen,
            small_scen,
            NULL
    }
};

bool main_ncurses_line( int argc, char** argv )
{
    //ncurses_line_rip_6_scenario(argc, argv); // fedora fails on this scen (1 error)
    ncurses_line_scenario(argc, argv);
    ncurses_line_rip_scenario(argc, argv);

    return true;
}

#ifdef NCURSES_LINE_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");

    // Run test scenario
    main_ncurses_line(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
