/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/slk/tests/slk_scenario.seh"


#include "common/common_scenario.seh"
#include "ncurses/slk/tests/slk_scenario.seh"
#include "ncurses/slk/slk_model.seh"
#include "ncurses/slk/slk_media.seh"

#include "ncurses/window/window_model.seh"
#include "ncurses/window/refresh_model.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "ncurses/terminal/control_model.seh"

#include "ncurses/color/color_media.seh"
#include "common/verbose.h"
#include <stdio.h>

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

bool init_slk_scenario(int argc, char** argv)
{
    context = createDefaultProcessForNCurses();

    return true;
}

void finish_slk_scenario(void)
{
    terminateNCursesProcess(context);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool simple_slk_scen(void)
{
    ChTypeT ch;
    NcursesAttrT attrs = create_emptyNcursesAttrT();
    ColorPair * color_pair = create_ColorPair(SUT_COLOR_YELLOW, SUT_COLOR_BLUE);
    ShortT color_pair_number = 1;

    slk_init_spec(context, 0);

    initscr_spec(context);

    /*[initialization]*/
    registerStdTerminal(context);

    has_colors_spec(context);
    can_change_color_spec(context);

    start_color_spec(context);

    setVariables_StdTerminal(context);

    init_pair_spec(context, color_pair_number,  color_pair);

    ch = create_emptyChTypeT();
    ch.reverse = true;
    slk_attrset_spec(context, ch);
    /**/

    slk_set_spec(context, 1, create_CString("  test0"), 0); // set
    slk_set_spec(context, 2, create_CString("  test1"), 1);
    slk_set_spec(context, 3, create_CString("  test2"), 2);
    slk_set_spec(context, 4, create_CString("a"), 2);
    slk_set_spec(context, 5, create_CString("   "), 2);
    slk_set_spec(context, 6, create_CString("longlonglong"), 2);
    //slk_set_spec(context, 7, create_CString("test6"), 2);
    slk_set_spec(context, 8, create_CString(" aa "), 2);

    slk_refresh_spec(context);

    //
    slk_clear_spec(context); // clear
    slk_refresh_spec(context);


    ch.blink = true;
    //ch.reverse = true;
    slk_attrset_spec(context, ch );  // attrset
    slk_restore_spec(context);


    attrs.bold = true;
    slk_attr_set_spec(context, attrs, color_pair_number, NULL_VoidTPtr); // attr___set
    slk_restore_spec(context);

    attrs.blink = true;
    attrs.reverse = true;
    slk_attr_set_spec(context, attrs, color_pair_number, NULL_VoidTPtr); // attr___set
    slk_restore_spec(context);


    ch.bold = true;
    ch.reverse = false;
    slk_attroff_spec(context, ch); // attroff
    slk_restore_spec(context);

    ch.bold = false;
    ch.reverse = true;
    slk_attron_spec(context, ch); // attron
    slk_restore_spec(context);


    slk_color_spec(context, color_pair_number); // color
    slk_restore_spec(context);

    slk_touch_spec(context);
    slk_noutrefresh_spec(context);

    endwin_spec(context);

    return true;
}

scenario
bool slk_label_scen(void)
{

    slk_init_spec(context, 0);

    initscr_spec(context);

    slk_set_spec(context, 1, create_CString("  test0"), 0);
    slk_set_spec(context, 2, create_CString("  test1"), 1);
    slk_set_spec(context, 3, create_CString("  test2"), 2);
    slk_set_spec(context, 4, create_CString("a"), 2);
    slk_set_spec(context, 5, create_CString("   "), 2);
    slk_set_spec(context, 6, create_CString("longlonglong"), 2);
    //slk_set_spec(context, 7, create_CString("test6"), 2);
    slk_set_spec(context, 8, create_CString(" aa "), 2);

    slk_label_spec(context, 1);
    slk_label_spec(context, 2);
    slk_label_spec(context, 3);
    slk_label_spec(context, 4);
    slk_label_spec(context, 5);
    slk_label_spec(context, 6);
    slk_label_spec(context, 7);
    slk_label_spec(context, 8);

    endwin_spec(context);

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm ncurses_slk_scenario =
{
    .init = init_slk_scenario,
    .finish = finish_slk_scenario,

    .actions =
        {
            simple_slk_scen,
            NULL
        }
};

scenario dfsm ncurses_slk_label_scenario =
{
    .init = init_slk_scenario,
    .finish = finish_slk_scenario,

    .actions =
        {
            slk_label_scen, // 1 failure
            NULL
        }
};
