/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/slk/slk_media.seh"
#include "common/common_media.seh"

#include "ncurses/slk/slk_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesSlkSubsystem(void)
{
  // Set up mediators
    set_mediator_slk_attrset_spec(slk_attrset_media);
    set_mediator_slk_attr_set_spec(slk_attr_set_media);
    set_mediator_slk_attroff_spec(slk_attroff_media);
    set_mediator_slk_attron_spec(slk_attron_media);
    set_mediator_slk_color_spec(slk_color_media);
    set_mediator_slk_clear_spec(slk_clear_media);
    set_mediator_slk_init_spec(slk_init_media);
    set_mediator_slk_label_spec(slk_label_media);
    set_mediator_slk_refresh_spec(slk_refresh_media);
    set_mediator_slk_restore_spec(slk_restore_media);
    set_mediator_slk_set_spec(slk_set_media);
    set_mediator_slk_noutrefresh_spec(slk_noutrefresh_media);
    set_mediator_slk_touch_spec(slk_touch_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/


/** slk_attrset_spec **/
mediator slk_attrset_media for specification
IntT slk_attrset_spec( CallContext context, ChTypeT attrs )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_attrset:$(chtype)", create_ChTypeTObj(attrs) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkAttrset(context, attrs, slk_attrset_spec);
    }
}

/** slk_attr_set_spec **/
mediator slk_attr_set_media for specification
IntT slk_attr_set_spec( CallContext context, NcursesAttrT attrs, ShortT color_pair_number, VoidTPtr opt )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_attr_set:$(curses_attr)$(short)$(ptr)", create_NcursesAttrTObj(attrs), 
                            create_ShortTObj(color_pair_number), create_VoidTPtrObj(opt) 
                         );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkAttrSet(context, attrs,color_pair_number, opt, slk_attr_set_spec);
    }
}


/** slk_attroff_spec **/
mediator slk_attroff_media for specification
IntT slk_attroff_spec( CallContext context, ChTypeT attrs) 
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_attroff:$(chtype)", create_ChTypeTObj(attrs) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkAttroff(context, attrs, slk_attroff_spec);
    }
}


/** slk_attron_spec **/
mediator slk_attron_media for specification
IntT slk_attron_spec( CallContext context, ChTypeT attrs) 
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_attron:$(chtype)", create_ChTypeTObj(attrs) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkAttron(context, attrs, slk_attron_spec);
    }
}


/** slk_clear_spec **/
mediator slk_clear_media for specification
IntT slk_clear_spec( CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_clear" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkClear(context, slk_clear_spec);
    }
}


/** slk_color_spec **/
mediator slk_color_media for specification
IntT slk_color_spec( CallContext context, ShortT color_pair_number)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_color:$(short)", create_ShortTObj(color_pair_number) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkColor(context, color_pair_number, slk_color_spec);
    }
}


/** slk_init_spec **/
mediator slk_init_media for specification
IntT slk_init_spec( CallContext context, IntT fmt)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_init:$(int)", create_IntTObj(fmt) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkInit(context, fmt, slk_init_spec);
    }
}


/** slk_label_spec **/
mediator slk_label_media for specification
CString * slk_label_spec( CallContext context, IntT labnum )
{
    call
    {
        CString * res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_label:$(int)", create_IntTObj(labnum) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
}


/** slk_refresh_spec **/
mediator slk_refresh_media for specification
IntT slk_refresh_spec( CallContext context )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_refresh" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkRefresh(context,slk_refresh_spec);
    }
}


/** slk_restore_spec **/
mediator slk_restore_media for specification
IntT slk_restore_spec( CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_restore" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkRestore(context, slk_restore_spec);
    }
}


/** slk_set_spec **/
mediator slk_set_media for specification
IntT slk_set_spec( CallContext context, IntT labnum, CString *label, IntT justify)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_set:$(int)$(str)$(int)", create_IntTObj(labnum), label, create_IntTObj(justify) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res; 
    }
    state
    {
        onSlkSet(context, labnum, label, justify, slk_set_spec);
    }
}

/** slk_noutrefresh_spec **/
mediator slk_noutrefresh_media for specification
IntT slk_noutrefresh_spec( CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_noutrefresh" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkNoutrefresh(context, slk_noutrefresh_spec);
    }
}

/** slk_touch_spec **/
mediator slk_touch_media for specification
IntT slk_touch_spec( CallContext context )
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "slk_touch" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSlkTouch(context, slk_touch_spec);
    }
}



