/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/chgat/tests/chgat_scenario.seh"


#include "ncurses/char/tests/add_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"

#include "ncurses/chstr/input_model.seh"
#include "ncurses/chstr/add_model.seh"
#include "ncurses/window/window_model.seh"

#include "ncurses/chgat/chgat_model.seh"

#include "ncurses/color/color_model.seh"

#include "ncurses/window/refresh_model.seh"

static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_chgat_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();

    initReqFilters();

    return true;

}


static void finish_chgat_scenario(void)
{
    terminateNCursesProcess(context);

}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool io_chgat_scen()
{
    ChTypeT ch;
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    ChTypeTArray* chstr=create_ChTypeTArray(20);
    IntT n=3;
    NcursesAttrT attr;

    initscr_spec(context);

    registerStdTerminal(context);

    has_colors_spec(context);
    can_change_color_spec(context);

    start_color_spec(context);

    setVariables_StdTerminal(context);

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ch.altcharset=false;   // Alternate character set
    ch.blink=false;        // Blinking
    ch.bold=true;          // Extra bright or bold
    ch.dim=false;          // Half bright
    ch.invis=false;        // Invisible
    ch.protect=false;      // Protected
    ch.reverse=false;      // Reverse video
    ch.standout=false;     // Best highlighting mode of the terminal
    ch.underline=true;    // Underlining
    ch.colorPair=0;
    ch.letter='a';
    chstr->arr[0]=ch;
    ch.letter='b';
    chstr->arr[1]=ch;
    ch.letter='c';
    chstr->arr[2]=ch;
    ch.letter='d';
    chstr->arr[3]=ch;
    addchstr_spec(context, chstr, &n, NULL, pos);

    attr.altcharset=false;  // Alternate character set
    attr.blink=true;        // Blinking
    attr.bold=false;        // Extra bright or bold
    attr.dim=false;          // Half bright
    attr.horizontal=false;  // Horizontal highlight
    attr.invis=false;       // Invisible
    attr.left=false;        // Left highlight
    attr.low=false;         // Low highlight
    attr.protect=false;     // Protected
    attr.reverse=true;     // Reverse video
    attr.right=false;       // Right highlight
    attr.standout=false;    // Best highlighting mode of the terminal
    attr.top=false;         // Top highlight
    attr.underline=false;   // Underlining
    attr.vertical=false;    // Vertical highlight

    attr.colorPair = 0;

    chgat_spec(context, NULL, pos, -1,  attr, 12);
    refresh_spec(context, NULL);
    inchstr_spec(context, &n, NULL, pos);


    chgat_spec(context, NULL, pos, 200,  attr, 25);
    inchstr_spec(context, &n, NULL, pos);

    refresh_spec(context, NULL);

    addchstr_spec(context, chstr, &n, NULL, NULL);
    chgat_spec(context, NULL, NULL, 200,  attr, 25);
    inchstr_spec(context, &n, NULL, NULL);

    refresh_spec(context, NULL);

    chgat_spec(context, NULL, NULL, -1,  attr, 6);
    refresh_spec(context, NULL);

    addchstr_spec(context, chstr, &n, &(winRet->win), NULL);
    chgat_spec(context, &(winRet->win), NULL, 200,  attr, 25);
    inchstr_spec(context, &n, &(winRet->win), NULL);

    refresh_spec(context, &(winRet->win));

    pos->y=20;

    addchstr_spec(context, chstr, &n, &(winRet->win), pos);
    chgat_spec(context, &(winRet->win), pos, 200,  attr, 25);
    inchstr_spec(context, &n, &(winRet->win), pos);

    refresh_spec(context, &(winRet->win));

    chgat_spec(context, &(winRet->win), pos, -1,  attr, 8);
    refresh_spec(context, &(winRet->win));
    chgat_spec(context, &(winRet->win), NULL, -1,  attr, 7);
    refresh_spec(context, &(winRet->win));


    // Error case
    pos->y=14;
    addchstr_spec(context, chstr, &n, &(winRet->win), pos);
    refresh_spec(context, &(winRet->win));
    chgat_spec(context, &(winRet->win), NULL, -1,  attr, 7);
    refresh_spec(context, &(winRet->win));

    endwin_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_chgat_scenario =
{
        .init = init_chgat_scenario,
        .finish = finish_chgat_scenario,
        .actions = {
            io_chgat_scen,
            NULL
        }
};

bool main_ncurses_chgat( int argc, char** argv )
{
    ncurses_chgat_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_CHGAT_ADDCH_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    addTraceToFile("trace.xml");

    // Run test scenario
    main_ncurses_chgat(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
