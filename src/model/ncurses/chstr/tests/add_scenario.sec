/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/chstr/tests/add_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_model.seh"
#include "ncurses/char/add_model.seh"
#include "process/process/process_model.seh"

#include "ncurses/char/input_model.seh"
#include "ncurses/char/insert_model.seh"
#include "ncurses/window/window_model.seh"

#include "ncurses/chstr/add_model.seh"
#include "ncurses/chstr/input_model.seh"
#include "ncurses/window/refresh_model.seh"

static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_chstr_add_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();

    initReqFilters();

    return true;

}


static void finish_chstr_add_scenario(void)
{
    terminateNCursesProcess(context);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool io_chstr_add_scen()
{
    ChTypeT ch;
    NCursesPosition* pos=create_NCursesPosition(10, 10);
    NewWinReturnType* winRet;
    ChTypeTArray* chstr=create_ChTypeTArray(20);
    IntT n=3;

    initscr_spec(context);

    winRet = newwin_spec( context, 30, 30, 5, 5);

    ch.altcharset=false;   // Alternate character set
    ch.blink=false;        // Blinking
    ch.bold=true;          // Extra bright or bold
    ch.dim=false;          // Half bright
    ch.invis=false;        // Invisible
    ch.protect=false;      // Protected
    ch.reverse=false;      // Reverse video
    ch.standout=false;     // Best highlighting mode of the terminal
    ch.underline=false;    // Underlining
    ch.colorPair=false;
    ch.letter='a';
    chstr->arr[0]=ch;
    ch.letter='b';
    chstr->arr[1]=ch;
    ch.letter='c';
    chstr->arr[2]=ch;
    ch.letter='d';
    chstr->arr[3]=ch;
    addchstr_spec(context, chstr, &n, NULL, pos);
    inchstr_spec(context, &n, NULL, pos);

    refresh_spec(context, NULL);

    ch.letter='\0';
    ch.bold=false;
    chstr->arr[4]=ch;
    pos->x=16;
    addchstr_spec(context, chstr, NULL, NULL, pos);
    inchstr_spec(context, NULL, NULL, pos);

    refresh_spec(context, NULL);

    addchstr_spec(context, chstr, &n, NULL, NULL);
    inchstr_spec(context, &n, NULL, NULL);

    refresh_spec(context, NULL);

    addchstr_spec(context, chstr, NULL, NULL, NULL);
    inchstr_spec(context, NULL, NULL, NULL);

    refresh_spec(context, NULL);

    pos->y=10;
    addchstr_spec(context, chstr, &n, &(winRet->win), pos);
    inchstr_spec(context, &n, &(winRet->win), pos);

    refresh_spec(context, &(winRet->win));

    ch.letter='\0';
    chstr->arr[4]=ch;
    pos->x=11;
    addchstr_spec(context, chstr, NULL, &(winRet->win), pos);
    inchstr_spec(context, NULL, &(winRet->win), pos);

    refresh_spec(context, &(winRet->win));

    addchstr_spec(context, chstr, &n, &(winRet->win), NULL);
    inchstr_spec(context, &n, &(winRet->win), NULL);

    refresh_spec(context, &(winRet->win));

    addchstr_spec(context, chstr, NULL, &(winRet->win), NULL);
    inchstr_spec(context, NULL, &(winRet->win), NULL);

    refresh_spec(context, &(winRet->win));

    n=-1;
    pos->x=12;
    addchstr_spec(context, chstr, &n, &(winRet->win), NULL);
    addchstr_spec(context, chstr, &n, NULL, NULL);
    addchstr_spec(context, chstr, &n, &(winRet->win), pos);
    addchstr_spec(context, chstr, &n, NULL, pos);

    refresh_spec(context, NULL);

    pos->x=78;
    pos->y=13;
    addchstr_spec(context, chstr, &n, NULL, pos);
    addchstr_spec(context, chstr, &n, NULL, NULL);
    addchstr_spec(context, chstr, NULL, NULL, pos);
    addchstr_spec(context, chstr, NULL, NULL, NULL);

    refresh_spec(context, NULL);

    pos->x=27;
    pos->y=10;
    addchstr_spec(context, chstr, &n, &(winRet->win), pos);
    addchstr_spec(context, chstr, &n, &(winRet->win), NULL);
    addchstr_spec(context, chstr, NULL, &(winRet->win), pos);
    addchstr_spec(context, chstr, NULL, &(winRet->win), NULL);

    refresh_spec(context, &(winRet->win));

    endwin_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_chstr_add_scenario =
{
    .init = init_chstr_add_scenario,
        .finish = finish_chstr_add_scenario,
        .actions = {
            io_chstr_add_scen,
            NULL
    }
};

bool main_ncurses_chstr_addch( int argc, char** argv )
{
    ncurses_chstr_add_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_CHSTR_ADDCH_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    main_ncurses_chstr_addch(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif


