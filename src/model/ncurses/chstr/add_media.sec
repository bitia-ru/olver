/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/chstr/add_media.seh"
#include "common/common_media.seh"




/********************************************************************/
/**                    Formatters                                  **/
/********************************************************************/

void charray_formatter(TSStream *stream, ChTypeTArray* charray)
{
    IntT i=0;

    VERIFY_TYPE(charray_formatter, &type_ChTypeTArray, charray);
    
    writeTypeHeaderTSStream(stream, "charray");
    
    writeInt_TSStream(stream, charray->size);

    for (i=0;i<charray->size;i++)
    {
        chtype_formatter(stream, create_ChTypeTObj(charray->arr[i]));
    }
}


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesChstrAddSubsystem(void)
{
  // Set up mediators
    set_mediator_addchstr_spec(addchstr_media);

    // Set up formatters
    registerTSFormatter("charray",(TSFormatterFuncType)charray_formatter);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** addchstr_spec **/
//This mediator refers to: mvwaddchnstr, waddchnstr, mvwaddchstr, waddchstr, 
//mvaddchnstr, addchnstr, mvaddchstr, addchstr
mediator addchstr_media for specification
IntT addchstr_spec( CallContext context, ChTypeTArray* chstr, IntT* n, WindowTPtr* win, NCursesPosition* pos)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;
    
        if (win!=NULL)
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwaddchnstr:$(ptr)$(int)$(int)$(charray)$(int)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x), chstr, create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "waddchnstr:$(ptr)$(charray)$(int)", create_VoidTPtrObj(*win), chstr, create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvwaddchstr:$(ptr)$(int)$(int)$(charray)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x), chstr);
                }
                else
                {
                    format_TSCommand( &command, "waddchstr:$(ptr)$(charray)", create_VoidTPtrObj(*win), chstr);
                }
            }
        }
        else
        {
            if (n!=NULL)
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvaddchnstr:$(int)$(int)$(charray)$(int)", create_IntTObj(pos->y), create_IntTObj(pos->x), chstr, create_IntTObj(*n));
                }
                else
                {
                    format_TSCommand( &command, "addchnstr:$(charray)$(int)", chstr, create_IntTObj(*n));
                }
            }
            else
            {
                if (pos!=NULL)
                {
                    format_TSCommand( &command, "mvaddchstr:$(int)$(int)$(charray)", create_IntTObj(pos->y), create_IntTObj(pos->x), chstr);
                }
                else
                {
                    format_TSCommand( &command, "addchstr:$(charray)", chstr);
                }
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
           
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAddchstr(context, chstr, n, win, pos, addchstr_spec);
    }
}


