/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/pad_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesWindowPadSubsystem(void)
{
  // Set up mediators
    set_mediator_newpad_spec(newpad_media);
    set_mediator_pechochar_spec(pechochar_media);
    set_mediator_pnoutrefresh_spec(pnoutrefresh_media);
    set_mediator_prefresh_spec(prefresh_media);
    set_mediator_subpad_spec(subpad_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** newpad_spec **/

mediator newpad_media for specification
WindowTPtr newpad_spec( CallContext context, IntT nlines, IntT ncols )
{
    call
    {
        TSCommand command = create_TSCommand();
        WindowTPtr res;
    
        format_TSCommand( &command, "newpad:$(int)$(int)",
            create_IntTObj(nlines), create_IntTObj(ncols));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onNewpad(context, nlines, ncols, newpad_spec);
    }
}



/** pechochar_spec **/

mediator pechochar_media for specification
IntT pechochar_spec( CallContext context, NCursesWindow* pad, ChTypeT ch)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;    

        format_TSCommand( &command, "pechochar:$(ptr)$(chtype)",
            create_VoidTPtrObj(pad->address), create_ChTypeTObj(ch));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPechochar(context, pad, pechochar_spec);
    }
}


/** pnoutrefresh_spec **/
mediator pnoutrefresh_media for specification
IntT pnoutrefresh_spec( CallContext context, NCursesWindow* pad, IntT pminrow,
                    IntT pmincol, IntT sminrow, IntT smincol, IntT smaxrow,
                    IntT smaxcol )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        format_TSCommand( &command,
            "pnoutrefresh:$(ptr)$(int)$(int)$(int)$(int)$(int)$(int)",
            create_VoidTPtrObj(pad->address), create_IntTObj(pminrow),
            create_IntTObj(pmincol), create_IntTObj(sminrow),
            create_IntTObj(smincol), create_IntTObj(smaxcol),
            create_IntTObj(smaxcol));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPnoutrefresh(context, pad, pnoutrefresh_spec);
    }
}


/** prefresh_spec **/

mediator prefresh_media for specification
IntT prefresh_spec( CallContext context, NCursesWindow* pad, IntT pminrow,
                    IntT pmincol, IntT sminrow, IntT smincol, IntT smaxrow,
                    IntT smaxcol )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        format_TSCommand( &command,
            "prefresh:$(ptr)$(int)$(int)$(int)$(int)$(int)$(int)",
            create_VoidTPtrObj(pad->address), create_IntTObj(pminrow),
            create_IntTObj(pmincol), create_IntTObj(sminrow),
            create_IntTObj(smincol), create_IntTObj(smaxcol),
            create_IntTObj(smaxcol));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPrefresh(context, pad, prefresh_spec);
    }
}



/** subpad_spec **/

mediator subpad_media for specification
WindowTPtr subpad_spec( CallContext context, WindowTPtr orig, IntT nlines,
                       IntT ncols, IntT begin_y, IntT begin_x )
{
    call
    {
        TSCommand command = create_TSCommand();
        WindowTPtr res;
    
        format_TSCommand( &command, "subpad:$(ptr)$(int)$(int)$(int)$(int)",
            create_VoidTPtrObj(orig), create_IntTObj(nlines),
            create_IntTObj(ncols),  create_IntTObj(begin_y),
            create_IntTObj(begin_x));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onSubpad(context, orig, nlines, ncols, begin_y, begin_x, subpad_spec);
    }
}




