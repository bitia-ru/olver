/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/ncurses/ncurses_config.h"
#include "ncurses/ncurses/ncurses_data.seh"
#include "data/ncurses_model.seh"
#include "ncurses/window/attr_model.seh"
#include "config/interpretation.seh"


#pragma SEC subsystem window "ncurses.window"



/*
   The group of functions 'ncurses.window.attr' consists of:
       attr_get [1]
       attr_off [1]
       attr_on [1]
       attr_set [1]
       attroff [1]
       attron [1]
       attrset [1]
       color_set [1]
       standend [1]
       standout [1]
       wattr_get [1]
       wattr_off [1]
       wattr_on [1]
       wattr_set [1]
       wattroff [1]
       wattron [1]
       wattrset [1]
       wcolor_set [1]
       wstandend [1]
       wstandout [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

-------------------------------------------------------------------------------

NAME

    attr_get, attr_off, attr_on, attr_set, color_set, wattr_get, wattr_off,
    wattr_on, wattr_set, wcolor_set - window attribute control functions

SYNOPSIS

    #include <curses.h>
    int attr_get(attr_t *attrs, short *color_pair_number, void *opts);
    int attr_off(attr_t attrs, void *opts);
    int attr_on(attr_t attrs, void *opts);
    int attr_set(attr_t attrs, short color_pair_number, void *opts);
    int color_set(short color_pair_number, void *opts);
    int wattr_get(WINDOW *win, attr_t *attrs, short *color_pair_number,
        void *opts);
    int wattr_off(WINDOW *win, attr_t attrs, void *opts);
    int wattr_on(WINDOW *win, attr_t attrs, void *opts);
    int wattr_set(WINDOW *win, attr_t attrs, short color_pair_number,
        void *opts);
    int wcolor_set(WINDOW *win, short color_pair_number, void *opts);

DESCRIPTION

    These functions manipulate the attributes and colour of the window
    rendition of the current or specified window.

    The attr_get() and wattr_get() functions obtain the current rendition of a
    window.If attrs or color_pair_number is a null pointer, no information will
    be obtained on the corresponding rendition information and this is not an
    error.

    The attr_off() and wattr_off() functions turn off attrs in the current or
    specified window without affecting any others.

    The attr_on() and wattr_on() functions turn on attrs in the current or
    specified window without affecting any others.

    The attr_set() and wattr_set() functions set the window rendition of the
    current or specified window to attrs and color_pair_number.

    The color_set() and wcolor_set() functions set the window colour of the
    current or specified window to color_pair_number.

RETURN VALUE

    These functions always return OK.

ERRORS

    No errors are defined.
*/

specification typedef  struct AttrGetReturnType AttrGetReturnType = {};

AttrGetReturnType* create_AttrGetReturnType(IntT retVal, NcursesAttrT  attrs, IntT color_pair_number)
{
    return create(&type_AttrGetReturnType, retVal, attrs, color_pair_number);
}

//This specification refers to: wattr_get, attr_get
specification
AttrGetReturnType* attr_get_spec( CallContext context, WindowTPtr* win)
{

    if (win!=NULL){ FILTER("wattr_get"); }
    else {  FILTER("attr_get"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { ObtainWindowcurrentRendition, "Obtain the current rendition of a window" };
    }
    post
    {
        NCursesWindow* curWnd=getWindowMayNULL(context, win);

        /*
        * The attr_get() and wattr_get() functions obtain the current rendition of a
        * window.
        */
        REQ("attr_get.02;wattr_get.02", "Attributes shall be valid",
            equals_NCursesAttrsWithoutColor(curWnd->attrs, attr_get_spec->attrs));

        /*
        * These functions always return OK.
        */
        REQ("attr_get.04;wattr_get.04", "Function shall return OK",
            attr_get_spec->retVal == SUT_EOK);

   
        return true;
    }
    FILTER_CLEAN;
}

bool checkWindowAttributeOnOff(bool setVal, bool curVal, bool oldVal, bool off)
{
    if (setVal)
    {
        if (off)
        {
            if (curVal!=false)
            {
                return false;
            }
        }
        else
        {
            if (curVal!=true)
            {
                return false;
            }
        }
    }
    else
    {
        if (curVal!=oldVal)
        {
            return false;
        }
    }

    return true;
}


bool checkWindowAttributesOnOff(CallContext context, WindowTPtr* win, NCursesWindow* oldWnd, NcursesAttrT attrs, bool off, bool restricted)
{
    NCursesWindow* curWnd=getWindowMayNULL(context, win);

    if (!checkWindowAttributeOnOff(attrs.blink, curWnd->attrs.blink, oldWnd->attrs.blink, off))
        return false;
    if (!checkWindowAttributeOnOff(attrs.bold, curWnd->attrs.bold, oldWnd->attrs.bold, off))
        return false;
    if (!checkWindowAttributeOnOff(attrs.dim, curWnd->attrs.dim, oldWnd->attrs.dim, off))
        return false;
    if (!checkWindowAttributeOnOff(attrs.reverse, curWnd->attrs.reverse, oldWnd->attrs.reverse, off))
        return false;
    if (!checkWindowAttributeOnOff(attrs.standout, curWnd->attrs.standout, oldWnd->attrs.standout, off))
        return false;
    if (!checkWindowAttributeOnOff(attrs.underline, curWnd->attrs.underline, oldWnd->attrs.underline, off))
        return false;

    if(!restricted)
    {
        if (!checkWindowAttributeOnOff(attrs.altcharset, curWnd->attrs.altcharset, oldWnd->attrs.altcharset, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.horizontal, curWnd->attrs.horizontal, oldWnd->attrs.horizontal, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.invis, curWnd->attrs.invis, oldWnd->attrs.invis, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.left, curWnd->attrs.left, oldWnd->attrs.left, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.low, curWnd->attrs.low, oldWnd->attrs.low, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.protect, curWnd->attrs.protect, oldWnd->attrs.protect, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.right, curWnd->attrs.right, oldWnd->attrs.right, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.top, curWnd->attrs.top, oldWnd->attrs.top, off))
            return false;
        if (!checkWindowAttributeOnOff(attrs.vertical, curWnd->attrs.vertical, oldWnd->attrs.vertical, off))
            return false;
    }

    return true;
}

//This specification refers to: wattr_off, attr_off
specification
IntT attr_off_spec( CallContext context, WindowTPtr* win, NcursesAttrT attrs)
{
    NCursesWindow* oldWnd=clone(getWindowMayNULL(context, win));

    if (win!=NULL){ FILTER("wattr_off"); }
    else{ FILTER("attr_off"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOffAttrs, "Turn off attrs in the current or specified window" };
    }
    post
    {

        /*
        * These functions always return OK.
        */
        REQ("attr_off.04;wattr_off.04", "Function shall return OK", attr_off_spec == SUT_EOK);

        /*
        * The attr_off() and wattr_off() functions turn off attrs in the current or
        * specified window without affecting any others.
        */
        REQ("attr_off.02;wattr_off.02", "Window attributes shall be valid", checkWindowAttributesOnOff(context, win, oldWnd, attrs, true, false));

    
        return true;
    }
    FILTER_CLEAN;
}


void onAttrOff( CallContext context, WindowTPtr* win, NcursesAttrT attrs)
{
    updateNCursesWindowMayNULL(context, win);
}

//This specification refers to: wattr_on, attr_on
specification
IntT attr_on_spec( CallContext context, WindowTPtr* win, NcursesAttrT attrs)
{
    NCursesWindow* oldWnd=clone(getWindowMayNULL(context, win));

    if (win!=NULL){ FILTER("wattr_on"); }
    else{ FILTER("attr_on"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOnAttrs, "Turn on attrs in the current or specified window" };
    }
    post
    {
        /*
        * These functions always return OK.
        */
        REQ("attr_on.04;wattr_on.04", "Function shall return OK", attr_on_spec==SUT_EOK);

        /*
        * The attr_on() and wattr_on() functions turn on attrs in the current or
        * specified window without affecting any others.
        */
        REQ("attr_on.02;wattr_on.02", "Window attributes shall be valid", checkWindowAttributesOnOff(context, win, oldWnd, attrs, false, false));

      
        return true;
    }
    FILTER_CLEAN;
}

void onAttrOn( CallContext context, WindowTPtr* win, NcursesAttrT attrs)
{
    updateNCursesWindowMayNULL(context, win);
}

//This specification refers to: wattr_set, wcolor_set, attr_set, color_set
specification
IntT attr_set_spec( CallContext context, WindowTPtr* win, NcursesAttrT* attr, IntT colorPair)
{
    if (win!=NULL){
        if (attr!=NULL){ FILTER("wattr_set"); }
        else {  FILTER("wcolor_set"); }
    }
    else{
        if (attr!=NULL){ FILTER("attr_set"); }
        else{ FILTER("color_set"); }
    }

    pre
    {
        return true;
    }
    post
    {
        NCursesWindow* curWnd=getWindowMayNULL(context, win);

        if(NCURSES_ATTRSET_RETURNS_OK)
        {
            /*
            * These functions always return OK.
            */
            REQ("attr_set.04;wattr_set.04;color_set.04;wcolor_set.04",
                "Function shall return OK", attr_set_spec==SUT_EOK);
        }
        if (attr!=NULL)
        {
            /*
            * The attr_set() and wattr_set() functions set the window rendition of the
            * current or specified window to attrs and color_pair_number.
            */
            REQ("attr_set.02;wattr_set.02", "Attributes and color of the window shall be valid",
                equals_NCursesAttrsWithoutColor(curWnd->attrs, *attr) && curWnd->attrs.colorPair == colorPair);

        }
        else
        {
            /*
            * The color_set() and wcolor_set() functions set the window colour of the current
            * or specified window to color_pair_number.
            */
            REQ("color_set.02;wcolor_set.02", "Color pair shall be valid", curWnd->attrs.colorPair == colorPair);
        }

      
        return true;
    }
    FILTER_CLEAN;
}

void onAttrSet( CallContext context, WindowTPtr* win, NcursesAttrT* attr, IntT colorPair)
{
    updateNCursesWindowMayNULL(context, win);

}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

-------------------------------------------------------------------------------

NAME

    attroff, attron, attrset, wattroff, wattron, wattrset - restricted window
    attribute control functions

SYNOPSIS

    #include <curses.h>
    int attroff(int attrs);
    int attron(int attrs);
    int attrset(int attrs);
    int wattroff(WINDOW *win, int attrs);
    int wattron(WINDOW *win, int attrs);
    int wattrset(WINDOW *win, int attrs);

DESCRIPTION

    These functions manipulate the window attributes of the current or
    specified window.

    The attroff() and wattroff() functions turn off attrs in the current or
    specified window without affecting any others.

    The attron() and wattron() functions turn on attrs in the current or
    specified window without affecting any others.

    The attrset() and wattrset() functions set the background attributes of the
    current or specified window to attrs.

    It is unspecified whether these functions can be used to manipulate
    attributes other than A_BLINK, A_BOLD, A_DIM, A_REVERSE, A_STANDOUT and
    A_UNDERLINE.

RETURN VALUE

    These functions always return either OK or 1.

ERRORS

    No errors are defined.
*/

//This specification refers to: wattroff, attroff
specification
IntT attroff_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    NCursesWindow* oldWnd=clone(getWindowMayNULL(context, win));

    if (win!=NULL){ FILTER("wattroff"); }
    else{ FILTER("attroff"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOffAttrs, "Turn off attrs in the current or specified window" };
    }
    post
    {
        /*
        * These functions always return either OK or 1.
        */
        REQ("attroff.04;wattroff.04", "Function shall return valid value", attroff_spec==SUT_EOK || attroff_spec == 1);

        /*
        * The attroff() and wattroff() functions turn off attrs in the current or
        * specified window without affecting any others.
        */
        REQ("attroff.02;wattroff.02", "Window attributes shall be valid", checkWindowAttributesOnOff(context, win, oldWnd, create_AttrFromRestrictedNcursesAttrT(attrs), true, true));

    
        return true;
    }
    FILTER_CLEAN;
}

void onRestrictedAttroff( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    updateNCursesWindowMayNULL(context, win);
}

//This specification refers to: wattron, attron
specification
IntT attron_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    NCursesWindow* oldWnd=clone(getWindowMayNULL(context, win));

    if (win!=NULL){ FILTER("wattron"); }
    else{ FILTER("attron"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOnAttrs, "Turn on attrs in the current or specified window" };
    }
    post
    {
        /*
        * These functions always return either OK or 1.
        */
        REQ("attron.04;wattron.04", "Function shall return valid value", attron_spec==SUT_EOK || attron_spec == 1);

        /*
         * The attron() and wattron() functions turn on attrs in the current or specified
         * window without affecting any others.
         */
        REQ("attron.02;wattron.02", "Window attributes shall be valid", checkWindowAttributesOnOff(context, win, oldWnd, create_AttrFromRestrictedNcursesAttrT(attrs), false, true));

      
        return true;
    }
    FILTER_CLEAN;
}

void onRestrictedAttron( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    updateNCursesWindowMayNULL(context, win);
}

//This specification refers to: wattrset, attrset
specification
IntT attrset_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    if (win!=NULL){ FILTER("wattrset"); }
    else{ FILTER("attrset"); }

    pre
    {
        return true;
    }
    post
    {
        NCursesWindow* curWnd=getWindowMayNULL(context, win);

        if(NCURSES_ATTRSET_RETURNS_OK)
        {
            /*
             * These functions always return either OK or 1.
             */
            REQ("attrset.04;wattrset.04", "Function attrset() and wattrset() shall return valid value", attrset_spec==SUT_EOK || attrset_spec == 1);
        }

        /*
         * The attrset() and wattrset() functions set the background attributes of the
         * current or specified window to attrs.
         */
        REQ("attrset.02;wattrset.02", "Window attributes shall be valid",
            curWnd->attrs.blink == attrs.blink &&
            curWnd->attrs.bold == attrs.bold &&
            curWnd->attrs.dim == attrs.dim &&
            curWnd->attrs.reverse == attrs.reverse &&
            curWnd->attrs.standout == attrs.standout &&
            curWnd->attrs.underline == attrs.underline);

     
        return true;
    }
    FILTER_CLEAN;
}

void onRestrictedAttrset( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    updateNCursesWindowMayNULL(context, win);
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

-------------------------------------------------------------------------------

NAME

    standend, standout, wstandend, wstandout - set and clear window attributes

SYNOPSIS

    #include <curses.h>
    int standend(void);
    int standout(void);
    int wstandend(WINDOW *win);
    int wstandout(WINDOW *win);

DESCRIPTION

    The standend() and wstandend() functions turn off all attributes of the
    current or specified window.

    The standout() and wstandout() functions turn on the standout attribute of
    the current or specified window.

RETURN VALUE

    These functions always return 1.

ERRORS

    No errors are defined.
*/
//This specification refers to: wstandend, standend
specification
IntT standend_spec( CallContext context, WindowTPtr* win)
{
    NCursesWindow* oldWnd=clone(getWindowMayNULL(context, win));
    NcursesAttrT attrs;

    if (win!=NULL){  FILTER("wstandend"); }
    else{ FILTER("standend"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOffAllAttributes, "Turn off all attributes of the current or specified window" };
    }
    post
    {
        if(NCURSES_STANDEND_RETURNS_OK)
        {
            /*
             * These functions always return 1.
             */
            REQ("standend.02;wstandend.02", "Functions standend() and wstandend() shall return 1", standend_spec==1);
        }

        attrs.altcharset = true;
        attrs.blink = true;
        attrs.bold = true;
        attrs.dim = true;
        attrs.horizontal = true;
        attrs.invis =  true;
        attrs.left = true;
        attrs.low = true;
        attrs.protect = true;
        attrs.reverse = true;
        attrs.right = true;
        attrs.standout = true;
        attrs.top = true;
        attrs.underline = true;
        attrs.vertical = true;

        /*
        * The standend() and wstandend() functions turn off all attributes of the current
        * or specified window.
        */
        REQ("standend.01;wstandend.01", "Window attributes shall be valid",
            checkWindowAttributesOnOff(context, win, oldWnd, attrs, true, false));

        return true;
    }
    FILTER_CLEAN;
}


void onStandend( CallContext context, WindowTPtr* win)
{
    updateNCursesWindowMayNULL(context, win);
}

//This specification refers to: wstandout, standout
specification
IntT standout_spec( CallContext context, WindowTPtr* win)
{
    if (win!=NULL){ FILTER("wstandout"); }
    else{ FILTER("standout"); }

    pre
    {
        return true;
    }
    coverage C
    {
        return { TurnOnStandoutAttribute, "Turn on standout attribute of the current or specified window" };
    }
    post
    {
        NCursesWindow* curWnd=getWindowMayNULL(context, win);

        if(NCURSES_STANDOUT_RETURNS_OK)
        {
            /*
             * These functions always return 1.
             */
            REQ("standout.02;wstandout.02", "Functions standout() anf wstandout() shall return 1", standout_spec==1);
        }

        /*
        * The standout() and wstandout() functions turn on the standout attribute of the
        * current or specified window.
        */
        REQ("standout.01;wstandout.01", "Standout attribute shall be on", curWnd->attrs.standout==true);

        return true;
    }
    FILTER_CLEAN;
}


void onStandout( CallContext context, WindowTPtr* win)
{
    updateNCursesWindowMayNULL(context, win);
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
