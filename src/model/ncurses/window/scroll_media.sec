/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/scroll_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesWindowScrollSubsystem(void)
{
    // Set up mediators
    set_mediator_scrl_spec(scrl_media);
    set_mediator_scroll_spec(scroll_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** scrl_spec **/
//This mediator refers to: scrl, wscrl
mediator scrl_media for specification
IntT scrl_spec(CallContext context, WindowTPtr* win, IntT n)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        if (win == NULL)
        {
            format_TSCommand(&command, "scrl:$(int)",
                             create_IntTObj(n)
                            );
        }
        else
        {
            format_TSCommand(&command, "wscrl:$(ptr)$(int)",
                             create_VoidTPtrObj(*win),
                             create_IntTObj(n)
                            );
        }

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        if (scrl_spec != SUT_ERR)
        {
            onNCursesUniversal(context, win, scrl_spec);
            refresh_WindowTPtr(context, win, false);
        }
    }
}


/** scroll_spec **/
mediator scroll_media for specification
IntT scroll_spec(CallContext context, WindowTPtr* win)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "scroll:$(ptr)",
                         create_VoidTPtrObj(*win)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        if (scroll_spec != SUT_ERR)
        {
            onNCursesUniversal(context, win, scroll_spec);
            refresh_WindowTPtr(context, win, false);
        }
    }
}


/** wscrl_spec **/
/****
mediator wscrl_media for specification
ReturnType wscrl_spec(CallContext context, ...)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "wscrl");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}
****/
