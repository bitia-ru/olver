/* * Copyright (c) 2005-2006 Institute for System Programming * Russian Academy of Sciences * All rights reserved. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */#include "common/common_scenario.seh"#include "ncurses/window/tests/scroll_scenario.seh"#include "ncurses/window/window_model.seh"#include "ncurses/window/refresh_model.seh"#include "ncurses/terminal/terminal_model.seh"#include "ncurses/terminal/control_model.seh"#include "ncurses/char/add_model.seh"/********************************************************************//**                     Test Scenario Parameters                   **//********************************************************************//********************************************************************//**                       Test Scenario Data                       **//********************************************************************/
static CallContext context;/********************************************************************//**                         Auxiliary Types                        **//********************************************************************//********************************************************************//**                     Model State Operations                     **//********************************************************************//********************************************************************//**                Test Scenarios Generalized States               **//********************************************************************//********************************************************************//**                  Test Scenario Initialization                  **//********************************************************************/void cleanup_window_scroll_simple_scenario(){    terminateNCursesProcess(context);}bool init_window_scroll_simple_scenario(int argc, char** argv){    context = createDefaultProcessForNCurses();    initReqFilters();    return true;}void finish_window_scroll_simple_scenario(void){    cleanup_window_scroll_simple_scenario();    TEST_SCENARIO_VERDICT_VERBOSE( ncurses_window_scroll_simple_scenario );}/********************************************************************//**                          Test Actions                          **//********************************************************************/scenariobool window_scroll_simple_scen(){    const int NLINES = 5;    const int NCOLS = 10;    NewWinReturnType* winRet;    NCursesWindow* std_win;    ChTypeT a = {0}, A = {0};    int i;    a.letter = 'a';    A.letter = 'A';    initscr_spec(context);    winRet = newwin_spec(context, NLINES, NCOLS, 5, 5);    std_win = getNCursesStdWindow(context);    a.letter = 'a';    A.letter = 'A';    for (i=0; i<std_win->nlines; ++i)    {        addch_spec(context, a, NULL, create_NCursesPosition(0, i), false);        addch_spec(context, A, NULL, create_NCursesPosition(1, i), false);        addch_spec(context, A, NULL, create_NCursesPosition(std_win->ncols - 2, i), false);        if (i != std_win->nlines - 1)            addch_spec(context, a, NULL, create_NCursesPosition(std_win->ncols - 1, i), false);        a.letter++;        A.letter++;    }    a.letter = 'a';    A.letter = 'A';    for (i=0; i<NLINES; ++i)    {        addch_spec(context, a, &(winRet->win), create_NCursesPosition(0, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(1, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(NCOLS - 2, i), false);        if (i != NLINES - 1)            addch_spec(context, a, &(winRet->win), create_NCursesPosition(NCOLS - 1, i), false);        a.letter++;        A.letter++;    }    if ( ! refreshCall( context, & ( winRet->win ) ) ) { return true; }    if ( ! refreshCall( context, NULL              ) ) { return true; }

    scrollok_spec(context, winRet->win, true);    scrollok_spec(context, std_win->address, true);//    setscrreg_spec(context, NULL, 2, 8);    scrl_spec(context, &(winRet->win), 3);    scrl_spec(context, &(winRet->win), -2);    scrl_spec(context, NULL, 4);    scrl_spec(context, NULL, -3);    scroll_spec(context, &(winRet->win));    scroll_spec(context, &(std_win->address));    if ( ! refreshCall( context, & ( winRet->win ) ) ) { return true; }    if ( ! refreshCall( context, NULL              ) ) { return true; }

    a.letter = 'a';    A.letter = 'A';    for (i=0; i<NLINES; ++i)    {        addch_spec(context, a, &(winRet->win), create_NCursesPosition(0, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(1, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(NCOLS - 2, i), false);        if (i != NLINES - 1)            addch_spec(context, a, &(winRet->win), create_NCursesPosition(NCOLS - 1, i), false);        a.letter++;        A.letter++;    }    scrl_spec(context, &(winRet->win), NLINES);    scrl_spec(context, &(winRet->win), -1);    if ( ! refreshCall( context, & ( winRet->win ) ) ) { return true; }
    a.letter = 'a';    A.letter = 'A';    for (i=0; i<NLINES; ++i)    {        addch_spec(context, a, &(winRet->win), create_NCursesPosition(0, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(1, i), false);        addch_spec(context, A, &(winRet->win), create_NCursesPosition(NCOLS - 2, i), false);        if (i != NLINES - 1)            addch_spec(context, a, &(winRet->win), create_NCursesPosition(NCOLS - 1, i), false);        a.letter++;        A.letter++;    }    scrl_spec(context, &(winRet->win), -NLINES);    if ( ! refreshCall( context, & ( winRet->win ) ) ) { return true; }
    endwin_spec(context);    return true;}/********************************************************************//**                    Test Scenario Definition                    **//********************************************************************/scenario dfsm ncurses_window_scroll_simple_scenario ={    .init = init_window_scroll_simple_scenario,    .finish = finish_window_scroll_simple_scenario,//     .getState = (PtrGetState)getSimpleState,//     .saveModelState = (PtrSaveModelState)saveSimpleState,//     .restoreModelState = (PtrRestoreModelState)restoreSimpleState,//     .isStationaryState = (PtrIsStationaryState)isInitModelStateStationary,    .actions = {            window_scroll_simple_scen,            NULL    }};