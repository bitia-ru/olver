/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/tests/attr_scenario.seh"

#include "common/init.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "process/process/process_model.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/string/add_model.seh"
#include "ncurses/chstr/input_model.seh"
#include "ncurses/window/attr_model.seh"
#include "ncurses/color/color_model.seh"

#include "ncurses/window/refresh_model.seh"

static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_attr_scenario(int argc,char** argv)
{
    context = createDefaultProcessForNCurses();

    initReqFilters();

    return true;

}


static void finish_attr_scenario(void)
{
    terminateNCursesProcess(context);

}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool io_attr_scen()
{
    NewWinReturnType* winRet;
    NCursesPosition* pos =create_NCursesPosition(10 ,10);
    CString* str = create_CString("string");
    InitScrReturnType* retScr;
    NcursesAttrT attr;
    WindowTPtr* windows[2];
    NcursesRestrictedAttrT restrictedAttrs;
    IntT i, n=7;

    retScr=initscr_spec(context);

    registerStdTerminal(context);

    has_colors_spec(context);
    can_change_color_spec(context);

    start_color_spec(context);

    setVariables_StdTerminal(context);

    winRet = newwin_spec( context, 30, 30, 5, 5);

    windows[0]=NULL;
    windows[1]=&(winRet->win);

    for (i=0;i<2;i++)
    {
        n = 7;

        attr.altcharset=false;  // Alternate character set
        attr.blink=true;        // Blinking
        attr.bold=true;        // Extra bright or bold
        attr.dim=true;          // Half bright
        attr.horizontal=false;  // Horizontal highlight
        attr.invis=false;       // Invisible
        attr.left=false;        // Left highlight
        attr.low=false;         // Low highlight
        attr.protect=false;     // Protected
        attr.reverse=false;     // Reverse video
        attr.right=false;       // Right highlight
        attr.standout=false;    // Best highlighting mode of the terminal
        attr.top=false;         // Top highlight
        attr.underline=true;   // Underlining
        attr.vertical=false;    // Vertical highlight
        attr.colorPair=0;

        attr_on_spec(context,  windows[i], attr);
        attr_get_spec(context, windows[i]);
        addstr_spec(context,  windows[i], pos,  create_CString("string1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        attr_off_spec(context, windows[i], attr);
        pos->x=20;
        pos->y=20;
        addstr_spec(context,  windows[i], pos,  create_CString("string2"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        attr_get_spec(context, windows[i]);
        attr.blink=false;        // Blinking
        attr.bold=false;        // Extra bright or bold
        attr.dim=false;          // Half bright
        attr.horizontal=true;  // Horizontal highlight
        attr.invis=true;       // Invisible
        attr_set_spec(context, windows[i], &attr, 2);
        attr_get_spec(context, windows[i]);
        pos->y=17;
        addstr_spec(context,  windows[i], pos,  create_CString("string3"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        attr_set_spec(context, windows[i], NULL, 3);
        attr_get_spec(context, windows[i]);
        addstr_spec(context,  windows[i], pos,  create_CString("string4"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        restrictedAttrs.blink=true;       // Blinking
        restrictedAttrs.bold=true;        // Extra bright or bold
        restrictedAttrs.dim=false;         // Half bright
        restrictedAttrs.reverse=false;     // Reverse video
        restrictedAttrs.standout=false;    // Best highlighting mode of the terminal
        restrictedAttrs.underline=false;   // Underlining

        attron_spec(context, windows[i], restrictedAttrs);
        attr_get_spec(context, windows[i]);
        n=8;
        addstr_spec(context,  windows[i], pos,  create_CString("xstring1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        attroff_spec(context, windows[i], restrictedAttrs);
        attr_get_spec(context, windows[i]);
        pos->y=18;
        addstr_spec(context,  windows[i], pos,  create_CString("ystring1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        attrset_spec(context, windows[i], restrictedAttrs);
        attr_get_spec(context, windows[i]);
        pos->y=16;
        addstr_spec(context,  windows[i], pos,  create_CString("zstring1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        standout_spec(context, windows[i]);
        attr_get_spec(context, windows[i]);
        addstr_spec(context,  windows[i], pos,  create_CString("vstring1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

        standend_spec(context, windows[i]);
        attr_get_spec(context, windows[i]);
        pos->y=15;
        addstr_spec(context,  windows[i], pos,  create_CString("wstring1"), NULL);
        inchstr_spec(context, &n, windows[i], pos);

        refresh_spec(context, windows[i]);

    }
    endwin_spec(context);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_window_attr_scenario =
{
        .init = init_attr_scenario,
        .finish = finish_attr_scenario,
        .actions = {
            io_attr_scen,
            NULL
    }
};

bool main_attr_nstring( int argc, char** argv )
{
    ncurses_window_attr_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_ATTR_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initNcurses();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");

    // Run test scenario
    main_attr_nstring(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
