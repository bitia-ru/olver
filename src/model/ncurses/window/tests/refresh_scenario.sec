/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/input/tests/char_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/char/add_media.seh"

#include "ncurses/input/char_media.seh"
#include "process/process/process_model.seh"

#include "ncurses/char/input_media.seh"
#include "ncurses/char/insert_media.seh"
#include "ncurses/window/window_media.seh"
#include "ncurses/color/color_media.seh"
#include "ncurses/move/move_media.seh"

#include "ncurses/ncurses/ncurses_data.seh"

#include "ncurses/window/refresh_media.seh"

static CallContext context;
static VoidTPtr ptr;
/********************************************************************/
/**                Memterm Scenario Initialization                 **/
/********************************************************************/
static CByteArray *termInfo;
static bool init_refresh_scenario(int argc,char** argv)
{
    //context = getContext();
    //context = createDefaultProcessForNCurses();
    context = createProcessForNCurses(40, 40);
    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    initscr_spec(context);

    initReqFilters();

    registerStdTerminal(context);

    has_colors_spec(context);
    can_change_color_spec(context);

    start_color_spec(context);

    setVariables_StdTerminal(context);

    return true;
}


static void finish_refresh_scenario(void)
{
    endwin_spec(context);
    terminateNCursesProcess(context);

    TEST_SCENARIO_VERDICT_VERBOSE(ncurses_window_refresh_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool ncurses_memterm_refresh_scen()
{
    CharT *str = (CharT *)"some text to be typed";
    CByteArray *scrDump, *scrDump2;
    IntT i, res=0;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet, *winRet2;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    ChTypeTArray* arr;
    NCursesTerminal* term = getNCursesStdTerminal(context);
    ColorPair* cp = create_ColorPair(0, 0);
    IntT ref;

    WindowState* ws;
    Ldat* ld;
    List* ls;
    ChTypeTObj* chO;

    winRet = newwin_spec( context, 10, 10, 5, 5);
    winRet2 = newwin_spec( context, 10, 10, 0, 0);

    for(i=0;i<term->COLOR_PAIRS;i++)
        pair_content_spec(context, (ShortT)i, cp);
    res = init_pair_spec(context, 3, create_ColorPair(SUT_COLOR_YELLOW, SUT_COLOR_BLUE));


    ch.letter = 'q';

    //ncursesInputString(context, create_CByteArray((ByteT*)str, strlen(str)));
    scrDump = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump);

    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);
    //ncursesInputString(context, create_CByteArray((ByteT*)str, strlen(str)));
    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    pos = create_NCursesPosition(0, 0);
    ref = getRefresh_NCursesWindow(stdWnd, pos);
    ch = getElement_NCursesWindow(stdWnd, pos);

    ch.letter = 'w';

    i = 40;
    while(--i)
        addch_spec(context, ch, &winRet->win, NULL, false);
    refresh_spec(context, &winRet->win);
    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    ch.letter = 'a';
    i = 13;
    while(--i)
        addch_spec(context, ch, &winRet2->win, NULL, false);
    refresh_spec(context, &winRet2->win);
    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    ch.letter = 'w';
    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);
    refresh_spec(context, &winRet2->win);

    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    addch_spec(context, ch, &winRet->win, create_NCursesPosition(3, 3), false);
    refresh_spec(context, &winRet->win);

    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    ch.letter = 'a';
    ch.blink = ch.bold = ch.reverse = ch.underline = true;
    i = 10;
    while(--i)
        addch_spec(context, ch, &winRet2->win, NULL, false);

    addch_spec(context, ch, NULL, create_NCursesPosition(19, 19), false);
    DUMP("linetouched(19) == %d\n", is_linetouched_spec(context, stdWnd, 19));
    DUMP("linetouched(20) == %d\n", is_linetouched_spec(context, stdWnd, 20));
    DUMP("wintouched == %d\n", is_wintouched_spec(context, stdWnd));
    refresh_spec(context, NULL);
    ch.letter = 'Z';
    addch_spec(context, ch, NULL, NULL, true);

    res = touchline_spec(context, stdWnd, 0, 3);
    refresh_spec(context, NULL);

    addch_spec(context, ch, &winRet2->win, NULL, true);
    res = touchwin_spec(context, stdWnd);
    refresh_spec(context, NULL);

    tmp = getWindow(&winRet2->win);

    res = wtouchln_spec(context, tmp, 0, 5, 1);
    res = wtouchln_spec(context, tmp, 1, 1, 0);
    refresh_spec(context, &winRet2->win);

    addch_spec(context, ch, NULL, NULL, false);
    res = untouchwin_spec(context, stdWnd);
    refresh_spec(context, NULL);

    DUMP("linetouched(19) == %d\n", is_linetouched_spec(context, stdWnd, 19));
    DUMP("linetouched(20) == %d\n", is_linetouched_spec(context, stdWnd, 20));
    DUMP("wintouched == %d\n", is_wintouched_spec(context, stdWnd));

    scrDump2 = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump2);

    arr = create_ChTypeTArray_ScreenDump(scrDump2, stdWnd->ncols, stdWnd->nlines);

    ch = inch_spec(context, &winRet->win, create_NCursesPosition(3, 3));

    ch = inch_spec(context, NULL, create_NCursesPosition(0, 0));

    ch = inch_spec(context, NULL, create_NCursesPosition(2, 1));

    ch = inch_spec(context, &winRet->win, create_NCursesPosition(3, 3));

    return true;
}
scenario
bool ncurses_doupdate_scen()
{
    CByteArray *scrDump;
    IntT i, res=0;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet, *winRet2;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    ChTypeTArray* arr;

    winRet = newwin_spec( context, 10, 10, 5, 5);
    winRet2 = newwin_spec( context, 10, 10, 0, 0);

    ch.letter = 'R';

    addch_spec(context, ch, &winRet->win, NULL, false);
    addch_spec(context, ch, &winRet->win, NULL, false);
    addch_spec(context, ch, &winRet->win, NULL, false);

    ch.letter = 'q';

    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);

    tmp = getWindow(&winRet->win);

    refresh_spec(context, NULL);
    refresh_spec(context, &tmp->address);

    wnoutrefresh_spec(context, tmp);
    wnoutrefresh_spec(context, stdWnd);

    doupdate_spec(context);

    refresh_spec(context, NULL);
    scrDump = ncursesScreenDump(context);
    traceFormattedUserInfo("screen dump:$(obj)", scrDump);

    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    return true;
}
scenario
bool ncurses_sync_scen()
{
    CByteArray *scrDump;
    IntT i, res=0;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet, *winRet2;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    ChTypeTArray* arr;
    WindowTPtr der;

    winRet = newwin_spec( context, 10, 10, 0, 0);
    der = derwin_spec( context, &winRet->win, 5, 5, 0, 0);

    ch.letter = 'R';

    addch_spec(context, ch, &winRet->win, NULL, false);
    addch_spec(context, ch, &winRet->win, NULL, false);
    addch_spec(context, ch, &winRet->win, NULL, false);

    ch.letter = 'q';

    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);
    addch_spec(context, ch, NULL, NULL, false);

    tmp = getWindow(&winRet->win);

    refresh_spec(context, NULL);

    refresh_spec(context, &winRet->win);

    refresh_spec(context, &der);

    scrDump = ncursesScreenDump(context);

    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    tmp = getWindow(&der);
    syncok_spec(context, tmp, 1);
    addch_spec(context, ch, &der, create_NCursesPosition(0, 0), false);
    wsyncdown_spec(context, tmp);

    wcursyncup_spec(context, tmp);
    refresh_spec(context, &winRet->win);
    tmp =getWindow(&winRet->win);
    tmp =getWindow(&der);
    wsyncup_spec(context, tmp);
    ch.letter = 'R';
    addch_spec(context, ch, &winRet->win, create_NCursesPosition(0, 0), false);
    tmp = getWindow(&winRet->win);
    refresh_spec(context, &winRet->win);
    tmp = getWindow(&winRet->win);
    refresh_spec(context, &der);
    tmp = getWindow(&winRet->win);
    tmp = getWindow(&der);

    scrDump = ncursesScreenDump(context);

    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    tmp = getWindow(&winRet->win);
    tmp = getWindow(&der);

    return true;
}
scenario
bool ncurses_redraw_scen()
{
    CharT *str = (CharT *)"some text to be typed";
    CByteArray *scrDump, *scrDump2;
    IntT i, res=0;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet, *winRet2;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    ChTypeTArray* arr;
    NCursesTerminal* term = getNCursesStdTerminal(context);
    ColorPair* cp = create_ColorPair(0, 0);
    IntT ref;

    WindowState* ws;
    Ldat* ld;
    List* ls;
    ChTypeTObj* chO;

    winRet = newwin_spec( context, 10, 10, 5, 5);
    winRet2 = newwin_spec( context, 10, 10, 0, 0);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);
    refresh_spec(context, &winRet2->win);

    ch.letter = 'A';

    addch_spec(context, ch, NULL, create_NCursesPosition(19, 19), false);

    DUMP("linetouched(19) == %d\n", is_linetouched_spec(context, stdWnd, 19));
    DUMP("linetouched(20) == %d\n", is_linetouched_spec(context, stdWnd, 20));
    DUMP("wintouched == %d\n", is_wintouched_spec(context, stdWnd));

    refresh_spec(context, NULL);

    scrDump = ncursesScreenDump(context);
    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    redrawwin_spec(context, stdWnd);

    DUMP("wintouched == %d\n", is_wintouched_spec(context, stdWnd));
    refresh_spec(context, NULL);

    scrDump = ncursesScreenDump(context);
    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    for(i=0;i<stdWnd->nlines;i+=2)
        wredrawln_spec(context, stdWnd, i, 1);

    for(i=0;i<stdWnd->nlines;i++)
        DUMP("linetouched(%d) == %d\n", i, is_linetouched_spec(context, stdWnd, i));

    return true;
}
scenario
bool ncurses_endwin_test_scen()
{
    CharT *str = (CharT *)"some text to be typed";
    CByteArray *scrDump, *scrDump2;
    IntT i, res=0;
    ChTypeT ch = create_emptyChTypeT();
    NewWinReturnType* winRet, *winRet2;
    NCursesWindow* stdWnd=getNCursesStdWindow(context), *tmp;
    NCursesPosition* pos = create_NCursesPosition(10, 10);
    ChTypeTArray* arr;
    NCursesTerminal* term = getNCursesStdTerminal(context);
    ColorPair* cp = create_ColorPair(0, 0);
    IntT ref;

    WindowState* ws;
    Ldat* ld;
    List* ls;
    ChTypeTObj* chO;

    winRet = newwin_spec( context, 10, 10, 5, 5);
    winRet2 = newwin_spec( context, 10, 10, 0, 0);

    refresh_spec(context, NULL);
    refresh_spec(context, &winRet->win);
    refresh_spec(context, &winRet2->win);

    ch.letter = 'A';

    addch_spec(context, ch, NULL, create_NCursesPosition(19, 19), false);
    refresh_spec(context, NULL);

    scrDump = ncursesScreenDump(context);
    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    endwin_spec(context);

    DUMP("before refresh: isendwin == %d\n", isendwin_spec(context));

    doupdate_spec(context);

    scrDump = ncursesScreenDump(context);
    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    DUMP("after refresh: isendwin == %d\n", isendwin_spec(context));

    endwin_spec(context);

    DUMP("before refresh: isendwin == %d\n", isendwin_spec(context));

    doupdate_spec(context);

    scrDump = ncursesScreenDump(context);
    arr = create_ChTypeTArray_ScreenDump(scrDump, stdWnd->ncols, stdWnd->nlines);

    DUMP("after refresh: isendwin == %d\n", isendwin_spec(context));

    return true;
}
/********************************************************************/
/**                  Memterm Scenario Definition                   **/
/********************************************************************/
scenario dfsm ncurses_window_refresh_scenario =
{
    .init = init_refresh_scenario,
        .finish = finish_refresh_scenario,
        .actions = {
            ncurses_memterm_refresh_scen,
            ncurses_doupdate_scen,
            ncurses_sync_scen,
            ncurses_redraw_scen,
            ncurses_endwin_test_scen,
            NULL
    }
};
bool main_ncurses_window_refresh( int argc, char** argv )
{
    ncurses_window_refresh_scenario(argc, argv);
    return true;
}

#ifdef NCURSES_WINDOW_REFRESH_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    //main_ncurses_input_char(argc,argv);
    main_ncurses_window_refresh(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
