/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/tests/pad_scenario.seh"
#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"

#include "ncurses/terminal/terminal_media.seh"
#include "ncurses/char/add_media.seh"

#include "ncurses/window/window_media.seh"
#include "ncurses/window/pad_media.seh"

#include "ncurses/ncurses/ncurses_data.seh"

#include "ncurses/window/refresh_media.seh"

static CallContext context;
static CByteArray* scrDump;
static ChTypeTArray* arr;
static NCursesWindow *stdWnd;
static CByteArray *termInfo;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_window_pad_scenario(int argc,char** argv)
{
    context = createProcessForNCurses(40, 40);
    termInfo = ncursesReadTerminfo(context);
    traceFormattedUserInfo("terminfo:$(obj)", termInfo);

    initscr_spec(context);
    stdWnd = getNCursesStdWindow(context);

    initReqFilters();

    registerStdTerminal(context);
    setVariables_StdTerminal(context);

    return true;
}

static void finish_window_pad_scenario(void)
{
    endwin_spec(context);
    TEST_SCENARIO_VERDICT_VERBOSE(window_scenario);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool ncurses_window_pad_newpad_scen()
{
    WindowTPtr pad0, subpad0;
    NCursesWindow* pad0_wnd, *subpad0_wnd;
    ChTypeT ch = create_emptyChTypeT();
    WindowState* ws;
    ChTypeTArray* s_a = get_stdScreenContent();

    refresh_spec(context, NULL);

    pad0 = newpad_spec(context, 20, 20);
    subpad0 = subpad_spec(context, pad0, 10, 10, 5, 5);

    pad0_wnd = getWindow(&pad0);
    subpad0_wnd = getWindow(&subpad0);

    ch.blink = true;
    ch.letter = 'P';

    prefresh_spec(context, pad0_wnd, 0, 0, 4, 4, 5, 5);
    pechochar_spec(context, pad0_wnd, ch);

    ch.letter = 'W';
    addch_spec(context, ch, NULL, create_NCursesPosition(4, 4), false);
    addch_spec(context, ch, NULL, NULL, false);

    refresh_spec(context, NULL);

    ch.letter = 'P';
    pechochar_spec(context, pad0_wnd, ch);

    return true;
}
scenario
bool ncurses_window_pad_subpad_scen()
{
    WindowTPtr pad0, subpad0;
    NCursesWindow* pad0_wnd, *subpad0_wnd;
    ChTypeT ch = create_emptyChTypeT();
    WindowState* ws;
    ChTypeTArray* s_a = get_stdScreenContent();
    IntT res;

    refresh_spec(context, NULL);

    pad0 = newpad_spec(context, 20, 20);

    pad0_wnd = getWindow(&pad0);

    ch.blink = true;
    ch.letter = 'P';

    prefresh_spec(context, pad0_wnd, 0, 0, 4, 4, 5, 5);
    ch.letter = '0';
    addch_spec(context, ch, &pad0, create_NCursesPosition(7, 7), false);

    subpad0 = subpad_spec(context, pad0, 10, 10, 5, 5);
    subpad0_wnd = getWindow(&subpad0);

    ch.letter = '1';
    addch_spec(context, ch, &subpad0, create_NCursesPosition(1, 1), false);

    res = prefresh_spec(context, subpad0_wnd, -4, -3, -2, -1, 3, 3);

    ch.letter = '2';
    pechochar_spec(context, subpad0_wnd, ch);

    ch.letter = 'Z';
    addch_spec(context, ch, NULL, create_NCursesPosition(1, 1), false);
    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);

    pechochar_spec(context, subpad0_wnd, ch);
}
scenario
bool ncurses_window_pad_pnoutrefresh_scen()
{
    WindowTPtr pad0, subpad0;
    NCursesWindow* pad0_wnd, *subpad0_wnd;
    ChTypeT ch = create_emptyChTypeT();
    WindowState* ws;
    ChTypeTArray* s_a = get_stdScreenContent();
    IntT res;

    refresh_spec(context, NULL);

    pad0 = newpad_spec(context, 20, 20);

    pad0_wnd = getWindow(&pad0);

    ch.blink = true;
    ch.letter = 'P';

    pnoutrefresh_spec(context, pad0_wnd, 0, 0, 4, 4, 5, 5);
    ch.letter = '0';
    addch_spec(context, ch, &pad0, create_NCursesPosition(7, 7), false);

    subpad0 = subpad_spec(context, pad0, 10, 10, 5, 5);
    subpad0_wnd = getWindow(&subpad0);

    ch.letter = '1';
    addch_spec(context, ch, &subpad0, create_NCursesPosition(1, 1), false);

    res = pnoutrefresh_spec(context, subpad0_wnd, -8, -8, -8, -8, 3, 3);

    doupdate_spec(context);

    ch.letter = '2';
    pechochar_spec(context, subpad0_wnd, ch);

    ch.letter = 'Z';
    addch_spec(context, ch, NULL, create_NCursesPosition(1, 1), false);
    addch_spec(context, ch, NULL, NULL, false);
    refresh_spec(context, NULL);

    pechochar_spec(context, subpad0_wnd, ch);
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm ncurses_window_pad_scenario =
{
    .init = init_window_pad_scenario,
        .finish = finish_window_pad_scenario,
        .actions = {
            ncurses_window_pad_newpad_scen,
            ncurses_window_pad_subpad_scen,
            ncurses_window_pad_pnoutrefresh_scen,
            NULL
    }
};



#ifdef NCURSES_WINDOW_PAD_LOCAL_MAIN

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemModel();

    initNcurses();
}
bool main_ncurses_window_pad( int argc, char** argv )
{

    ncurses_window_pad_scenario(argc, argv);
    return true;
}

//static AssertionExit system_assertion_handler;

//void myAssertionExit(const char * format, va_list arg_list)
//{
//    system_assertion_handler( format, arg_list );  // Put breakpoint here
//}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    //    system_assertion_handler = atAssertion( myAssertionExit );

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_ncurses_window_pad(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif





