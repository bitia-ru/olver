/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/window/refresh_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesWindowRefreshSubsystem(void)
{
  // Set up mediators
    set_mediator_doupdate_spec(doupdate_media);
    set_mediator_is_linetouched_spec(is_linetouched_media);
    set_mediator_is_wintouched_spec(is_wintouched_media);
    set_mediator_isendwin_spec(isendwin_media);
    set_mediator_redrawwin_spec(redrawwin_media);
    set_mediator_refresh_spec(refresh_media);
    set_mediator_syncok_spec(syncok_media);
    set_mediator_touchline_spec(touchline_media);
    set_mediator_touchwin_spec(touchwin_media);
    set_mediator_untouchwin_spec(untouchwin_media);
    set_mediator_wcursyncup_spec(wcursyncup_media);
    set_mediator_wnoutrefresh_spec(wnoutrefresh_media);
    set_mediator_wredrawln_spec(wredrawln_media);
    set_mediator_wsyncdown_spec(wsyncdown_media);
    set_mediator_wsyncup_spec(wsyncup_media);
    set_mediator_wtouchln_spec(wtouchln_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** doupdate_spec **/

mediator doupdate_media for specification
IntT doupdate_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "doupdate:");

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onDoupdate(context, doupdate_spec);
    }
}



/** is_linetouched_spec **/

mediator is_linetouched_media for specification
IntT is_linetouched_spec( CallContext context, NCursesWindow* win,  IntT line)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "is_linetouched:$(ptr)$(int)",
            create_VoidTPtrObj(win->address), create_IntTObj(line));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}



/** is_wintouched_spec **/
mediator is_wintouched_media for specification
IntT is_wintouched_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "is_wintouched:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** isendwin_spec **/

mediator isendwin_media for specification
IntT isendwin_spec( CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "isendwin" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}



/** redrawwin_spec **/

mediator redrawwin_media for specification
IntT redrawwin_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "redrawwin:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onRedrawwin(context, win, redrawwin_spec);
    }
}

/** refresh_spec **/
//This mediator refers to: refresh, wrefresh
mediator refresh_media for specification
IntT refresh_spec( CallContext context, WindowTPtr * win ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        if ( win ) { format_TSCommand( & command, "wrefresh:$(ptr)", create_VoidTPtrObj( * win ) ); }
              else { format_TSCommand( & command, "refresh"                                      ); }
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state { onRefresh( context, win, refresh_spec ); }
}

bool refreshCall( CallContext context, WindowTPtr * win ) {
    refresh_spec( context, win );
    if ( ! isBadVerdict() ) {
        return true;
    } else {
        NCursesWindow * nw = getWindowMayNULL( context, win );
        nw->wasMediatorFailed = true;
        return false;
    }
}

/** syncok_spec **/

mediator syncok_media for specification
IntT syncok_spec( CallContext context, NCursesWindow* win, IntT bf)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "syncok:$(ptr)$(int)",
            create_VoidTPtrObj(win->address), create_IntTObj(bf));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onNCursesUniversal(context, &win->address, syncok_spec);
    }
}



/** touchline_spec **/

mediator touchline_media for specification
IntT touchline_spec( CallContext context, NCursesWindow* win,  IntT start,
                    IntT count)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "touchline:$(ptr)$(int)$(int)",
            create_VoidTPtrObj(win->address), create_IntTObj(start),
            create_IntTObj(count) );

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onTouchline(context, win, start, count, touchline_spec);
    }
}



/** touchwin_spec **/
mediator touchwin_media for specification
IntT touchwin_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "touchwin:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onTouchwin(context, win, touchwin_spec);
    }
}


/** untouchwin_spec **/
mediator untouchwin_media for specification
IntT untouchwin_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "untouchwin:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onUntouchwin(context, win, untouchwin_spec);
    }
}


/** wcursyncup_spec **/

mediator wcursyncup_media for specification
void wcursyncup_spec( CallContext context, NCursesWindow* win )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "wcursyncup:$(ptr)",
            create_VoidTPtrObj(win->address));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onWcursync(context, win);
    }
}



/** wnoutrefresh_spec **/

mediator wnoutrefresh_media for specification
IntT wnoutrefresh_spec( CallContext context, NCursesWindow*  win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "wnoutrefresh:$(ptr)",
            create_VoidTPtrObj(win->address) );

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onWnoutrefresh(context, win, wnoutrefresh_spec);
    }
}



/** wredrawln_spec **/
mediator wredrawln_media for specification
IntT wredrawln_spec( CallContext context, NCursesWindow* win,  IntT beg_line,
                    IntT num_lines)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;

        format_TSCommand( &command, "wredrawln:$(ptr)$(int)$(int)",
            create_VoidTPtrObj(win->address), create_IntTObj(beg_line),
            create_IntTObj(num_lines) );

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onWredrawln(context, win, beg_line, num_lines, wredrawln_spec);
    }
}


/** wrefresh_spec **/
/****
mediator wrefresh_media for specification
ReturnType wrefresh_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "wrefresh" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return res;
  }
}
****/


/** wsyncdown_spec **/
mediator wsyncdown_media for specification
void wsyncdown_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "wsyncdown:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onWsyncdown(context, win);
    }
}


/** wsyncup_spec **/

mediator wsyncup_media for specification
void wsyncup_spec( CallContext context, NCursesWindow* win)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "wsyncup:$(ptr)",
            create_VoidTPtrObj(win->address));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onWsyncup(context, win);
    }
}



/** wtouchln_spec **/

mediator wtouchln_media for specification
IntT wtouchln_spec( CallContext context, NCursesWindow* win, IntT y, IntT n,
                   IntT changed)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "wtouchln:$(ptr)$(int)$(int)$(int)",
            create_VoidTPtrObj(win->address), create_IntTObj(y),
            create_IntTObj(n),create_IntTObj(changed));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onWtouchln(context, win, y, n, changed, wtouchln_spec);
    }
}




