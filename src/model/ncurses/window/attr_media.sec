/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/window/attr_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesWindowAttrSubsystem(void)
{
  // Set up mediators
    set_mediator_attr_get_spec(attr_get_media);
    set_mediator_attr_off_spec(attr_off_media);
    set_mediator_attr_on_spec(attr_on_media);
    set_mediator_attr_set_spec(attr_set_media);
    set_mediator_attroff_spec(attroff_media);
    set_mediator_attron_spec(attron_media);
    set_mediator_attrset_spec(attrset_media);
    set_mediator_standend_spec(standend_media);
    set_mediator_standout_spec(standout_media);

    // Set up formatters
    registerTSFormatter("curses_attr",(TSFormatterFuncType)curses_attr_formatter);

}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** attr_get_spec **/
//This mediator refers to: wattr_get, attr_get
mediator attr_get_media for specification
AttrGetReturnType* attr_get_spec( CallContext context, WindowTPtr* win)
{
    call
    {
        TSCommand          command = create_TSCommand();
        IntT               retVal;
        NcursesAttrT       attrs;
        IntT               color_pair_number;
        AttrGetReturnType* res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattr_get:$(ptr)", create_VoidTPtrObj(*win));
        }
        else
        {
            format_TSCommand( &command, "attr_get");
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            retVal=readInt_TSStream(&command.response);
            attrs=readNcursesAttrs_TSStream(&command.response);
            color_pair_number=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        res = create_AttrGetReturnType(retVal, attrs, color_pair_number);
        return res;
    }
}


/** attr_off_spec **/
//This mediator refers to: wattr_off, attr_off
mediator attr_off_media for specification
IntT attr_off_spec( CallContext context, WindowTPtr* win, NcursesAttrT attrs)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattr_off:$(ptr)$(curses_attr)", create_VoidTPtrObj(*win), create_NcursesAttrTObj(attrs));
        }
        else
        {
            format_TSCommand( &command, "attr_off:$(curses_attr)",  create_NcursesAttrTObj(attrs));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAttrOff(context, win, attrs);
    }
}


/** attr_on_spec **/
//This mediator refers to: wattr_on, attr_on
mediator attr_on_media for specification
IntT attr_on_spec( CallContext context,  WindowTPtr* win, NcursesAttrT attrs)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattr_on:$(ptr)$(curses_attr)", create_VoidTPtrObj(*win), create_NcursesAttrTObj(attrs));
        }
        else
        {
            format_TSCommand( &command, "attr_on:$(curses_attr)",  create_NcursesAttrTObj(attrs));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAttrOn(context, win, attrs);
    }
}


/** attr_set_spec **/
//This mediator refers to: wattr_set, wcolor_set, attr_set, color_set
mediator attr_set_media for specification
IntT attr_set_spec( CallContext context, WindowTPtr* win, NcursesAttrT* attr, IntT colorPair)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            if (attr!=NULL)
            {
                format_TSCommand( &command, "wattr_set:$(ptr)$(curses_attr)$(int)", create_VoidTPtrObj(*win), create_NcursesAttrTObj(*attr), create_IntTObj(colorPair));
            }
            else
            {
                format_TSCommand( &command, "wcolor_set:$(ptr)$(int)", create_VoidTPtrObj(*win), create_IntTObj(colorPair));
            }
        }
        else
        {
            if (attr!=NULL)
            {
                format_TSCommand( &command, "attr_set:$(curses_attr)$(int)", create_NcursesAttrTObj(*attr), create_IntTObj(colorPair));
            }
            else
            {
                format_TSCommand( &command, "color_set:$(int)", create_IntTObj(colorPair));
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAttrSet(context, win, attr, colorPair);
    }
}



/** attroff_spec **/
//This mediator refers to: wattroff, attroff
mediator attroff_media for specification
IntT attroff_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattroff:$(ptr)$(curses_attr)", create_VoidTPtrObj(*win), create_RestrictedNcursesAttrTObj(attrs));
        }
        else
        {
            format_TSCommand( &command, "attroff:$(curses_attr)",  create_RestrictedNcursesAttrTObj(attrs));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onRestrictedAttroff(context, win, attrs);
    }
}


/** attron_spec **/
//This mediator refers to: wattron, attron
mediator attron_media for specification
IntT attron_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattron:$(ptr)$(curses_attr)", create_VoidTPtrObj(*win), create_RestrictedNcursesAttrTObj(attrs));
        }
        else
        {
            format_TSCommand( &command, "attron:$(curses_attr)",  create_RestrictedNcursesAttrTObj(attrs));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onRestrictedAttron(context, win, attrs);
    }
}


/** attrset_spec **/
//This mediator refers to: wattrset, attrset
mediator attrset_media for specification
IntT attrset_spec( CallContext context, WindowTPtr* win, NcursesRestrictedAttrT attrs)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wattrset:$(ptr)$(curses_attr)", create_VoidTPtrObj(*win), create_RestrictedNcursesAttrTObj(attrs));
        }
        else
        {
            format_TSCommand( &command, "attrset:$(curses_attr)",  create_RestrictedNcursesAttrTObj(attrs));
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onRestrictedAttrset(context, win, attrs);
    }
}


/** color_set_spec **/
/****
mediator color_set_media for specification
ReturnType color_set_spec( CallContext context, ... )
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "color_set" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}
****/


/** standend_spec **/
//This mediator refers to: wstandend, standend
mediator standend_media for specification
IntT standend_spec( CallContext context, WindowTPtr* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wstandend:$(ptr)", create_VoidTPtrObj(*win));
        }
        else
        {
            format_TSCommand( &command, "standend");
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onStandend(context, win);
    }
}


/** standout_spec **/
//This mediator refers to: wstandout, standout
mediator standout_media for specification
IntT standout_spec( CallContext context, WindowTPtr* win)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        
        if (win!=NULL)
        {
            format_TSCommand( &command, "wstandout:$(ptr)", create_VoidTPtrObj(*win));
        }
        else
        {
            format_TSCommand( &command, "standout");
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onStandout(context, win);
    }
}


