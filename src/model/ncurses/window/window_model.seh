/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef NCURSES_WINDOW_MODEL_SEH
#define NCURSES_WINDOW_MODEL_SEH

#include "common/common_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"



specification typedef struct NewWinReturnType
{
    WindowTPtr win;
    IntT nCOLS;
    IntT nLINES;
}NewWinReturnType;

NewWinReturnType *create_NewWinReturnType(
    WindowTPtr win,
    IntT nCOLS,
    IntT nLINES );

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** copywin_spec **/
specification
IntT copywin_spec( CallContext context, WindowTPtr* srcwin, WindowTPtr* dstwin,
                  IntT sminrow, IntT smincol, IntT dminrow, IntT dmincol,
                  IntT dmaxrow, IntT dmaxcol, IntT overlay);
void copywin_model(NCursesWindow* src, NCursesWindow* dst,
                  IntT sminrow, IntT smincol, IntT dminrow, IntT dmincol,
                  IntT dmaxrow, IntT dmaxcol, IntT overlay);

void onCopywin( CallContext context, WindowTPtr* srcwin, WindowTPtr* dstwin,
                  IntT sminrow, IntT smincol, IntT dminrow, IntT dmincol,
                  IntT dmaxrow, IntT dmaxcol, IntT overlay,
                  IntT copywin_spec);
/** curs_set_spec **/
specification
IntT curs_set_spec( CallContext context, IntT visibility);
void onCurs_set( CallContext context, IntT visibility, IntT curs_set_spec);

/** delwin_spec **/
specification
IntT delwin_spec( CallContext context, WindowTPtr* win);
void onDelwin( CallContext context, WindowTPtr* win, IntT delwin_spec);
/** derwin_spec **/
//If subwin parameter is true subwin function called instead of calling derwin
specification
WindowTPtr derwin_spec( CallContext context, WindowTPtr* orig, IntT nlines,
                       IntT ncols, IntT begin_y, IntT begin_x);
void onDerwin(  CallContext context, WindowTPtr* orig, IntT nlines,
                IntT ncols, IntT begin_y, IntT begin_x,
                WindowTPtr derwin_spec);

/** dupwin_spec **/
specification
WindowTPtr dupwin_spec( CallContext context, WindowTPtr* win);
void onDupwin( CallContext context, WindowTPtr* win, WindowTPtr dupwin_spec);

/** getwin_spec **/
specification
WindowTPtr getwin_spec( CallContext context, CString* filep);
void onGetwin( CallContext context, CString* filep, WindowTPtr getwin_spec);

/** intrflush_spec **/
specification
IntT intrflush_spec( CallContext context, WindowTPtr* win, IntT bf);
void onIntrflush( CallContext context, WindowTPtr* win, IntT bf,
                 IntT intrflush_spec);

/** keypad_spec **/
specification
IntT keypad_spec( CallContext context, WindowTPtr* win, IntT bf);
void onKeypad( CallContext context, WindowTPtr* win, IntT bf,
                 IntT keypad_spec);

/** meta_spec **/
specification
IntT meta_spec( CallContext context, WindowTPtr* win, IntT bf);
void onMeta( CallContext context, WindowTPtr* win, IntT bf,
                 IntT meta_spec);
/** mvderwin_spec **/
specification
IntT mvderwin_spec( CallContext context, WindowTPtr* win, NCursesPosition*pos);
void onMvderwin(   CallContext context, WindowTPtr* win, NCursesPosition* pos,
                IntT mvderwin_spec);
/** mvwin_spec **/
specification
IntT mvwin_spec( CallContext context, WindowTPtr* win, IntT y, IntT x);
void onMvwin( CallContext context, WindowTPtr* win, IntT y, IntT x,
                IntT mvwin_spec);
/** newwin_spec **/
specification
NewWinReturnType* newwin_spec( CallContext context, IntT nlines, IntT ncols, IntT begin_y, IntT begin_x);
void onNewwin( CallContext context, IntT nlines, IntT ncols, IntT begin_y,
                IntT begin_x, NewWinReturnType* newwin_spec);

/** nodelay_spec **/
specification
IntT nodelay_spec( CallContext context, WindowTPtr* win, IntT bf);
void onNodelay( CallContext context, WindowTPtr* win, IntT bf,
                 IntT nodelay_spec);
/** overlay_spec **/
specification
IntT overlay_spec( CallContext context, WindowTPtr* srcwin,
                            WindowTPtr* dstwin);
void overlay_model(NCursesWindow* src, NCursesWindow* dst, IntT overlay);
void onOverlay( CallContext context, WindowTPtr* src,
                            WindowTPtr* dst, IntT overlay_spec);
/** overwrite_spec **/
specification
IntT overwrite_spec( CallContext context, WindowTPtr* srcwin,
                            WindowTPtr* dstwin);
void onOverwrite( CallContext context, WindowTPtr* src,
                            WindowTPtr* dst, IntT overwrite_spec);
/** putwin_spec **/
specification
IntT putwin_spec( CallContext context, WindowTPtr* win, CString* filep);
void onPutwin( CallContext context, WindowTPtr* win, CString* filep,
                IntT putwin_spec);
/** subwin_spec **/
specification
WindowTPtr subwin_spec( CallContext context, WindowTPtr* orig, IntT nlines,
                       IntT ncols, IntT begin_y, IntT begin_x);

void onSubwin(  CallContext context, WindowTPtr* orig, IntT nlines,
                IntT ncols, IntT begin_y, IntT begin_x, 
                WindowTPtr subwin_spec);
/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool check_outside( CallContext context, WindowTPtr* orig, IntT nlines,
                       IntT ncols, IntT begin_y, IntT begin_x);

#endif

