/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "process/process/process_model.seh"
#include "ncurses/window/window_model.seh"
#include "ncurses/terminal/terminal_model.seh"
#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/mode/mode_model.seh"


#pragma SEC subsystem mode "ncurses.mode"


/*
   The group of functions 'ncurses.mode' consists of:
       def_prog_mode [1]
       def_shell_mode [1]
       reset_prog_mode [1]
       reset_shell_mode [1]
       resetty [1]
       savetty [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
    Linux Standard Base Core Specification 3.1
    Copyright (c) 2004, 2005 Free Standards Group

        refers

    The Single UNIX (R) Specification, Version 2Copyright (c) 1997 The Open Group

    NAME

    def_prog_mode, def_shell_mode, reset_prog_mode, reset_shell_mode - save/restore
    program or shell terminal modes

     SYNOPSIS

    #include <curses.h>

    int def_prog_mode(void);

    int def_shell_mode(void);

    int reset_prog_mode(void);

    int reset_shell_mode(void);

     DESCRIPTION

    The def_prog_mode() function saves the current terminal modes as the "program"
    (in Curses) state for use by reset_prog_mode(). The def_shell_mode() function
    saves the current terminal modes as the "shell" (not in Curses) state for use
    by reset_shell_mode(). The reset_prog_mode() function restores the terminal
    to the "program" (in Curses) state. The reset_shell_mode() function restores
    the terminal to the "shell" (not in Curses) state. These functions affect the
    mode of the terminal associated with the current screen.

     RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they return
    ERR.

     ERRORS

    No errors are defined.
*/

specification
IntT def_prog_mode_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { SaveProgramTerminalMode, "Save program terminal mode" };
    }

    post
    {
        /*
         * The def_prog_mode() function saves the current terminal modes as the "program"
         * (in Curses) state for use by reset_prog_mode().
         */
        REQ("def_prog_mode.01", "", TODO_REQ());

        /*
         * These functions affect the mode of the terminal associated with the current
         * screen.
         */
        REQ("def_prog_mode.02", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("def_prog_mode.03.01;def_prog_mode.03.02", "return value",
            def_prog_mode_spec == SUT_OK || def_prog_mode_spec == SUT_ERR);

        return true;
    }
}

specification
IntT def_shell_mode_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { SaveShellTerminalMode, "Save shell terminal mode" };
    }

    post
    {
        /*
         * The def_shell_mode() function saves the current terminal modes as the "shell"
         * (not in Curses) state for use by reset_shell_mode().
         */
        REQ("def_shell_mode.01", "", TODO_REQ());

        /*
         * These functions affect the mode of the terminal associated with the current
         * screen.
         */
        REQ("def_shell_mode.02", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("def_shell_mode.03.01;def_shell_mode.03.02", "return value",
            def_shell_mode_spec == SUT_OK || def_shell_mode_spec == SUT_ERR);

        return true;
    }
}

void onDefMode(CallContext context, IntT selFunc, IntT spec)
{
    if(spec == SUT_OK)
    {
        switch(selFunc)
        {
        case NC_MODE_TTY:
            if(registerProcessStaticData(context, _CS("ncurses.mode"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode"));
                lastTerm = clone(getNCursesStdTerminal(context));
            }
            break;

        case NC_MODE_SH:
            if(registerProcessStaticData(context, _CS("ncurses.mode.shell"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode.shell"));
                lastTerm = clone(getNCursesStdTerminal(context));
            }
            break;

        case NC_MODE_PG:
            if(registerProcessStaticData(context, _CS("ncurses.mode.prog"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode.prog"));
                lastTerm = clone(getNCursesStdTerminal(context));
            }
            break;
        }
    }
}

specification
IntT reset_prog_mode_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { RestoreProgramTerminalMode, "Restore program terminal mode" };
    }

    post
    {
        /*
         * The reset_prog_mode() function restores the terminal to the "program" (in
         * Curses) state.
         */
        REQ("reset_prog_mode.01", "", TODO_REQ());

        /*
         * These functions affect the mode of the terminal associated with the current
         * screen.
         */
        REQ("reset_prog_mode.02", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("reset_prog_mode.03.01;reset_prog_mode.03.02", "return value",
            reset_prog_mode_spec == SUT_OK || reset_prog_mode_spec == SUT_ERR);

        return true;
    }
}

specification
IntT reset_shell_mode_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { RestoreShellTerminalMode, "Restore shell terminal mode" };
    }

    post
    {
        /*
         * The reset_shell_mode() function restores the terminal to the "shell" (not in
         * Curses) state.
         */
        REQ("reset_shell_mode.01", "", TODO_REQ());

        /*
         * These functions affect the mode of the terminal associated with the current
         * screen.
         */
        REQ("reset_shell_mode.02", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("reset_shell_mode.03.01;reset_shell_mode.03.02", "return value",
            reset_shell_mode_spec == SUT_OK || reset_shell_mode_spec == SUT_ERR);

        return true;
    }
}

void onResetMode(CallContext context, IntT selFunc, IntT spec)
{
    if(spec == SUT_OK)
    {
        switch(selFunc)
        {
        case NC_MODE_TTY:
            if(registerProcessStaticData(context, _CS("ncurses.mode"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode"));
                setNCursesStdTerminal(context, lastTerm->address);
            }
            break;

        case NC_MODE_SH:
            if(registerProcessStaticData(context, _CS("ncurses.mode.shell"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode.shell"));
                setNCursesStdTerminal(context, lastTerm->address);
            }
            break;

        case NC_MODE_PG:
            if(registerProcessStaticData(context, _CS("ncurses.mode.prog"), getNCursesStdTerminal(context)))
            {
                NCursesTerminal* lastTerm = getProcessStaticData(context, _CS("ncurses.mode.prog"));
                setNCursesStdTerminal(context, lastTerm->address);
            }
            break;
        }
    }
}

/*
    Linux Standard Base Core Specification 3.1
    Copyright (c) 2004, 2005 Free Standards Group

        refers

    The Single UNIX (R) Specification, Version 2Copyright (c) 1997 The Open Group

    NAME

    resetty, savetty - save/restore terminal mode

     SYNOPSIS

    #include <curses.h>

    int resetty(void);

    int savetty(void);

     DESCRIPTION

    The resetty() function restores the program mode as of the most recent call to
    savetty(). The savetty() function saves the state that would be put in place
    by a call to reset_prog_mode().

     RETURN VALUE

    Upon successful completion, these functions return OK. Otherwise, they return
    ERR.

     ERRORS

    No errors are defined.
*/

specification
IntT resetty_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { RestoreTerminalMode, "Restore terminal mode" };
    }

    post
    {
        /*
         * The resetty() function restores the program mode as of the most recent call to
         * savetty().
         */
        REQ("resetty.01", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("resetty.02.01;resetty.02.02", "return value",
            resetty_spec == SUT_OK || resetty_spec == SUT_ERR);

        return true;
    }
}

specification
IntT savetty_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { SaveTerminalMode, "Save terminal mode" };
    }

    post
    {
        /*
         * The savetty() function saves the state that would be put in place by a call to
         * reset_prog_mode().
         */
        REQ("savetty.01", "", TODO_REQ());

        /*
         * Upon successful completion, these functions return OK.
         */
        /*
         * Otherwise, they return ERR.
         */
        REQ("savetty.02.01;savetty.02.02", "return value",
            savetty_spec == SUT_OK || savetty_spec == SUT_ERR);

        return true;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
