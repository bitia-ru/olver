/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/mode/mode_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesModeSubsystem(void)
{
    // Set up mediators
    set_mediator_def_prog_mode_spec(def_prog_mode_media);
    set_mediator_def_shell_mode_spec(def_shell_mode_media);
    set_mediator_reset_prog_mode_spec(reset_prog_mode_media);
    set_mediator_reset_shell_mode_spec(reset_shell_mode_media);
    set_mediator_resetty_spec(resetty_media);
    set_mediator_savetty_spec(savetty_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** def_prog_mode_spec **/

mediator def_prog_mode_media for specification
IntT def_prog_mode_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "def_prog_mode");
        executeCommandInContext(context, &command); 
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onDefMode(context, NC_MODE_PG, def_prog_mode_spec);
    }
}

/** def_shell_mode_spec **/

mediator def_shell_mode_media for specification
IntT def_shell_mode_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "def_shell_mode");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }

    state
    {
        onDefMode(context, NC_MODE_SH, def_shell_mode_spec);
    }
}


/** reset_prog_mode_spec **/

mediator reset_prog_mode_media for specification
IntT reset_prog_mode_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "reset_prog_mode");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }

    state
    {
        onResetMode(context, NC_MODE_PG, reset_prog_mode_spec);
    }
}

/** reset_shell_mode_spec **/

mediator reset_shell_mode_media for specification
IntT reset_shell_mode_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "reset_shell_mode");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }

    state
    {
        onResetMode(context, NC_MODE_SH, reset_shell_mode_spec);
    }
}

/** resetty_spec **/

mediator resetty_media for specification
IntT resetty_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "resetty");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }

    state
    {
        onResetMode(context, NC_MODE_TTY, resetty_spec);
    }
}

/** savetty_spec **/

mediator savetty_media for specification
IntT savetty_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "savetty");
        executeCommandInContext(context, &command);
        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }

    state
    {
        onDefMode(context, NC_MODE_TTY, savetty_spec);
    }
}


