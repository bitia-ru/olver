/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/ncurses/ncurses_data.seh"
#include "ncurses/char/add_media.seh"
#include "common/common_media.seh"




/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesCharAddSubsystem(void)
{
  // Set up mediators
    set_mediator_addch_spec(addch_media);

    // Set up formatters
    registerTSFormatter("chtype",(TSFormatterFuncType)chtype_formatter);

}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** addch_spec **/
//This mediator refers to: wechochar, mvwaddch, waddch, 
//echochar, mvaddch, addch
mediator addch_media for specification
IntT addch_spec(CallContext context, ChTypeT ch, WindowTPtr* win, NCursesPosition* position, bool refresh)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;
    
        if (win!=NULL)
        {
            if (refresh)
            {
                format_TSCommand( &command, "wechochar:$(ptr)$(chtype)", create_VoidTPtrObj(*win), create_ChTypeTObj(ch));
            }
            else
            {
                if (position!=NULL)
                {
                    format_TSCommand( &command, "mvwaddch:$(ptr)$(int)$(int)$(chtype)", create_VoidTPtrObj(*win), create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch));
                }
                else
                {
                    format_TSCommand( &command, "waddch:$(ptr)$(chtype)", create_VoidTPtrObj(*win), create_ChTypeTObj(ch));
                }
            }
        }
        else
        {
            if (refresh)
            {
                format_TSCommand( &command, "echochar:$(chtype)", create_ChTypeTObj(ch));
            }
            else
            {
                if (position!=NULL)
                {
                    format_TSCommand( &command, "mvaddch:$(int)$(int)$(chtype)", create_IntTObj(position->y), create_IntTObj(position->x), create_ChTypeTObj(ch));
                }
                else
                {
                    format_TSCommand( &command, "addch:$(chtype)", create_ChTypeTObj(ch));
                }
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onAddch(context, ch, win, position, addch_spec, refresh);
    }
}


