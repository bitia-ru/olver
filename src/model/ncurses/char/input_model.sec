/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "ncurses/char/input_model.seh"
#include "data/ncurses_model.seh"


#pragma SEC subsystem char "ncurses.char"



/*
   The group of functions 'ncurses.char.input' consists of:
       inch [1]
       mvinch [1]
       mvwinch [1]
       winch [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Single UNIX ® Specification, Version 2
Copyright (c) 1997 The Open Group

-------------------------------------------------------------------------------

NAME

    inch, mvinch, mvwinch, winch - input a single-byte character and rendition from a window

SYNOPSIS

    #include <curses.h>
    chtype inch(void);
    chtype mvinch(int y, int x);
    chtype mvwinch(WINDOW *win, int y, int x);
    chtype winch(WINDOW *win);

DESCRIPTION

    These functions return the character and rendition, of type chtype, at the
    current or specified position in the current or specified window.

RETURN VALUE

    Upon successful completion, the functions return the specified character
    and rendition. Otherwise, they return (chtype)ERR.

ERRORS

    No errors are defined.
*/

//This specification refers to: mvwinch, winch, mvinch, inch
specification
ChTypeT inch_spec(CallContext context, WindowTPtr* win, NCursesPosition* pos)
{
    NCursesWindow* curWnd = getWindowMayNULL(context, win);
    NCursesPosition* curPos = getWindowPositionMayNULL(curWnd, pos);

    if (win!=NULL){
        if (pos!=NULL){
            FILTER("mvwinch");
        }
        else{
            FILTER("winch");
        }
    }
    else{
        if (pos!=NULL){
            FILTER("mvinch");
        }
        else{
            FILTER("inch");
        }
    }

    pre
    {
        return true;
    }
    post
    {
        if (inch_spec.letter!=SUT_ERR)
        {
            ChTypeT curChar=getElement_NCursesWindow(curWnd, create_NCursesPosition(curPos->x, curPos->y));

            if (curChar.letter!=-1)
            {
                /*
                * These functions return the character and rendition, of type chtype, at the
                * current or specified position in the current or specified window.
                */
                /*
                * Upon successful completion, the functions return the specified character and
                * rendition.
                */
                REQ("inch.01;inch.02.01;mvinch.01;mvinch.02.01;mvwinch.01;mvwinch.02.01;winch.01;winch.02.01", "Character shall be valid",
                    equals_ChTypeT(curChar, inch_spec));
            }
        }
        else
        {
            /*
            * Otherwise, they return (chtype)ERR.
            */
            REQ("inch.02.02;mvinch.02.02;mvwinch.02.02;winch.02.02", "Function shall return ERR", inch_spec.letter==SUT_ERR);
        }

        return true;
    }
    FILTER_CLEAN;
}

void onInch(CallContext context, WindowTPtr* win, NCursesPosition* pos, ChTypeT inch_spec)
{
    NCursesWindow* curWnd = getWindowMayNULL(context, win);

    if (inch_spec.letter != SUT_ERR)
    {
        if (pos!=NULL)
        {
            curWnd->cursorPos->x = pos->x;
            curWnd->cursorPos->y = pos->y;
        }
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
