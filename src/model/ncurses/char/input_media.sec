/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "ncurses/char/input_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initNcursesCharInputSubsystem(void)
{
  // Set up mediators
    set_mediator_inch_spec(inch_media);
}




/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** inch_spec **/
//This mediator refers to: mvwinch, winch, mvinch, inch
mediator inch_media for specification
ChTypeT inch_spec(CallContext context, WindowTPtr* win, NCursesPosition* pos)
{
    call
    {
        TSCommand command = create_TSCommand();
        ChTypeT res;
        
        if (win!=NULL)
        {
            if (pos!=NULL)
            {
                format_TSCommand( &command, "mvwinch:$(ptr)$(int)$(int)", create_VoidTPtrObj(*win), create_IntTObj(pos->y), create_IntTObj(pos->x));
            }
            else
            {
                format_TSCommand( &command, "winch:$(ptr)", create_VoidTPtrObj(*win));
            }
        }
        else
        {
            if (pos!=NULL)
            {
                format_TSCommand( &command, "mvinch:$(int)$(int)", create_IntTObj(pos->y), create_IntTObj(pos->x));
            }
            else
            {
                format_TSCommand( &command, "inch");
            }
        }
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readChTypeT_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onInch(context, win, pos, inch_spec);
    }
}


