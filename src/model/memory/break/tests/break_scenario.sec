/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/process/process_model.seh"

#include "memory/break/break_media.seh"
#include "memory/break/tests/break_scenario.seh"

static CallContext context;
static VoidTPtr pstart;

static IntPtrT TestVals[] =     { 0, 16,  0, 256, 1024, -578, -1666,    0, 1026 };
static IntPtrT TestVals2[] =    { 0,  2, 32, -32,   12,  634,     0, 4096,    0 };
static IntT TestValsNum = sizeof(TestVals)/sizeof(TestVals[0]);

/********************************************************************/
/**                       Test Scenario Functions                  **/
/********************************************************************/
static bool init_scen(int argc, char* argv[])
{
    // Init test scenario data
    context = getContext();

    pstart = sbrk_spec(context, 0, requestErrorCode());

    return true;
}

static void finish_scen(void)
{
}

scenario
static bool sbrk_scen(void)
{
    iterate(int i = 0; i < TestValsNum; i++; )
    {
        sbrk_spec(context, TestVals[i], requestErrorCode());
        brk_spec(context, add_VoidTPtr(pstart, TestVals2[i]), requestErrorCode());
    }
    
    return true;
}

/********************************************************************/
/**                   Test Scenario Definition                     **/
/********************************************************************/
scenario dfsm break_scenario =
{
    .init = init_scen
,   .finish = finish_scen
,   .actions = {
        sbrk_scen,
        NULL
    }
};

#ifdef MEMORY_BREAK_LOCAL_MAIN

#include "common/control_center.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initMemoryBreakSubsystem();
}

/********************************************************************/
/**                     Local Main Function                        **/
/********************************************************************/

int main(int argc, char* argv[])
{
    initTestSystem();
    loadSUT();

    break_scenario(argc, argv);

    return 0;
}

#endif
