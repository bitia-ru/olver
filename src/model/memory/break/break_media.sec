/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "memory/break/break_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMemoryBreakSubsystem(void)
{
    // Set up mediators
    set_mediator_brk_spec(brk_media);
    set_mediator_sbrk_spec(sbrk_media);
}

/********************************************************************/
/**                        Helper Functions                        **/
/********************************************************************/

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** brk_spec **/

mediator brk_media for specification
IntT brk_spec(CallContext context, VoidTPtr addr, ErrorCode* errno)
{
    call
    {
        IntPtrT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "brk:$(ptr)", create_VoidTPtrObj(addr));
        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onBrk(context, addr, brk_spec, errno);
    }
}


/** sbrk_spec **/

mediator sbrk_media for specification
VoidTPtr sbrk_spec(CallContext context, IntPtrT incr, ErrorCode* errno)
{
    call
    {
        VoidTPtr res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "sbrk:$(int)", create_IntTObj(incr));
        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onSBrk(context, incr, sbrk_spec, errno);
    }
}
