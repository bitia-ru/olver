/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef MEMORY_BREAK_MODEL_SEH
#define MEMORY_BREAK_MODEL_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                          Model State                           **/
/********************************************************************/

specification typedef
struct MemBrkState
{
    VoidTPtr StartPtr;
    VoidTPtr CurPtr;
    VoidTPtr MaxPtr;
} MemBrkState;

Object* create_MemBrkStateDefault(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** brk_spec **/
specification
IntT brk_spec(CallContext context, VoidTPtr addr, ErrorCode* errno);

void onBrk(CallContext context, VoidTPtr addr, IntT res, ErrorCode* errno);

/** sbrk_spec **/
specification
VoidTPtr sbrk_spec(CallContext context, IntPtrT incr, ErrorCode* errno);

void onSBrk(CallContext context, IntPtrT incr, VoidTPtr res, ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
MemBrkState* getMemoryBreakState(CallContext context);
VoidTPtr getCurrentBreakValue(CallContext context);
VoidTPtr getMaximumBreakValue(CallContext context);
void setCurrentBreakValue(CallContext context, VoidTPtr NewPtr);
void initBreakState(CallContext context, VoidTPtr Ptr);
bool isInitBreakState(CallContext context);
bool isBreakAllowed(CallContext context);

#endif

