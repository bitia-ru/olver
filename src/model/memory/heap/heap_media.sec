/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "memory/heap/heap_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMemoryHeapSubsystem(void)
{
    // Set up mediators
    set_mediator_calloc_spec(calloc_media);
    set_mediator_free_spec(free_media);
    set_mediator_malloc_spec(malloc_media);
    set_mediator_posix_memalign_spec(posix_memalign_media);
    set_mediator_realloc_spec(realloc_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** calloc_spec **/
mediator calloc_media for specification
VoidTPtr calloc_spec(CallContext context, SizeT nelem, SizeT elsize, ErrorCode* errno)
{
    call
    {
        VoidTPtr res = NULL_VoidTPtr;

        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "calloc:$(size)$(size)",
                                     create_SizeTObj(nelem),
                                     create_SizeTObj(elsize)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onCalloc(context, nelem, elsize, calloc_spec);        
    }
}

/** free_spec **/
mediator free_media for specification
void free_spec(CallContext context, VoidTPtr ptr)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "free:$(ptr)",
                                     create_VoidTPtrObj(ptr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return;
    }
    state
    {
        onFree(context, ptr);
    }
}


/** malloc_spec **/
mediator malloc_media for specification
VoidTPtr malloc_spec(CallContext context, SizeT size, ErrorCode* errno)
{
    call
    {
        VoidTPtr res = NULL_VoidTPtr;

        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "malloc:$(size)",
                                     create_SizeTObj(size)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onMalloc(context, size, malloc_spec);
    }
}

/** posix_memalign_spec **/
mediator posix_memalign_media for specification
VoidTPtr posix_memalign_spec(CallContext context, SizeT alignment, SizeT size, ErrorCode* errno)
{
    call
    {
        VoidTPtr res = NULL_VoidTPtr;

        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "posix_memalign:$(size)$(size)",
                                     create_SizeTObj(alignment),
                                     create_SizeTObj(size)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPosixMemalign(context, size, posix_memalign_spec);
    }
}

/** realloc_spec **/
mediator realloc_media for specification
VoidTPtr realloc_spec(CallContext context, VoidTPtr ptr, SizeT size, ErrorCode* errno)
{
    call
    {
        VoidTPtr res = NULL_VoidTPtr;

        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "realloc:$(ptr)$(size)",
                                     create_VoidTPtrObj(ptr),
                                     create_SizeTObj(size)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onRealloc(context, ptr, size, realloc_spec, errno);
    }
}
