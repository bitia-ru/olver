/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "memory/heap/tests/heap_scenario.seh"
#include "memory/heap/heap_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/process/process_model.seh"
#include "atl/integer.h"
#include <atl/long.h>
#include <limits.h>


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
#define DEFAULT_MAX ULONG_MAX
//#define DEFAULT_MAX 2124096


static unsigned long max_elsize = DEFAULT_MAX;
static unsigned long max_nelem  = DEFAULT_MAX;
static unsigned long max_size   = DEFAULT_MAX;

unsigned long max_number_of_heap_blocks = 10;


/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

static size_t elsize_step  = 1;
static size_t nelem_step   = 1;
static size_t size_step    = 1;

static size_t size1_step = 1;
static size_t size2_step = 1;

static size_t size0_step = 1;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
bool init_memory_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();

    // Init iterable variables
    elsize_step  = 1;
    nelem_step   = 1;
    size_step    = 1;

    size1_step = 1;
    size2_step = 1;

    size0_step = 1;

    return true;
}

void finish_memory_scenario(void)
{
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/
Object* get_memory_scenario_state(void)
{
    return create_ULong( getNumberOfHeapBlocks(context) );
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario 
bool calloc_memory_scen()
{
    iterate(size_t nelem = 0; nelem < max_nelem; nelem += nelem_step, elsize_step=1, nelem_step = (nelem_step!=0)?2*nelem_step:1; )
     {
        iterate(size_t size = 0; size < max_elsize; size += elsize_step, elsize_step=(elsize_step!=0)?2*elsize_step:1; )
         {
            calloc_spec( context, nelem, size, requestErrorCode() );
         }
     }
    return true;
}

scenario 
bool malloc_memory_scen()
{
    iterate(size_t size = 0; size < max_size; size += size_step, size_step=(size_step!=0)?2*size_step:1; )
     {
        malloc_spec( context, size, requestErrorCode() );
     }
    return true;
}


scenario 
bool realloc_memory_scen()
{
    iterate(size_t size1 = 0; size1 < max_size; size1 += size1_step, size2_step=1, size1_step=(size1_step!=0)?2*size1_step:1; )
     {
        iterate(size_t size2 = 0; size2 < max_size; size2 += size2_step, size2_step=(size2_step!=0)?2*size2_step:1; )
         {
            VoidTPtr ptr = malloc_spec( context, size1, requestErrorCode() );
            realloc_spec( context, ptr, size2, requestErrorCode() );
         }
     }
    return true;
}

scenario 
bool realloc_null_memory_scen()
{
    iterate(size_t size = 0; size < max_size; size += size0_step, size0_step=(size0_step!=0)?2*size0_step:1; )
     {
        realloc_spec( context, NULL_VoidTPtr, size, requestErrorCode() );
     }
    return true;
}

scenario 
bool free_memory_scen()
{
ProcessState* processState;
int size;

    processState = getProcessState_CallContext(context);
    size = size_List(processState->memory_blocks);
    iterate( int i = size-1; i >= 0; i--; )
     {
        MemoryBlock* mb = get_List(processState->memory_blocks,i);
        free_spec( context, mb->address );
     }
    return true;
}

scenario 
bool free_null_memory_scen()
{
    free_spec( context, NULL_VoidTPtr );
    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm memory_scenario =
{
  .init = init_memory_scenario,
  .finish = finish_memory_scenario,
//  .getState = get_memory_scenario_state,
  .actions = {
      calloc_memory_scen,
      free_memory_scen,
      malloc_memory_scen,
      realloc_memory_scen,
      realloc_null_memory_scen,
      free_null_memory_scen,
      NULL
  }
};
