/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef MEMORY_MMAN_MEDIA_SEH
#define MEMORY_MMAN_MEDIA_SEH

#include "memory/mman/mman_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initMemoryMmanSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** mlock_spec **/
mediator mlock_media for specification
IntT mlock_spec(CallContext context, VoidTPtr addr, SizeT len, ErrorCode* errno);

/** mlockall_spec **/
mediator mlockall_media for specification
IntT mlockall_spec(CallContext context, MLockallFlags flags, ErrorCode* errno);

/** mmap_spec **/
mediator mmap_media for 
specification
VoidTPtr mmap_spec(CallContext context, VoidTPtr addr, SizeT len, MmanProtFlags prot, 
                   MmapFlags flags, FileDescId fildes, OffT off, bool is64bits, ErrorCode* errno);

/** mprotect_spec **/
mediator mprotect_media for specification
IntT mprotect_spec(CallContext context, VoidTPtr addr, SizeT len, 
                   MmanProtFlags prot, ErrorCode* errno);
 
/** msync_spec **/
mediator msync_media for specification
void msync_spec( CallContext context, VoidTPtr addr, SizeT len, MsyncFlags flags, ErrorCode* errno);

mediator msync_react_media for 
reaction MsyncReactionType* msync_react(void);

/** munlock_spec **/
mediator munlock_media for specification
IntT munlock_spec(CallContext context, VoidTPtr addr, SizeT len, ErrorCode* errno);

/** munlockall_spec **/
mediator munlockall_media for specification
IntT munlockall_spec( CallContext context);

/** munmap_spec **/
mediator munmap_media for specification
IntT munmap_spec( CallContext context, VoidTPtr addr, SizeT len, ErrorCode* errno);

/** shm_open_spec **/
mediator shm_open_media for specification
FileDescId shm_open_spec( CallContext context, CString* name, Shm_openOflags oflag, FilePermissions* mode, ErrorCode* errno);

/** shm_unlink_spec **/
mediator shm_unlink_media for specification
IntT shm_unlink_spec( CallContext context, CString* name, ErrorCode* errno);

/** write_memory_block **/
mediator write_mapped_mem_block_media for specification 
void write_mapped_mem_block_spec(CallContext context, VoidTPtr addr, SizeT len, MappedMemoryBlock* mb, ErrorCode* errno);

/** read_memory_blocks_spec **/
mediator read_mapped_mem_block_media for specification
MappedMemoryBlock* read_mapped_mem_block_spec(CallContext context, VoidTPtr addr, SizeT len, ErrorCode* errno);

#endif

