/* 
 * File: memory/mman/tests/mman_errors_scenario.sec
 * 
 * Author:
 * Version:  $Id: mman_errors_scenario.sec,v 1.10 2007/07/25 09:25:03 egor Exp $
 * 
 * Copyright (c) 2005 ISP RAS.
 * 25, B.Communisticheskaya, Moscow, Russia.
 * All rights reserved.
 */

#include "memory/mman/tests/mman_scenario.seh"
#include "memory/mman/mman_model.seh"
#include "memory/mman/mman_media.seh"
#include "memory/mman/tests/mman_main.seh"
#include "common/common_scenario.seh"
#include "fs/meta/meta_model.seh"
#include "fs/fs/fs_model.seh"
 
// context of process
static CallContext context_pr1;

/*
 * parameters of good maps for file and shm object and of testing map 
 * (addr - returned addr)
 */
static VoidTPtr file_addr;
static VoidTPtr test_addr;
static VoidTPtr shm_addr;
static SizeT file_size;
static SizeT test_size;
static SizeT shm_size;
static OffT file_off;
static OffT test_off;
static OffT shm_off;
static MmanProtFlags file_prot;
static MmanProtFlags test_prot;
static MmanProtFlags shm_prot;

// names and descriptors of testing file and shared memory object 
static CString* filename;
static CString* shared_object_name;
static FileDescId shared_desc_id; 
static FileDescId file_desc_id; 

// permissions for file and shm_object when open
static FilePermissions* file_mode;
static FilePermissions* shm_mode;
static FilePermissions* test_mode;

static Shm_openOflags shm_oflags;

// size of page for process with context context_pr1
static LongT pagesize;

static bool init_memory_mman_errors_scenario(int argc, char** argv)
{
    ProcessId pid;
    VoidTPtr temp_addr;

    FilePermission* full_control1;
    FilePermission* full_control2;
    FilePermission* full_control3;
    ErrorCode* errno;
    
    MmapFlags flags; //flags for map shm object and file

    ProcessState* prSt;

    initReqFilters();
    setFinishMode(UNTIL_END); 

    errno = requestErrorCode();
    //init global variables context_pr1 and pagesize
    context_pr1 = getContext(); 
    prSt = getProcessState_CallContext(context_pr1);
    put_Map(prSt->sysconf, create_IntTObj(SUT_SC_XOPEN_UNIX), create_LongTObj(1));
    pagesize = sysconf_spec( context_pr1, SUT_SC_PAGE_SIZE, requestErrorCode() );
    if ( pagesize == -1) 
    {
      return false;
    }
    else 
    {
        setSystemConfigurationValue( context_pr1, SUT_SC_PAGE_SIZE, pagesize);
    }
    pagesize = getSystemConfigurationValue(context_pr1, SUT_SC_PAGE_SIZE);
    //verbose("page_size %d \n", pagesize);

    //init temp variables
    pid = getProcessId_CallContext(context_pr1);
    temp_addr.address = (sut_ptr_t) 0;
    temp_addr.process = pid.process;
    temp_addr.system = pid.system;
    
    full_control1 = create_FilePermission(true, true, true);
    full_control2 = create_FilePermission(true, true, true);
    full_control3 = create_FilePermission(true, true, true);

    flags.MAP_FIXED_Flag = false;
    flags.MAP_PRIVATE_Flag = false;
    flags.MAP_SHARED_Flag = true;

    //init global variables file_* and shm_*
    //init of protection flags
    file_prot.PROT_EXEC_Flag = false;
    file_prot.PROT_NONE_Flag = false;
    file_prot.PROT_READ_Flag = true;
    file_prot.PROT_WRITE_Flag = true;
    shm_prot = file_prot;
    
    //init size
    file_size = (SizeT) pagesize * 4;
    shm_size = file_size;
    //verbose("shm_size %d\n", shm_size);

    //init offset
    file_off = (OffT) 0;
    shm_off = file_off;

    //init mode
    file_mode = create_FilePermissions(full_control1, full_control2, full_control3,
                                        False_Bool3, False_Bool3, False_Bool3);
    shm_mode = create_FilePermissions(full_control1, full_control2, full_control3,
                                       False_Bool3, False_Bool3, False_Bool3);
    
    //init names of files
    filename = create_CString("/filename");
    shared_object_name = create_CString("/shared_object1");

    //init flags for shm_open
    shm_oflags.O_CREAT_Flag = true;
    shm_oflags.O_EXCL_Flag = false;
    shm_oflags.O_RDONLY_Flag = false;
    shm_oflags.O_RDWR_Flag = true;
    shm_oflags.O_TRUNC_Flag = false;
    
    //create shm object and base map for it
    shared_desc_id = shm_open_spec(context_pr1, shared_object_name, shm_oflags, 
                                   shm_mode, requestErrorCode());
    if (shared_desc_id.filedesc == -1)
    {
        traceUserInfo("Can't create basic shared memory object");
        return false;
    }
    
    shm_addr = mmap_spec(context_pr1, temp_addr, shm_size, shm_prot, flags, 
                         shared_desc_id, shm_off, false, errno);
    if (isInvalid_VoidTPtr(shm_addr))
    {
        traceUserInfo("Can't create basic map to shared memory object");
        return false;
    }

    return true;
}

static void finish_memory_mman_errors_scenario(void)
{
    munmap_spec(context_pr1, shm_addr, shm_size, requestErrorCode());
    shm_unlink_spec(context_pr1, shared_object_name, requestErrorCode());
    TEST_SCENARIO_VERDICT_VERBOSE(memory_mman_errors_scenario);
    return;
}

scenario bool mlock_errors_scen()
{
    test_addr = shm_addr;
    test_addr.address += pagesize;
    test_size = pagesize;

    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    mlock_spec(context_pr1, test_addr, test_size, requestErrorCode());
    test_addr = shm_addr;
    test_addr.address += pagesize;
    return true;
}

scenario bool mlockall_errors_scen()
{
    MLockallFlags flags;
    flags.MCL_CURRENT_Flag = true;
    flags.MCL_FUTURE_Flag = true;
    
    flags.MCL_CURRENT_Flag = false;
    flags.MCL_FUTURE_Flag = false;
    mlockall_spec(context_pr1, flags, requestErrorCode());
    flags.MCL_CURRENT_Flag = true;
    flags.MCL_FUTURE_Flag = true;
    
    return true;
}

scenario bool mmap_errors_scen()
{
    VoidTPtr mmap_res;
    MmapFlags flags;

    flags.MAP_FIXED_Flag = true;
    flags.MAP_PRIVATE_Flag = false;
    flags.MAP_SHARED_Flag = true;

    test_addr = shm_addr;
    test_addr.address += pagesize;
    test_size = pagesize;
    test_prot = shm_prot;
    test_off = shm_off;
    
    //len = 0
    test_size = (SizeT)0;
    mmap_res = mmap_spec(context_pr1, test_addr, test_size, test_prot, flags,
                         shared_desc_id, test_off, false, requestErrorCode());
    test_size = shm_size;

    test_off = pagesize / 2;
    mmap_res = mmap_spec(context_pr1, test_addr, test_size, test_prot, flags,
                         shared_desc_id, test_off, false, requestErrorCode());
    test_off = pagesize;
    
    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    mmap_res = mmap_spec(context_pr1, test_addr, test_size, test_prot, flags,
                         shared_desc_id, test_off, true, requestErrorCode());
    test_addr = shm_addr;
    test_addr.address += pagesize;
    
    flags.MAP_PRIVATE_Flag = true;
    mmap_res = mmap_spec(context_pr1, test_addr, test_size, test_prot, flags,
                         shared_desc_id, test_off, true, requestErrorCode());
    flags.MAP_PRIVATE_Flag = false;
    
    flags.MAP_SHARED_Flag =  false;
    mmap_res = mmap_spec(context_pr1, test_addr, test_size, test_prot, flags,
                         shared_desc_id, test_off, false, requestErrorCode());
    flags.MAP_SHARED_Flag = true;


    return true;
}



scenario bool mprotect_errors_scen()
{
    MmanProtFlags prot;

    prot.PROT_EXEC_Flag = false;
    prot.PROT_NONE_Flag = false;
    prot.PROT_READ_Flag = true;
    prot.PROT_WRITE_Flag = true;

    test_addr = shm_addr;
    test_addr.address += pagesize;
    test_size = pagesize;

    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    mprotect_spec(context_pr1, test_addr, test_size, prot, requestErrorCode());
    test_addr = shm_addr;
    test_addr.address += pagesize;

    prot.PROT_NONE_Flag = true;
    mprotect_spec(context_pr1, test_addr, test_size, prot, requestErrorCode());
    prot.PROT_NONE_Flag = false;

    return true;
}

scenario bool msync_errors_scen()
{
    MsyncFlags flags;
    flags.MS_ASYNC_Flag = false;
    flags.MS_INVALIDATE_Flag = false;
    flags.MS_SYNC_Flag = true;

    test_addr = shm_addr;
    test_size = shm_size;
    
    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    test_size = pagesize;
    msync_spec(context_pr1, test_addr, test_size, flags, requestErrorCode());
    test_size = shm_size;
    test_addr = shm_addr;

    return true;
}

scenario bool munlock_errors_scen()
{
    test_addr = shm_addr;
    test_addr.address += pagesize;
    test_size = pagesize;

    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    munlock_spec(context_pr1, test_addr, test_size, requestErrorCode());
    test_addr = shm_addr;
    test_addr.address += pagesize;
    return true;
}


scenario bool munmap_errors_scen()
{
    test_addr = shm_addr;
    test_addr.address += pagesize;
    test_size = pagesize;

    test_size = 0;
    munmap_spec(context_pr1, test_addr, test_size, requestErrorCode());
    test_size = pagesize;

    test_addr = shm_addr;
    test_addr.address += pagesize/2;
    munmap_spec(context_pr1, test_addr, test_size, requestErrorCode());
    test_addr = shm_addr;
    test_addr.address += pagesize;

    return true;
}

scenario bool shm_open_errors_scen()
{
    Shm_openOflags oflag;
    CString* new_obj;

    test_mode = shm_mode;
    oflag.O_CREAT_Flag = true;
    oflag.O_EXCL_Flag = false;
    oflag.O_RDONLY_Flag = false;
    oflag.O_RDWR_Flag = true;
    oflag.O_TRUNC_Flag = false;
    
    oflag.O_CREAT_Flag = false;
    new_obj = create_CString("/not_existing_shared_obj");
    shm_open_spec(context_pr1, new_obj, oflag, test_mode, requestErrorCode());
    oflag.O_CREAT_Flag = true;
    return true;
}

scenario bool shm_unlink_errors_scen()
{
    CString* obj_name;
    obj_name = create_CString("/not_existing_shared_object");
    shm_unlink_spec(context_pr1, obj_name,requestErrorCode());
    return true;
}

scenario bool read_write_errors_scen()
{
    CByteArray* data;
    MappedMemoryBlock* mb;
    MappedMemoryBlock* res_read;
    String* value;
    SizeT len;
    
    value = create_String("1234567890abcdefghi");
    len = length_String(value);
    data = create_CByteArray( (ByteT*)toCharArray_String(value), len + 1 );
    mb = create_MappedMemoryBlock((OffT)0, len, data);

    write_mapped_mem_block_spec(context_pr1, shm_addr, len, mb, requestErrorCode());

    res_read = read_mapped_mem_block_spec(context_pr1, shm_addr, 3 ,requestErrorCode());

    //verbose("eq %d\n", equals(mb, res_read));

    return true;
}

scenario dfsm memory_mman_errors_scenario = //TODO shm_open agent also call ftruncate so need to change
{
    .init = init_memory_mman_errors_scenario,
    .finish = finish_memory_mman_errors_scenario,
    .actions = {
        read_write_errors_scen,
        mmap_errors_scen,
        mlock_errors_scen,
        mlockall_errors_scen,
        mprotect_errors_scen,
        msync_errors_scen,
        munlock_errors_scen,
        munmap_errors_scen,
        shm_open_errors_scen,
        shm_unlink_errors_scen,
        NULL
    }
};
