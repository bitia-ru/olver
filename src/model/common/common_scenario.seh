/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef COMMON_SCENARIO_SEH
#define COMMON_SCENARIO_SEH

#include "common/common_model.seh"
#include "fs/fs/fs_model.seh"


/*
 *  This number determines the time in millisecond that is likely enough to 
 *  start serialization. It is commonly used as a parameter to 
 *  setWTimeMSec(time_t millisecs) in initialized scenario functions.
 */
#define SERIALIZATION_TIME 20

/*
 * This is defined just for not being confused with many zeros.
 */
#define MILLIARD 1000000000


/*
 * TEST_SCENARIO_VERDICT_VERBOSE puts test scenario verdict to verbose stream.
 */
#define TEST_SCENARIO_VERDICT_VERBOSE(name) \
  if (testVerdict == TD_ok) \
   { \
    VERBOSE( #name " PASSED\n"  ); \
   } \
  else \
   { \
    VERBOSE( #name " FAILED\n"  ); \
   } 


/********************************************************************/
/**                 Common Scenario Initialization                 **/
/********************************************************************/
void initCommonScenarioState(void);


/********************************************************************/
/**                           Model Errno                         **/
/********************************************************************/
extern ErrorCode* errno_model;
ErrorCode* requestErrorCode(void);


/********************************************************************/
/**                     Common Cancellation Status                 **/
/********************************************************************/
CancelStatus cancel_status;


/********************************************************************/
/**           Common Scenario Initialization Functions             **/
/********************************************************************/

#define INIT_SCENARIO_ACTION( action ) \
    if (!(action)) \
     {\
        traceExceptionInfo( #action " failed" ); \
        return false; \
     }

/* 
 * Different systems has different ways to make context appropriate privileges.
 * The test suite have to be configured to use the right way.
 *
 * The default POSIX way is setup in process.meta.user.
 */
typedef bool (*MakeSureProcessHasAppropriatePrivileges)(CallContext context);

void setupMakeSureProcessHasAppropriatePrivileges( MakeSureProcessHasAppropriatePrivileges function );

/* 
 * Makes sure the context has appropriate privileges.
 * Returns true on success.
 */
bool makeSureProcessHasAppropriatePrivileges(CallContext context);


/* 
 * Update the current working directory of the process.
 * Returns true on success.
 */
bool updateProcessWorkDirectory(CallContext context);


/********************************************************************/
/**                           Call Contexts                        **/
/********************************************************************/

/* 
 * Returns a context available at the moment from the process given.
 */
CallContext getSystemContext( SystemId system, PidT pid );

/* 
 * Returns a context available at the moment.
 */
CallContext getContext(void);

/* 
 * Writes num contexts available at the moment to the array pointed to 
 * by res. Returns true if success and false if there are no num available
 * contexts.
 */
bool getContexts( int num, CallContext* res );

/* 
 * Returns the number of contexts available at the moment.
 */
int getNumberOfContexts(void);

/* 
 * Returns the number of processes containing a context available at the moment.
 */
int getNumberOfProcessContexts(void);

/* 
 * Returns true iff the thread is blocked.
 */
bool isThreadBlocked( ThreadId threadid );


/********************************************************************/
/**                         Virtual Pointers                       **/
/********************************************************************/
VoidTPtr generateVirtualPointer( CallContext context );
VoidTPtr createVirtualPointer( CallContext context, sut_ptr_t virtual_address );


/********************************************************************/
/**                            CByteArray                          **/
/********************************************************************/
CByteArray* generateCByteArray(int size);


/********************************************************************/
/**                            File System                         **/
/********************************************************************/

/*
 * Returns path of the directory, which is the default sandbox for 
 * the test suite within file system.
 */
CString* getTestDirectoryPath(void);

/*
 * Returns a string representing result of concatenation of 
 * getTestDirectoryPath() and relPath.
 */
CString* getRelativeTestPath( CString* relPath );
CString* getRelativeTestPathCh( const char* relPath );

/*
 * Returns path of the directory for test data.
 */
CString* getTestDataPath(void);

/*
 * Returns a string representing result of concatenation of 
 * getTestDataPath() and relPath.
 */
CString* getRelativeTestDataPath( CString* relPath );
CString* getRelativeTestDataPathCh( const char* relPath );

/*
 * Creates text file in the file system for use in test scenarios 
 * and updates the model accordingly. 
 *
 * Returns true on success.
 */
bool createTestFile(CallContext context, CString *path, CString *contents);


/********************************************************************/
/**                     Sandbox Directory Processing               **/
/********************************************************************/
/* 
 * Prepare test scenario sandbox directory.
 * Returns true on success.
 */
bool createTestScenarioSandboxDir(CallContext context);

/* 
 * Remove test scenario sandbox directory.
 * Returns true on success.
 */
bool removeTestScenarioSandboxDir(CallContext context);

/*
 * Returns a string representing result of concatenation of 
 * test scenario sandbox directory and relPath.
 */
CString* getTestScenarioSandboxPath( CString* relPath );
CString* getTestScenarioSandboxPathCh( const char* relPath );

/* 
 * Makes a file name in scenario sandbox diractory.
 */
#define SANDBOX_FILE(path) getTestScenarioSandboxPathCh( path )


#endif

