/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef COMMON_MEDIA_SEH
#define COMMON_MEDIA_SEH

#include "atl/map.h"
#include "atl/list.h"
#include "common/ts_socket.h"
#include "common/common_model.seh"


/********************************************************************/
/**                   Common Media Initialization                  **/
/********************************************************************/
void initCommonMedia(void);


/********************************************************************/
/**                            Formatter                           **/
/********************************************************************/
typedef void (*TSFormatterFuncType)(TSStream* stream,Object* obj);

void registerTSFormatter(const char* name,TSFormatterFuncType formatter);
TSFormatterFuncType findTSFormatter(const char* name);

void wstring_formatter(TSStream* stream, Object* wstr);

/********************************************************************/
/**                       Deferred Reactions                       **/
/********************************************************************/
typedef void (*DRProcessorFuncType)(ThreadId threadId,TSStream* stream,TSMetaData* meta);

void registerDRProcessor(const char* name,DRProcessorFuncType processor);

ChannelID getThreadChannelID(ThreadId threadId);
bool registerDeferredReactions(void* dummy);
bool processDeferredReactionMessage(ThreadId threadId,TSBuffer* message,TSMetaData* meta);


/********************************************************************/
/**                  Deferred Accept of Test Agent                 **/
/********************************************************************/
void deferredAcceptTestAgent(void);


/********************************************************************/
/**                      Test Agent Descriptor                     **/
/********************************************************************/
specification 
typedef struct TestAgentDesc
{
  TSSocket socket;
  ThreadId threadid;
} TestAgentDesc;

TestAgentDesc* create_TestAgentDesc(TSSocket socket,ThreadId threadid);

ThreadId registerTestAgent( TSSocket socket, TSBuffer* desc );
void unregisterTestAgent( TestAgentDesc* agent );


/********************************************************************/
/**                     Test Agent Response                        **/
/********************************************************************/
ConnectionStatus receiveTAResponse(TestAgentDesc* agent,TSBuffer* message,TSMetaData* meta);


/********************************************************************/
/**                       TSCommand Execution                      **/
/********************************************************************/
bool executeCommandInContext( CallContext context, TSCommand* command );


/********************************************************************/
/**                          Auxiliary Commands                    **/
/********************************************************************/
void destroyFolder(CallContext context, CString *path);
ThreadId createProcess(void);
ThreadId forkProcess(CallContext context);
ThreadId createThread(void);
ThreadId createThreadInContext(CallContext context);
void terminateProcess(CallContext context);
void agentLog(CallContext context, CString* message);

VoidTPtr allocateMemoryBlock(CallContext context,SizeT size);
void deallocateMemoryBlock(CallContext context,VoidTPtr ptr);

SizeT getSizeOfType(CallContext context,const char* type);


/********************************************************************/
/**                            Time Delay                          **/
/********************************************************************/

#endif

