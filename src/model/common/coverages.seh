/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef COVERAGES_SEH
#define COVERAGES_SEH

#include "common/cstring.seh"
#include "common/coveragesTypes.h"
#include "io/fstream/fstream_model.seh"

/********************************************************************/
/**                       pointer coverages                        **/
/********************************************************************/

extern coverage CoverageForPointer( VoidTPtr p ) = { NullPointer    = "Pointer equal to NULL"    ,
                                                     NotNullPointer = "Pointer not equal to NULL"
                                                   };

/********************************************************************/
/**                         file coverages                         **/
/********************************************************************/

extern coverage CoverageForFILETPtr( FILETPtr f ) = { NotNullFilePtr = "File descriptor not equal to NULL"
                                                      // locked file
                                                    };

/********************************************************************/
/**                       integer coverages                        **/
/********************************************************************/

#define CTesKError
#ifdef CTesKError
extern coverage CoverageForInteger_MinMiddleMax( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                { Anythere = "anythere" };

extern coverage CoverageForInteger_Min( LongLong i, LongLong minI, LongLong maxI ) =
                { Anythere = "anythere" };

extern coverage CoverageForInteger_Middle( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                { Anythere = "anythere" };
#else
/*
 * CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, tryToReachMinI, radMinI,
 *                                               maxI, tryToReachMaxI, radMaxI,
 *                                               true, middle1, radMiddle1,
 *                                               ...
 *                                               true, middleN, radMiddleN,
 *                                               false
 *                                          )
 * 0 <= N <= 7
 * rad >= 0
 */
extern coverage CoverageForInteger_GeneralMinMaxMiddleRad( LongLong i,
                                                           LongLong minI, bool tryToReachMinI, LongLong radMinI,
                                                           LongLong maxI, bool tryToReachMaxI, LongLong radMaxI,
                                                           ...
                ) = {
    // minI    , ( minI, minI + radMinI ]       , [ minI, minI + radMinI ]
    Min = "min", NearAfterMin = "near after min", NearOrMin = "near or min",
    // maxI    , [ maxI - radMinI, maxI )         , [ maxI - radMinI, maxI ]
    Max = "max", NearBeforeMax = "near before max", NearOrMax = "near or max",
    // middle1         , [ middle1 - radMiddle1, middle1 )        , ( middle1, middle1 + radMiddle1 ]
    // ...
    // middleN         , [ middleN - radMiddleN, middleN )        , ( middleN, middleN + radMiddleN ]
    Middle1 = "middle1", NearBeforeMiddle1 = "near before middle1", NearAfterMiddle1 = "near after middle1",
    Middle2 = "middle2", NearBeforeMiddle2 = "near before middle2", NearAfterMiddle2 = "near after middle2",
    Middle3 = "middle3", NearBeforeMiddle3 = "near before middle3", NearAfterMiddle3 = "near after middle3",
    Middle4 = "middle4", NearBeforeMiddle4 = "near before middle4", NearAfterMiddle4 = "near after middle4",
    Middle5 = "middle5", NearBeforeMiddle5 = "near before middle5", NearAfterMiddle5 = "near after middle5",
    Middle6 = "middle6", NearBeforeMiddle6 = "near before middle6", NearAfterMiddle6 = "near after middle6",
    Middle7 = "middle7", NearBeforeMiddle7 = "near before middle7", NearAfterMiddle7 = "near after middle7",
    // ( minI + radMinI, middle1 - radMiddle1 ),
    BetweenMinMiddle1 = "between min and middle1",
    // ( middle1 + radMiddle1, middle2 - radMiddle2 )
    // ...
    // ( middleN-1 + radMiddleN-1, middleN - radMiddleN )
    BetweenMiddle1Middle2 = "between middle1 and middle2",
    BetweenMiddle2Middle3 = "between middle2 and middle3",
    BetweenMiddle3Middle4 = "between middle3 and middle4",
    BetweenMiddle4Middle5 = "between middle4 and middle5",
    BetweenMiddle5Middle6 = "between middle5 and middle6",
    BetweenMiddle6Middle7 = "between middle6 and middle7",
    // ( minI + radMinI, maxI - radMinI )
    BetweenMinMax = "between min and max",
    // ( middle1 + radMiddle1, maxI - radMinI )
    // ...
    // ( middleN + radMiddleN, maxI - radMinI )
    BetweenMiddle1Max = "between middle1 and max",
    BetweenMiddle2Max = "between middle2 and max",
    BetweenMiddle3Max = "between middle3 and max",
    BetweenMiddle4Max = "between middle4 and max",
    BetweenMiddle5Max = "between middle5 and max",
    BetweenMiddle6Max = "between middle6 and max",
    BetweenMiddle7Max = "between middle7 and max"
}; // CoverageForInteger_GeneralMinMaxMiddleRad

extern coverage CoverageForInteger_MinMiddleMaxRad( LongLong i, LongLong minI   , LongLong radMinI   ,
                                                                LongLong middleI, LongLong radMiddleI,
                                                                LongLong maxI   , LongLong radMaxI
                                                  ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, radMinI, maxI, true, radMaxI,
                                                              true, middleI, radMiddleI, false
                                                         )
                : CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Min               ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMin      ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMiddle1 ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMiddle1  ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMax     ||
                  CoverageForInteger_MinMiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MiddleMaxRad( LongLong i, LongLong minI   ,
                                                             LongLong middleI, LongLong radMiddleI,
                                                             LongLong maxI   , LongLong radMaxI
                                               ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, true, radMaxI,
                                                              true, middleI, radMiddleI, false
                                                         )
                : CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMiddle1 ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMiddle1  ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMax     ||
                  CoverageForInteger_MiddleMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MinMiddleRad( LongLong i, LongLong minI   , LongLong radMinI   ,
                                                             LongLong middleI, LongLong radMiddleI,
                                                             LongLong maxI
                                               ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, radMinI, maxI, false, 0,
                                                              true, middleI, radMiddleI, false
                                                         )
                : CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.Min               ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMin      ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMiddle1 ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMiddle1  ||
                  CoverageForInteger_MinMiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max;

extern coverage CoverageForInteger_MiddleRad( LongLong i, LongLong minI   ,
                                                          LongLong middleI, LongLong radMiddleI,
                                                          LongLong maxI
                                            ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, false, 0,
                                                              true, middleI, radMiddleI, false
                                                         )
                : CoverageForInteger_MiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMiddle1 ||
                  CoverageForInteger_MiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMiddle1  ||
                  CoverageForInteger_MiddleRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max;

extern coverage CoverageForInteger_MinMiddleMax( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, 0, maxI, true, 0, true, middleI, 0, false )
                : CoverageForInteger_MinMiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.Min               ||
                  CoverageForInteger_MinMiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MinMiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MinMiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max ||
                  CoverageForInteger_MinMiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MiddleMax( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, true, 0, true, middleI, 0, false )
                : CoverageForInteger_MiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max ||
                  CoverageForInteger_MiddleMax == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MinMiddle( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, 0, maxI, false, 0, true, middleI, 0, false )
                : CoverageForInteger_MinMiddle == CoverageForInteger_GeneralMinMaxMiddleRad.Min               ||
                  CoverageForInteger_MinMiddle == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_MinMiddle == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_MinMiddle == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max;

extern coverage CoverageForInteger_Middle( LongLong i, LongLong minI, LongLong middleI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, false, 0, true, middleI, 0, false )
                : CoverageForInteger_Middle == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMiddle1 ||
                  CoverageForInteger_Middle == CoverageForInteger_GeneralMinMaxMiddleRad.Middle1           ||
                  CoverageForInteger_Middle == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMiddle1Max;

extern coverage CoverageForInteger_MinMaxRad
                    ( LongLong i, LongLong minI, LongLong radMinI, LongLong maxI, LongLong radMaxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, radMinI, maxI, true, radMaxI, false )
                : CoverageForInteger_MinMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Min           ||
                  CoverageForInteger_MinMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMin  ||
                  CoverageForInteger_MinMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax ||
                  CoverageForInteger_MinMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMax ||
                  CoverageForInteger_MinMaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MaxRad( LongLong i, LongLong minI, LongLong maxI, LongLong radMaxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, true, radMaxI, false )
                : CoverageForInteger_MaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax ||
                  CoverageForInteger_MaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearBeforeMax ||
                  CoverageForInteger_MaxRad == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_MinRad( LongLong i, LongLong minI, LongLong radMinI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, radMinI, maxI, false, 0, false )
                : CoverageForInteger_MinRad == CoverageForInteger_GeneralMinMaxMiddleRad.Min           ||
                  CoverageForInteger_MinRad == CoverageForInteger_GeneralMinMaxMiddleRad.NearAfterMin  ||
                  CoverageForInteger_MinRad == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax;

extern coverage CoverageForInteger_MinMax( LongLong i, LongLong minI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, 0, maxI, true, 0, false )
                : CoverageForInteger_MinMax == CoverageForInteger_GeneralMinMaxMiddleRad.Min           ||
                  CoverageForInteger_MinMax == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax ||
                  CoverageForInteger_MinMax == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_Max( LongLong i, LongLong minI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, false, 0, maxI, true, 0, false )
                : CoverageForInteger_Max == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax ||
                  CoverageForInteger_Max == CoverageForInteger_GeneralMinMaxMiddleRad.Max;

extern coverage CoverageForInteger_Min( LongLong i, LongLong minI, LongLong maxI ) =
                CoverageForInteger_GeneralMinMaxMiddleRad( i, minI, true, 0, maxI, false, 0, false )
                : CoverageForInteger_Min == CoverageForInteger_GeneralMinMaxMiddleRad.Min           ||
                  CoverageForInteger_Min == CoverageForInteger_GeneralMinMaxMiddleRad.BetweenMinMax;
#endif // CTesKError

/********************************************************************/
/**                        string coverages                        **/
/********************************************************************/

extern coverage CoverageForCString_GeneralLen( CString * cs, bool allowNull, bool allowEmpty, int smallStringLen ) = {
    NullString = "null string", EmptyString = "empty string", SmallString = "small string", LargeString = "large string"
};
extern coverage CoverageForWString_GeneralLen( WString * ws, bool allowNull, bool allowEmpty, int smallStringLen ) = {
    NullString = "null string", EmptyString = "empty string", SmallString = "small string", LargeString = "large string"
};

extern coverage CoverageForCString( CString * cs ) = CoverageForCString_GeneralLen( cs, true, true, 8 );
extern coverage CoverageForWString( WString * ws ) = CoverageForWString_GeneralLen( ws, true, true, 8 );

extern coverage CoverageForNotNullCString( CString * cs ) = CoverageForCString_GeneralLen( cs, false, true, 8 )
                : CoverageForNotNullCString != CoverageForCString_GeneralLen.NullString;
extern coverage CoverageForNotNullWString( WString * ws ) = CoverageForWString_GeneralLen( ws, false, true, 8 )
                : CoverageForNotNullWString != CoverageForWString_GeneralLen.NullString;

extern coverage CoverageForNotEmptyCString( CString * cs ) = CoverageForCString_GeneralLen( cs, false, false, 8 )
                : CoverageForNotEmptyCString != CoverageForCString_GeneralLen.NullString  &&
                  CoverageForNotEmptyCString != CoverageForCString_GeneralLen.EmptyString;
extern coverage CoverageForNotEmptyWString( WString * ws ) = CoverageForWString_GeneralLen( ws, false, false, 8 )
                : CoverageForNotEmptyWString != CoverageForWString_GeneralLen.NullString  &&
                  CoverageForNotEmptyWString != CoverageForWString_GeneralLen.EmptyString;

#endif // COVERAGES_SEH
