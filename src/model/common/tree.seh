/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef COMMON_TREE_SEH
#define COMMON_TREE_SEH

#include "atl/integer.h"
#include "atl/list.h"
#include <atl/multiset.h>


/********************************************************************/
/**                           Tree Node                            **/
/********************************************************************/
specification typedef struct TreeNode TreeNode;

struct TreeNode 
{
  TreeNode* parent;
  Object*   children; /** MultiSet or List **/
  Object*   tag;
};

TreeNode* create_TreeNode(Object* tag);
TreeNode* create_OrderedTreeNode(Object* tag);
bool isOrdered_TreeNode(TreeNode* self);
void addChild_TreeNode(TreeNode* self,TreeNode* child);
int numberOfChildren_TreeNode(TreeNode* self);
TreeNode* getChild_TreeNode(TreeNode* self,int i);
int level_TreeNode(TreeNode* self);


/********************************************************************/
/**                             Tree                               **/
/********************************************************************/
specification typedef struct Tree 
{
  TreeNode* root;
} Tree;

Tree* create_Tree(TreeNode* root);
int size_Tree(Tree* self);
int height_Tree(Tree* self);
int width_Tree(Tree* self);
TreeNode* get_Tree(Tree* tree,int i);

typedef bool (*ConditionFuncType)(Object*);
typedef int  (*CompareFuncType)(Object*,Object*);

Object* getTag_Tree(Tree* tree,int i);
Object* getConditionalTag_Tree(Tree* tree,ConditionFuncType condition,int i);


/********************************************************************/
/**                        Tree Gen State                          **/
/********************************************************************/
Integer* getHeightTreeGenState(Tree* tree);

Tree* getISOTreeGenState(Tree* tree);
Object* getTag_ISOTreeGenState(Tree* tree,int i);
Object* getConditionalTag_ISOTreeGenState(Tree* tree,ConditionFuncType condition,int i);

Object* getTag_TaggedTreeGenState(Tree* tree,int i,CompareFuncType compare);
Object* getConditionalTag_TaggedTreeGenState(Tree* tree,ConditionFuncType condition,int i,CompareFuncType compare);

MultiSet* getChildrenNumberTreeGenState(Tree* tree);
Object* getTag_ChildrenNumberTreeGenState(Tree* tree,int i);


#endif
