/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "io/pipe/pipe_config.h"
#include "fs/dir/dir_config.h"
#include "io/pipe/pipe_model.seh"
#include "common/common_model.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "fs/fs/fs_model.seh"
#include "fs/dir/dir_model.seh"
#include "fs/meta/meta_model.seh"
#include "io/file/file_model.seh"


#pragma SEC subsystem pipe "io.pipe"



/*
   The group of functions 'io.pipe' consists of:
       pipe [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    pipe - create an interprocess channel

SYNOPSIS

    #include <unistd.h>
    int pipe(int fildes[2]);

DESCRIPTION

    The pipe() function shall create a pipe and place two file descriptors, one
    each into the arguments fildes[0] and fildes[1], that refer to the open
    file descriptions for the read and write ends of the pipe. Their integer
    values shall be the two lowest available at the time of the pipe() call.
    The O_NONBLOCK and FD_CLOEXEC flags shall be clear on both file
    descriptors. (The fcntl() function can be used to set both these flags.)

    Data can be written to the file descriptor fildes[1] and read from the
    file descriptor fildes[0]. A read on the file descriptor fildes[0] shall
    access data written to the file descriptor fildes[1] on a
    first-in-first-out basis.It is unspecified whether fildes[0] is also open
    for writing and whether fildes[1] is also open for reading.

    A process has the pipe open for reading (correspondingly writing) if it has
    a file descriptor open that refers to the read end, fildes[0] (write end,
    fildes[1]).

    Upon successful completion, pipe() shall mark for update the st_atime,
    st_ctime, and st_mtime fields of the pipe.

RETURN VALUE

    Upon successful completion, 0 shall be returned;otherwise, -1 shall be
    returned and errno set to indicate the error.

ERRORS

    The pipe() function shall fail if:

    [EMFILE]
        More than {OPEN_MAX} minus two file descriptors are already in use by
        this process.

    [ENFILE]
        The number of simultaneously open files in the system would exceed a
        system-imposed limit.
*/

specification
IntT pipe_spec( CallContext context, FileDescIdObj* fd1, FileDescIdObj* fd2, ErrorCode* errno)
{
    ProcessState*   ps=getProcessState_CallContext(context);
    Map*            file_descriptors=clone(ps->file_descriptors);

    pre
    {
        /*
        * It is unspecified whether fildes[0] is also open for writing and whether fildes[1]
        * is also open for reading.
        */
        REQ("app.pipe.06", "This REQ is caused by model", true);

        return true;
    }
    coverage C
    {
        return { CreateInterprocessChannel, "Create an interprocess channel" };
    }
    post
    {
        /*
        * otherwise, -1 shall be returned and errno set to indicate the error.
        */
        ERROR_BEGIN(POSIX_PIPE, "pipe.09.02", pipe_spec==-1, *errno)

        /*
        * The pipe() function shall fail if:
        *
        * [EMFILE] More than {OPEN_MAX} minus two file descriptors are already in use
        * by this process.
        */
        ERROR_SHALL3(POSIX_PIPE, EMFILE, "pipe.10.01", isEMFILE_PIPE(context))

        /*
        * The pipe() function shall fail if:
        *
        * [ENFILE] The number of simultaneously open files in the system would exceed a
        * system-imposed limit.
        */
        ERROR_UNCHECKABLE(POSIX_PIPE, ENFILE, "pipe.10.02", "Do not know system imposed limit")

        ERROR_END()

        /*
        * Upon successful completion, 0 shall be returned;
        */
        REQ("pipe.09.01", "Function shall return zero", pipe_spec==0);

        /*
        * Their integer values shall be the two lowest available at the time of the pipe()
        * call.
        */
        REQ("pipe.02", "Descriptor shall be lowest",
            isLowestUnused_FileDescIds(file_descriptors, *fd1, *fd2));
        {
            FileDescriptor* fdesc1 = getFileDescriptor(*fd1);
            FileDescriptor* fdesc2 = getFileDescriptor(*fd2);


            /*
            * Data can be written to the file descriptor fildes[1] and read from the file
            * descriptor fildes[0].
            */
            REQ("?pipe.04", "Data can be written to the file descriptor fildes[1] and read from the file descriptor fildes[0]",
                fdesc1->description->access_mode == ReadOnly &&
                fdesc2->description->access_mode == WriteOnly);

            /*
            * The O_NONBLOCK and FD_CLOEXEC flags shall be clear on both file descriptors.
            */
            REQ("?pipe.03", "The O_NONBLOCK and FD_CLOEXEC flags shall be clear on both file descriptors",
                fdesc1->fd_cloexec == false && fdesc2->fd_cloexec == false &&
                fdesc1->description->block_mode == Blocking && fdesc2->description->block_mode == Blocking );
        }


        return true;
    }
}

void pipe_model( CallContext context, FileDescId fd1, FileDescId fd2)
{
    FileSystem*   file_system = getFileSystem(context);
    File*         file = registerFile( file_system,  NULL );
    FIFOFileDescriptor* descr = create_FIFOFileDescriptor(create_CByteArray(NULL, 0));

    if (file!=NULL)
    {
        file->descriptor=descr;
        file->kind=FIFOFile;
        file->size=create_OffTObj(0);

        /*
        * The pipe() function shall create a pipe and place two file descriptors, one
        * each into the arguments fildes[0] and fildes[1], that refer to the open file
        * descriptions for the read and write ends of the pipe.
        */
        IMPLEMENT_REQ("pipe.01");

        registerFileDescriptor( fd1, file->fileid, NULL, ReadOnly,
            Blocking, FIFOFile, false, (OffT)0, true, false, descr);

        registerFileDescriptor( fd2, file->fileid, NULL, WriteOnly,
            Blocking, FIFOFile, false, (OffT)0, true, false, descr);

        /*
        * Upon successful completion, pipe() shall mark for update the st_atime, st_ctime,
        * and st_mtime fields of the pipe.
        */
        IMPLEMENT_REQ("pipe.08");

        file->atime_updated=false;
        file->ctime_updated=false;
        file->mtime_updated=false;
    }
}

void onPipe(CallContext context, FileDescId  fd1, FileDescId fd2, IntT pipe_spec)
{
    if (pipe_spec!=-1)
    {
        pipe_model(context, fd1, fd2);
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isLowestUnused_FileDescIds(Map* file_descriptors, FileDescId  fd1,  FileDescId fd2)
{
    return true;
}


Bool3 isEMFILE_PIPE(CallContext context)
{
    LongT open_max;
    ProcessState* process;

    process = getProcessState_CallContext(context);
    assertion(process != NULL, "process is NULL");

    open_max = getSystemConfigurationValue(context, SUT_SC_OPEN_MAX);

    if(open_max == SC_VALUE_NO_LIMIT)
        return False_Bool3;

    if(open_max == SC_VALUE_UNKNOWN)
        return Unknown_Bool3;


    return size_Map(process->file_descriptors) + 3

        + (POSIX_DIR_IMPLEMENTED_VIA_FILEDESC ? size_Set(process->dir_descriptors) : 0 )

        > (SizeT)open_max - 2 ?
True_Bool3 : False_Bool3;
}
