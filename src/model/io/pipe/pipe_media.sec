/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "io/pipe/pipe_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initIoPipeSubsystem(void)
{
  // Set up mediators
    set_mediator_pipe_spec(pipe_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pipe_spec **/
mediator pipe_media for specification
IntT pipe_spec( CallContext context, FileDescIdObj* fd1, FileDescIdObj* fd2, ErrorCode* errno)
{
    call
    {
        IntT res=-1;
        TSCommand command = create_TSCommand();

        fd1->process=context.process;
        fd2->process=context.process;

        fd1->system=context.system;
        fd2->system=context.system;

        format_TSCommand( &command, "pipe" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);

            fd1->filedesc=readInt_TSStream(&command.response);
            fd2->filedesc=readInt_TSStream(&command.response);

        }
    
        destroy_TSCommand(&command);
    
        return res;
    }
    state
    {
        onPipe(context, *fd1, *fd2, pipe_spec);
    }
  

}


