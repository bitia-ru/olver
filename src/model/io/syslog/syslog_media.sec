/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "io/syslog/syslog_media.seh"
#include "io/syslog/syslog_model.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initIoSyslogSubsystem(void)
{
    // Set up mediators
    set_mediator_closelog_spec(closelog_media);
    set_mediator_openlog_spec(openlog_media);
    set_mediator_setlogmask_spec(setlogmask_media);
    set_mediator_syslog_spec(syslog_media);
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** closelog_spec **/

mediator closelog_media for specification
void closelog_spec(CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "closelog");

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return ;
    }
}


/** openlog_spec **/

mediator openlog_media for specification
void openlog_spec(CallContext context, CString* ident, IntT logopt, IntT facility)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "openlog:$(str)$(int)$(int)",
            ident, create_IntTObj(logopt), create_IntTObj(facility));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return;
    }

    state
    {
        onOpenLog(context, ident, logopt, facility);
    }
}


/** setlogmask_spec **/

mediator setlogmask_media for specification
IntT setlogmask_spec(CallContext context, IntT maskpri)
{
    call
    {
        IntT res;

        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "setlogmask:$(int)", create_IntTObj(maskpri));

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }

    state
    {
        onSetLogMask(context, maskpri);
    }
}


/** syslog_spec **/
//This mediator refers to: syslog, vsyslog
mediator syslog_media for specification
void syslog_spec(CallContext context, IntT priority, CString* message, List* args, bool bv)
{
    call
    {
        TSCommand command = create_TSCommand();

        if(!bv) format_TSCommand(&command, "syslog:$(int)$(str)",
                create_IntTObj(priority), message);
        else format_TSCommand(&command, "vsyslog:$(int)$(str)",
                create_IntTObj(priority), message);

        executeCommandInContext(context, &command);

        if(!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return;
    }
}




