/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef IO_SYSLOG_MODEL_SEH
#define IO_SYSLOG_MODEL_SEH

#include "common/common_model.seh"
#include "data/syslog_model.seh"

/********************************************************************/
/**                            Model State                         **/
/********************************************************************/

specification typedef
struct SysLogState
{
    CString* sIdent;
    IntT LogOpt;
    IntT Mask;
    IntT Facility;
    bool isMaskUp;
    bool isOpenLogUp;
} SysLogState;

SysLogState* create_SysLogStateDefault(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** closelog_spec **/
specification
void closelog_spec(CallContext context);

/** openlog_spec **/
specification
void openlog_spec(CallContext context, CString* ident, IntT logopt, IntT facility);

void onOpenLog(CallContext context, CString* id, IntT logopt, IntT fac);

/** setlogmask_spec **/
specification
IntT setlogmask_spec(CallContext context, IntT maskpri);

void onSetLogMask(CallContext context, IntT maskpri);

/** syslog_spec **/
specification
void syslog_spec(CallContext context, IntT priority, CString* message, List* args, bool bv);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

SysLogState* getSysLogState(CallContext context);

bool isSysLogMaskUp(CallContext context);
IntT getSysLogMask(CallContext context);
IntT setSysLogMask(CallContext context, IntT maskpri);

bool isSysLogOpenLogUp(CallContext context);
CString* getSysLogIdent(CallContext context);
IntT getSysLogOptions(CallContext context);
IntT getSysLogFacility(CallContext context);

#endif


