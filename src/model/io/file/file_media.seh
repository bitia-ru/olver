/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef IO_FILE_MEDIA_SEH
#define IO_FILE_MEDIA_SEH

#include "io/file/file_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initIoFileSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** close_spec **/
mediator close_media for specification
IntT close_spec( CallContext context,  FileDescId  fildes, ErrorCode* errno);

/** creat_spec **/
//This mediator refers to: creat64, creat
mediator creat_media for specification
FileDescId creat_spec(CallContext context, CString* path, FilePermissions* mode, 
                ErrorCode* errno, bool is64bits);

/** dup_spec **/
mediator dup_media for specification
FileDescId dup_spec( CallContext context, FileDescId  fildes, ErrorCode* errno);

void onDup(CallContext context, FileDescId fildes, FileDescId dup_spec);

/** dup2_spec **/
mediator dup2_media for specification
FileDescId dup2_spec(CallContext context, FileDescId  fildes, FileDescId  fildes2, 
               ErrorCode* errno);

/** fcntl_spec **/
mediator fcntl_F_DUPFD_media for specification
FileDescId fcntl_F_DUPFD_spec(CallContext context, FileDescId  fildes, 
                              FileDescId arg3, ErrorCode* errno);

mediator fcntl_F_GETFD_media for specification
IntT fcntl_F_GETFD_spec(CallContext context, FileDescId  fildes, ErrorCode* errno);

mediator fcntl_F_SETFD_media for specification
IntT fcntl_F_SETFD_spec(CallContext context, FileDescId  fildes, bool fd_cloexec, ErrorCode* errno);

mediator fcntl_F_GETFL_media for specification
Fcntl_F_GETFL_ReturnType* fcntl_F_GETFL_spec(CallContext context, FileDescId  fildes, ErrorCode* errno);

mediator fcntl_F_SETFL_media for specification
IntT fcntl_F_SETFL_spec(CallContext context, FileDescId  fildes,
                        BlockMode block_mode, bool append_flag, ErrorCode* errno);

mediator fcntl_F_GETOWN_media for specification
IntT fcntl_F_GETOWN_spec(CallContext context, FileDescId  fildes, ErrorCode* errno);

mediator fcntl_F_SETOWN_media for specification
IntT fcntl_F_SETOWN_spec(CallContext context, FileDescId  fildes, IntT thirdArg, ErrorCode* errno);

mediator fcntl_F_GETLCK_media for specification
Fcntl_F_GETLCKReturnType* fcntl_F_GETLCK_spec(CallContext context, FileDescId  fildes, Flock* lock, ErrorCode* errno);

mediator fcntl_F_SETLCK_media for specification
IntT fcntl_F_SETLCK_spec(CallContext context, FileDescId  fildes, Flock* lock, ErrorCode* errno);

mediator fcntl_F_SETLKW_media for specification
void fcntl_F_SETLKW_spec(CallContext context, FileDescId  fildes, Flock* lock, ErrorCode* errno);

mediator fcntl_F_SETLKW_return_media for 
reaction fcntlSETLKWReturnType* fcntl_F_SETLKW_return(void);

/** fdatasync_spec **/
mediator fdatasync_media for specification
IntT fdatasync_spec( CallContext context, FileDescId  fildes, ErrorCode* errno);

/** flock_spec **/
mediator flock_media for specification
void flock_spec(CallContext context, FileDescId  fildes, IntT operation, IntT block,
                ErrorCode* errno);

mediator flock_return_media for 
reaction FlockReturnType* flock_return(void);

/** fsync_spec **/
mediator fsync_media for specification
IntT fsync_spec( CallContext context, FileDescId  fildes, ErrorCode* errno);

/** ftruncate_spec **/
//This mediator refers to: ftruncate, ftruncate64
mediator ftruncate_media for specification
IntT ftruncate_spec(CallContext context, FileDescId  fildes, 
                    OffT length, ErrorCode* errno, bool is64bits);

/** lockf_spec **/
mediator lockf_F_TLOCK_media for specification
IntT lockf_F_TLOCK_spec(CallContext context, FileDescId  fildes, 
                        OffT size, ErrorCode* errno, bool is64bits);

mediator lockf_F_TEST_media for specification
IntT lockf_F_TEST_spec(CallContext context, FileDescId  fildes, OffT size, 
                       ErrorCode* errno, bool is64bits);

mediator lockf_F_UNLOCK_media for specification
IntT lockf_F_UNLOCK_spec(CallContext context, FileDescId  fildes, OffT size, 
                        ErrorCode* errno, bool is64bits);

mediator lockf_F_LOCK_media for specification
void lockf_F_LOCK_spec(CallContext context, FileDescId  fildes, 
                       OffT size, ErrorCode* errno, bool is64bits);

mediator lockf_F_LOCK_return_media for reaction
Lockf_F_LOCKReturnType* lockf_F_LOCK_return(void);

/** lseek_spec **/
//This mediator refers to: lseek64, lseek
mediator lseek_media for specification
OffT lseek_spec(CallContext context, FileDescId  fildes,
                OffT offset,  IntT whence, ErrorCode* errno, bool is64bits);

/** open_spec **/
//This mediator refers to: open64, open
mediator open_media for specification
FileDescId open_spec(CallContext context, CString* path, OpenFlags oflag, 
               FilePermissions* mode, ErrorCode* errno, bool is64bits);

/** pread_spec **/
//This mediator refers to: pread64, pread
mediator pread_media for specification
SSizeT pread_spec(CallContext context, FileDescId fildes, VoidTPtr buf, 
                  SizeT nbyte, OffT offset, ErrorCode* errno, bool is64bits);

/** pwrite_spec **/
//This mediator refers to: pwrite64, pwrite
mediator pwrite_media for specification
SSizeT pwrite_spec(CallContext context, FileDescId fildes,
                   VoidTPtr buf, SizeT nbyte, OffT offset, 
                   ErrorCode* errno, bool is64bits);

/** read_spec **/
mediator read_media for specification
SSizeT read_spec(CallContext context, FileDescId fildes, VoidTPtr buf, 
                 SizeT nbyte, ErrorCode* errno);

/** readv_spec **/
mediator readv_media for specification
SSizeT readv_spec(CallContext context, FileDescId fildes, List* iov, 
                  ErrorCode* errno);

/** sync_spec **/
mediator sync_media for specification
void sync_spec(CallContext context);

/** truncate_spec **/
//This mediator refers to: truncate, truncate64
mediator truncate_media for specification
IntT truncate_spec(CallContext context, CString* path, OffT length, 
                   ErrorCode* errno, bool is64bits);

/** write_spec **/
mediator write_media for specification
SSizeT write_spec(CallContext context, FileDescId fildes, VoidTPtr buf, 
                  SizeT nbyte, ErrorCode* errno);

/** writev_spec **/
mediator writev_media for specification
SSizeT writev_spec(CallContext context, FileDescId fildes, List* iov, 
                   ErrorCode* errno);




#endif

