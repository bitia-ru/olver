/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifdef MULTIPLEX_LOCAL_MAIN

#include "common/control_center.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "process/process/process_media.seh"
#include "system/system/system_model.seh"
#include "system/sysconf/sysconf_media.seh"
#include "io/file/file_media.seh"
#include "io/pipe/pipe_media.seh"
#include "io/fstream/fstream_media.seh"
#include "fs/fs/fs_media.seh"
#include "fs/fifo/fifo_media.seh"
#include "fs/meta/access_media.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/attr/attr_media.seh"

#include "io/multiplex/multiplex_media.seh"
#include "io/multiplex/tests/multiplex_main.seh"
#include "io/multiplex/tests/multiplex_scenario.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initSystemSysconfSubsystem();

    initIoPipeSubsystem();
    initIoFileSubsystem();
    initFsFsSubsystem();
    initFsFifoSubsystem();
    initFsMetaAccessSubsystem();
    initPthreadPthreadSubsystem();
    initPthreadAttrSubsystem();
    initProcessProcessSubsystem();
    initIoFstreamSubsystem();

    initIoMultiplexSubsystem();

    initReqFilters();
}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    addTraceToFile("multiplex_scenario.utt");

    trace_all_requirements = true;

    // Run test scenario
    io_multiplex_scenario(argc, argv) == 0 ? verbose("FAIL\n") : verbose("PASS\n");

    return 0;
}

#endif
