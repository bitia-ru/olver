/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef IO_MULTIPLEX_SCENARIO_SEH
#define IO_MULTIPLEX_SCENARIO_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                     Specification Types                        **/
/********************************************************************/

specification
typedef struct MultiplexScenStateSt
{
    unsigned int nRegularFiles;
    unsigned int nFIFOFiles;
    unsigned int nPipeFiles;
} MultiplexScenState;

specification
typedef struct FilePairSt
{
    FileDescId idRead;
    FileDescId idWrite;
} FilePair;

specification
typedef struct MultiplexScenStateDataSt
{
    Set/*<FilePair>*/* RegularFiles;
    Set/*<FilePair>*/* FIFOFiles;
    Set/*<FilePair>*/* PipeFiles;
} MultiplexScenStateData;

MultiplexScenState* create_MultiplexScenState(unsigned int r,
                                              unsigned int f,
                                              unsigned int p);
FilePair* create_FilePair(FileDescId idR, FileDescId idW);
MultiplexScenStateData* create_MultiplexScenStateData(Set* rf, Set* ff, Set* pf);

/********************************************************************/
/**                        Helper Functions                        **/
/********************************************************************/

int OpenFile_Multiplex(CallContext context, CString* filePath);
int CloseFile_Multiplex(CallContext context, FilePair* filePair);
List* getPollList_Multiplex(void);
IntT getSelectData_Multiplex (   Set*/*IntT*/ readfds,
                                Set*/*IntT*/ writefds,
                                Set*/*IntT*/ errorfds
                            );

/********************************************************************/
/**                             Auxiliary                          **/
/********************************************************************/

#define __MGS_(a) ((a == 0) ? scenStateData->RegularFiles : \
    (a == 1 ? scenStateData->FIFOFiles : scenStateData->PipeFiles))

#define __NGS_(a) ((a == 0) ? regular_max : \
    (a == 1 ? fifo_max : pipe_max))

#define __OGS_(a) ((a == 0) ? regular_num : \
    (a == 1 ? fifo_num : pipe_num))

#define __PGS_(a) ((a == 0) ? regular_to_open : \
    (a == 1 ? fifo_to_open : pipe_to_open))

/********************************************************************/
/**                          Scenarios                             **/
/********************************************************************/

scenario dfsm io_multiplex_scenario;

#endif
