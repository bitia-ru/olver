/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "data/errno_model.seh"
#include "io/file/file_media.seh"
#include "fs/fs/fs_media.seh"
#include "io/term/term_media.seh"
#include "io/term/tests/tty_scenario.seh"

bool pre_isatty_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

bool pre_open_spec(CallContext context, CString* path, OpenFlags oflag,
                   FilePermissions* mode, ErrorCode* errno, bool is64bits);

bool pre_openpty_spec(CallContext context, FileDescId *amaster,
                      FileDescId *aslave, CString *name, VoidTPtr termp,
                      WinSize *winp, ErrorCode *errno);

bool pre_ttyname_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

bool pre_ttyname_r_spec(CallContext context, FileDescId fildes, CString *name,
                        SizeT namesize);

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

#define PATH_NUMBER 5

char* path[PATH_NUMBER] = 
{
    /* 0 */ "/dev",
    /* 1 */ "/dev/console",
    /* 2 */ "/dev/null",
    /* 3 */ "/dev/tty0",
    /* 4 */ "/dev/zero"
};

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef IO_TERM_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void io_term_tty_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr termp;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_tty_scenario(int argc, char **argv)
{
#ifdef IO_TERM_LOCAL_MAIN

    system_assertion_handler = atAssertion(io_term_tty_assertion_exit);

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

    context = getContext();
    initPathSystemConfiguration();
    termp = allocateMemoryBlock(context, sizeof_Type(context, "struct termios"));

    if(isNULL_VoidTPtr(termp))
        return false;

    return true;
}

static void finish_tty_scenario(void)
{
    deallocateMemoryBlock(context, termp);

    TEST_SCENARIO_VERDICT_VERBOSE(tty_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool tty_scen()
{
    int i;
    FileDescId fildes;
    CString *name, *buffer = create_CString("");
    OpenFlags oflag = { ReadWrite, Blocking, false, false, false, false, true, false };
    FilePermission* owner = create_FilePermission(false, false, false);
    FilePermission* group = create_FilePermission(false, false, false);
    FilePermission* other = create_FilePermission(false, false, false);

    FilePermissions *perms = create_FilePermissions(owner, group, other, Unknown_Bool3, Unknown_Bool3, Unknown_Bool3);

    for(i = 0; i < PATH_NUMBER; i++)
    {
        name = create_CString(path[i]);

        if(pre_open_spec(context, name, oflag, perms, requestErrorCode(), false))
        {
            fildes = open_spec(context, name, oflag, perms, requestErrorCode(), false);

            if(pre_isatty_spec(context, fildes, requestErrorCode()))
                isatty_spec(context, fildes, requestErrorCode());

            if(pre_isatty_spec(context, fildes, requestErrorCode()))
                isatty_spec(context, fildes, requestErrorCode());

            if(pre_ttyname_spec(context, fildes, requestErrorCode()))
                ttyname_spec(context, fildes, requestErrorCode());

            if(pre_ttyname_spec(context, fildes, requestErrorCode()))
                ttyname_spec(context, fildes, requestErrorCode());

            if(pre_ttyname_r_spec(context, fildes, buffer, 256))
                ttyname_r_spec(context, fildes, buffer, 256);

            if(pre_ttyname_r_spec(context, fildes, buffer, 256))
                ttyname_r_spec(context, fildes, buffer, 256);
        }
    }

    return true;
}

scenario
bool pty_tty_scen()
{
    FileDescId amaster, aslave;
    CString *name = create_CString("");
    WinSize *winp = default_WinSize();

    if(pre_openpty_spec(context, &amaster, &aslave, name, termp, winp, requestErrorCode()))
        openpty_spec(context, &amaster, &aslave, name, termp, winp, requestErrorCode());

    if(pre_isatty_spec(context, amaster, requestErrorCode()))
        isatty_spec(context, amaster, requestErrorCode());

    if(pre_isatty_spec(context, aslave, requestErrorCode()))
        isatty_spec(context, aslave, requestErrorCode());

    if(pre_ttyname_spec(context, amaster, requestErrorCode()))
        ttyname_spec(context, amaster, requestErrorCode());

    if(pre_ttyname_spec(context, aslave, requestErrorCode()))
        ttyname_spec(context, aslave, requestErrorCode());

    if(pre_ttyname_r_spec(context, amaster, name, 256))
        ttyname_r_spec(context, amaster, name, 256);

    if(pre_ttyname_r_spec(context, aslave, name, 256))
        ttyname_r_spec(context, aslave, name, 256);
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm tty_scenario =
{
    .init = init_tty_scenario,
    .finish = finish_tty_scenario,
    .actions = {
        tty_scen,
        pty_tty_scen,
        NULL
    }
};

bool main_io_term_tty(int argc, char **argv)
{
    tty_scenario(argc, argv);
    return true;
}

#ifdef IO_TERM_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initFsFsSubsystem();
    initIoFileSubsystem();
    initIoTermSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    addTraceToFile("trace.xml");
    main_io_term_tty(argc, argv);
    
    return 0;
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */
