/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <string.h>

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/ts_socket.h"
#include "data/errno_model.seh"
#include "io/file/file_media.seh"
#include "fs/fs/fs_media.seh"
#include "io/term/term_media.seh"
#include "io/term/tests/rw_case_c_scenario.seh"
#include "io/term/tests/term_scenario.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
#define TIME            10
#define MAX_QUEUE_SIZE  3
#define MAX_BUFFER_SIZE 2

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef IO_TERM_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void io_term_rw_case_c_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext read_context;
static CallContext write_context;
static FileDescId ptm_desc_id;
static FileDescId pts_desc_id;
static VoidTPtr ptm_termp;
static VoidTPtr pts_termp;
static ErrorCode *error;
static bool is_case_c;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_rw_case_c_scenario(int argc, char **argv)
{
#ifdef IO_TERM_LOCAL_MAIN

    system_assertion_handler = atAssertion(io_term_rw_case_c_assertion_exit);

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

    read_context = getContext();
    write_context = createThreadInContext(read_context);
    initPathSystemConfiguration();
    ptm_desc_id = WrongFileDescId;
    pts_desc_id = WrongFileDescId;

    ptm_termp = allocateMemoryBlock(read_context, sizeof_Type(read_context, "struct termios"));
    pts_termp = allocateMemoryBlock(read_context, sizeof_Type(read_context, "struct termios"));

    if(isNULL_VoidTPtr(ptm_termp) || isNULL_VoidTPtr(pts_termp))
        return false;

    error = create_ErrorCode(SUT_EOK);
    is_case_c = false;


    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(100);

    return true;
}

static void finish_rw_case_c_scenario(void)
{
    deallocateMemoryBlock(read_context, ptm_termp);
    deallocateMemoryBlock(read_context, pts_termp);

    TEST_SCENARIO_VERDICT_VERBOSE(io_term_rw_case_c_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/
specification typedef struct RWCaseCStateType
{
    bool is_open;
    bool is_case_c;
    unsigned size;
    bool is_read_blocked;
    SizeT nbyte;
} RWCaseCStateType;

RWCaseCStateType * create_RWCaseCStateType(
    bool is_open,
    bool is_case_c,
    unsigned size,
    bool is_read_blocked,
    SizeT nbyte
)
{
    return create(&type_RWCaseCStateType,
        is_open,
        is_case_c,
        size,
        is_read_blocked,
        nbyte);

}

/*
static String* rw_case_c_scenario_state_to_string(struct RWCaseCStateType *s)
{
    String *res = create_String(s->is_open ? "Opened" : "Closed");

    if(s->is_open)
    {
        res = concat_String(res, create_String(s->is_case_c ? ", case C" : ", not a case C"));

        if(s->is_case_c)
        {
            res = concat_String(res, create_String(", queue size: "));
            res = concat_String(res, valueOfUInt_String(s->size));

            if(s->is_read_blocked)
            {
                res = concat_String(res, create_String(", read request: "));
                res = concat_String(res, valueOfUInt_String(s->nbyte));
            }
        }
    }

    return res;
}
*/
static String* rw_case_c_scenario_state_to_string(struct RWCaseCStateType *s)
{
    return create_String("term");
}


static int rw_case_c_scenario_state_compare(struct RWCaseCStateType *lhs,
                                            struct RWCaseCStateType *rhs)
{
    if(lhs == NULL || rhs == NULL)
        return lhs == rhs ? 0 : 1;

    if(!lhs->is_open || !rhs->is_open)
        return lhs->is_open == rhs->is_open ? 0 : 1;

    if(!lhs->is_case_c || !rhs->is_case_c)
        return lhs->is_case_c == rhs->is_case_c ? 0 : 1;

    return (lhs->size == rhs->size)
        && (lhs->is_read_blocked == rhs->is_read_blocked)
        && (lhs->is_read_blocked => (lhs->nbyte == rhs->nbyte)) ? 0 : 1;
}

specification typedef struct RWCaseCStateType RWCaseCStateType =
{
    .to_string = (ToString)rw_case_c_scenario_state_to_string,
    .compare = (Compare)rw_case_c_scenario_state_compare
};

static RWCaseCStateType* rw_case_c_scenario_state(void)
{
    unsigned size = 0;
    ReadTTYCall *blocked_call = NULL;

    if(!isWrong_FileDescId(pts_desc_id))
    {
        Terminal *pts = getTerminal_FileDescId(pts_desc_id);
        TerminalQueue *queue = getInputQueue_Terminal(pts);

        size = size_TerminalQueue(queue);
        blocked_call = getBlockedCall(read_context);
    }

    return create_RWCaseCStateType(
        !isWrong_FileDescId(pts_desc_id),
        is_case_c,
        size,
        blocked_call != NULL,
        blocked_call != NULL ? blocked_call->nbyte : 0
    );
}

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/
bool is_rw_case_c_state_stationary(void)
{
    return true;
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool open_c_scen()
{
    if(isWrong_FileDescId(ptm_desc_id))
    {
        openpty_spec(read_context, &ptm_desc_id, &pts_desc_id, NULL, NULL_VoidTPtr, NULL, error);

        tcgetattr_spec(read_context, ptm_desc_id, ptm_termp, error);
        tcgetattr_spec(read_context, pts_desc_id, pts_termp, error);
        settermios_spec(read_context, pts_termp, default_TermIOS());
        settermios_spec(read_context, ptm_termp, default_TermIOS());
        tcsetattr_spec(read_context, ptm_desc_id, SUT_TCSANOW,ptm_termp);
        tcsetattr_spec(read_context, pts_desc_id, SUT_TCSANOW,pts_termp);
        tcgetattr_spec(read_context, ptm_desc_id, ptm_termp, error);
        tcgetattr_spec(read_context, pts_desc_id, pts_termp, error);

        is_case_c = false;
    }

    return true;
}

scenario
bool setattr_c_scen()
{
    if(!isWrong_FileDescId(ptm_desc_id))
    {
        TermIOS *pts_termios = getTermIOS(pts_termp);

        if(!is_case_c)
        {
            setControlCharacter_TermIOS(pts_termios, SUT_VTIME, TIME);
            setControlCharacter_TermIOS(pts_termios, SUT_VMIN, 0);

            settermios_spec(read_context, pts_termp, pts_termios);
            tcsetattr_spec(read_context, pts_desc_id, SUT_TCSANOW, pts_termp);

            tcgetattr_spec(read_context, ptm_desc_id, ptm_termp, error);
            tcgetattr_spec(read_context, pts_desc_id, pts_termp, error);

            is_case_c = true;
        }
    }
}

scenario
bool read_c_scen()
{
    if(!isWrong_FileDescId(ptm_desc_id))
    {
        TermIOS *pts_termios = getTermIOS(pts_termp);

        if(is_case_c && equals(getBlockedCall(read_context), NULL))
        {
            iterate(int i = 0; i < MAX_BUFFER_SIZE; i++;)
            {
                read_tty_spec(read_context, pts_desc_id, i);
            }
        }
    }

    return true;
}

scenario
bool write_c_scen()
{
    if(!isWrong_FileDescId(ptm_desc_id))
    {
        TermIOS *pts_termios = getTermIOS(pts_termp);

        if(is_case_c && equals(getBlockedCall(write_context), NULL))
        {
            Terminal *pts = getTerminal_FileDescId(pts_desc_id);
            TerminalQueue *queue = getInputQueue_Terminal(pts);

            if(size_TerminalQueue(queue) < MAX_QUEUE_SIZE)
            {
                iterate(int i = 0; i < MAX_BUFFER_SIZE; i++;)
                {
                    if(!equals(getBlockedCall(read_context), NULL))
                    {
                        ts_sleep_msec(1000);
                    }

                    write_tty_spec(write_context, ptm_desc_id, generateCByteArray(i), i);
                }
            }
        }
    }

    return true;
}

scenario
bool close_c_scen()
{
    if(!isWrong_FileDescId(ptm_desc_id))
    {
        TermIOS *pts_termios = getTermIOS(pts_termp);

        if(is_case_c &&
           equals(getBlockedCall(read_context), NULL) &&
           equals(getBlockedCall(write_context), NULL))
        {
            tcflush_spec(read_context, ptm_desc_id, SUT_TCIOFLUSH);
            tcflush_spec(read_context, pts_desc_id, SUT_TCIOFLUSH);

            close_tty_spec(read_context, ptm_desc_id);
            close_tty_spec(read_context, pts_desc_id);

            ptm_desc_id = WrongFileDescId;
            pts_desc_id = WrongFileDescId;
        }
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm io_term_rw_case_c_scenario =
{
    .init = init_rw_case_c_scenario,
    .finish = finish_rw_case_c_scenario,
    .getState = (PtrGetState)rw_case_c_scenario_state,
    .saveModelState = (PtrSaveModelState)saveIoTermModelState,
    .restoreModelState = (PtrRestoreModelState)restoreIoTermModelState,
    .isStationaryState = (PtrIsStationaryState)is_rw_case_c_state_stationary,
    .actions =
    {
        open_c_scen,
        setattr_c_scen,
        read_c_scen,
        write_c_scen,
        close_c_scen,
        NULL
    }
};

bool main_io_term_rw_case_c(int argc, char **argv)
{
    io_term_rw_case_c_scenario(argc, argv);
    return true;
}

#ifdef IO_TERM_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "process/process/process_model.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initFsFsSubsystem();
    initIoFileSubsystem();
    initIoTermSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    addTraceToFile("trace.xml");
    main_io_term_rw_case_c(argc, argv);

    return 0;
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */
