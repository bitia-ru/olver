/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <string.h>

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "data/errno_model.seh"
#include "io/file/file_media.seh"
#include "fs/fs/fs_media.seh"
#include "io/term/term_media.seh"
#include "io/term/tests/open_tty_scenario.seh"
#include "io/term/tests/term_scenario.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
#define PATH_NUMBER 2

static char *path[PATH_NUMBER] =
{
    /* 0 */ "/dev/console",
    /* 1 */ "/dev/tty0"
};

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef IO_TERM_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void io_term_open_tty_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static FileSystem* file_system;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_open_tty_scenario(int argc, char **argv)
{
    int i;

#ifdef IO_TERM_LOCAL_MAIN

    system_assertion_handler = atAssertion(io_term_open_tty_assertion_exit);

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

    context = getContext();
    file_system = getFileSystem(context);

    for(i = 0; i < PATH_NUMBER; i++)
    {
        File *file = registerFile(file_system, create_CString(path[i]));

        if(file != NULL)
        {
            setTermIOS_Terminal(file->descriptor = default_Terminal(), default_TermIOS());
            file->kind = CharacterFile;
        }
    }

    setTSTimeModel(NotUseTSTime);
    setFindFirstSeriesOnly(true);
    setWTimeMSec(100);

    return true;
}

static void finish_open_tty_scenario(void)
{
    file_system = NULL;
    TEST_SCENARIO_VERDICT_VERBOSE(io_term_open_tty_scenario);
}


FileDescId getFileDescId_TermFile(CallContext context, File* file)
{
    ProcessState* ps=getProcessState_CallContext(context);
    Map* descriptors=ps->file_descriptors;
    IntT i=0;

    for (i=0;i<size_Map(descriptors);i++)
    {
        FileDescIdObj* descID=key_Map(descriptors, i);
        FileDescriptor* fdesc=get_Map(descriptors, descID);
        if (fdesc->file.file==file->fileid.file
            && fdesc->file.system==file->fileid.system)
        {
            return fdesc->file_desc_id;
        }
    }
    return create_FileDescId(-1, -1, -1);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/
static CString* open_tty_scenario_state(void)
{
    return create_CString("Single");
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool open_tty_scen()
{
    OpenFlags oflag = { ReadWrite, Blocking, false, false, false, false, true, false};

    iterate(int i = 0; i < PATH_NUMBER; i++;)
    {
        CString *name = create_CString(path[i]);

        open_tty_spec(context, name, oflag);
    }
    return true;
}

scenario
bool login_tty_scen()
{
    iterate(int i = 0; i < PATH_NUMBER; i++;)
    {
        File* term=getFile_FileSystem(getFileSystem(context), create_CString(path[i]));
        FileDescId termId=getFileDescId_TermFile(context, term);

        if (termId.filedesc!=-1)
        {
            login_tty_spec(context, termId, requestErrorCode());
        }
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm io_term_open_tty_scenario =
{
    .init = init_open_tty_scenario,
    .finish = finish_open_tty_scenario,
    .getState = (PtrGetState)open_tty_scenario_state,
    .saveModelState = (PtrSaveModelState)saveIoTermModelState,
    .restoreModelState = (PtrRestoreModelState)restoreIoTermModelState,
    .isStationaryState = (PtrIsStationaryState)isIoTermModelStateStationary,
    .actions =
    {
        open_tty_scen,
        login_tty_scen,
        NULL
    }
};

bool main_io_term_open_tty(int argc, char **argv)
{
    io_term_open_tty_scenario(argc, argv);
    return true;
}

#ifdef IO_TERM_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "process/process/process_model.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initFsFsSubsystem();
    initIoFileSubsystem();
    initIoTermSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    addTraceToFile("trace.xml");    
    main_io_term_open_tty(argc, argv);
    
    return 0;
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */
