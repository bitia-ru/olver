/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "config/system_config.seh"
#include "common/cstring.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "data/errno_model.seh"
#include "io/term/term_media.seh"
#include "io/term/tests/cterm_scenario.seh"

bool pre_ctermid_spec(CallContext context, CString *s);

bool pre_getlogin_spec(CallContext context, ErrorCode *errno);

bool pre_getlogin_r_spec(CallContext context, CString *name, SizeT namesize);

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef IO_TERM_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void io_term_cterm_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static ErrorCode *error;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_cterm_scenario(int argc, char **argv)
{
#ifdef IO_TERM_LOCAL_MAIN

    system_assertion_handler = atAssertion(io_term_cterm_assertion_exit);

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

    context = getContext();

    error = create_ErrorCode(SUT_EOK);

    return true;
}

static void finish_cterm_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(cterm_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool ctermid_scen()
{
    CString *name = create_CString("");

    iterate(int i = 0; i < 2; i++;)
    {
        switch(i)
        { 
        case 0:
            if(pre_ctermid_spec(context, NULL))
                ctermid_spec(context, NULL);
            break;
        default:
            if(pre_ctermid_spec(context, name))
                ctermid_spec(context, name);
            break;
        }
    }

    return true;
}

scenario
bool getlogin_scen()
{
    CString *name = create_CString("");

    iterate(int i = 0; i < 2; i++;)
    {
        if(pre_getlogin_spec(context, error))
            getlogin_spec(context, error);

        if(pre_getlogin_r_spec(context, name, 1024))
            getlogin_r_spec(context, name, 1024);
    }

    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm cterm_scenario =
{
    .init = init_cterm_scenario,
    .finish = finish_cterm_scenario,
    .actions = {
        ctermid_scen,
        getlogin_scen,
        NULL
    }
};

bool main_io_term_cterm(int argc, char **argv)
{
    cterm_scenario(argc, argv);
    return true;
}

#ifdef IO_TERM_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initIoTermSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    addTraceToFile("trace.xml");    
    main_io_term_cterm(argc, argv);
    
    return 0;
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */
