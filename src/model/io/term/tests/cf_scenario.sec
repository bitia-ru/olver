/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "data/errno_model.seh"
#include "io/term/term_media.seh"
#include "io/term/tests/cf_scenario.seh"

bool pre_cfgetispeed_spec(CallContext context, TermIOSPtr termios_p);

bool pre_cfgetospeed_spec(CallContext context, TermIOSPtr termios_p);

bool pre_cfmakeraw_spec(CallContext context, TermIOSPtr termios_p);

bool pre_cfsetispeed_spec(CallContext context, TermIOSPtr termios_p,
                          SpeedT speed, ErrorCode *errno);

bool pre_cfsetospeed_spec(CallContext context, TermIOSPtr termios_p,
                          SpeedT speed, ErrorCode *errno);

bool pre_cfsetspeed_spec(CallContext context, TermIOSPtr t,
                         SpeedT speed, ErrorCode *errno);

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static SpeedT speeds[] = 
{
    SUT_B0,
    SUT_B50,
    SUT_B75,
    SUT_B110,
    SUT_B134,
    SUT_B150,
    SUT_B200,
    SUT_B300,
    SUT_B600,
    SUT_B1200,
    SUT_B1800,
    SUT_B2400,
    SUT_B4800,
    SUT_B9600,
    SUT_B19200,
    SUT_B38400,
    (SpeedT)-1
};

static int MAX_SPEED_NUMBER = sizeof(speeds)/sizeof(SpeedT);

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef IO_TERM_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void io_term_cf_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr termios_p;
static ErrorCode *error;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_cf_scenario(int argc, char **argv)
{
    SizeT termios_size;

#ifdef IO_TERM_LOCAL_MAIN

    system_assertion_handler = atAssertion(io_term_cf_assertion_exit);

#endif /* #ifdef IO_TERM_LOCAL_MAIN */

    context = getContext();

    termios_size = sizeof_Type(context, "struct termios");

    termios_p = allocateMemoryBlock(context, termios_size);

    if(isNULL_VoidTPtr(termios_p))
        return false;

    registerObjectInMemory(termios_p, termios_size,
        getTermIOSState(context, termios_p));

    error = create_ErrorCode(SUT_EOK);

    return true;
}

static void finish_cf_scenario(void)
{
    deallocateMemoryBlock(context, termios_p);

    TEST_SCENARIO_VERDICT_VERBOSE(cf_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool cfsetiogetiospeed_scen()
{
    int i;
    for(i = 0; i < MAX_SPEED_NUMBER; i++)
    {
        if(pre_cfsetispeed_spec(context, termios_p, speeds[i], error))
            cfsetispeed_spec(context, termios_p, speeds[i], error);
        
        if(pre_cfsetospeed_spec(context, termios_p, speeds[i], error))
            cfsetospeed_spec(context, termios_p, speeds[i], error);
        
        if(pre_cfgetispeed_spec(context, termios_p))
            cfgetispeed_spec(context, termios_p);
        
        if(pre_cfgetospeed_spec(context, termios_p))
            cfgetospeed_spec(context, termios_p);
        
        if(pre_cfmakeraw_spec(context, termios_p))
            cfmakeraw_spec(context, termios_p);
    }

    return true;
}

scenario
bool cfsetgetiospeed_scen()
{
    int i;
    for(i = 0; i < MAX_SPEED_NUMBER; i++)
    {
        if(pre_cfsetspeed_spec(context, termios_p, speeds[i], error))
            cfsetspeed_spec(context, termios_p, speeds[i], error);
        if(pre_cfgetispeed_spec(context, termios_p))
            cfgetispeed_spec(context, termios_p);
        if(pre_cfgetospeed_spec(context, termios_p))
            cfgetospeed_spec(context, termios_p);
        if(pre_cfmakeraw_spec(context, termios_p))
            cfmakeraw_spec(context, termios_p);
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm cf_scenario =
{
    .init = init_cf_scenario,
    .finish = finish_cf_scenario,
    .actions = {
        cfsetiogetiospeed_scen,
        cfsetgetiospeed_scen,
        NULL
    }
};

bool main_io_term_cf(int argc, char **argv)
{
    cf_scenario(argc, argv);
    return true;
}

#ifdef IO_TERM_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    initIoTermSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();
    
    addTraceToFile("trace.xml");
    main_io_term_cf(argc, argv);
    
    return 0;
}

#endif /* #ifdef IO_TERM_LOCAL_MAIN */
