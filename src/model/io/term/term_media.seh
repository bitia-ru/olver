/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef IO_TERM_MEDIA_SEH
#define IO_TERM_MEDIA_SEH

#include "io/term/term_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initIoTermSubsystem(void);

/********************************************************************/
/**                      Auxiliary Functions                       **/
/********************************************************************/

/** settermios_spec **/
mediator settermios_media for specification
void settermios_spec(CallContext context, TermIOSPtr termios_p, TermIOS *termios);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** cfgetispeed_spec **/
mediator cfgetispeed_media for specification
SpeedT cfgetispeed_spec(CallContext context, TermIOSPtr termios_p);

/** cfgetospeed_spec **/
mediator cfgetospeed_media for specification
SpeedT cfgetospeed_spec(CallContext context, TermIOSPtr termios_p);

/** cfmakeraw_spec **/
mediator cfmakeraw_media for specification
void cfmakeraw_spec(CallContext context, TermIOSPtr termios_p);

/** cfsetispeed_spec **/
mediator cfsetispeed_media for specification
IntT cfsetispeed_spec(CallContext context, TermIOSPtr termios_p, SpeedT speed,
                      ErrorCode *errno);

/** cfsetospeed_spec **/
mediator cfsetospeed_media for specification
IntT cfsetospeed_spec(CallContext context, TermIOSPtr termios_p, SpeedT speed,
                      ErrorCode *errno);

/** cfsetspeed_spec **/
mediator cfsetspeed_media for specification
IntT cfsetspeed_spec(CallContext context, TermIOSPtr t, SpeedT speed, ErrorCode *errno);

/** close_tty_spec **/
mediator close_tty_media for specification
void close_tty_spec(CallContext context, FileDescId fildes);

/** close_tty_return **/
mediator close_tty_return_media for reaction
CloseTTYReturnType* close_tty_return(void);

/** ctermid_spec **/
mediator ctermid_media for specification
CString* ctermid_spec(CallContext context, CString *s);

/** getlogin_spec **/
mediator getlogin_media for specification
CString* getlogin_spec(CallContext context, ErrorCode *errno);

/** getlogin_r_spec **/
mediator getlogin_r_media for specification
IntT getlogin_r_spec(CallContext context, CString *name, SizeT namesize);

/** grantpt_spec **/
mediator grantpt_media for specification
IntT grantpt_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

/** isatty_spec **/
mediator isatty_media for specification
IntT isatty_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

/** open_tty_spec **/
mediator open_tty_media for specification
void open_tty_spec(CallContext context, CString *path, OpenFlags oflag);

/** open_tty_return **/
mediator open_tty_return_media for reaction
OpenTTYReturnType* open_tty_return(void);

/** openpty_spec **/
mediator openpty_media for specification
IntT openpty_spec(CallContext context, FileDescId *amaster, FileDescId *aslave,
                  CString *name, VoidTPtr termp, WinSize *winp, ErrorCode *errno);

/** posix_openpt_spec **/
mediator posix_openpt_media for specification
FileDescId posix_openpt_spec(CallContext context, OpenFlags oflag, ErrorCode *errno);

/** ptsname_spec **/
mediator ptsname_media for specification
CString* ptsname_spec(CallContext context, FileDescId fildes);

/** read_tty_spec **/
mediator read_tty_media for specification
void read_tty_spec(CallContext context, FileDescId fildes, SizeT nbyte);

/** read_tty_return **/
mediator read_tty_return_media for reaction
ReadTTYReturnType* read_tty_return(void);

/** tcdrain_spec **/
mediator tcdrain_media for specification
void tcdrain_spec(CallContext context, FileDescId fildes);

/** tcdrain_return **/
mediator tcdrain_return_media for reaction
TCReturnType* tcdrain_return(void);

/** tcflow_spec **/
mediator tcflow_media for specification
void tcflow_spec(CallContext context, FileDescId fildes, Action action);

/** tcflow_return **/
mediator tcflow_return_media for reaction
TCReturnType* tcflow_return(void);

/** tcflush_spec **/
mediator tcflush_media for specification
void tcflush_spec(CallContext context, FileDescId fildes,
                  QueueSelector queue_selector);

/** tcflush_return **/
mediator tcflush_return_media for reaction
TCReturnType* tcflush_return(void);

/** tcgetattr_spec **/
mediator tcgetattr_media for specification
IntT tcgetattr_spec(CallContext context, FileDescId fildes, VoidTPtr termios_p,
                    ErrorCode *errno);

/** tcgetpgrp_spec **/
mediator tcgetpgrp_media for specification
ProcessId tcgetpgrp_spec(CallContext context, FileDescId fildes,
                         ErrorCode *errno);

/** tcgetsid_spec **/
mediator tcgetsid_media for specification
ProcessId tcgetsid_spec(CallContext context, FileDescId fildes,
                        ErrorCode *errno);

/** tcsendbreak_spec **/
mediator tcsendbreak_media for specification
void tcsendbreak_spec(CallContext context, FileDescId fildes, IntT duration);

/** tcsendbreak_return **/
mediator tcsendbreak_return_media for reaction
TCReturnType* tcsendbreak_return(void);


/** tcsetattr_spec **/
mediator tcsetattr_media for specification
void tcsetattr_spec(CallContext context, FileDescId fildes,
                    OptionalActions optional_actions, TermIOSPtr termios_p);

/** tcsetattr_return **/
mediator tcsetattr_return_media for reaction
TCReturnType* tcsetattr_return(void);

/** tcsetpgrp_spec **/
mediator tcsetpgrp_media for specification
void tcsetpgrp_spec(CallContext context, FileDescId fildes, ProcessId pgid_id);

/** tcsetpgrp_return **/
mediator tcsetpgrp_return_media for reaction
TCReturnType* tcsetpgrp_return(void);

/** ttyio_TIOCGWINSZ_spec **/
mediator ttyio_TIOCGWINSZ_media for specification
IntT ttyio_TIOCGWINSZ_spec(CallContext context, FileDescId fd, WinSize *argp,
                           ErrorCode *errno);

/** ttyname_spec **/
mediator ttyname_media for specification
CString* ttyname_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

/** ttyname_r_spec **/
mediator ttyname_r_media for specification
IntT ttyname_r_spec(CallContext context, FileDescId fildes, CString *name, SizeT namesize);

/** unlockpt_spec **/
mediator unlockpt_media for specification
IntT unlockpt_spec(CallContext context, FileDescId fildes, ErrorCode *errno);

/** write_tty_spec **/
mediator write_tty_media for specification
void write_tty_spec(CallContext context, FileDescId fildes, CByteArray *buf, SizeT nbyte);

/** write_tty_return **/
mediator write_tty_return_media for reaction
WriteTTYReturnType* write_tty_return(void);

void onWriteTTYReturn(CallContext context, SSizeT write_tty_return,
                      ErrorCode *errno, TimeInterval time);

/** login_tty_spec **/
mediator login_tty_media for specification
IntT login_tty_spec(CallContext context, FileDescId fdr, ErrorCode* errno);

/********************************************************************/
/**                      Helper Functions                         **/
/********************************************************************/
TermIOS *getTermIOSState(CallContext context, TermIOSPtr termios_p);
void mapTermIOSStateUp(CallContext context, TermIOSPtr address);

#endif

