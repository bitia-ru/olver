/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef IO_FSTREAM_MEDIA_SEH
#define IO_FSTREAM_MEDIA_SEH

#include "io/fstream/fstream_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initIoFstreamSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** _IO_feof_spec **/
mediator _IO_feof_media for specification
IntT _IO_feof_spec( CallContext context, FILETPtr __fp );

/** _IO_getc_spec **/
mediator _IO_getc_media for specification
IntT _IO_getc_spec( CallContext context, FILETPtr __fp );

/** _IO_putc_spec **/
mediator _IO_putc_media for specification
IntT _IO_putc_spec( CallContext context, IntT __c, FILETPtr __fp );

/** _IO_puts_spec **/
mediator _IO_puts_media for specification
IntT _IO_puts_spec( CallContext context, CString * __c );

/** __fpending_spec **/
mediator __fpending_media for specification
SizeT __fpending_spec( CallContext context, FILETPtr stream );

/** clearerr_spec **/
mediator clearerr_media for specification
void clearerr_spec( CallContext context, FILETPtr stream );

/** fclose_spec **/
mediator fclose_media for specification
IntT fclose_spec( CallContext context, FILETPtr stream, ErrorCode * errno );

/** fdopen_spec **/
mediator fdopen_media for specification
FILETPtr fdopen_spec( CallContext context, FileDescId fildes, CString * mode, ErrorCode * errno );

/** feof_spec **/
mediator feof_media for specification
IntT feof_spec( CallContext context, FILETPtr stream );

/** ferror_spec **/
mediator ferror_media for specification
IntT ferror_spec( CallContext context, FILETPtr stream );

/** fflush_spec **/
//This mediator refers to: fflush, fflush_unlocked
mediator fflush_media for specification
IntT fflush_spec( CallContext context, FILETPtr stream, ErrorCode * errno, bool unlocked );

/** fgetc_spec **/
//This mediator refers to: fgetc, getc, getchar, getchar_unlocked, getc_unlocked
mediator fgetc_media for specification
IntT fgetc_spec( CallContext context, FILETPtr stream, ErrorCode * errno,
                 IntT getc_type, CString * input, CString * stdinAsFile
               );

/** fgetpos_spec **/
//This mediator refers to: fgetpos, fgetpos64
mediator fgetpos_media for specification
IntT fgetpos_spec( CallContext context, FILETPtr stream, FPosTPtr pos, ErrorCode * errno, bool is64bits );

/** fgets_spec **/
mediator fgets_media for specification
CString * fgets_spec( CallContext context, IntT n, FILETPtr stream, ErrorCode * errno );

/** fileno_spec **/
mediator fileno_media for specification
IntT fileno_spec( CallContext context, FILETPtr stream, ErrorCode * errno );

/** fopen_spec **/
//This mediator refers to: fopen, fopen64
mediator fopen_media for specification
FILETPtr fopen_spec( CallContext context, CString * filename, CString * mode, ErrorCode * errno, bool is64bits );

/** fputc_spec **/
//This mediator refers to: fputc, putc, putc_unlocked, putchar, putchar_unlocked
mediator fputc_media for specification
IntT fputc_spec( CallContext context, IntT c, FILETPtr stream, ErrorCode * errno, IntT putc_type );

/** fputs_spec **/
mediator fputs_media for specification
IntT fputs_spec( CallContext context, CString * s, FILETPtr stream, ErrorCode * errno );

/** fread_spec **/
mediator fread_media for specification
SizeT fread_spec( CallContext context, VoidTPtr ptr, SizeT size, SizeT nitems, FILETPtr stream, ErrorCode * errno );

/** freopen_spec **/
//This mediator refers to: freopen, freopen64
mediator freopen_media for specification
FILETPtr freopen_spec( CallContext context,
                       CString * filename, CString * mode, FILETPtr stream, ErrorCode * errno, bool is64bits
                     );

/** fseek_spec **/
//This mediator refers to: fseek, fseeko, fseeko64
mediator fseek_media for specification
IntT fseek_spec( CallContext context, FILETPtr stream, OffT offset, IntT whence, IntT offsetType, ErrorCode * errno );

/** fsetpos_spec **/
//This mediator refers to: fsetpos, fsetpos64
mediator fsetpos_media for specification
IntT fsetpos_spec( CallContext context, FILETPtr stream, FPosTPtr pos, bool is64bits, ErrorCode * errno );

/** ftell_spec **/
//This mediator refers to: ftell, ftello, ftello64
mediator ftell_media for specification
OffT ftell_spec( CallContext context, FILETPtr stream, ErrorCode* errno, IntT offsetType);

/** fwrite_spec **/
mediator fwrite_media for specification
SizeT fwrite_spec( CallContext context, FILETPtr stream, VoidTPtr ptr, SizeT size, SizeT nitems, ErrorCode * errno );

/** getw_spec **/
mediator getw_media for specification
IntT getw_spec( CallContext context, FILETPtr stream, ErrorCode * errno );

/** puts_spec **/
mediator puts_media for specification
IntT puts_spec( CallContext context, CString * s, ErrorCode * errno );

/** putw_spec **/
mediator putw_media for specification
IntT putw_spec( CallContext context, FILETPtr stream, IntT w, ErrorCode * errno );

/** rewind_spec **/
mediator rewind_media for specification
void rewind_spec( CallContext context, FILETPtr stream, ErrorCode * errno );

/** ungetc_spec **/
mediator ungetc_media for specification
IntT ungetc_spec( CallContext context, FILETPtr stream, IntT c, bool toStdIn );

#endif
