/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "io/fstream/buffer_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initIoFstreamBufferSubsystem(void)
{
  // Set up mediators
    set_mediator_setbuf_spec   ( setbuf_media    );
    set_mediator_setbuffer_spec( setbuffer_media );
    set_mediator_setvbuf_spec  ( setvbuf_media   );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** setbuf_spec **/
mediator setbuf_media for specification
void setbuf_spec( CallContext context, FILETPtr stream, VoidTPtr buf )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "setbuf:$(ptr)$(ptr)",
            create_VoidTPtrObj(stream),
            create_VoidTPtrObj(buf)
            );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);

        return;
    }
}

/** setbuffer_spec **/
mediator setbuffer_media for specification
void setbuffer_spec( CallContext context, FILETPtr stream, VoidTPtr buf, SizeT size, ErrorCode * errno )
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "setbuffer:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(stream),
            create_VoidTPtrObj(buf),
            create_SizeTObj(size)
            );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            * errno = readInt_TSStream( & command.response );
        }

        destroy_TSCommand(&command);

        return;
    }
}

/** setvbuf_spec **/
mediator setvbuf_media for specification
IntT setvbuf_spec( CallContext context, FILETPtr stream, VoidTPtr buf, IntT type, SizeT size, ErrorCode * errno )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res=-1;

        format_TSCommand(&command, "setvbuf:$(ptr)$(ptr)$(int)$(size)",
            create_VoidTPtrObj(stream),
            create_VoidTPtrObj(buf),
            create_IntTObj(type),
            create_SizeTObj(size)
            );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}
