    /*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "time/conversion/conversion_media.seh"
#include "common/common_media.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initTimeConversionSubsystem(void)
{
    // Set up mediators
    set_mediator_asctime_spec    ( asctime_media     );
    set_mediator_asctime_r_spec  ( asctime_r_media   );
    set_mediator_ctime_spec      ( ctime_media       );
    set_mediator_ctime_r_spec    ( ctime_r_media     );
    set_mediator_gmtime_spec     ( gmtime_media      );
    set_mediator_gmtime_r_spec   ( gmtime_r_media    );
    set_mediator_localtime_spec  ( localtime_media   );
    set_mediator_localtime_r_spec( localtime_r_media );
    set_mediator_mktime_spec     ( mktime_media      );

    // Set up formatters
    registerTSFormatter( "tm", (TSFormatterFuncType)tm_formatter  );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** asctime_spec **/
mediator asctime_media for specification
CString * asctime_spec( CallContext context, TmTObj * timeptr )
{
    call
    {
        CString * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "asctime:$(tm)", timeptr );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            if ( readInt_TSStream( & command.response ) ) { res = NULL                                      ; }
                                                     else { res = readCString_TSStream( & command.response ); }
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** asctime_r_spec **/
mediator asctime_r_media for specification
CString * asctime_r_spec( CallContext context, TmTObj * timeptr, CString * buf )
{
    call
    {
        CString * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "asctime_r:$(tm)$(str)", timeptr, buf );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            if ( readInt_TSStream( & command.response ) ) { res = NULL                                      ; }
                                                     else { res = readCString_TSStream( & command.response ); }
            buf = readCString_TSStream( & command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** ctime_spec **/
mediator ctime_media for specification
CString * ctime_spec( CallContext context, TimeTObj * clock )
{
    call
    {
        CString * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "ctime:$(long)", clock );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            if ( readInt_TSStream( & command.response ) ) { res = NULL                                      ; }
                                                     else { res = readCString_TSStream( & command.response ); }
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** ctime_r_spec **/
mediator ctime_r_media for specification
CString * ctime_r_spec( CallContext context, TimeTObj * clock, CString * buf )
{
    call
    {
        CString * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "ctime_r:$(long)$(str)", clock, buf );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            if ( readInt_TSStream( & command.response ) ) { res = NULL                                      ; }
                                                     else { res = readCString_TSStream( & command.response ); }
            buf = readCString_TSStream( & command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** gmtime_spec **/
mediator gmtime_media for specification
TmTObj * gmtime_spec( CallContext context, TimeTObj * timer, ErrorCode * errno )
{
    call
    {
        TmTObj * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "gmtime:$(long)", timer );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readTm_TSStream       ( & command.response )         ;
            copy( readErrorCode_TSStream( & command.response ), errno );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** gmtime_r_spec **/
mediator gmtime_r_media for specification
TmTObj * gmtime_r_spec( CallContext context, TimeTObj * timer, TmTObj * result, ErrorCode * errno )
{
    call
    {
        TmTObj * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "gmtime_r:$(long)$(tm)", timer, result );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readTm_TSStream       ( & command.response )          ;
            copy( readTm_TSStream       ( & command.response ), result );
            copy( readErrorCode_TSStream( & command.response ), errno  );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** localtime_spec **/
mediator localtime_media for specification
TmTObj * localtime_spec( CallContext context, TimeTObj * timer, ErrorCode * errno )
{
    call
    {
        TmTObj * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "localtime:$(long)", timer );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readTm_TSStream       ( & command.response )         ;
            copy( readErrorCode_TSStream( & command.response ), errno );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** localtime_r_spec **/
mediator localtime_r_media for specification
TmTObj * localtime_r_spec( CallContext context, TimeTObj * timer, TmTObj * result, ErrorCode * errno )
{
    call
    {
        TmTObj * res;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "localtime_r:$(long)$(tm)", timer, result );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readTm_TSStream       ( & command.response )          ;
            copy( readTm_TSStream       ( & command.response ), result );
            copy( readErrorCode_TSStream( & command.response ), errno  );
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** mktime_spec **/
mediator mktime_media for specification
TimeT mktime_spec( CallContext context, TmTObj * timeptr, ErrorCode * errno )
{
    call
    {
        TimeT res = 0;

        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "mktime:$(tm)", timeptr );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readLong_TSStream      ( & command.response )         ;
            copy( readTm_TSStream       ( & command.response ), timeptr);
            copy( readErrorCode_TSStream( & command.response ), errno );
        }

        destroy_TSCommand(&command);

        return res;
    }
}
