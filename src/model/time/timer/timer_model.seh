/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TIME_TIMER_MODEL_SEH
#define TIME_TIMER_MODEL_SEH

#include "atl/set.h"
#include "atl/map.h"
#include "atl/list.h"
#include "common/common_model.seh"
#include "common/common_scenario.seh"
#include "pthread/pthread/pthread_model.seh"
#include "io/file/file_model.seh"
#include "data/signal_model.seh"
#include "data/time_model.seh"
#include "data/sys/time_model.seh"
#include "memory/mman/mman_model.seh"
#include "process/fenv/fenv_model.seh"
#include "util/getopt/getopt.seh"
#include "io/fstream/fstream_model.seh"

// will be moved to data/sigmal_model

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** common for alarm, setitimer, timer_settime and ualarm **/
specification typedef
struct OrderSignal
{
    String         * funcName   ;
    CallContext      context    ;
    UIntT            nanoseconds;
    TimeInterval     stimulTime ;
    // setitimer
    ITimerValTObj  * v_value    ;
    // timer_settime
    TimerTObj      * timerid    ;
    ITimerSpecTObj * s_value    ;
} OrderSignal;

OrderSignal * create_OrderSignal( String * funcName, CallContext context, UIntT nanoseconds, TimeInterval stimulTime,
                                  ITimerValTObj * v_value, TimerTObj * timerid, ITimerSpecTObj * s_value
                                );

void orderSignal( CallContext context, UIntT nanoseconds, Signal * signal, TimerTObj * timer,
                  const char * funcName, TimeInterval stimulTime, ITimerValTObj * v_value, ITimerSpecTObj * s_value
                );

specification typedef
struct SignalReceiveType
{
    String         * funcName      ;
    CallContext      context       ;
    IntT             returned_value;
    // setitimer, timer_settime, ualarm
    String         * stage         ;
    // setitimer
    ITimerValTObj  * v_ovalue      ;
    // timer_settime
    ITimerSpecTObj * s_ovalue      ;
    // setitimer, timer_settime
    ErrorCode      * error_code    ;
} SignalReceiveType;

SignalReceiveType * create_SignalReceiveType(
    String         * funcName      ,
    CallContext      context       ,
    IntT             returned_value,
    String         * stage         ,
    ITimerValTObj  * v_ovalue      ,
    ITimerSpecTObj * s_ovalue      ,
    ErrorCode      * error_code
    );

reaction SignalReceiveType * signal_receive( void );

void onSignalReceive( CallContext context, String * name );

/** alarm_spec **/
specification
void alarm_spec( CallContext context, UIntT seconds );

void onAlarm( CallContext context, UIntT seconds, TimeInterval stimulTime );

/** getitimer_spec **/
specification
IntT getitimer_spec( CallContext context, IntT which, ITimerValTObj * value, ErrorCode * errno );

/** nanosleep_spec **/
specification
void nanosleep_spec( CallContext context, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp );

void onNanosleep( CallContext context, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp, TimeInterval stimulTime );

/** setitimer_spec **/
specification
void setitimer_spec( CallContext context, IntT which, ITimerValTObj * value, ITimerValTObj * ovalue );

void onSetitimer( CallContext context, IntT which, ITimerValTObj * value, TimeInterval stimulTime );

/** sleep_spec **/
specification
void sleep_spec( CallContext context, UIntT seconds );

void onSleep( CallContext context, UIntT seconds, TimeInterval stimulTime );

/** timer_create_spec **/
specification
IntT timer_create_spec
         ( CallContext context, ClockidTObj * clock_id, Signal * evp, TimerTObj * timerid, ErrorCode * errno );

/** timer_delete_spec **/
specification
IntT timer_delete_spec( CallContext context, TimerTObj * timerid, ErrorCode * errno );

/** timer_getoverrun_spec **/
specification
IntT timer_getoverrun_spec( CallContext context, TimerTObj * timerid, ErrorCode * errno );

/** timer_gettime_spec **/
specification
IntT timer_gettime_spec( CallContext context, TimerTObj * timerid, ITimerSpecTObj * value, ErrorCode * errno );

/** timer_settime_spec **/
specification
void timer_settime_spec
         ( CallContext context, TimerTObj * timerid, IntT flags, ITimerSpecTObj * value, ITimerSpecTObj * ovalue );

void onTimerSettime
         ( CallContext context, TimerTObj * timerid, IntT flags, ITimerSpecTObj * value, TimeInterval stimulTime );

/** ualarm_spec **/
specification
void ualarm_spec( CallContext context, USecondsT useconds, USecondsT interval );

void onUalarm( CallContext context, USecondsT useconds, USecondsT interval, TimeInterval stimulTime );

/** usleep_spec **/
specification
void usleep_spec( CallContext context, USecondsT useconds );

void onUsleep( CallContext context, USecondsT useconds, TimeInterval stimulTime );

#endif
