/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TIME_TIMER_MEDIA_SEH
#define TIME_TIMER_MEDIA_SEH

#include "time/timer/timer_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initTimeTimerSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** common for alarm, setitimer, timer_settime and ualarm **/
mediator signal_receive_media for reaction
SignalReceiveType * signal_receive( void );

/** alarm_spec **/
mediator alarm_media for specification
void alarm_spec( CallContext context, UIntT seconds );

/** getitimer_spec **/
mediator getitimer_media for specification
IntT getitimer_spec( CallContext context, IntT which, ITimerValTObj * value, ErrorCode * errno );

/** nanosleep_spec **/
mediator nanosleep_media for specification
void nanosleep_spec( CallContext context, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp );

/** setitimer_spec **/
mediator setitimer_media for specification
void setitimer_spec( CallContext context, IntT which, ITimerValTObj * value, ITimerValTObj * ovalue );

/** sleep_spec **/
mediator sleep_media for specification
void sleep_spec( CallContext context, UIntT seconds );

/** timer_create_spec **/
mediator timer_create_media for specification
IntT timer_create_spec
         ( CallContext context, ClockidTObj * clock_id, Signal * evp, TimerTObj * timerid, ErrorCode * errno );

/** timer_delete_spec **/
mediator timer_delete_media for specification
IntT timer_delete_spec( CallContext context, TimerTObj * timerid, ErrorCode * errno );

/** timer_getoverrun_spec **/
mediator timer_getoverrun_media for specification
IntT timer_getoverrun_spec( CallContext context, TimerTObj * timerid, ErrorCode * errno );

/** timer_gettime_spec **/
mediator timer_gettime_media for specification
IntT timer_gettime_spec( CallContext context, TimerTObj * timerid, ITimerSpecTObj * value, ErrorCode * errno );

/** timer_settime_spec **/
mediator timer_settime_media for specification
void timer_settime_spec
         ( CallContext context, TimerTObj * timerid, IntT flags, ITimerSpecTObj * value, ITimerSpecTObj * ovalue );

/** ualarm_spec **/
mediator ualarm_media for specification
void ualarm_spec( CallContext context, USecondsT useconds, USecondsT interval );

/** usleep_spec **/
mediator usleep_media for specification
void usleep_spec( CallContext context, USecondsT useconds );

#endif
