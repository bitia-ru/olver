/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "system/sysconf/sysconf_media.seh"
#include "system/user/user_media.seh"
#include "process/meta/user_media.seh"
#include "time/time/tests/time_scenario.seh"
#include "time/time/time_model.seh"
#include "time/time/time_media.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static bool needOnlyFirstPriority;

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static List /* NULL */ * functionData;

/********************************************************************/
/**                      Helper Functions                          **/
/********************************************************************/

static List * createContexts( void ) { return createProcesses( true ); }

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static String * testingFuncName;

static bool init_scenario( char * name )
{
    needOnlyFirstPriority = false;
    //needOnlyFirstPriority = true;
    verbose( "%s\n", name );
    dotPrint( 0, 0 );
    testingFuncName = create_String( name );
    if ( ( functionData = createContexts() ) == NULL ) { return false; }
    setFinishMode( UNTIL_END );
    return true;
}

#define finish_scenario( name ) \
{ \
    verbose( "\n" ); \
    TEST_SCENARIO_VERDICT_VERBOSE( name##_scenario ); \
}

static bool init_time_scenario( int argc, char ** argv ) { return init_scenario( "time" ); }

static void finish_time_scenario( void ) finish_scenario( time )

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool adjtime_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        iterate ( int deltaI = 1; deltaI <= 3; deltaI++; )
        {
            TimeValTObj * delta;
            switch ( deltaI ) {
                case 1: delta = create_TimeValTObj( -1, -1 ); break;
                case 2: delta = create_TimeValTObj(  0,  0 ); break;
                case 3: delta = create_TimeValTObj(  1,  1 ); break;
            }
            iterate ( int olddeltaI = 1; olddeltaI <= 2; olddeltaI++; )
            {
                TimeValTObj * olddelta;
                switch ( olddeltaI ) {
                    case 1: olddelta = NULL                        ; break;
                    case 2: olddelta = create_TimeValTObj(  0,  0 ); break;
                }
                dotPrint( 10, 100 );
                // verbose( "adjtime\n" );
                adjtime_spec( * contextObj, delta, olddelta, requestErrorCode() );
            } // iterate olddeltaI
        } // iterate deltaI
    } // iterate contextI
    return true;
}

scenario
bool difftime_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        iterate ( int time1I = 1; time1I <= 3; time1I++; )
        {
            TimeT time1;
            switch ( time1I ) {
                case 1: time1 = 0         ; break;
                case 2: time1 = 500       ; break;
                case 3: time1 = 1000000000; break;
            }
            iterate ( int time2I = 1; time2I <= 3; time2I++; )
            {
                TimeT time2;
                switch ( time2I ) {
                    case 1: time2 = 0         ; break;
                    case 2: time2 = 500       ; break;
                    case 3: time2 = 1000000000; break;
                }
                dotPrint( 10, 100 );
                // verbose( "difftime\n" );
                difftime_spec( * contextObj, time1, time2 );
            } // iterate time2I
        } // iterate time1I
    } // iterate contextI
    return true;
}

scenario
bool ftime_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        dotPrint( 10, 100 );
        // verbose( "ftime\n" );
        ftime_spec( * contextObj, create_TimeBTObj( 0, 0, 0, 0 ) );
    } // iterate contextI
    return true;
}

scenario
bool gettimeofday_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        dotPrint( 10, 100 );
        // verbose( "gettimeofday\n" );
        gettimeofday_spec( * contextObj, create_TimeValTObj( 0, 0 ), NULL_VoidTPtr );
    } // iterate contextI
    return true;
}

scenario
bool stime_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        iterate ( int tI = 1; tI <= 3; tI++; )
        {
            TimeT tOld;
            TimeTObj * t;
            switch ( tI ) {
                case 1: t = NULL                   ; break;
                case 2: t = create_TimeTObj( 0    ); break;
                case 3: t = create_TimeTObj( 1000 ); break;
            }
            dotPrint( 10, 100 );
            // verbose( "time\n" );
            tOld = time_spec( * contextObj, create_TimeTObj( 0 ) );
            // verbose( "stime\n" );
            stime_spec( * contextObj, t, requestErrorCode() );
            // verbose( "stime\n" );
            stime_spec( * contextObj, create_TimeTObj( tOld + 2 ), requestErrorCode() );
        } // iterate tI
    } // iterate contextI
    return true;
}

scenario
bool time_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        iterate ( int tlocI = 1; tlocI <= 2; tlocI++; )
        {
            TimeTObj * tloc;
            switch ( tlocI ) {
                case 1: tloc = NULL                ; break;
                case 2: tloc = create_TimeTObj( 0 ); break;
            }
            dotPrint( 10, 100 );
            // verbose( "time\n" );
            time_spec( * contextObj, tloc );
        } // iterate tlocI
    } // iterate contextI
    return true;
}

scenario
bool tzset_scen()
{
    iterate ( int contextI = 0; contextI < ( needOnlyFirstPriority ? 1 : size_List( functionData ) ); contextI++; )
    {
        ThreadIdObj * contextObj = get_List( functionData, contextI );
        dotPrint( 10, 100 );
        // verbose( "tzset\n" );
        tzset_spec( * contextObj );
    } // iterate contextI
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm time_scenario =
{
    .init              = init_time_scenario  ,
    .finish            = finish_time_scenario,
    .actions           = { adjtime_scen     ,
                           difftime_scen    ,
                           ftime_scen       ,
                           gettimeofday_scen,
                           stime_scen       ,
                           time_scen        ,
                           tzset_scen       ,
                           NULL
                         }
};

#ifdef TIME_TIME_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "process/process/process_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initSystemSysconfSubsystem();
    initSystemUserSubsystem();
    initProcessMetaUserSubsystem();

    initTimeTimeSubsystem();
}

bool time_time_local( int argc, char ** argv )
{
    time_scenario( argc, argv );
    return true;
}

int main( int argc, char ** argv )
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    addTraceToFile( "trace.xml_CTesK" );

    // Run test scenario
    time_time_local( argc, argv );

    //  unloadSUT();
    return 0;
}

#endif
