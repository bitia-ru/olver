/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef TIME_CLOCK_MEDIA_SEH
#define TIME_CLOCK_MEDIA_SEH

#include "time/clock/clock_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initTimeClockSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** clock_getcpuclockid_spec **/
mediator clock_getcpuclockid_media for specification
IntT clock_getcpuclockid_spec( CallContext context, ProcessId pid, ClockidTObj * clock_id );

/** clock_getres_spec **/
mediator clock_getres_media for specification
IntT clock_getres_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * res, ErrorCode * errno );

/** clock_gettime_spec **/
mediator clock_gettime_media for specification
IntT clock_gettime_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * tp, ErrorCode * errno );

/** common for clock_nanosleep, nanosleep, sleep and usleep **/
mediator sleep_return_media for reaction
SleepReturnType * sleep_return( void );

/** clock_nanosleep_spec **/
mediator clock_nanosleep_media for specification
void clock_nanosleep_spec
         ( CallContext context, ClockidTObj * clock_id, IntT flags, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp );

/** clock_settime_spec **/
mediator clock_settime_media for specification
IntT clock_settime_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * tp, ErrorCode * errno );

#endif
