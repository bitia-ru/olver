/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TIME_CLOCK_MODEL_SEH
#define TIME_CLOCK_MODEL_SEH

#include "atl/set.h"
#include "atl/map.h"
#include "atl/list.h"
#include "common/common_model.seh"
#include "common/common_scenario.seh"
#include "pthread/pthread/pthread_model.seh"
#include "io/file/file_model.seh"
#include "data/signal_model.seh"
#include "data/sys/types_model.seh"
#include "data/time_model.seh"
#include "memory/mman/mman_model.seh"
#include "process/fenv/fenv_model.seh"
#include "util/getopt/getopt.seh"
#include "io/fstream/fstream_model.seh"
#include "process/process/process_model.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** clock_getcpuclockid_spec **/
specification
IntT clock_getcpuclockid_spec( CallContext context, ProcessId pid, ClockidTObj * clock_id );

/** clock_getres_spec **/
specification
IntT clock_getres_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * res, ErrorCode * errno );

/** clock_gettime_spec **/
specification
IntT clock_gettime_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * tp, ErrorCode * errno );

/** common for clock_nanosleep, nanosleep, sleep and usleep **/
specification typedef
struct SleepCall
{
    String       * funcName   ;
    CallContext    context    ;
    TimeInterval   stimulTime ;
    // clock_nanosleep
    ClockidTObj  * clock_id   ;
    IntT           flags      ;
    // clock_nanosleep, nanosleep
    TimeSpecTObj * rqtp       ;
    TimeSpecTObj * rmtp       ;
    // sleep, usleep
    UIntT          nanoseconds;
} SleepCall;

SleepCall * create_SleepCall( String * funcName, CallContext context, TimeInterval stimulTime,
                              ClockidTObj * clock_id, IntT flags, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp,
                              UIntT nanoseconds
                            );

specification typedef
struct SleepReturnType
{
    String       * funcName      ;
    CallContext    context       ;
    IntT           returned_value;
    // clock_nanosleep, nanosleep
    TimeSpecTObj * rmtp          ;
    // nanosleep, usleep
    ErrorCode    * error_code    ;
} SleepReturnType;

SleepReturnType * create_SleepReturnType(
    String       * funcName      ,
    CallContext    context       ,
    IntT           returned_value,
    TimeSpecTObj * rmtp          ,
    ErrorCode    * error_code 
);

reaction SleepReturnType * sleep_return( void );

void onSleepReturn( CallContext context );

/** clock_nanosleep_spec **/
specification
void clock_nanosleep_spec
         ( CallContext context, ClockidTObj * clock_id, IntT flags, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp );

void onClockNanosleep( CallContext context,
                       ClockidTObj * clock_id, IntT flags, TimeSpecTObj * rqtp, TimeSpecTObj * rmtp,
                       TimeInterval stimulTime
                     );

/** clock_settime_spec **/
specification
IntT clock_settime_spec( CallContext context, ClockidTObj * clock_id, TimeSpecTObj * tp, ErrorCode * errno );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

TimeSpecTObj * getTpTruncated( TimeSpecTObj * tp, TimeSpecTObj * res );

#endif
