/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_MEDIA_SEH
#define SOCKET_MEDIA_SEH

#include "socket/socket/socket_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketSocketSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** accept_spec **/
mediator accept_media for specification
void accept_spec( CallContext context, FileDescId socket);

mediator accept_return_media for reaction
AcceptReturnType* accept_return(void);


/** bind_spec **/
mediator bind_media for specification
IntT bind_spec( CallContext context, FileDescId socket, SockaddrT* address, ErrorCode* errno);

/** bindresvport_spec **/
mediator bindresvport_media for specification
IntT bindresvport_spec( CallContext context, FileDescId sd, SockaddrT* addr, ErrorCode* errno);

/** connect_spec **/
mediator connect_media for specification
void connect_spec( CallContext context, FileDescId socket, SockaddrT* address);

mediator connect_return_media for reaction
ConnectReturnType* connect_return(void);

/** getpeername_spec **/
mediator getpeername_media for specification
GetPeerNameReturnType* getpeername_spec( CallContext context, FileDescId socket, ErrorCode* errno);

/** getsockname_spec **/
mediator getsockname_media for specification
GetSockNameReturnType* getsockname_spec( CallContext context, FileDescId socket, ErrorCode* errno);

/** getsockopt_spec **/
mediator getsockopt_media for specification
GetSockOptReturnType* getsockopt_spec(CallContext context, FileDescId socket, IntT level, IntT option_name, 
                                      ErrorCode* errno);

/** listen_spec **/
mediator listen_media for specification
IntT listen_spec( CallContext context, FileDescId socket, IntT backlog, ErrorCode* errno);

/** recv_spec **/
//This mediator refers to: recv, recvfrom
mediator recv_media for specification
void recv_spec( CallContext context, FileDescId socket, SizeT length, bool peek, bool oob, bool waitall, bool from);

mediator recv_return_media for reaction
RecvReturnType* recv_return(void);

/** recvmsg_spec **/
mediator recvmsg_media for specification
void recvmsg_spec(CallContext context, FileDescId socket, SocketMsgHdr* msg,  
                  bool peek, bool oob, bool waitall);

mediator recvmsg_return_media for 
reaction RecvmsgReturnType* recvmsg_return(void);

/** send_spec **/
//This mediator refers to: send, sendto
mediator send_media for specification
void send_spec( CallContext context, FileDescId socket, CByteArray* data, bool MSG_EOR_FLAG, bool MSG_OOB_FLAG, SockaddrT* dest_addr);

mediator send_return_media for reaction
SendReturnType* send_return(void);


/** sendmsg_spec **/
mediator sendmsg_media for specification
void sendmsg_spec(CallContext context, FileDescId socket, SocketMsgHdr* msg, 
                  bool flag_MSG_EOR, bool flag_MSG_OOB, ErrorCode* errno);

mediator sendmsg_return_media for reaction
SendMsgReturnType* sendmsg_return(void);


/** setsockopt_spec **/
mediator setsockopt_media for specification
IntT setsockopt_spec(CallContext context, FileDescId socket, IntT level, SocketOption option,
                     SocketOptionValue* value, ErrorCode* errno);

/** shutdown_spec **/
mediator shutdown_media for specification
IntT shutdown_spec( CallContext context, FileDescId socket, ShutdownType how, ErrorCode* errno);

/** sockatmark_spec **/
mediator sockatmark_media for specification
IntT sockatmark_spec( CallContext context, FileDescId s, ErrorCode* errno);

/** socket_spec **/
mediator socket_media for specification
FileDescId socket_spec(CallContext context, SocketDomain  domain, 
                       SocketType type, SocketProtocol protocol, 
                       ErrorCode* errno);

/** socketpair_spec **/
mediator socketpair_media for specification
SocketPairReturnType* socketpair_spec( CallContext context,  SocketDomain  domain, SocketType type, SocketProtocol protocol, ErrorCode* errno);


/** write_socket_spec **/
mediator write_socket_media for specification
void write_socket_spec(CallContext context, FileDescId socket, VoidTPtr buf, SizeT nbyte);

mediator write_socket_return_media for reaction
WriteSocketReturnType* write_socket_return(void);


/** read_socket_spec **/
mediator read_socket_media for specification
void read_socket_spec(CallContext context, FileDescId socket, SizeT nbyte);

mediator read_socket_return_media for reaction
ReadSocketReturnType* read_socket_return(void);


/** writev_socket_spec **/
mediator writev_socket_media for specification
void writev_socket_spec(CallContext context,  FileDescId  socket, List *iov);

mediator writev_socket_return_media for reaction
WritevSocketReturnType* writev_socket_return(void);

/** readv_socket_spec **/
mediator readv_socket_media for specification
void readv_socket_spec(CallContext context,  FileDescId  socket, List *iov);

mediator readv_socket_return_media for reaction
ReadvSocketReturnType* readv_socket_return(void);

/** sockio_spec **/
mediator sockio_media for specification
SockIoReturnType* sockio_spec(CallContext context, FileDescId socket, IntT request, IfConfT* argp, ErrorCode* errno);

#endif

