/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_MODEL_SEH
#define SOCKET_MODEL_SEH

#include "common/common_model.seh"
#include "io/file/file_model.seh"
#include "io/file/file_model.seh"
#include "data/sys/time_model.seh"

/********************************************************************/
/**                      SockaddrT Type                            **/
/********************************************************************/
#define SUT_SOCK_RDM        4
#define SUT_SOCK_PACKET     10
    
typedef enum SaFamilyT
{
    SUT_AF_UNSPEC   =0,
    SUT_AF_UNIX     =1,
    SUT_AF_INET6    =10,
    SUT_AF_INET     =2
} SaFamilyT;


specification typedef struct SockaddrT
{
    SaFamilyT   family;
    Object      *addr;   // either InetAddrT or Inet6AddrT
} SockaddrT;

SockaddrT * create_SockaddrT(
    SaFamilyT   family,
    Object      *addr    
);

/********************************************************************/
/**                      InetAddrT Type                            **/
/********************************************************************/

#define SUT_INADDR_NONE    ((UInt32T) 0xffffffff)
#define SUT_INADDR_BROADCAST    (0xffffffff)
#define SUT_INADDR_ANY    0
#define SUT_INADDR_LOOPBACK    ((UInt32T) 0x7F000001)

specification typedef struct InetAddrT
{
    UShortT       sin_port;
    UInt32T       sin_addr;
} InetAddrT;

InetAddrT * create_InetAddrT(
    UShortT       sin_port,
    UInt32T       sin_addr
);

SockaddrT *   create_SockaddrT_Inet(UShortT sin_port, UInt32T sin_addr);

UShortT       getInetSocket_sin_port(SockaddrT* addr);
void          setInetSocket_sin_port(SockaddrT* addr, UShortT val);

UInt32T       getInetSocket_sin_addr(SockaddrT* addr);
void          setInetSocket_sin_addr(SockaddrT* addr, UInt32T val);

/********************************************************************/
/**                      Inet6AddrT Type                           **/
/********************************************************************/
//the same defines exitst in #include "data/netinet/in_model.seh"

#define SUT_IN6ADDR_ANY_INIT        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
#define SUT_IN6ADDR_LOOPBACK_INIT    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 }

#define INET6_ADDRESSLEN    16


specification typedef struct Inet6AddrT
{
    UInt16T         sin6_port;
    UInt32T         sin6_flowinfo;
    UInt8T          u6_addr8[INET6_ADDRESSLEN]; 
    UInt32T         sin6_scope_id;
} Inet6AddrT;

Inet6AddrT * create_Inet6AddrT(
    UInt16T         sin6_port,
    UInt32T         sin6_flowinfo,
    UInt8T          u6_addr8[INET6_ADDRESSLEN], 
    UInt32T         sin6_scope_id
);

SockaddrT *create_SockaddrT_Inet6(UInt16T sin6_port, UInt32T sin6_flowinfo, 
                                  UInt8T u6_addr8[], UInt32T sin6_scope_id);

UInt16T       getInet6Socket_sin6_port(SockaddrT* addr);
void          setInet6Socket_sin6_port(SockaddrT* addr, UInt16T val);

UInt32T       getInet6Socket_sin6_flowinfo(SockaddrT* addr);
void          setInet6Socket_sin6_flowinfo(SockaddrT* addr, UInt32T val);

UInt8T*       getInet6Socket_u6_addr8(SockaddrT* addr); 
void          setInet6Socket_u6_addr8(SockaddrT* addr, UInt8T val[]); 

UInt32T       getInet6Socket_sin6_scope_id(SockaddrT* addr);
void          setInet6Socket_sin6_scope_id(SockaddrT* addr, UInt32T val);


/********************************************************************/
/**                      UnixAddrT Type                           **/
/********************************************************************/


#define MAX_UNIX_ADDRESS_SIZE 14

specification typedef struct UnixAddrT
{
    CString* path;
} UnixAddrT;

UnixAddrT * create_UnixAddrT(CString* path);

SockaddrT *create_SockaddrT_Unix(CString* path);

CString*      getUnixSocket_path(SockaddrT* addr);
void          setUnixSocket_path(SockaddrT* addr, CString* val);


/********************************************************************/
/**                      SocketFileDescriptor Type                 **/
/********************************************************************/

typedef enum SocketDomain
{
    SUT_PF_INET    = 2,
    SUT_PF_INET6 = 10,
    SUT_PF_UNIX    = 1,
    SUT_PF_UNSPEC = 0
} SocketDomain;


typedef enum SocketType
{
    SUT_SOCK_STREAM    = 1,
//    SUT_SOCK_PACKET    = 10,
    SUT_SOCK_DGRAM    = 2,
    SUT_SOCK_RAW =    3,
//    SUT_SOCK_RDM = 4,
    SUT_SOCK_SEQPACKET = 5
} SocketType;


typedef enum SocketProtocol
{
    SUT_IPPROTO_IP = 0,
    SUT_IPPROTO_ICMP =    1,
    SUT_IPPROTO_UDP    = 17,
    SUT_IPPROTO_IGMP =    2,
    SUT_IPPROTO_RAW     = 255,
    SUT_IPPROTO_IPV6 =    41,
    SUT_IPPROTO_ICMPV6 = 58,
    SUT_IPPROTO_TCP = 6
} SocketProtocol;


typedef enum ShutdownType
{
    SUT_SHUT_RD=0,
    SUT_SHUT_WR=1,
    SUT_SHUT_RDWR=2,
    SUT_NO_SHUT=-1
}ShutdownType;


typedef enum SocketOption
{
    SUT_SO_DEBUG = 1,
    SUT_SO_OOBINLINE = 10,
    SUT_SO_LINGER =    13,
    SUT_SO_REUSEADDR =2,
    SUT_SO_DONTROUTE =    5,
    SUT_SO_BROADCAST =    6,
    SUT_SO_SNDBUF =    7,
    SUT_SO_RCVBUF =    8,
    SUT_SO_KEEPALIVE =    9,
    SUT_SO_RCVLOWAT     = 18,
    SUT_SO_SNDLOWAT    = 19,
    SUT_SO_RCVTIMEO    = 20,
    SUT_SO_SNDTIMEO     = 21
}SocketOption;

#define SUT_SOL_SOCKET    1
#define SUT_SOCKET_BUFFERSIZE 256
#define SUT_SOMAXCONN    128
#define SUT_SOCKET_OPTIONS_NUMBER    14


specification typedef struct SocketLinger {
    IntT l_onoff;
    IntT l_linger;
} SocketLinger;

SocketLinger * create_SocketLinger(
    IntT l_onoff,
    IntT l_linger
);

specification typedef struct SocketOptionValue
{
    IntT          value;
    SocketLinger* ling_val;
    TimeValTObj*  time_val;
    bool isInt;
    bool isLing;
}SocketOptionValue;

SocketOptionValue * create_SocketOptionValue(
    IntT          value,
    SocketLinger* ling_val,
    TimeValTObj*  time_val,
    bool isInt,
    bool isLing
);

SocketOptionValue* create_SocketOptionValue_Int(IntT val);
SocketOptionValue* create_SocketOptionValue_Linger(IntT l_onoff, IntT l_linger);
SocketOptionValue* create_SocketOptionValue_Time(TimeT sec, LongT usec);
void sockoptionval_formatter(TSStream *stream, SocketOptionValue* value);
Bool3 isSocketOptionValid(IntT level, FileDescId socket, SocketOption option);

specification typedef struct SocketFileDescriptor
{
    SockaddrT*     addr; 
    SockaddrT*     peer_addr;
    SocketDomain   domain;
    SocketType     type;
    SocketProtocol protocol;
    CByteArray*    data;
    bool           connectRequested;
    bool           listening; 
    IntT           backlog; 
    FileDescId     lastAccepted; 
    List*          waitingAccept; 
    FileDescId     pairId;
    ShutdownType   shutdown;
    Map*           socketOptions;
    List*          udpData;
    List*          sentMessages;
    FileDescId     socketPair_Buddy;
}SocketFileDescriptor;

SocketFileDescriptor * create_SocketFileDescriptor(
    SockaddrT*     addr, 
    SockaddrT*     peer_addr,
    SocketDomain   domain,
    SocketType     type,
    SocketProtocol protocol,
    CByteArray*    data,
    bool           connectRequested,
    bool           listening, 
    IntT           backlog, 
    FileDescId     lastAccepted, 
    List*          waitingAccept, 
    FileDescId     pairId,
    ShutdownType   shutdown,
    Map*           socketOptions,
    List*          udpData,
    List*          sentMessages,
    FileDescId     socketPair_Buddy
);

SocketFileDescriptor* create_SocketDescriptor(SocketDomain  domain, SocketType type, SocketProtocol protocol);

FileDescriptor*  create_DefaultSocketFileDescriptor(FileDescId  sock_id, SocketFileDescriptor* desc );
FileDescriptor*  register_SocketDesriptor(FileDescId  sock_id, SocketFileDescriptor* desc );

SockaddrT*    getSocketFileDescriptor_addr(SocketFileDescriptor* desc); 
void          setSocketFileDescriptor_addr(SocketFileDescriptor* desc, SockaddrT* val); 

SockaddrT*    getSocketFileDescriptor_peer_addr(SocketFileDescriptor* desc);
void          setSocketFileDescriptor_peer_addr(SocketFileDescriptor* desc, SockaddrT* val);

SocketDomain  getSocketFileDescriptor_domain(SocketFileDescriptor* desc);
void          setSocketFileDescriptor_domain(SocketFileDescriptor* desc, SocketDomain val);

SocketType    getSocketFileDescriptor_type(SocketFileDescriptor* desc);
void          setSocketFileDescriptor_type(SocketFileDescriptor* desc, SocketType val);

SocketProtocol getSocketFileDescriptor_protocol(SocketFileDescriptor* desc);
void           setSocketFileDescriptor_protocol(SocketFileDescriptor* desc, SocketProtocol val);

CByteArray*    getSocketFileDescriptor_data(SocketFileDescriptor* desc);
void           setSocketFileDescriptor_data(SocketFileDescriptor* desc, CByteArray* val);



/********************************************************************/
/**                      SocketMsgHdr Type                         **/
/********************************************************************/

#define SUT_SCM_RIGHTS    0x01
#define SUT_SOL_RAW    255

specification typedef struct CmsgHdrData {
    IntT        cmsg_level;
    IntT        cmsg_type;
    CByteArray* data;
} CmsgHdrData;

CmsgHdrData* create_CmsgHdrData(IntT  cmsg_level, IntT  cmsg_type, CByteArray* data);

#define SUT_MSG_DONTROUTE    4
#define SUT_MSG_WAITALL        0x100
#define SUT_MSG_TRUNC        0x20
#define SUT_MSG_EOR            0x80
#define SUT_MSG_OOB            1
#define SUT_MSG_PEEK        2
#define SUT_MSG_CTRUNC        8

specification typedef struct SocketMsgHdr {
    SockaddrT*  msg_name;
    List*       msg_iov;
    CmsgHdrData* msg_control;
    UIntT       msg_flags;
}SocketMsgHdr ;

SocketMsgHdr* create_SocketMsgHdr(SockaddrT* msg_name, List* msg_iov, IntT msg_control_level, IntT msg_control_type, CByteArray* msg_control_data, UIntT  msg_flags);



/********************************************************************/
/**                      IfConfT Type                              **/
/********************************************************************/
#define SUT_IF_NAMESIZE    16

#define SUT_SIOCGIFCONF    0x8912
#define SUT_SIOCGIFFLAGS    0x8913
#define SUT_SIOCGIFADDR    0x8915
#define SUT_SIOCGIFNETMASK    0x891b

#define SUT_SIOCGIFBRDADDR 0x8919 
#define SUT_SIOCGIFMTU 0x8921
#define SUT_FIONREAD 0x541B

specification typedef struct IfReqT
{
    CByteArray* ifrn_name;
    CByteArray* ifru_data;
} IfReqT;

IfReqT* create_IfReqT(CString* ifr_name);
IfReqT* create_IfReqT_Full(CByteArray* ifrn_name, CByteArray* ifru_data);

specification typedef struct IfConfT
{
    List* ifcu_reqs; // of IfReqT
} IfConfT;

IfConfT* create_IfConfT();

/********************************************************************/
/**                      Defered Reactions Types                   **/
/********************************************************************/

specification typedef struct ConnectCall
{
    FileDescId socket;
    SockaddrT* address;
    SockaddrT* peer_addr;
}ConnectCall;

ConnectCall * create_ConnectCall(
    FileDescId socket,
    SockaddrT* address,
    SockaddrT* peer_addr
);

specification typedef struct ConnectReturnType
{
    CallContext context;
    IntT functionResult;
    ErrorCode* errno;
    SockaddrT* peerAddr;
} ConnectReturnType;

ConnectReturnType * create_ConnectReturnType(
    CallContext context,
    IntT functionResult,
    ErrorCode* errno,
    SockaddrT* peerAddr
);

specification typedef struct AcceptCall
{
    FileDescId socket;
}AcceptCall;

AcceptCall * create_AcceptCall(
    FileDescId socket
);

specification typedef struct AcceptReturnType
{
    CallContext context;
    SockaddrT*  acceptedAddr;
    FileDescId  funcRes;
    ErrorCode*  errno;
}AcceptReturnType;

AcceptReturnType * create_AcceptReturnType(
    CallContext context,
    SockaddrT*  acceptedAddr,
    FileDescId  funcRes,
    ErrorCode*  errno
);

specification typedef struct SendCall
{
    FileDescId socket;
    CByteArray* data;
    bool MSG_EOR_FLAG;
    bool MSG_OOB_FLAG;
    SockaddrT* dest_addr;
}SendCall;

SendCall * create_SendCall(
    FileDescId socket,
    CByteArray* data,
    bool MSG_EOR_FLAG,
    bool MSG_OOB_FLAG,
    SockaddrT* dest_addr
);

specification typedef struct SendReturnType
{
    CallContext context;
    SSizeT  funcRes;
    ErrorCode*  errno;
}SendReturnType;

SendReturnType * create_SendReturnType(
    CallContext context,
    SSizeT  funcRes,
    ErrorCode*  errno
);

specification typedef struct RecvCall
{
    FileDescId socket;
    SizeT length;
    bool peek;
    bool oob;
    bool waitall;
    bool from;
    CByteArray* oldData;
}RecvCall;

RecvCall * create_RecvCall(
    FileDescId socket,
    SizeT length,
    bool peek,
    bool oob,
    bool waitall,
    bool from,
    CByteArray* oldData
);

specification typedef struct RecvmsgCall
{
    FileDescId socket;
    SocketMsgHdr* msg;
    bool peek;
    bool oob;
    bool waitall;
}RecvmsgCall;

RecvmsgCall * create_RecvmsgCall(
    FileDescId socket,
    SocketMsgHdr* msg,
    bool peek,
    bool oob,
    bool waitall
);

specification typedef struct RecvReturnType
{
    CallContext context;
    SSizeT      retVal;
    CByteArray* returnedData;
    SockaddrT*  addr;
    ErrorCode*  errno;
    CByteArray* notModifiedData;
    List*       notUDPModifiedData;     
}RecvReturnType;

RecvReturnType * create_RecvReturnType(
    CallContext context,
    SSizeT      retVal,
    CByteArray* returnedData,
    SockaddrT*  addr,
    ErrorCode*  errno,
    CByteArray* notModifiedData,
    List*       notUDPModifiedData
);

specification typedef struct RecvmsgReturnType
{
    CallContext context;
    SSizeT      retVal;
    ErrorCode*  errno;
    SocketMsgHdr* msg;
    SSizeT      msgDataLength;
    List*       notModifiedSentMessages;
}RecvmsgReturnType;

RecvmsgReturnType * create_RecvmsgReturnType(
    CallContext context,
    SSizeT      retVal,
    ErrorCode*  errno,
    SocketMsgHdr* msg,
    SSizeT      msgDataLength,
    List*       notModifiedSentMessages
);

specification typedef struct GetPeerNameReturnType
{
    IntT funcRes;
    SockaddrT* address;
} GetPeerNameReturnType;

GetPeerNameReturnType * create_GetPeerNameReturnType(
    IntT funcRes,
    SockaddrT* address
);

specification typedef struct GetSockNameReturnType
{
    IntT funcRes;
    SockaddrT* address;
} GetSockNameReturnType;

GetSockNameReturnType * create_GetSockNameReturnType(
    IntT funcRes,
    SockaddrT* address
);

specification typedef  struct SocketPairReturnType
{
    IntT funcRes;
    FileDescId sock1;
    FileDescId sock2;
}SocketPairReturnType;

SocketPairReturnType * create_SocketPairReturnType(
    IntT funcRes,
    FileDescId sock1,
    FileDescId sock2
);

specification typedef struct GetSockOptReturnType
{
    IntT funcRes;
    SocketOptionValue* val;
}GetSockOptReturnType;

GetSockOptReturnType * create_GetSockOptReturnType(
    IntT funcRes,
    SocketOptionValue* val
);

specification typedef struct SendMsgCall
{
    FileDescId socket;
    SocketMsgHdr* msg;
    bool flag_MSG_EOR;
    bool flag_MSG_OOB;
}SendMsgCall;

SendMsgCall * create_SendMsgCall(
    FileDescId socket,
    SocketMsgHdr* msg,
    bool flag_MSG_EOR,
    bool flag_MSG_OOB
);

specification typedef struct SendMsgReturnType
{
    CallContext context;
    SSizeT  funcRes;
    ErrorCode*  errno;
}SendMsgReturnType;

SendMsgReturnType * create_SendMsgReturnType(
    CallContext context,
    SSizeT  funcRes,
    ErrorCode*  errno
);

specification typedef struct WriteSocketCall
{
    FileDescId socket;
    VoidTPtr buf;
    SizeT nbyte;
}WriteSocketCall;

WriteSocketCall * create_WriteSocketCall(
    FileDescId socket,
    VoidTPtr buf,
    SizeT nbyte
);

specification typedef struct WriteSocketReturnType
{
    CallContext context;
    SSizeT  funcRes;
    ErrorCode*  errno;
}WriteSocketReturnType;

WriteSocketReturnType * create_WriteSocketReturnType(
    CallContext context,
    SSizeT  funcRes,
    ErrorCode*  errno
);

specification typedef struct ReadSocketCall
{
    FileDescId socket;
    VoidTPtr   buf;
    SizeT      nbyte;
}ReadSocketCall;

ReadSocketCall * create_ReadSocketCall(
    FileDescId socket,
    VoidTPtr   buf,
    SizeT      nbyte
);

specification typedef struct ReadSocketReturnType
{
    CallContext context;
    SSizeT      funcRes;
    ErrorCode*  errno;
    CByteArray* notModifiedData;
    List*       notUDPModifiedData;
    CByteArray* returnedData;
}ReadSocketReturnType;

ReadSocketReturnType * create_ReadSocketReturnType(
    CallContext context,
    SSizeT      funcRes,
    ErrorCode*  errno,
    CByteArray* notModifiedData,
    List*       notUDPModifiedData,
    CByteArray* returnedData
);

specification typedef struct WritevSocketCall
{
    FileDescId socket;
    List* iov;
}WritevSocketCall;

WritevSocketCall * create_WritevSocketCall(
    FileDescId socket,
    List* iov
);

specification typedef struct WritevSocketReturnType
{
    CallContext context;
    SSizeT  funcRes;
    ErrorCode*  errno;
}WritevSocketReturnType;

WritevSocketReturnType * create_WritevSocketReturnType(
    CallContext context,
    SSizeT  funcRes,
    ErrorCode*  errno
);

specification typedef struct ReadvSocketCall
{
    FileDescId socket;
    List* iov;
}ReadvSocketCall;

ReadvSocketCall * create_ReadvSocketCall(
    FileDescId socket,
    List* iov
);

specification typedef struct ReadvSocketReturnType
{
    CallContext context;
    SSizeT  funcRes;
    ErrorCode*  errno;
    CByteArray* notModifiedData;
    List*       notUDPModifiedData;
}ReadvSocketReturnType;

ReadvSocketReturnType * create_ReadvSocketReturnType(
    CallContext context,
    SSizeT  funcRes,
    ErrorCode*  errno,
    CByteArray* notModifiedData,
    List*       notUDPModifiedData
);


specification typedef struct SockIoReturnType
{
    IntT funcRes;
    IfConfT* argpRes;
    IntT FIONREADRes;
}SockIoReturnType;

SockIoReturnType* create_SockIoReturnType(IntT funcRes,
    IfConfT* argpRes,
    IntT FIONREADRes
);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** accept_spec **/
specification
void accept_spec( CallContext context, FileDescId socket);

void onAccept( CallContext context, FileDescId socket);
void accept_model(CallContext context, FileDescId sock, AcceptReturnType* accept_ret_val);

void onAcceptReturn( CallContext context, AcceptReturnType* accept_ret_val);

reaction AcceptReturnType* accept_return(void);


/** bind_spec **/
specification
IntT bind_spec( CallContext context, FileDescId socket, SockaddrT* address, ErrorCode* errno);

void onBind( CallContext context, FileDescId socket, SockaddrT* address, IntT bind_spec);

/** bindresvport_spec **/
specification
IntT bindresvport_spec( CallContext context, FileDescId sd, SockaddrT* addr, ErrorCode* errno);

void onBindrescvport( CallContext context, FileDescId sd, SockaddrT* addr, IntT bindresvport_spec);


/** connect_spec **/
specification
void connect_spec( CallContext context, FileDescId socket, SockaddrT* address);

void onConnect( CallContext context, FileDescId socket, SockaddrT* address);

void connect_model(CallContext context, FileDescId socket, SockaddrT* address, ConnectReturnType*  connect_return_value);

void onConnectReturn( CallContext context, ConnectReturnType* connect_return_value, ErrorCode* errno);

reaction ConnectReturnType* connect_return(void);


/** getpeername_spec **/
specification
GetPeerNameReturnType* getpeername_spec( CallContext context, FileDescId socket, ErrorCode* errno);

/** getsockname_spec **/
specification
GetSockNameReturnType* getsockname_spec( CallContext context, FileDescId socket, ErrorCode* errno);

void onGetSockName( CallContext context, FileDescId socket, GetSockNameReturnType* getsockname_res);

/** getsockopt_spec **/
specification
GetSockOptReturnType* getsockopt_spec( CallContext context, FileDescId socket, IntT level, IntT option_name, ErrorCode* errno);

/** listen_spec **/
specification
IntT listen_spec( CallContext context, FileDescId socket, IntT backlog, ErrorCode* errno);

void onListen( CallContext context, FileDescId socket, IntT backlog, IntT listen_spec);


/** recv_spec **/
//This specification refers to: recv, recvfrom
specification
void recv_spec( CallContext context, FileDescId socket, SizeT length, bool peek, bool oob, bool waitall, bool from);

void onRecv( CallContext context, FileDescId socket, SizeT length, bool peek, bool oob, bool waitall, bool from);

void onRecvReturn( CallContext context, RecvReturnType* recv_ret_val);

reaction RecvReturnType* recv_return(void);

void recv_model(CallContext context,  FileDescId socket, CByteArray** notModifiedData, List** notUDPModifiedData, 
                bool peek, SizeT retVal,  CByteArray* returnedData);


/** recvmsg_spec **/
specification
void recvmsg_spec( CallContext context, FileDescId socket, SocketMsgHdr* msg,  bool peek, bool oob, bool waitall);

void onRecvMsg( CallContext context, FileDescId socket, SocketMsgHdr* msg,  bool peek, bool oob, bool waitall);

SocketMsgHdr* recvmsg_model( CallContext context, RecvmsgReturnType* recv_ret_val, RecvmsgCall* blocked_call);

void onRecvMsgReturn( CallContext context, RecvmsgReturnType* recvmsg_ret_val);

reaction RecvmsgReturnType* recvmsg_return(void);

/** send_spec **/
//This specification refers to: send, sendto
specification
void send_spec( CallContext context, FileDescId socket, CByteArray* data, bool MSG_EOR_FLAG, bool MSG_OOB_FLAG, SockaddrT* dest_addr);

void onSend( CallContext context, FileDescId socket, CByteArray* data, bool MSG_EOR_FLAG, bool MSG_OOB_FLAG, SockaddrT* dest_addr);

void onSendReturn( CallContext context, SendReturnType* send_ret_val);

reaction SendReturnType* send_return(void);

void send_model( CallContext context, FileDescId socket, CByteArray* data, SizeT funcRes, SockaddrT* dest_addr);


/** sendmsg_spec **/
specification
void sendmsg_spec(CallContext context, FileDescId socket, SocketMsgHdr* msg, 
                  bool flag_MSG_EOR, bool flag_MSG_OOB, ErrorCode* errno);

void onSendMsg( CallContext context, FileDescId socket, SocketMsgHdr* msg, 
               bool flag_MSG_EOR, bool flag_MSG_OOB);

void sendmsg_model( CallContext context, SendMsgReturnType* sendmsg_ret_val, SendMsgCall* blocked_call);

void onSendMsgReturn( CallContext context, SendMsgReturnType* sendmsg_ret_val);

reaction SendMsgReturnType* sendmsg_return(void);


/** setsockopt_spec **/
specification
IntT setsockopt_spec( CallContext context, FileDescId socket, IntT level, SocketOption option, SocketOptionValue* value, ErrorCode* errno);

void onSetsockopt( CallContext context, FileDescId socket, IntT level, SocketOption option, SocketOptionValue* value, IntT setsockopt_spec);

/** shutdown_spec **/
specification
IntT shutdown_spec( CallContext context, FileDescId socket, ShutdownType how, ErrorCode* errno);

void onShutdown(CallContext context, FileDescId socket, ShutdownType how, IntT shutdown_spec);

/** sockatmark_spec **/
specification
IntT sockatmark_spec( CallContext context, FileDescId s, ErrorCode* errno);

/** socket_spec **/
specification
FileDescId socket_spec(CallContext context, SocketDomain  domain, 
                       SocketType type, SocketProtocol protocol, 
                       ErrorCode* errno);
void onSocket(CallContext context, SocketDomain  domain, SocketType type, 
              SocketProtocol protocol, FileDescId socket_spec);


/** socketpair_spec **/
specification
SocketPairReturnType* socketpair_spec( CallContext context,  SocketDomain  domain, SocketType type, SocketProtocol protocol, ErrorCode* errno);

void onSocketpair( CallContext context,  SocketDomain  domain, SocketType type, SocketProtocol protocol, SocketPairReturnType* socketpair_spec);


/** write_socket_spec **/
specification
void write_socket_spec(CallContext context, FileDescId socket, VoidTPtr buf, SizeT nbyte);

void onWriteSocket( CallContext context, FileDescId socket, VoidTPtr buf, SizeT nbyte);

void write_socket_model( CallContext context, WriteSocketReturnType* write_ret_val, WriteSocketCall* blocked_call);

void onWriteSocketReturn( CallContext context, WriteSocketReturnType* write_ret_val);

reaction WriteSocketReturnType* write_socket_return(void);


/** read_socket_spec **/
specification
void read_socket_spec(CallContext context, FileDescId socket, SizeT nbyte);

void onReadSocket( CallContext context, FileDescId socket,  SizeT nbyte);

void read_socket_model( CallContext context, ReadSocketReturnType* read_ret_val, ReadSocketCall* blocked_call);

void onReadSocketReturn( CallContext context, ReadSocketReturnType* read_ret_val);

reaction ReadSocketReturnType* read_socket_return(void);


/** writev_socket_spec **/
specification
void writev_socket_spec(CallContext context,  FileDescId  socket, List *iov);

void onWritevSocket( CallContext context, FileDescId socket,  List* iov);
void writev_socket_model( CallContext context, WritevSocketReturnType* writev_ret_val, WritevSocketCall* blocked_call);
void onWritevSocketReturn( CallContext context, WritevSocketReturnType* writev_ret_val);
reaction WritevSocketReturnType* writev_socket_return(void);


/** readv_socket_spec **/
specification
void readv_socket_spec(CallContext context, FileDescId socket, List* iov);
void onReadvSocket( CallContext context, FileDescId socket,  List* iov);
void readv_socket_model( CallContext context, ReadvSocketReturnType* readv_ret_val, ReadvSocketCall* blocked_call);
void onReadvSocketReturn( CallContext context, ReadvSocketReturnType* readv_ret_val);
reaction ReadvSocketReturnType* readv_socket_return(void);

/** sockio_spec **/
specification
SockIoReturnType* sockio_spec(CallContext context, FileDescId socket, IntT request, IfConfT* argp, ErrorCode* errno);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool compare_CByteArrays_Offset(CByteArray* cur_array, CByteArray* orig_array, SizeT len, SizeT offset);
CByteArray* concatAllDataInIOvecList(List* iov, SizeT readLen);
Bool3 isEMSGSIZE(CallContext context,  SocketMsgHdr* msg);
ByteT getByteListIOvec(List* iov, SizeT offset, IntT* found);
bool compareListsIOvec(List* iov1, List* iov2, SizeT data_length);
IntT findMessageInList(List* lst, SocketMsgHdr* mess);
IntT findCByteArrayInList(List* notUDPModifiedData, CByteArray* returnedData, IntT length);


void sockaddr_formatter(TSStream *stream, SockaddrT* addr);
SocketFileDescriptor* getFileDescriptor_Sockaddr(CallContext context, SockaddrT* addr, bool peer);
SockaddrT* readSockaddr_TSStream(TSStream* stream);
SocketFileDescriptor* getFileDescriptor_Peer(CallContext context, FileDescId sock, SocketFileDescriptor* desc);
SocketOptionValue* readSocketOption_TSStream(TSStream* stream);
void socketmsg_formatter(TSStream *stream, SocketMsgHdr* value);
SocketMsgHdr* readSocketMsgHdr_TSStream(CallContext context, TSStream* stream);

Bool3 isTargetNotListeningOrRefused(SocketFileDescriptor* destDescriptor);


/********************************************************************/
/**                      SockaddrT Type                            **/
/********************************************************************/


SaFamilyT getSockaddr_Family(SockaddrT* addr);
void      setSockaddr_Family(SockaddrT* addr, SaFamilyT val);
SockaddrT *   create_SockaddrT_Unspec();
bool equals_SockaddrT(SockaddrT* s1, SockaddrT* s2);


#endif

