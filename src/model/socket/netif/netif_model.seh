/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_NETIF_MODEL_SEH
#define SOCKET_NETIF_MODEL_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                      Defines                                   **/
/********************************************************************/

#define SUT_IF_NAMESIZE 16

//TODO: move to config system
#define SOCKET_NETDIF_MAX_IFNAMEINDEX_LIST_LENGTH 4096

/*
 * POSIX_IF_INDEXTONAME
 */
/*
 * If this constant is set to 1, then current implementation of if_indextoname() 
 * may support additional errors not included in the list described in the
 * IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_IF_INDEXTONAME_HAS_EXTRA_ERROR_CODES 0

/*
 * If this constant is set to 1, the current implementation of if_indextoname() 
 * may generate error code of ENXIO under circumstances other than those 
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_IF_INDEXTONAME_HAS_EXTRA_CONDITION_ON_ENXIO 0

/*
 * POSIX_IF_NAMEINDEX
 */
/*
 * If this constant is set to 1, then current implementation of if_nameindex() 
 * may support additional errors not included in the list described in the
 * IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_IF_NAMEINDEX_HAS_EXTRA_ERROR_CODES 0

/*
 * If this constant is set to 1, the function if_nameindex() ensures
 * that the error ENOBUFS will be found and correctly handled.
 */
#define POSIX_IF_NAMEINDEX_FAILS_WITH_ENOBUFS 1

/*
 * If this constant is set to 1, the current implementation of if_nameindex() 
 * may generate error code of ENOBUFS under circumstances other than those 
 * described in the IEEE Std 1003.1, 2004 Edition.
 */
#define POSIX_IF_NAMEINDEX_HAS_EXTRA_CONDITION_ON_ENOBUFS 0

/********************************************************************/
/**                      NetIf Types                               **/
/********************************************************************/

specification typedef struct IfNameIndex
{
    VoidTPtr self_ptr;
    UIntT  if_index;
    CString * if_name;
}IfNameIndex;

typedef VoidTPtr IfNameIndexPtr;

IfNameIndex * create_IfNameIndex(VoidTPtr self_ptr, UIntT if_index, CString * if_name);
IfNameIndex * create_emptyIfNameIndex(void);

bool equals_IfNameModel(IfNameIndex * a, IfNameIndex * b);

List * read_IfNameIndexList(CallContext context, IfNameIndexPtr ptr);

extern Map * netif_model;
extern bool netif_model_full;

bool update_netif_model(UIntT if_index, CString * if_name);
UIntTObj * find_interface(Map * model, CString * ifname);
/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** if_freenameindex_spec **/
specification
void if_freenameindex_spec( CallContext context, IfNameIndexPtr ptr );

/** if_indextoname_spec **/
specification
StringTPtr if_indextoname_spec( CallContext context, UIntT ifindex, StringTPtr ifname, ErrorCode * errno);

void onIfIndextoname(CallContext context, UIntT ifindex, StringTPtr ifname, ErrorCode * errno, StringTPtr if_indextoname_spec);

/** if_nameindex_spec **/
specification
List * if_nameindex_spec( CallContext context, ErrorCode * errno);

void onIfNameindex(CallContext context, ErrorCode * errno, List * if_nameindex_spec);

/** if_nametoindex_spec **/
specification
UIntT if_nametoindex_spec( CallContext context, CString * ifname);

void onIfNametoindex(CallContext context, CString * ifname, UIntT if_nametoindex_spec);

/* init function */
bool init_netif(void);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

#endif

