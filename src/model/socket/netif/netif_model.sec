/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "socket/netif/netif_model.seh"
#include "socket/netif/netif_media.seh"

#include "config/type_config.seh"

#pragma SEC subsystem netif "socket.netif"

/*
   The group of functions 'socket.netif' consists of:
       if_freenameindex [2]
       if_indextoname [2]
       if_nameindex [2]
       if_nametoindex [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

if_freenameindex - free memory allocated by if_nameindex

SYNOPSIS

#include <net/if.h>

void if_freenameindex(struct if_nameindex *ptr);

DESCRIPTION

The if_freenameindex() function shall free the memory allocated by
if_nameindex(). The ptr argument shall be a pointer that was returned by
if_nameindex(). After if_freenameindex() has been called, the application
shall not use the array of which ptr is the address.

RETURN VALUE

None.

ERRORS

No errors are defined.
*/
specification
void if_freenameindex_spec( CallContext context, IfNameIndexPtr ptr )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { FreeMemoryAllocatedBy_if_nameindex, "Free memory allocated by if_nameindex" };
    }
    post
    {
        /*
         * The if_freenameindex() function shall free the memory allocated by
         * if_nameindex()
         */
        REQ("if_freenameindex.01", "", TODO_REQ());

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

if_indextoname - map a network interface index to its corresponding name

SYNOPSIS

#include <net/if.h>

char *if_indextoname(unsigned ifindex, char *ifname);

DESCRIPTION

The if_indextoname() function shall map an interface index to its corresponding
name.

When this function is called, ifname shall point to a buffer of at least {
IF_NAMESIZE} bytes. The function shall place in this buffer the name of the
interface with index ifindex.

RETURN VALUE

If ifindex is an interface index, then the function shall return the value
supplied in ifname, which points to a buffer now containing the interface name.
Otherwise, the function shall return a NULL pointer and set errno to indicate
the error.

ERRORS

The if_indextoname() function shall fail if:

[ENXIO]

The interface does not exist.
*/
specification
StringTPtr if_indextoname_spec( CallContext context, UIntT ifindex,  StringTPtr ifname, ErrorCode * errno )
{
    pre
    {
        /*
         * When this function is called, ifname shall point to a buffer of at least {
         * IF_NAMESIZE} bytes
         */
        REQ("app.if_indextoname.02", "ifname shall point to a buffer of at least {IF_NAMESIZE} bytes",
                sizeWMemoryAvailable(ifname) >= SUT_IF_NAMESIZE
           );

        return true;
    }
    post
    {
        CString * res_str;
        IfNameIndex * elem_pre = get_Map(@netif_model, create_UIntTObj(ifindex));

        ERROR_BEGIN(POSIX_IF_INDEXTONAME, "if_indextoname.03.02", isNULL_VoidTPtr(if_indextoname_spec), *errno)

            /*
             * The if_indextoname() function shall fail if:
             *
             * [ENXIO]
             * The interface does not exist.
             */
             ERROR_SHALL3(POSIX_IF_INDEXTONAME, ENXIO, "if_indextoname.04.01",
                           (elem_pre?(elem_pre->if_name?False_Bool3:True_Bool3):Unknown_Bool3)
                         )

        ERROR_END()

        /*
         * If ifindex is an interface index, then the function shall return the value
         * supplied in ifname, which points to a buffer now containing the interface name.
         */
        REQ("if_indextoname.03.01", "shall return a pointer to `ifname`",
            equals_VoidTPtr(if_indextoname_spec, ifname)
           );

        if(elem_pre)
        {
            res_str = readCString_VoidTPtr(if_indextoname_spec);

            /*
             * The if_indextoname() function shall map an interface index to its corresponding
             * name
             */
            /*
             * The function shall place in this buffer the name of the interface with index
             * ifindex
             */
            REQ("if_indextoname.01", "shall map an interface index to its corresponding name",
                 equals(elem_pre->if_name, res_str)
               );
        }

        return true;
    }
}

void onIfIndextoname(CallContext context, UIntT ifindex, StringTPtr ifname, ErrorCode * errno, StringTPtr if_indextoname_spec)
{
    if( !isNULL_VoidTPtr(if_indextoname_spec) )
    {
        CString * res_str = readCString_VoidTPtr(if_indextoname_spec);
        update_netif_model(ifindex, res_str);
    }
}
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

if_nameindex - return all network interface names and indexes

SYNOPSIS

#include <net/if.h>

struct if_nameindex *if_nameindex(void);

DESCRIPTION

The if_nameindex() function shall return an array of if_nameindex structures,
one structure per interface. The end of the array is indicated by a
structure with an if_index field of zero and an if_name field of NULL.

Applications should call if_freenameindex() to release the memory that may be
dynamically allocated by this function, after they have finished using it.

RETURN VALUE

An array of structures identifying local interfaces. A NULL pointer is
returned upon an error, with errno set to indicate the error.

ERRORS

The if_nameindex() function may fail if:

[ENOBUFS]

Insufficient resources are available to complete the function.
*/
specification
List * if_nameindex_spec( CallContext context, ErrorCode * errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { ReturnAllNetworkInterfaceNamesAndIndexes, "Return all network interface names and indexes" };
    }
    post
    {
        int list_sz = size_List(if_nameindex_spec);
        IfNameIndex * last = get_List(if_nameindex_spec, list_sz-1);

        /*
         * A NULL pointer is returned upon an error, with errno set to indicate the error.
         */
        ERROR_BEGIN(POSIX_IF_NAMEINDEX, "if_nameindex.04.02", if_nameindex_spec==NULL, *errno)

            /*
             * The if_nameindex() function may fail if:
             *
             * [ENOBUFS]
             * Insufficient resources are available to complete the function.
             */
            ERROR_MAY(POSIX_IF_NAMEINDEX, ENOBUFS, "if_nameindex.05.01", TODO_ERR(ENOBUFS))

        ERROR_END()

        /* RETURN VALUE
         * An array of structures identifying local interfaces.
         */
        REQ("if_nameindex.04.01", "shall return array on success",
            (if_nameindex_spec != NULL) && (list_sz>0)
           );

        if( netif_model_full )
        {
            int i;
            for(i=0;i<size_List(if_nameindex_spec); i++)
            {
                IfNameIndex * elem = get_List(if_nameindex_spec, i);
                IfNameIndex * elem_old = get_Map(netif_model, create_UIntTObj(elem->if_index) );

                REQ("if_nameindex.04.01", "shall return the same result",
                    equals_IfNameModel(elem, elem_old)
                    );
            }
        }

        /*
         * The end of the array is indicated by a structure with
         * an if_index field of zero
         */
        REQ("if_nameindex.02.01", "in last element if_index field is not zero", last->if_index != 0);

        /*
         * The end of the array is indicated by a structure with
         * an if_name field of NULL
         */
        REQ("if_nameindex.02.02", "in last element if_name field is not NULL", last->if_name != NULL);

        return true;
    }
}

void onIfNameindex(CallContext context, ErrorCode * errno, List * if_nameindex_spec)
{
    int i;

    if( !netif_model_full )
    {
        for(i=0;i<size_List(if_nameindex_spec); i++)
        {
            IfNameIndex * elem = get_List(if_nameindex_spec, i);

            update_netif_model(elem->if_index, elem->if_name);
        }

        netif_model_full = true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

if_nametoindex - map a network interface name to its corresponding index

SYNOPSIS

#include <net/if.h>

unsigned if_nametoindex(const char *ifname);

DESCRIPTION

The if_nametoindex() function shall return the interface index corresponding to
name ifname.

RETURN VALUE

The corresponding index if ifname is the name of an interface; otherwise, zero.


ERRORS

No errors are defined.
*/
specification
UIntT if_nametoindex_spec( CallContext context, CString * ifname)
{
    pre
    {
        REQ("","ifname != NULL", ifname!=NULL);

        return true;
    }
    post
    {
        UIntTObj * key;

        key = find_interface(@netif_model, ifname);

        if(if_nametoindex_spec == 0)
        {
            /*
             * otherwise, zero
             */
            REQ("if_nametoindex.02.02", "shall return 0 if interface not found",
                key==NULL
                );
        }
        else
        {
            if(netif_model_full)
            {
                /*
                 * The if_nametoindex() function shall return the interface index corresponding to
                 * name ifname.
                 */
                REQ("if_nametoindex.01", "shall return the interface index",
                    key != NULL
                    );
            }
            if(key != NULL)
            {
                /*
                 * The corresponding index if ifname is the name of an interface
                 */
                REQ("if_nametoindex.02.01",
                    "Corresponding index if ifname is name of an interface",
                    *key == if_nametoindex_spec
                    );
            }
        }

        return true;
    }
}

void onIfNametoindex(CallContext context, CString * ifname, UIntT if_nametoindex_spec)
{
    if(if_nametoindex_spec!=0)
    {
        update_netif_model(if_nametoindex_spec, ifname);
    }
}

/********************************************************************/
/**                       NetIf Types                              **/
/********************************************************************/

specification typedef struct IfNameIndex IfNameIndex = {};

IfNameIndex * create_IfNameIndex(VoidTPtr self_ptr, UIntT if_index, CString * if_name)
{
    return create(&type_IfNameIndex, self_ptr, if_index, if_name);
}

IfNameIndex * create_emptyIfNameIndex(void)
{
    return create(&type_IfNameIndex, NULL_VoidTPtr, 0, NULL);
}

List * read_IfNameIndexList(CallContext context, IfNameIndexPtr ptr)
{
    SizeT if_nameindex_sz = sizeof_Type(context,"struct if_nameindex");
    List * res = NULL;
    int counter = 0;

    if(isNULL_VoidTPtr(ptr))
        return NULL;

    res = create_List(&type_IfNameIndex);

    while( !isNULL_VoidTPtr(ptr)
           && (counter<SOCKET_NETDIF_MAX_IFNAMEINDEX_LIST_LENGTH)
         )
    {
        IfNameIndex * inx = read_IfNameIndex(context, ptr);
        if( (inx->if_index == 0) || (inx->if_name == NULL) )
            break;
        append_List(res, inx);

        ptr.address += if_nameindex_sz;
        counter ++;
    }
    return res;
}

bool equals_IfNameModel(IfNameIndex * a, IfNameIndex * b)
{
    return (a->if_index == b->if_index)
           && equals(a->if_name, b->if_name)
           ;
}

Map * netif_model; // UIntTObj if_index ==> IfNameIndex * if_name
bool netif_model_full;

bool init_netif(void)
{
    netif_model_full = false;

    netif_model = create_Map(&type_UIntTObj, &type_IfNameIndex);
    if(netif_model == NULL)
        return false;

    return true;
}

bool update_netif_model(UIntT if_index, CString * if_name)
{
    IfNameIndex * elem;

    elem = get_Map(netif_model, create_UIntTObj(if_index) );
    if(elem == NULL)
    {
        put_Map(netif_model, create_UIntTObj(if_index), create_IfNameIndex(NULL_VoidTPtr, if_index, if_name) );
    }
    else
    {
        return (elem->if_index == if_index)
               && equals(elem->if_name, if_name)
               ;
    }

    return true;
}

UIntTObj * find_interface(Map * model, CString * ifname)
{
    int i = 0;
    for(i=0;i<size_Map(model);i++)
    {
        UIntTObj * key = key_Map(model, i);
        IfNameIndex * elem = get_Map(model, key);

        if( equals(elem->if_name, ifname) )
        {
            return key;
        }
    }
    return NULL;
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
