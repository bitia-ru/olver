/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/netif/tests/netif_scenario.seh"


#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "socket/netif/netif_model.seh"
#include "socket/netif/netif_media.seh"

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

VoidTPtr ifname_ptr;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

bool init_simple_netif_scenario(int argc, char** argv)
{
    context = getContext();

    ifname_ptr = allocateMemoryBlock(context, SUT_IF_NAMESIZE);
    if(isNULL_VoidTPtr(ifname_ptr))
        return false;

    return true;
}

void finish_simple_netif_scenario(void)
{
    deallocateMemoryBlock(context, ifname_ptr);
}


scenario
bool simple_netif_scen(void)
{
    CString * name;
    StringTPtr name_ptr;
    List * if_list;

    if_list = if_nameindex_spec(context, requestErrorCode());


    name_ptr = if_indextoname_spec(context, 1, ifname_ptr, requestErrorCode());

    if_indextoname_spec(context, 32678, ifname_ptr, requestErrorCode());

    if(!isNULL_VoidTPtr(name_ptr))
    {
        name = readCString_VoidTPtr(name_ptr);
        if_nametoindex_spec(context, name);
    }

    if_nametoindex_spec(context, create_CString("wrong_ifname"));


    if(if_list!=NULL)
    {
        IfNameIndex * inx =  (IfNameIndex *)get_List(if_list, 0);
        if(inx!=NULL)
            if_freenameindex_spec(context, inx->self_ptr);
    }

    return true;
}

scenario dfsm socket_netif_simple_scenario =
{
    .init = init_simple_netif_scenario,
    .finish = finish_simple_netif_scenario,
    .actions =
    {
        simple_netif_scen,
        simple_netif_scen, // repeat
        NULL
    }
};
