/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/netdata/netdata_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketNetdataSubsystem(void)
{
  // Set up mediators
    set_mediator_htonl_spec(htonl_media);
    set_mediator_htons_spec(htons_media);
    set_mediator_ntohl_spec(ntohl_media);
    set_mediator_ntohs_spec(ntohs_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** htonl_spec **/

mediator htonl_media for specification
NetworkOrder4Bytes* htonl_spec( CallContext context, UInt32T hostlong)
{
    call
    {
        TSCommand command = create_TSCommand();
        NetworkOrder4Bytes* res;
        CharT arr[4];

        format_TSCommand( &command, "htonl:$(uint32)",
            create_UInt32TObj(hostlong));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            arr[0]=readChar_TSStream(&command.response);
            arr[1]=readChar_TSStream(&command.response);
            arr[2]=readChar_TSStream(&command.response);
            arr[3]=readChar_TSStream(&command.response);
            res=create_NetworkOrder4Bytes(arr[0],arr[1],arr[2],arr[3]);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** htons_spec **/
mediator htons_media for specification
NetworkOrder2Bytes* htons_spec( CallContext context, UInt16T hostshort)
{
    call
    {
        TSCommand command = create_TSCommand();
        NetworkOrder2Bytes* res;
        CharT arr[2];

        format_TSCommand( &command, "htons:$(uint16)",
            create_UInt16TObj(hostshort));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            arr[0]=readChar_TSStream(&command.response);
            arr[1]=readChar_TSStream(&command.response);
            res=create_NetworkOrder2Bytes(arr[0],arr[1]);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** ntohl_spec **/
mediator ntohl_media for specification
UInt32T ntohl_spec( CallContext context, NetworkOrder4Bytes* netlong)
{
    call
    {
        TSCommand command = create_TSCommand();
        UInt32T res;

        format_TSCommand( &command, "ntohl:$(char)$(char)$(char)$(char)",
            create_CharTObj(netlong->arr[0]),
            create_CharTObj(netlong->arr[1]),
            create_CharTObj(netlong->arr[2]),
            create_CharTObj(netlong->arr[3]));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readUInt32_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** ntohs_spec **/
mediator ntohs_media for specification
UInt16T ntohs_spec( CallContext context, NetworkOrder2Bytes* netshort)
{
    call
    {
        TSCommand command = create_TSCommand();
        UInt16T res;

        format_TSCommand( &command, "ntohs:$(char)$(char)",
            create_CharTObj(netshort->arr[0]),
            create_CharTObj(netshort->arr[1]));
        
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readUInt16_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



