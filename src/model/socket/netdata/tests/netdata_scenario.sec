/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "socket/netdata/tests/netdata_scenario.seh"
#include "socket/netdata/netdata_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static UInt32T htonl_ntohl[]={
    1,
    15,
    32,
    33,
    255,
    256,
    257,
    1000,
    22222,
    30000,
    65535,
    65536,
    8000000,
    16777215,
    16777216,
    100000000,
    1000000000,
    2000000000,
    3333333333,
    4294967295
};
static UInt16T htons_ntohs[]={
    1,
    15,
    32,
    33,
    255,
    256,
    257,
    1000,
    22222,
    30000,
    65535
};

static int htonl_ntohl_size =   sizeof(htonl_ntohl) /   sizeof(UInt32T);
static int htons_ntohs_size =   sizeof(htons_ntohs) /   sizeof(UInt16T);
/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_netdata_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();  

    return true;
}
static void finish_netdata_scenario(void)
{
    TEST_SCENARIO_VERDICT_VERBOSE(netdata_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool htonl_ntohl_scen()
{
    UInt32T ret2;
    NetworkOrder4Bytes* ret1;

    iterate(int i=0;i<htonl_ntohl_size;i++;)
    {
        ret1 = htonl_spec(context, htonl_ntohl[i]);
        ret2 = ntohl_spec(context, ret1);
        
        DUMP("ret1(%lu)==[%u, %u, %u, %u])\n", (unsigned long)htonl_ntohl[i],
                                                (unsigned char)ret1->arr[0],
                                                (unsigned char)ret1->arr[1],
                                                (unsigned char)ret1->arr[2],
                                                (unsigned char)ret1->arr[3]);

        if(ret2!=htonl_ntohl[i])
        {
            DUMP("Htonl_Ntohl_Error %d: %lu!=%lu\n", i, (ULongT)ret2,
                    (ULongT)htonl_ntohl[i]);
            return false;
        }
    }
    return true;
}
scenario
bool htons_ntohs_scen()
{
    UInt16T ret2;
    NetworkOrder2Bytes* ret1;

    iterate(int i=0;i<htons_ntohs_size;i++;)
    {
        ret1 = htons_spec(context, htons_ntohs[i]);
        ret2 = ntohs_spec(context, ret1);
        
        DUMP("ret1(%lu)==[%u, %u])\n", (unsigned long)htonl_ntohl[i],
                                                (unsigned char)ret1->arr[0],
                                                (unsigned char)ret1->arr[1]);


        if(ret2!=htons_ntohs[i])
        {
            DUMP("Htons_Ntohs_Error %d: %lu!=%lu\n", i, (ULongT)ret2,
                    (ULongT)htonl_ntohl[i]);
            return false;
        }
    }
    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm netdata_scenario =
{
    .init = init_netdata_scenario,
    .finish = finish_netdata_scenario,
    .actions = { 
                    htonl_ntohl_scen,
                    htons_ntohs_scen,
                    NULL 
                }
};


bool main_socket_netdata(int argc, char** argv)
{
    netdata_scenario(argc,argv);
    return true;
}

#ifdef SOCKET_NETDATA_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "socket/netdata/netdata_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initSocketNetdataSubsystem();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    main_socket_netdata(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
