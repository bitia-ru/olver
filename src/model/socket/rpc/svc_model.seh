/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_SVC_MODEL_SEH
#define SOCKET_RPC_SVC_MODEL_SEH

#include "common/common_model.seh"
#include "data/sys/types_model.seh"
#include "data/rpc/xdr_model.seh"

/*
LSB:
    void svc_getreqset(fd_set *);
    void svcerr_auth(SVCXPRT *, enum auth_stat);
    void svcerr_decode(SVCXPRT *);
    void svcerr_noproc(SVCXPRT *);
    void svcerr_noprog(SVCXPRT *);
    void svcerr_progvers(SVCXPRT *, rpcvers_t, rpcvers_t);
    void svcerr_systemerr(SVCXPRT *);
    void svcerr_weakauth(SVCXPRT *);
    - svc_freeargs
    - svc_getargs

    bool_t svc_register(SVCXPRT *, rpcprog_t, rpcvers_t,
       __dispatch_fn_t, rpcprot_t);
    void svc_run(void);
    bool_t svc_sendreply(SVCXPRT *, xdrproc_t, caddr_t);
    SVCXPRT *svctcp_create(int, u_int, u_int);
    SVCXPRT *svcudp_create(int);

SVID:
    void
    svc_getreqset(fd_set *rdfds);

    void
    svcerr_auth(const SVCXPRT *xprt, const enum auth_stat why);

    void
    svcerr_decode(const SVCXPRT *xprt);

    void
    svcerr_noproc(const SVCXPRT *xprt);

    void
    svcerr_noprog(const SVCXPRT *xprt);

    void
    svcerr_progvers(const SVCXPRT *xprt);

    void
    svcerr_systemerr(const SVCXPRT *xprt);

    void
    svcerr_weakauth(const SVCXPRT *xprt);

    bool_t
    svc_freeargs(const SVCXPRT *xprt, const xdrproc_t inproc, char *in);

    bool_t
    svc_getargs(const SVCXPRT *xprt, const xdrproc_t inproc, char *in);


    - svc_register

    void
    svc_run(void);

    bool_t
    svc_sendreply(const SVCXPRT *xprt, const xdrproc_t outproc,
    const caddr_t out);

    - svctcp_create

    - svcudp_create

*/

/* typedef struct SVCXPRT; */
typedef VoidTPtr SvcXprtTPtr;

/* enum auth_stat; */
enum AuthStatT {
    SUT_AUTH_OK,
    SUT_AUTH_BADCRED = 1,
    SUT_AUTH_REJECTEDCRED = 2,
    SUT_AUTH_BADVERF = 3,
    SUT_AUTH_REJECTEDVERF = 4,
    SUT_AUTH_TOOWEAK = 5,
    SUT_AUTH_INVALIDRESP = 6,
    SUT_AUTH_FAILED = 7
};

/* typedef unsigned long int rpcprog_t; */
typedef ULongT RpcProgT;

/* typedef unsigned long int rpcvers_t; */
typedef ULongT RpcVersT;

/* typedef unsigned long int rpcprot_t; */
typedef ULongT RpcProtT;

/* typedef void (*__dispatch_fn_t) (struct svc_req *, SVCXPRT *); */
typedef VoidTPtr DispatchFnTPtr;

#define SUT_RPC_ANYSOCK         -1

#define SUT_CLSET_TIMEOUT       1
#define SUT_CLGET_TIMEOUT       2
#define SUT_CLGET_SERVER_ADDR   3
#define SUT_CLSET_RETRY_TIMEOUT 4
#define SUT_CLGET_RETRY_TIMEOUT 5
#define SUT_CLGET_FD            6
#define SUT_CLGET_SVC_ADDR      7
#define SUT_CLSET_FD_CLOSE      8
#define SUT_CLSET_FD_NCLOSE     9
#define SUT_CLGET_XID           10
#define SUT_CLSET_XID           11
#define SUT_CLGET_VERS          12
#define SUT_CLSET_VERS          13
#define SUT_CLGET_PROG          14
#define SUT_CLSET_PROG          15


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** svc_getreqset_spec **/
specification
void svc_getreqset_spec(CallContext context, FdSetTPtr rdfds);

/** svcerr_auth_spec **/
specification
void svcerr_auth_spec(CallContext context, SvcXprtTPtr xprt, enum AuthStatT why);

/** svcerr_decode_spec **/
specification
void svcerr_decode_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_noproc_spec **/
specification
void svcerr_noproc_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_noprog_spec **/
specification
void svcerr_noprog_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_progvers_spec **/
specification
void svcerr_progvers_spec(CallContext context, SvcXprtTPtr xprt, RpcVersT low_vers, RpcVersT high_vers);

/** svcerr_systemerr_spec **/
specification
void svcerr_systemerr_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_weakauth_spec **/
specification
void svcerr_weakauth_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_weakauth_spec **/
specification
BoolT svc_freeargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in);

/** svcerr_weakauth_spec **/
specification
BoolT svc_getargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in);


/** svc_register_spec **/
specification
BoolT svc_register_spec(CallContext context, SvcXprtTPtr xprt, RpcProgT prog, RpcVersT vers, DispatchFnTPtr dispatch, RpcProtT protocol);

/** svc_run_spec **/
specification
void svc_run_spec(CallContext context);

void onSvcRun(CallContext context);

/** svc_run_return **/
specification typedef
struct SvcRunReturnType
{
  CallContext context;
} SvcRunReturnType;

SvcRunReturnType *create_SvcRunReturnType(
    CallContext context
    );

reaction SvcRunReturnType* svc_run_return(void);

void onSvcRunReturn(CallContext context);


/** svc_sendreply_spec **/
specification
BoolT svc_sendreply_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr outproc, CaddrT out);

/** svctcp_create_spec **/
specification
SvcXprtTPtr svctcp_create_spec(CallContext context, IntT sock, UIntT sendsize, UIntT recvsize);

/** svcudp_create_spec **/
specification
SvcXprtTPtr svcudp_create_spec(CallContext context, IntT sock);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

#endif
