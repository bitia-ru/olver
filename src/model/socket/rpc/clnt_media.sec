/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/rpc/clnt_media.seh"
#include "common/common_media.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcClntSubsystem(void)
{
    // Set up mediators
    set_mediator_authnone_create_spec(authnone_create_media);
    set_mediator_clnt_create_spec(clnt_create_media);
    set_mediator_clnt_pcreateerror_spec(clnt_pcreateerror_media);
    set_mediator_clnt_perrno_spec(clnt_perrno_media);
    set_mediator_clnt_perror_spec(clnt_perror_media);
    set_mediator_clnt_spcreateerror_spec(clnt_spcreateerror_media);
    set_mediator_clnt_sperrno_spec(clnt_sperrno_media);
    set_mediator_clnt_sperror_spec(clnt_sperror_media);
    set_mediator_clnt_control_spec(clnt_control_media);
    set_mediator_clnt_destroy_spec(clnt_destroy_media);
    set_mediator_clnt_freeres_spec(clnt_freeres_media);
    set_mediator_clnt_geterr_spec(clnt_geterr_media);
    set_mediator_clnt_call_spec(clnt_call_media);

    registerTSFormatter("timeval",(TSFormatterFuncType)timeval_formatter);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** authnone_create_spec **/
mediator authnone_create_media for specification
AuthTPtr authnone_create_spec(CallContext context)
{
    call
    {
        AuthTPtr res = NULL_VoidTPtr;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "authnone_create");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_create_spec **/
mediator clnt_create_media for specification
ClientTPtr clnt_create_spec(CallContext context, CString* host, ULongT prognum,
                            ULongT versnum, CString* nettype)
{
    call
    {
        ClientTPtr res = NULL_VoidTPtr;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_create:$(str)$(ulong)$(ulong)$(str)",
                                    host,
                                    create_ULongTObj(prognum),
                                    create_ULongTObj(versnum),
                                    nettype
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_pcreateerror_spec **/
mediator clnt_pcreateerror_media for specification
void clnt_pcreateerror_spec(CallContext context, CString* s)
{
    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_pcreateerror:$(str)",
                                    s
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** clnt_perrno_spec **/
mediator clnt_perrno_media for specification
void clnt_perrno_spec(CallContext context, enum ClntStatT stat)
{
    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_perrno:$(int)",
                                    create_IntTObj(stat)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** clnt_perror_spec **/
mediator clnt_perror_media for specification
void clnt_perror_spec(CallContext context, ClientTPtr clnt, CString* s)
{
    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_perror:$(ptr)$(str)",
                                    create_VoidTPtrObj(clnt),
                                    s
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** clnt_spcreateerror_spec **/
mediator clnt_spcreateerror_media for specification
CString* clnt_spcreateerror_spec(CallContext context, CString* s)
{
    call
    {
        CString* res = NULL;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_spcreateerror:$(str)",
                                    s
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_sperrno_spec **/
mediator clnt_sperrno_media for specification
CString* clnt_sperrno_spec(CallContext context, enum ClntStatT stat)
{
    call
    {
        CString* res = NULL;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_sperrno:$(int)",
                                    create_IntTObj(stat)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_sperror_spec **/
mediator clnt_sperror_media for specification
CString* clnt_sperror_spec(CallContext context, ClientTPtr clnt, CString* s)
{
    call
    {
        CString* res = NULL;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_sperror:$(ptr)$(str)",
                                    create_VoidTPtrObj(clnt),
                                    s
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_control_spec **/
mediator clnt_control_media for specification
BoolT clnt_control_spec(CallContext context, ClientTPtr clnt, UIntT req, VoidTPtr info)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_control:$(ptr)$(uint)$(ptr)",
                                    create_VoidTPtrObj(clnt),
                                    create_UIntTObj(req),
                                    create_VoidTPtrObj(info)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_destroy_spec **/
mediator clnt_destroy_media for specification
void clnt_destroy_spec(CallContext context, ClientTPtr clnt)
{
    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_destroy:$(ptr)",
                                    create_VoidTPtrObj(clnt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** clnt_freeres_spec **/
mediator clnt_freeres_media for specification
BoolT clnt_freeres_spec(CallContext context, ClientTPtr clnt, XdrProcTPtr outproc, CaddrT out)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_freeres:$(ptr)$(ptr)$(ptr)",
                                    create_VoidTPtrObj(clnt),
                                    create_VoidTPtrObj(outproc),
                                    create_VoidTPtrObj(out)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** clnt_geterr_spec **/
mediator clnt_geterr_media for specification
void clnt_geterr_spec(CallContext context, ClientTPtr clnt, RpcErrTPtr errp)
{
    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_geterr:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(clnt),
                                    create_VoidTPtrObj(errp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** clnt_call_spec **/
mediator clnt_call_media for specification
enum ClntStatT clnt_call_spec(CallContext context, ClientTPtr clnt, ULongT procnum, XdrProcTPtr inproc,
                              CaddrT in, XdrProcTPtr outproc, CaddrT out, TimeValTObj* tout)
{
    call
    {
        enum ClntStatT res = SUT_RPC_SUCCESS;
        TSCommand command = create_TSCommand();

         
        format_TSCommand(&command, "clnt_call:$(ptr)$(ulong)$(ptr)$(ptr)$(ptr)$(ptr)$(timeval)",
                                    create_VoidTPtrObj(clnt),
                                    create_ULongTObj(procnum),
                                    create_VoidTPtrObj(inproc),
                                    create_VoidTPtrObj(in),
                                    create_VoidTPtrObj(outproc),
                                    create_VoidTPtrObj(out),
                                    tout
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}
