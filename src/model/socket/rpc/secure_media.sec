/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/rpc/secure_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Formatters                                  **/
/********************************************************************/

void desblock_formatter(TSStream *stream, DesBlock* value)
{
    IntT i;
        
    VERIFY_TYPE(desblock_formatter, &type_DesBlock, value);
    
    writeTypeHeaderTSStream(stream, "desblock");
    
    writeUInt32_TSStream(stream, value->high);
    writeUInt32_TSStream(stream, value->low);
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcSecureSubsystem(void)
{
    // Set up mediators
    set_mediator_key_decryptsession_spec(key_decryptsession_media);

    // Set up formatters

    registerTSFormatter("desblock",(TSFormatterFuncType)desblock_formatter);

}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** key_decryptsession_spec **/
mediator key_decryptsession_media for specification
IntT key_decryptsession_spec( CallContext context, CString* remotename, DesBlock* deskey)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "key_decryptsession:$(str)$(desblock)", remotename, deskey);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}



