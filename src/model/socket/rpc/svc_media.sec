/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/rpc/svc_media.seh"
#include "common/common_media.seh"
#include "process/process/process_model.seh"


/********************************************************************/
/**                 Deferred Reactions Processors                  **/
/********************************************************************/
static void svc_run_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
            getThreadChannelID(threadId),
            NULL,
            svc_run_return,
            create_SvcRunReturnType(threadId),
            meta->timestamp
        );
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcSvcSubsystem(void)
{
    // Set up mediators
    set_mediator_svc_getreqset_spec(svc_getreqset_media);
    set_mediator_svcerr_auth_spec(svcerr_auth_media);
    set_mediator_svcerr_decode_spec(svcerr_decode_media);
    set_mediator_svcerr_noproc_spec(svcerr_noproc_media);
    set_mediator_svcerr_noprog_spec(svcerr_noprog_media);
    set_mediator_svcerr_progvers_spec(svcerr_progvers_media);
    set_mediator_svcerr_systemerr_spec(svcerr_systemerr_media);
    set_mediator_svcerr_weakauth_spec(svcerr_weakauth_media);
    set_mediator_svc_freeargs_spec(svc_freeargs_media);
    set_mediator_svc_getargs_spec(svc_getargs_media);

    set_mediator_svc_register_spec(svc_register_media);
    set_mediator_svc_run_spec(svc_run_media);
    set_mediator_svc_sendreply_spec(svc_sendreply_media);
    set_mediator_svctcp_create_spec(svctcp_create_media);
    set_mediator_svcudp_create_spec(svcudp_create_media);

    // Set up dr processors
    registerDRProcessor("svc_run_return", svc_run_return_processor);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** svc_getreqset_spec **/
mediator svc_getreqset_media for specification
void svc_getreqset_spec(CallContext context, FdSetTPtr rdfds)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_getreqset:$(ptr)",
                                    create_VoidTPtrObj(rdfds)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_auth_spec **/
mediator svcerr_auth_media for specification
void svcerr_auth_spec(CallContext context, SvcXprtTPtr xprt, enum AuthStatT why)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_auth:$(ptr)$(int)",
                                    create_VoidTPtrObj(xprt),
                                    create_IntTObj(why)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_decode_spec **/
mediator svcerr_decode_media for specification
void svcerr_decode_spec(CallContext context, SvcXprtTPtr xprt)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_decode:$(ptr)",
                                    create_VoidTPtrObj(xprt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_noproc_spec **/
mediator svcerr_noproc_media for specification
void svcerr_noproc_spec(CallContext context, SvcXprtTPtr xprt)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_noproc:$(ptr)",
                                    create_VoidTPtrObj(xprt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_noprog_spec **/
mediator svcerr_noprog_media for specification
void svcerr_noprog_spec(CallContext context, SvcXprtTPtr xprt)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_noprog:$(ptr)",
                                    create_VoidTPtrObj(xprt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_progvers_spec **/
mediator svcerr_progvers_media for specification
void svcerr_progvers_spec(CallContext context, SvcXprtTPtr xprt, RpcVersT low_vers, RpcVersT high_vers)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_progvers:$(ptr)$(ulong)$(ulong)",
                                    create_VoidTPtrObj(xprt),
                                    create_ULongTObj(low_vers),
                                    create_ULongTObj(high_vers)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_systemerr_spec **/
mediator svcerr_systemerr_media for specification
void svcerr_systemerr_spec(CallContext context, SvcXprtTPtr xprt)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_systemerr:$(ptr)",
                                    create_VoidTPtrObj(xprt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_weakauth_spec **/
mediator svcerr_weakauth_media for specification
void svcerr_weakauth_spec(CallContext context, SvcXprtTPtr xprt)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcerr_weakauth:$(ptr)",
                                    create_VoidTPtrObj(xprt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
    }
}


/** svcerr_weakauth_spec **/
mediator svc_freeargs_media for specification
BoolT svc_freeargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_freeargs:$(ptr)$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xprt),
                                    create_VoidTPtrObj(inproc),
                                    create_VoidTPtrObj(in)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** svcerr_weakauth_spec **/
mediator svc_getargs_media for specification
BoolT svc_getargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_getargs:$(ptr)$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xprt),
                                    create_VoidTPtrObj(inproc),
                                    create_VoidTPtrObj(in)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** svc_register_spec **/
mediator svc_register_media for specification
BoolT svc_register_spec(CallContext context, SvcXprtTPtr xprt, RpcProgT prog, RpcVersT vers, DispatchFnTPtr dispatch, RpcProtT protocol)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_register:$(ptr)$(ulong)$(ulong)$(ptr)$(ulong)",
                                    create_VoidTPtrObj(xprt),
                                    create_ULongTObj(prog),
                                    create_ULongTObj(vers),
                                    create_VoidTPtrObj(dispatch),
                                    create_ULongTObj(protocol)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** svc_run_spec **/
mediator svc_run_media for specification
void svc_run_spec(CallContext context)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_run");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onSvcRun(context);
    }
}

mediator svc_run_return_media for reaction 
SvcRunReturnType* svc_run_return(void)
{
    state
    {
        onSvcRunReturn(svc_run_return->context);
    }
}


/** svc_sendreply_spec **/
mediator svc_sendreply_media for specification
BoolT svc_sendreply_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr outproc, CaddrT out)
{
    call
    {
        BoolT res = false;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svc_sendreply:$(ptr)$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xprt),
                                    create_VoidTPtrObj(outproc),
                                    create_VoidTPtrObj(out)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** svctcp_create_spec **/
mediator svctcp_create_media for specification
SvcXprtTPtr svctcp_create_spec(CallContext context, IntT sock, UIntT sendsize, UIntT recvsize)
{
    call
    {
        SvcXprtTPtr res = NULL_VoidTPtr;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svctcp_create:$(int)$(uint)$(uint)",
                                    create_IntTObj(sock),
                                    create_UIntTObj(sendsize),
                                    create_UIntTObj(recvsize)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** svcudp_create_spec **/
mediator svcudp_create_media for specification
SvcXprtTPtr svcudp_create_spec(CallContext context, IntT sock)
{
    call
    {
        SvcXprtTPtr res = NULL_VoidTPtr;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "svcudp_create:$(int)",
                                    create_IntTObj(sock)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}
