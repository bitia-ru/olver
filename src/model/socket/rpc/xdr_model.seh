/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_XDR_MODEL_SEH
#define SOCKET_RPC_XDR_MODEL_SEH

#include "common/common_model.seh"
#include "data/sys/types_model.seh"
#include "data/rpc/xdr_model.seh"
#include "math/math/math_data.seh"


/* typedef int enum_t; */
typedef IntT EnumT;
typedef VoidTPtr EnumTPtr;

/* struct XDR; */
typedef VoidTPtr XdrTPtr;

/* struct accepted_reply; */
typedef VoidTPtr AcceptedReplyTPtr;

/* struct rpc_msg; */
typedef VoidTPtr RpcMsgTPtr;

/* struct opaque_auth; */
typedef VoidTPtr OpaqueAuthTPtr;

/* struct rejected_reply; */
typedef VoidTPtr RejectedReplyTPtr;

/* struct xdr_discrim; */
typedef struct
{
    IntT value;
    CharT* proc;
} XdrDiscrimT;

typedef VoidTPtr XdrDiscrimTPtr;

/*
 * enum xdr_op {
 *     XDR_ENCODE, XDR_DECODE, XDR_FREE
 * };
 */
typedef enum XdrOp {
    SUT_XDR_ENCODE, SUT_XDR_DECODE, SUT_XDR_FREE
} XdrOp;

/*
 * Internal types for the arguments of xdrrec_create:
 * typedef const int (*read_proc)(const void *, char *, const int);
 * typedef const int (*write_proc)(const void *, const char *, const int);
 */
typedef VoidTPtr ReadProcTPtr;
typedef VoidTPtr WriteProcTPtr;


extern XdrProcTPtr xdr_accepted_reply_addr;
extern XdrProcTPtr xdr_array_addr;
extern XdrProcTPtr xdr_bool_addr;
extern XdrProcTPtr xdr_bytes_addr;
extern XdrProcTPtr xdr_callhdr_addr;
extern XdrProcTPtr xdr_callmsg_addr;
extern XdrProcTPtr xdr_char_addr;
extern XdrProcTPtr xdr_double_addr;
extern XdrProcTPtr xdr_enum_addr;
extern XdrProcTPtr xdr_float_addr;
extern XdrProcTPtr xdr_int_addr;
extern XdrProcTPtr xdr_long_addr;
extern XdrProcTPtr xdr_opaque_addr;
extern XdrProcTPtr xdr_opaque_auth_addr;
extern XdrProcTPtr xdr_pointer_addr;
extern XdrProcTPtr xdr_reference_addr;
extern XdrProcTPtr xdr_rejected_reply_addr;
extern XdrProcTPtr xdr_replymsg_addr;
extern XdrProcTPtr xdr_short_addr;
extern XdrProcTPtr xdr_string_addr;
extern XdrProcTPtr xdr_u_char_addr;
extern XdrProcTPtr xdr_u_int_addr;
extern XdrProcTPtr xdr_u_long_addr;
extern XdrProcTPtr xdr_u_short_addr;
extern XdrProcTPtr xdr_union_addr;
extern XdrProcTPtr xdr_vector_addr;
extern XdrProcTPtr xdr_void_addr;
extern XdrProcTPtr xdr_wrapstring_addr;
extern VoidTPtr readfp_addr;
extern VoidTPtr writefp_addr;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** xdr_accepted_reply_spec **/
specification
BoolT xdr_accepted_reply_spec(CallContext context, XdrTPtr xdrs, AcceptedReplyTPtr ar);

/** xdr_array_spec **/
specification
BoolT xdr_array_spec(CallContext context, XdrTPtr xdrs, CaddrT* arrp, UIntT* sizep,
                     UIntT maxsize, UIntT elsize, XdrProcTPtr elproc);

/** xdr_bool_spec **/
specification
BoolT xdr_bool_spec(CallContext context, XdrTPtr xdrs, BoolT* bp);

/** xdr_bytes_spec **/
specification
BoolT xdr_bytes_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT* sizep, UIntT maxsize);

/** xdr_callhdr_spec **/
specification
BoolT xdr_callhdr_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr chdr);

/** xdr_callmsg_spec **/
specification
BoolT xdr_callmsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr cmsg);

/** xdr_char_spec **/
specification
BoolT xdr_char_spec(CallContext context, XdrTPtr xdrs, CharT* cp);

/** xdr_double_spec **/
specification
BoolT xdr_double_spec(CallContext context, XdrTPtr xdrs, Unifloat* dp);

/** xdr_enum_spec **/
specification
BoolT xdr_enum_spec(CallContext context, XdrTPtr xdrs, EnumT* ep);

/** xdr_float_spec **/
specification
BoolT xdr_float_spec(CallContext context, XdrTPtr xdrs, Unifloat* fp);

/** xdr_free_spec **/
specification
void xdr_free_spec(CallContext context, XdrProcTPtr proc, CharTPtr* objp);

/** xdr_int_spec **/
specification
BoolT xdr_int_spec(CallContext context, XdrTPtr xdrs, IntT* ip);

/** xdr_long_spec **/
specification
BoolT xdr_long_spec(CallContext context, XdrTPtr xdrs, LongT* lp);

/** xdr_opaque_spec **/
specification
BoolT xdr_opaque_spec(CallContext context, XdrTPtr xdrs, CaddrT cp, UIntT cnt);

/** xdr_opaque_auth_spec **/
specification
BoolT xdr_opaque_auth_spec(CallContext context, XdrTPtr xdrs, OpaqueAuthTPtr ap);

/** xdr_pointer_spec **/
specification
BoolT xdr_pointer_spec(CallContext context, XdrTPtr xdrs, CharTPtr* objpp,
                       UIntT objsize, XdrProcTPtr xdrobj);

/** xdr_reference_spec **/
specification
BoolT xdr_reference_spec(CallContext context, XdrTPtr xdrs, CharTPtr* pp,
                         UIntT size, XdrProcTPtr proc);

/** xdr_rejected_reply_spec **/
specification
BoolT xdr_rejected_reply_spec(CallContext context, XdrTPtr xdrs, RejectedReplyTPtr rr);

/** xdr_replymsg_spec **/
specification
BoolT xdr_replymsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr rmsg);

/** xdr_short_spec **/
specification
BoolT xdr_short_spec(CallContext context, XdrTPtr xdrs, ShortT* sp);

/** xdr_string_spec **/
specification
BoolT xdr_string_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT maxsize);

/** xdr_u_char_spec **/
specification
BoolT xdr_u_char_spec(CallContext context, XdrTPtr xdrs, UCharT* ucp);

/** xdr_u_int_spec **/
specification
BoolT xdr_u_int_spec(CallContext context, XdrTPtr xdrs, UIntT* up);

/** xdr_u_long_spec **/
specification
BoolT xdr_u_long_spec(CallContext context, XdrTPtr xdrs, ULongT* ulp);

/** xdr_u_short_spec **/
specification
BoolT xdr_u_short_spec(CallContext context, XdrTPtr xdrs, UShortT* usp);

/** xdr_union_spec **/
specification
BoolT xdr_union_spec(CallContext context, XdrTPtr xdrs, EnumT* dscmp, CharTPtr unp,
                     XdrDiscrimTPtr choices, XdrProcTPtr defaultparam);

/** xdr_vector_spec **/
specification
BoolT xdr_vector_spec(CallContext context, XdrTPtr xdrs, CharTPtr arrp,
                      UIntT size, UIntT elsize, XdrProcTPtr elproc);

/** xdr_void_spec **/
specification
BoolT xdr_void_spec(CallContext context);

/** xdr_wrapstring_spec **/
specification
BoolT xdr_wrapstring_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp);

/** xdrmem_create_spec **/
specification
void xdrmem_create_spec(CallContext context, XdrTPtr xdrs, CaddrT addr, UIntT size, XdrOp op);

/** xdrrec_create_spec **/
specification
void xdrrec_create_spec(CallContext context, XdrTPtr xdrs, UIntT sendsz, UIntT recvsz,
                        CaddrT handle, ReadProcTPtr readit, WriteProcTPtr writeit, XdrOp op);

/** xdrrec_eof_spec **/
specification
BoolT xdrrec_eof_spec(CallContext context, XdrTPtr xdrs);

/** xdr_destroy_spec **/
specification
void xdr_destroy_spec(CallContext context, XdrTPtr xdrs);

/** xdrrec_endofrecord_spec **/
specification
BoolT xdrrec_endofrecord_spec(CallContext context, XdrTPtr xdrs, IntT sendnow);

/** xdrrec_skiprecord_spec **/
specification
BoolT xdrrec_skiprecord_spec(CallContext context, XdrTPtr xdrs);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

void initSocketRpcXdrModel(void);

#endif
