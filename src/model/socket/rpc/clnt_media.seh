/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_CLNT_MEDIA_SEH
#define SOCKET_RPC_CLNT_MEDIA_SEH

#include "socket/rpc/clnt_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcClntSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** authnone_create_spec **/
mediator authnone_create_media for specification
AuthTPtr authnone_create_spec(CallContext context);

/** clnt_create_spec **/
mediator clnt_create_media for specification
ClientTPtr clnt_create_spec(CallContext context, CString* host, ULongT prognum,
                            ULongT versnum, CString* nettype);

/** clnt_pcreateerror_spec **/
mediator clnt_pcreateerror_media for specification
void clnt_pcreateerror_spec(CallContext context, CString* s);

/** clnt_perrno_spec **/
mediator clnt_perrno_media for specification
void clnt_perrno_spec(CallContext context, enum ClntStatT stat);

/** clnt_perror_spec **/
mediator clnt_perror_media for specification
void clnt_perror_spec(CallContext context, ClientTPtr clnt, CString* s);

/** clnt_spcreateerror_spec **/
mediator clnt_spcreateerror_media for specification
CString* clnt_spcreateerror_spec(CallContext context, CString* s);

/** clnt_sperrno_spec **/
mediator clnt_sperrno_media for specification
CString* clnt_sperrno_spec(CallContext context, enum ClntStatT stat);

/** clnt_sperror_spec **/
mediator clnt_sperror_media for specification
CString* clnt_sperror_spec(CallContext context, ClientTPtr clnt, CString* s);

/** clnt_control_spec **/
mediator clnt_control_media for specification
BoolT clnt_control_spec(CallContext context, ClientTPtr clnt, UIntT req, VoidTPtr info);

/** clnt_destroy_spec **/
mediator clnt_destroy_media for specification
void clnt_destroy_spec(CallContext context, ClientTPtr clnt);

/** clnt_freeres_spec **/
mediator clnt_freeres_media for specification
BoolT clnt_freeres_spec(CallContext context, ClientTPtr clnt, XdrProcTPtr outproc, CaddrT out);

/** clnt_geterr_spec **/
mediator clnt_geterr_media for specification
void clnt_geterr_spec(CallContext context, ClientTPtr clnt, RpcErrTPtr errp);

/** clnt_call_spec **/
mediator clnt_call_media for specification
enum ClntStatT clnt_call_spec(CallContext context, ClientTPtr clnt, ULongT procnum, XdrProcTPtr inproc,
                              CaddrT in, XdrProcTPtr outproc, CaddrT out, TimeValTObj* tout);


#endif
