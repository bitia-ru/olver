/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "socket/rpc/pmap_config.h"

#include "socket/rpc/tests/pmap_scenario.seh"

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "config/interpretation.seh"
#include "socket/rpc/pmap_config.h"

#include "socket/rpc/pmap_model.seh"
#include "socket/rpc/pmap_media.seh"

#include "socket/netdata/netdata_media.seh"
#include "socket/socket/socket_media.seh"



/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_pmap_scenario(int argc, char** argv)
{
    context = getContext();

    return true;
}

static void finish_pmap_scenario(void)
{
    /**/
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool pmap_scen()
{
    int i;
    SockaddrT * addr;
    BoolT res;

    addr = create_SockaddrT_Inet(0, htonl_model(SUT_INADDR_LOOPBACK) );

    /*[pmap_set]*/
    res = pmap_set_spec(context, SOCKET_RPC_PMAP_PROGNUM, 1, SUT_IPPROTO_TCP, SOCKET_RPC_PMAP_PORT1);
    res = pmap_set_spec(context, SOCKET_RPC_PMAP_PROGNUM, 4, SUT_IPPROTO_TCP, SOCKET_RPC_PMAP_PORT4);
    res = pmap_set_spec(context, SOCKET_RPC_PMAP_PROGNUM, 7, SUT_IPPROTO_TCP, SOCKET_RPC_PMAP_PORT7);

    if(SOKET_RPC_PMAP_SHALL_ROOT)
    {
        if(!res)
        {
            traceUserInfo("pmap_scen: pmap_set_spec failed."
                          "Try `chown root agent; chown :root agent; chmod +s agent`."
                         );
            return false;
        }
    }

    /*[pmap_getport]*/
    for(i=0;i<9;i++)
        pmap_getport_spec(context, addr, SOCKET_RPC_PMAP_PROGNUM, i, SUT_IPPROTO_TCP);

    /*[pmap_unset]*/
    pmap_unset_spec(context, SOCKET_RPC_PMAP_PROGNUM, 1);
    pmap_unset_spec(context, SOCKET_RPC_PMAP_PROGNUM, 4);
    pmap_unset_spec(context, SOCKET_RPC_PMAP_PROGNUM, 7);

    return true;
}

scenario dfsm socket_rpc_pmap_scenario =
{
    .init = init_pmap_scenario,
    .finish = finish_pmap_scenario,
    .actions = {
        pmap_scen,
        NULL
    }
};

#ifdef SOCKET_RPC_PMAP_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();

    initSocketSocketSubsystem();

    initSocketRpcPmapSubsystem();
}


bool main_socket_rpc_pmap(int argc, char** argv)
{
    addTraceToFile("trace.xml");

    socket_rpc_pmap_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_socket_rpc_pmap(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif
