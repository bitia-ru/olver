/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/rpc/tests/secure_scenario.seh"
#include "socket/rpc/secure_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"


/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_rpc_secure_scenario(int argc, char** argv)
{
    /* Init test scenario data */
    context = getContext();

    return true;
}

static void finish_rpc_secure_scenario(void)
{
    /**/
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/


scenario
bool rpc_secure_scen(void)
{
    key_decryptsession_spec(context, create_CString("name"), create_DesBlock(10, 5));

    return true;
}


/********************************************************************/
/**                     Test Scenario Definition                   **/
/********************************************************************/

scenario dfsm socket_rpc_secure_scenario =
{
    .init = init_rpc_secure_scenario,
    .finish = finish_rpc_secure_scenario,
    .actions = {
        rpc_secure_scen,
        NULL
    }
};



#ifdef RPC_SECURE_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/scheduler/scheduler_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initPThreadModel();

    initReqFilters();
    initSocketRpcSecureSubsystem();
}


bool main_rpc_secure(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    socket_rpc_secure_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_rpc_secure(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif






