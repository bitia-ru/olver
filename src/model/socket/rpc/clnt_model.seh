/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_CLNT_MODEL_SEH
#define SOCKET_RPC_CLNT_MODEL_SEH

#include "common/common_model.seh"
#include "data/sys/types_model.seh"
#include "data/sys/time_model.seh"
#include "data/rpc/xdr_model.seh"

/* struct AUTH; */
typedef VoidTPtr AuthTPtr;

/* struct CLIENT; */
typedef VoidTPtr ClientTPtr;

/* struct rpc_err; */
typedef VoidTPtr RpcErrTPtr;

/* enum clnt_stat; */
enum ClntStatT {
    SUT_RPC_SUCCESS,
    SUT_RPC_CANTENCODEARGS = 1,
    SUT_RPC_CANTDECODERES = 2,
    SUT_RPC_CANTSEND = 3,
    SUT_RPC_CANTRECV = 4,
    SUT_RPC_TIMEDOUT = 5,
    SUT_RPC_VERSMISMATCH = 6,
    SUT_RPC_AUTHERROR = 7,
    SUT_RPC_PROGUNAVAIL = 8,
    SUT_RPC_PROGVERSMISMATCH = 9,
    SUT_RPC_PROCUNAVAIL = 10,
    SUT_RPC_CANTDECODEARGS = 11,
    SUT_RPC_SYSTEMERROR = 12,
    SUT_RPC_NOBROADCAST = 21,
    SUT_RPC_UNKNOWNHOST = 13,
    SUT_RPC_UNKNOWNPROTO = 17,
    SUT_RPC_UNKNOWNADDR = 19,
    SUT_RPC_RPCBFAILURE = 14,
    SUT_RPC_PROGNOTREGISTERED = 15,
    SUT_RPC_N2AXLATEFAILURE = 22,
    SUT_RPC_FAILED = 16,
    SUT_RPC_INTR = 18,
    SUT_RPC_TLIERROR = 20,
    SUT_RPC_UDERROR = 23,
    SUT_RPC_INPROGRESS = 24,
    SUT_RPC_STALERACHANDLE = 25
};

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** authnone_create_spec **/
specification
AuthTPtr authnone_create_spec(CallContext context);

/** clnt_create_spec **/
specification
ClientTPtr clnt_create_spec(CallContext context, CString* host, ULongT prognum,
                            ULongT versnum, CString* nettype);

/** clnt_pcreateerror_spec **/
specification
void clnt_pcreateerror_spec(CallContext context, CString* s);

/** clnt_perrno_spec **/
specification
void clnt_perrno_spec(CallContext context, enum ClntStatT stat);

/** clnt_perror_spec **/
specification
void clnt_perror_spec(CallContext context, ClientTPtr clnt, CString* s);

/** clnt_spcreateerror_spec **/
specification
CString* clnt_spcreateerror_spec(CallContext context, CString* s);

/** clnt_sperrno_spec **/
specification
CString* clnt_sperrno_spec(CallContext context, enum ClntStatT stat);

/** clnt_sperror_spec **/
specification
CString* clnt_sperror_spec(CallContext context, ClientTPtr clnt, CString* s);

/** clnt_control_spec **/
specification
BoolT clnt_control_spec(CallContext context, ClientTPtr clnt, UIntT req, VoidTPtr info);

/** clnt_destroy_spec **/
specification
void clnt_destroy_spec(CallContext context, ClientTPtr clnt);

/** clnt_freeres_spec **/
specification
BoolT clnt_freeres_spec(CallContext context, ClientTPtr clnt, XdrProcTPtr outproc, CaddrT out);

/** clnt_geterr_spec **/
specification
void clnt_geterr_spec(CallContext context, ClientTPtr clnt, RpcErrTPtr errp);

/** clnt_call_spec **/
specification
enum ClntStatT clnt_call_spec(CallContext context, ClientTPtr clnt, ULongT procnum, XdrProcTPtr inproc,
                              CaddrT in, XdrProcTPtr outproc, CaddrT out, TimeValTObj* tout);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

#endif
