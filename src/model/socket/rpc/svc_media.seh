/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_SVC_MEDIA_SEH
#define SOCKET_RPC_SVC_MEDIA_SEH

#include "socket/rpc/svc_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcSvcSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** svc_getreqset_spec **/
mediator svc_getreqset_media for specification
void svc_getreqset_spec(CallContext context, FdSetTPtr rdfds);

/** svcerr_auth_spec **/
mediator svcerr_auth_media for specification
void svcerr_auth_spec(CallContext context, SvcXprtTPtr xprt, enum AuthStatT why);

/** svcerr_decode_spec **/
mediator svcerr_decode_media for specification
void svcerr_decode_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_noproc_spec **/
mediator svcerr_noproc_media for specification
void svcerr_noproc_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_noprog_spec **/
mediator svcerr_noprog_media for specification
void svcerr_noprog_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_progvers_spec **/
mediator svcerr_progvers_media for specification
void svcerr_progvers_spec(CallContext context, SvcXprtTPtr xprt, RpcVersT low_vers, RpcVersT high_vers);

/** svcerr_systemerr_spec **/
mediator svcerr_systemerr_media for specification
void svcerr_systemerr_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_weakauth_spec **/
mediator svcerr_weakauth_media for specification
void svcerr_weakauth_spec(CallContext context, SvcXprtTPtr xprt);

/** svcerr_weakauth_spec **/
mediator svc_freeargs_media for specification
BoolT svc_freeargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in);

/** svcerr_weakauth_spec **/
mediator svc_getargs_media for specification
BoolT svc_getargs_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr inproc, CharTPtr in);


/** svc_register_spec **/
mediator svc_register_media for specification
BoolT svc_register_spec(CallContext context, SvcXprtTPtr xprt, RpcProgT prog, RpcVersT vers, DispatchFnTPtr dispatch, RpcProtT protocol);

/** svc_run_spec **/
mediator svc_run_media for specification
void svc_run_spec(CallContext context);

/** svc_run_return **/
mediator svc_run_return_media for reaction
SvcRunReturnType* svc_run_return(void);

/** svc_sendreply_spec **/
mediator svc_sendreply_media for specification
BoolT svc_sendreply_spec(CallContext context, SvcXprtTPtr xprt, XdrProcTPtr outproc, CaddrT out);

/** svctcp_create_spec **/
mediator svctcp_create_media for specification
SvcXprtTPtr svctcp_create_spec(CallContext context, IntT sock, UIntT sendsize, UIntT recvsize);

/** svcudp_create_spec **/
mediator svcudp_create_media for specification
SvcXprtTPtr svcudp_create_spec(CallContext context, IntT sock);


#endif
