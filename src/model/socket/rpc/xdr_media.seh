/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SOCKET_RPC_XDR_MEDIA_SEH
#define SOCKET_RPC_XDR_MEDIA_SEH

#include "socket/rpc/xdr_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcXdrSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** xdr_accepted_reply_spec **/
mediator xdr_accepted_reply_media for specification
BoolT xdr_accepted_reply_spec(CallContext context, XdrTPtr xdrs, AcceptedReplyTPtr ar);

/** xdr_array_spec **/
mediator xdr_array_media for specification
BoolT xdr_array_spec(CallContext context, XdrTPtr xdrs, CaddrT* arrp, UIntT* sizep,
                     UIntT maxsize, UIntT elsize, XdrProcTPtr elproc);

/** xdr_bool_spec **/
mediator xdr_bool_media for specification
BoolT xdr_bool_spec(CallContext context, XdrTPtr xdrs, BoolT* bp);

/** xdr_bytes_spec **/
mediator xdr_bytes_media for specification
BoolT xdr_bytes_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT* sizep, UIntT maxsize);

/** xdr_callhdr_spec **/
mediator xdr_callhdr_media for specification
BoolT xdr_callhdr_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr chdr);

/** xdr_callmsg_spec **/
mediator xdr_callmsg_media for specification
BoolT xdr_callmsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr cmsg);

/** xdr_char_spec **/
mediator xdr_char_media for specification
BoolT xdr_char_spec(CallContext context, XdrTPtr xdrs, CharT* cp);

/** xdr_double_spec **/
mediator xdr_double_media for specification
BoolT xdr_double_spec(CallContext context, XdrTPtr xdrs, Unifloat* dp);

/** xdr_enum_spec **/
mediator xdr_enum_media for specification
BoolT xdr_enum_spec(CallContext context, XdrTPtr xdrs, EnumT* ep);

/** xdr_float_spec **/
mediator xdr_float_media for specification
BoolT xdr_float_spec(CallContext context, XdrTPtr xdrs, Unifloat* fp);

/** xdr_free_spec **/
mediator xdr_free_media for specification
void xdr_free_spec(CallContext context, XdrProcTPtr proc, CharTPtr* objp);

/** xdr_int_spec **/
mediator xdr_int_media for specification
BoolT xdr_int_spec(CallContext context, XdrTPtr xdrs, IntT* ip);

/** xdr_long_spec **/
mediator xdr_long_media for specification
BoolT xdr_long_spec(CallContext context, XdrTPtr xdrs, LongT* lp);

/** xdr_opaque_spec **/
mediator xdr_opaque_media for specification
BoolT xdr_opaque_spec(CallContext context, XdrTPtr xdrs, CaddrT cp, UIntT cnt);

/** xdr_opaque_auth_spec **/
mediator xdr_opaque_auth_media for specification
BoolT xdr_opaque_auth_spec(CallContext context, XdrTPtr xdrs, OpaqueAuthTPtr ap);

/** xdr_pointer_spec **/
mediator xdr_pointer_media for specification
BoolT xdr_pointer_spec(CallContext context, XdrTPtr xdrs, CharTPtr* objpp,
                       UIntT objsize, XdrProcTPtr xdrobj);

/** xdr_reference_spec **/
mediator xdr_reference_media for specification
BoolT xdr_reference_spec(CallContext context, XdrTPtr xdrs, CharTPtr* pp,
                         UIntT size, XdrProcTPtr proc);

/** xdr_rejected_reply_spec **/
mediator xdr_rejected_reply_media for specification
BoolT xdr_rejected_reply_spec(CallContext context, XdrTPtr xdrs, RejectedReplyTPtr rr);

/** xdr_replymsg_spec **/
mediator xdr_replymsg_media for specification
BoolT xdr_replymsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr rmsg);

/** xdr_short_spec **/
mediator xdr_short_media for specification
BoolT xdr_short_spec(CallContext context, XdrTPtr xdrs, ShortT* sp);

/** xdr_string_spec **/
mediator xdr_string_media for specification
BoolT xdr_string_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT maxsize);

/** xdr_u_char_spec **/
mediator xdr_u_char_media for specification
BoolT xdr_u_char_spec(CallContext context, XdrTPtr xdrs, UCharT* ucp);

/** xdr_u_int_spec **/
mediator xdr_u_int_media for specification
BoolT xdr_u_int_spec(CallContext context, XdrTPtr xdrs, UIntT* up);

/** xdr_u_long_spec **/
mediator xdr_u_long_media for specification
BoolT xdr_u_long_spec(CallContext context, XdrTPtr xdrs, ULongT* ulp);

/** xdr_u_short_spec **/
mediator xdr_u_short_media for specification
BoolT xdr_u_short_spec(CallContext context, XdrTPtr xdrs, UShortT* usp);

/** xdr_union_spec **/
mediator xdr_union_media for specification
BoolT xdr_union_spec(CallContext context, XdrTPtr xdrs, EnumT* dscmp, CharTPtr unp,
                     XdrDiscrimTPtr choices, XdrProcTPtr defaultparam);

/** xdr_vector_spec **/
mediator xdr_vector_media for specification
BoolT xdr_vector_spec(CallContext context, XdrTPtr xdrs, CharTPtr arrp,
                      UIntT size, UIntT elsize, XdrProcTPtr elproc);

/** xdr_void_spec **/
mediator xdr_void_media for specification
BoolT xdr_void_spec(CallContext context);

/** xdr_wrapstring_spec **/
mediator xdr_wrapstring_media for specification
BoolT xdr_wrapstring_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp);

/** xdrmem_create_spec **/
mediator xdrmem_create_media for specification
void xdrmem_create_spec(CallContext context, XdrTPtr xdrs, CaddrT addr, UIntT size, XdrOp op);

/** xdrrec_create_spec **/
mediator xdrrec_create_media for specification
void xdrrec_create_spec(CallContext context, XdrTPtr xdrs, UIntT sendsz, UIntT recvsz,
                        CaddrT handle, ReadProcTPtr readit, WriteProcTPtr writeit, XdrOp op);

/** xdrrec_eof_spec **/
mediator xdrrec_eof_media for specification
BoolT xdrrec_eof_spec(CallContext context, XdrTPtr xdrs);

/** xdr_destroy_spec **/
mediator xdr_destroy_media for specification
void xdr_destroy_spec(CallContext context, XdrTPtr xdrs);

/** xdrrec_endofrecord_spec **/
mediator xdrrec_endofrecord_media for specification
BoolT xdrrec_endofrecord_spec(CallContext context, XdrTPtr xdrs, IntT sendnow);

/** xdrrec_skiprecord_spec **/
mediator xdrrec_skiprecord_media for specification
BoolT xdrrec_skiprecord_spec(CallContext context, XdrTPtr xdrs);

#endif
