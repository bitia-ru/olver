/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "socket/rpc/xdr_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSocketRpcXdrSubsystem(void)
{
    // Set up mediators
    set_mediator_xdr_accepted_reply_spec(xdr_accepted_reply_media);
    set_mediator_xdr_array_spec(xdr_array_media);
    set_mediator_xdr_bool_spec(xdr_bool_media);
    set_mediator_xdr_bytes_spec(xdr_bytes_media);
    set_mediator_xdr_callhdr_spec(xdr_callhdr_media);
    set_mediator_xdr_callmsg_spec(xdr_callmsg_media);
    set_mediator_xdr_char_spec(xdr_char_media);
    set_mediator_xdr_double_spec(xdr_double_media);
    set_mediator_xdr_enum_spec(xdr_enum_media);
    set_mediator_xdr_float_spec(xdr_float_media);
    set_mediator_xdr_free_spec(xdr_free_media);
    set_mediator_xdr_int_spec(xdr_int_media);
    set_mediator_xdr_long_spec(xdr_long_media);
    set_mediator_xdr_opaque_spec(xdr_opaque_media);
    set_mediator_xdr_opaque_auth_spec(xdr_opaque_auth_media);
    set_mediator_xdr_pointer_spec(xdr_pointer_media);
    set_mediator_xdr_reference_spec(xdr_reference_media);
    set_mediator_xdr_rejected_reply_spec(xdr_rejected_reply_media);
    set_mediator_xdr_replymsg_spec(xdr_replymsg_media);
    set_mediator_xdr_short_spec(xdr_short_media);
    set_mediator_xdr_string_spec(xdr_string_media);
    set_mediator_xdr_u_char_spec(xdr_u_char_media);
    set_mediator_xdr_u_int_spec(xdr_u_int_media);
    set_mediator_xdr_u_long_spec(xdr_u_long_media);
    set_mediator_xdr_u_short_spec(xdr_u_short_media);
    set_mediator_xdr_union_spec(xdr_union_media);
    set_mediator_xdr_vector_spec(xdr_vector_media);
    set_mediator_xdr_void_spec(xdr_void_media);
    set_mediator_xdr_wrapstring_spec(xdr_wrapstring_media);
    set_mediator_xdrmem_create_spec(xdrmem_create_media);
    set_mediator_xdrrec_create_spec(xdrrec_create_media);
    set_mediator_xdrrec_eof_spec(xdrrec_eof_media);
    set_mediator_xdr_destroy_spec(xdr_destroy_media);
    set_mediator_xdrrec_endofrecord_spec(xdrrec_endofrecord_media);
    set_mediator_xdrrec_skiprecord_spec(xdrrec_skiprecord_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** xdr_accepted_reply_spec **/
mediator xdr_accepted_reply_media for specification
BoolT xdr_accepted_reply_spec(CallContext context, XdrTPtr xdrs, AcceptedReplyTPtr ar)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_accepted_reply:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(ar)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_array_spec **/
mediator xdr_array_media for specification
BoolT xdr_array_spec(CallContext context, XdrTPtr xdrs, CaddrT* arrp, UIntT* sizep,
                     UIntT maxsize, UIntT elsize, XdrProcTPtr elproc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_array:$(ptr)$(ptr)$(uint)$(uint)$(uint)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*arrp),
                                    create_UIntTObj(*sizep),
                                    create_UIntTObj(maxsize),
                                    create_UIntTObj(elsize),
                                    create_VoidTPtrObj(elproc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *arrp = readPointer_TSStream(context, &command.response);
            *sizep = readUInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_bool_spec **/
mediator xdr_bool_media for specification
BoolT xdr_bool_spec(CallContext context, XdrTPtr xdrs, BoolT* bp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_bool:$(ptr)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_IntTObj(*bp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *bp = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_bytes_spec **/
mediator xdr_bytes_media for specification
BoolT xdr_bytes_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT* sizep, UIntT maxsize)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_bytes:$(ptr)$(ptr)$(uint)$(uint)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*sp),
                                    create_UIntTObj(*sizep),
                                    create_UIntTObj(maxsize)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *sp = readPointer_TSStream(context, &command.response);
            *sizep = readUInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_callhdr_spec **/
mediator xdr_callhdr_media for specification
BoolT xdr_callhdr_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr chdr)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_callhdr:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(chdr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_callmsg_spec **/
mediator xdr_callmsg_media for specification
BoolT xdr_callmsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr cmsg)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_callmsg:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(cmsg)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_char_spec **/
mediator xdr_char_media for specification
BoolT xdr_char_spec(CallContext context, XdrTPtr xdrs, CharT* cp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_char:$(ptr)$(char)",
                                    create_VoidTPtrObj(xdrs),
                                    create_CharTObj(*cp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *cp = readChar_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_double_spec **/
mediator xdr_double_media for specification
BoolT xdr_double_spec(CallContext context, XdrTPtr xdrs, Unifloat* dp)
{
    call
    {
        IntT res;
        Unifloat* dp_res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_double:$(ptr)$(unifloat)",
                                    create_VoidTPtrObj(xdrs),
                                    dp
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            dp_res = readUnifloat_TSStream(&command.response);
            copy(dp_res, dp);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_enum_spec **/
mediator xdr_enum_media for specification
BoolT xdr_enum_spec(CallContext context, XdrTPtr xdrs, EnumT* ep)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_enum:$(ptr)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_IntTObj(*ep)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *ep = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_float_spec **/
mediator xdr_float_media for specification
BoolT xdr_float_spec(CallContext context, XdrTPtr xdrs, Unifloat* fp)
{
    call
    {
        IntT res;
        Unifloat* fp_res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_float:$(ptr)$(unifloat)",
                                    create_VoidTPtrObj(xdrs),
                                    fp
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            fp_res = readUnifloat_TSStream(&command.response);
            copy(fp_res, fp);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_free_spec **/
mediator xdr_free_media for specification
void xdr_free_spec(CallContext context, XdrProcTPtr proc, CharTPtr* objp)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_free:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(proc),
                                    create_VoidTPtrObj(*objp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *objp = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);
    }
}


/** xdr_int_spec **/
mediator xdr_int_media for specification
BoolT xdr_int_spec(CallContext context, XdrTPtr xdrs, IntT* ip)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_int:$(ptr)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_IntTObj(*ip)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *ip = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_long_spec **/
mediator xdr_long_media for specification
BoolT xdr_long_spec(CallContext context, XdrTPtr xdrs, LongT* lp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_long:$(ptr)$(long)",
                                    create_VoidTPtrObj(xdrs),
                                    create_LongTObj(*lp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *lp = readLong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_opaque_spec **/
mediator xdr_opaque_media for specification
BoolT xdr_opaque_spec(CallContext context, XdrTPtr xdrs, CaddrT cp, UIntT cnt)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_opaque:$(ptr)$(ptr)$(uint)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(cp),
                                    create_UIntTObj(cnt)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_opaque_auth_spec **/
mediator xdr_opaque_auth_media for specification
BoolT xdr_opaque_auth_spec(CallContext context, XdrTPtr xdrs, OpaqueAuthTPtr ap)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_opaque_auth:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(ap)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_pointer_spec **/
mediator xdr_pointer_media for specification
BoolT xdr_pointer_spec(CallContext context, XdrTPtr xdrs, CharTPtr* objpp,
                       UIntT objsize, XdrProcTPtr xdrobj)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_pointer:$(ptr)$(ptr)$(uint)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*objpp),
                                    create_UIntTObj(objsize),
                                    create_VoidTPtrObj(xdrobj)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *objpp = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_reference_spec **/
mediator xdr_reference_media for specification
BoolT xdr_reference_spec(CallContext context, XdrTPtr xdrs, CharTPtr* pp,
                         UIntT size, XdrProcTPtr proc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_reference:$(ptr)$(ptr)$(uint)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*pp),
                                    create_UIntTObj(size),
                                    create_VoidTPtrObj(proc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *pp = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_rejected_reply_spec **/
mediator xdr_rejected_reply_media for specification
BoolT xdr_rejected_reply_spec(CallContext context, XdrTPtr xdrs, RejectedReplyTPtr rr)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_rejected_reply:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(rr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_replymsg_spec **/
mediator xdr_replymsg_media for specification
BoolT xdr_replymsg_spec(CallContext context, XdrTPtr xdrs, RpcMsgTPtr rmsg)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_replymsg:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(rmsg)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_short_spec **/
mediator xdr_short_media for specification
BoolT xdr_short_spec(CallContext context, XdrTPtr xdrs, ShortT* sp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_short:$(ptr)$(short)",
                                    create_VoidTPtrObj(xdrs),
                                    create_ShortTObj(*sp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *sp = readShort_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_string_spec **/
mediator xdr_string_media for specification
BoolT xdr_string_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp, UIntT maxsize)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_string:$(ptr)$(ptr)$(uint)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*sp),
                                    create_UIntTObj(maxsize)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *sp = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_u_char_spec **/
mediator xdr_u_char_media for specification
BoolT xdr_u_char_spec(CallContext context, XdrTPtr xdrs, UCharT* ucp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_u_char:$(ptr)$(uchar)",
                                    create_VoidTPtrObj(xdrs),
                                    create_UCharTObj(*ucp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *ucp = readUChar_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_u_int_spec **/
mediator xdr_u_int_media for specification
BoolT xdr_u_int_spec(CallContext context, XdrTPtr xdrs, UIntT* up)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_u_int:$(ptr)$(uint)",
                                    create_VoidTPtrObj(xdrs),
                                    create_UIntTObj(*up)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *up = readUInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_u_long_spec **/
mediator xdr_u_long_media for specification
BoolT xdr_u_long_spec(CallContext context, XdrTPtr xdrs, ULongT* ulp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_u_long:$(ptr)$(ulong)",
                                    create_VoidTPtrObj(xdrs),
                                    create_ULongTObj(*ulp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *ulp = readULong_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_u_short_spec **/
mediator xdr_u_short_media for specification
BoolT xdr_u_short_spec(CallContext context, XdrTPtr xdrs, UShortT* usp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_u_short:$(ptr)$(ushort)",
                                    create_VoidTPtrObj(xdrs),
                                    create_UShortTObj(*usp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *usp = readUShort_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_union_spec **/
mediator xdr_union_media for specification
BoolT xdr_union_spec(CallContext context, XdrTPtr xdrs, EnumT* dscmp, CharTPtr unp,
                     XdrDiscrimTPtr choices, XdrProcTPtr defaultparam)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_union:$(ptr)$(int)$(ptr)$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_IntTObj(*dscmp),
                                    create_VoidTPtrObj(unp),
                                    create_VoidTPtrObj(choices),
                                    create_VoidTPtrObj(defaultparam)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *dscmp = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_vector_spec **/
mediator xdr_vector_media for specification
BoolT xdr_vector_spec(CallContext context, XdrTPtr xdrs, CharTPtr arrp,
                      UIntT size, UIntT elsize, XdrProcTPtr elproc)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_vector:$(ptr)$(ptr)$(uint)$(uint)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(arrp),
                                    create_UIntTObj(size),
                                    create_UIntTObj(elsize),
                                    create_VoidTPtrObj(elproc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_void_spec **/
mediator xdr_void_media for specification
BoolT xdr_void_spec(CallContext context)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_void");
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_wrapstring_spec **/
mediator xdr_wrapstring_media for specification
BoolT xdr_wrapstring_spec(CallContext context, XdrTPtr xdrs, CharTPtr* sp)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_wrapstring:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(*sp)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
            *sp = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdrmem_create_spec **/
mediator xdrmem_create_media for specification
void xdrmem_create_spec(CallContext context, XdrTPtr xdrs, CaddrT addr, UIntT size, XdrOp op)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdrmem_create:$(ptr)$(ptr)$(uint)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_VoidTPtrObj(addr),
                                    create_UIntTObj(size),
                                    create_IntTObj(op)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
}


/** xdrrec_create_spec **/
mediator xdrrec_create_media for specification
void xdrrec_create_spec(CallContext context, XdrTPtr xdrs, UIntT sendsz, UIntT recvsz,
                        CaddrT handle, ReadProcTPtr readit, WriteProcTPtr writeit, XdrOp op)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdrrec_create:$(ptr)$(uint)$(uint)$(ptr)$(ptr)$(ptr)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_UIntTObj(sendsz),
                                    create_UIntTObj(recvsz),
                                    create_VoidTPtrObj(handle),
                                    create_VoidTPtrObj(readit),
                                    create_VoidTPtrObj(writeit),
                                    create_IntTObj(op)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
}


/** xdrrec_eof_spec **/
mediator xdrrec_eof_media for specification
BoolT xdrrec_eof_spec(CallContext context, XdrTPtr xdrs)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdrrec_eof:$(ptr)",
                                    create_VoidTPtrObj(xdrs)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdr_destroy_spec **/
mediator xdr_destroy_media for specification
void xdr_destroy_spec(CallContext context, XdrTPtr xdrs)
{
    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdr_destroy:$(ptr)",
                                    create_VoidTPtrObj(xdrs)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
}


/** xdrrec_endofrecord_spec **/
mediator xdrrec_endofrecord_media for specification
BoolT xdrrec_endofrecord_spec(CallContext context, XdrTPtr xdrs, IntT sendnow)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdrrec_endofrecord:$(ptr)$(int)",
                                    create_VoidTPtrObj(xdrs),
                                    create_IntTObj(sendnow)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** xdrrec_skiprecord_spec **/
mediator xdrrec_skiprecord_media for specification
BoolT xdrrec_skiprecord_spec(CallContext context, XdrTPtr xdrs)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();

        format_TSCommand(&command, "xdrrec_skiprecord:$(ptr)",
                                    create_VoidTPtrObj(xdrs)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}
