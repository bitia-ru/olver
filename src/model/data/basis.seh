/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef DATA_BASIS_SEH
#define DATA_BASIS_SEH

#include "config/model_config.seh"
#include <atl/long.h>


/********************************************************************/
/**                     Model Object Identifier                    **/
/********************************************************************/
typedef long Identifier;

#define WrongId -1


/********************************************************************/
/**                         System Identifier                      **/
/********************************************************************/
typedef Identifier SystemId;

specification typedef SystemId SystemIdObj;

SystemIdObj* create_SystemIdObj( SystemId systemid );


/********************************************************************/
/**                        Process Identifier                      **/
/********************************************************************/
typedef sut_int PidT;
typedef struct ProcessId
{
  SystemId system;
  PidT     process;
} ProcessId;

extern ProcessId WrongProcessId;

ProcessId create_ProcessId( SystemId system, PidT process );

bool isWrong_ProcessId( ProcessId processid );
bool equals_ProcessId( ProcessId left, ProcessId right );

specification typedef ProcessId ProcessIdObj;

ProcessIdObj* create_ProcessIdObj( ProcessId processid );

#define PidTObj         Long
#define create_PidTObj  create_Long
#define type_PidT       type_Long


/********************************************************************/
/**                         Thread Identifier                      **/
/********************************************************************/
typedef sut_ulong PThreadT;

//specification typedef PThreadT PThreadTObj;

//PThreadTObj* create_PThreadTObj( PThreadT thread );


typedef struct ThreadId
{
  SystemId system;
  PidT     process;
  PThreadT thread;
} ThreadId;

extern ThreadId WrongThreadId;

ThreadId create_ThreadId( SystemId system, PidT process, PThreadT thread );

bool isWrong_ThreadId( ThreadId threadid );
bool equals_ThreadId( ThreadId left, ThreadId right );
ProcessId getProcessId_ThreadId( ThreadId threadid );


specification typedef ThreadId ThreadIdObj;

ThreadIdObj* create_ThreadIdObj( ThreadId threadid );
//ThreadIdObj* create_ThreadIdObj( SystemId system, PidT process, PThreadT thread );


/********************************************************************/
/**                           Call Context                         **/
/********************************************************************/
typedef ThreadId CallContext;

CallContext create_CallContext( SystemId system, PidT process, PThreadT thread );
ProcessId getProcessId_CallContext( CallContext context );
String* to_string_CallContext( CallContext* context );


/********************************************************************/
/**                          File Identifier                       **/
/********************************************************************/
typedef struct FileId
{
  SystemId    system;
  Identifier  file;
} FileId;

extern FileId WrongFileId;

bool isWrong_FileId( FileId filedesc );
bool equals_FileId( FileId left, FileId right );

FileId create_FileId( SystemId system, Identifier file );

specification typedef FileId FileIdObj;

FileIdObj* create_FileIdObj( FileId fileid );


/********************************************************************/
/**                         File Descriptors                       **/
/********************************************************************/
typedef sut_int FileDescIdT;

typedef struct FileDescId
{
  SystemId    system;
  PidT        process;
  FileDescIdT filedesc;
} FileDescId;

extern FileDescId WrongFileDescId;

bool isWrong_FileDescId( FileDescId filedesc );
bool equals_FileDescId( FileDescId left, FileDescId right );

FileDescId create_FileDescId( SystemId system, PidT process, FileDescIdT filedesc );
ProcessId getProcessId_FileDescId( FileDescId filedesc );

specification typedef FileDescId FileDescIdObj;

FileDescIdObj* create_FileDescIdObj( FileDescId file_desc_id );

specification typedef FileDescIdT FileDescIdTObj;

FileDescIdTObj* create_FileDescIdTObj( FileDescIdT filedesc );


/********************************************************************/
/**                        Cancellation Status                     **/
/********************************************************************/

/*
 * Cancellation status represents status of execution of 
 * a function, which may contain cancellation point.
 * If CANCELLED(status) is false the call finished successfully.
 * Otherwise it was cancelled. 
 */

typedef bool* CancelStatus;

#define CANCELLED(status)     (*status)

bool isValid_CancelStatus( CancelStatus status );


#endif

