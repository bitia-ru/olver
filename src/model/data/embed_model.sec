/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "data/embed_model.seh"
#include "config/system_config.seh"


/********************************************************************/
/**          Model Representation of Wide Characters Type          **/
/********************************************************************/
const WCharT NUL_WCharT = 0;


/********************************************************************/
/**                Model Representation of Pointers                **/
/********************************************************************/
const VoidTPtr NULL_VoidTPtr = { 0, 0, 0 };
const VoidTPtr Invalid_VoidTPtr = { 0, 0, (sut_ptr_t)-1 };

bool isNULL_VoidTPtr( VoidTPtr ptr )
{
  return (ptr.address == 0);
}

bool isInvalid_VoidTPtr( VoidTPtr ptr )
{
    switch(sizeof_VoidTPtr) {
    case 1:
        return ptr.address == (256 - 1);
        break;
    case 2:
        return ptr.address == (256 * 256 - 1);
        break;
    case 3:
        return ptr.address == (256 * 256 * 256 - 1);
        break;
    case 4:
        return ((ptr.address+1)&0xFFFFFFFF) == 0; // 0xFFFFFFFF + 1 == 0
        break;
    case 8:
        return (ptr.address+1) == 0; // 0xFFFFFFFFFFFFFFFF + 1 == 0
        break;
    default:
        return false;
    }
    return false;
}

bool equals_VoidTPtr( VoidTPtr ptr1, VoidTPtr ptr2 )
{
  if ((ptr1.address == 0) && (ptr2.address == 0))
    return true;
  return (ptr1.address == ptr2.address)
      && (ptr1.process == ptr2.process)
      && (ptr1.system  == ptr2.system);
}


/********************************************************************/
/**         Specification Types for Standard Integer Types         **/
/********************************************************************/

specification typedef CharT   CharTObj = {};
specification typedef SCharT  SCharTObj = {};
specification typedef UCharT  UCharTObj = {};
specification typedef ShortT  ShortTObj = {};
specification typedef UShortT UShortTObj = {};
specification typedef IntT    IntTObj = {};
specification typedef UIntT   UIntTObj = {};
specification typedef LongT   LongTObj = {};
specification typedef ULongT  ULongTObj = {};
specification typedef LLongT  LLongTObj = {};
specification typedef ULLongT ULLongTObj = {};

specification typedef WCharT  WCharTObj = {};
specification typedef WIntT   WIntTObj = {};

CharTObj* create_CharTObj(CharT value)
{
  return create( &type_CharTObj, value );
}

SCharTObj* create_SCharTObj(SCharT value)
{
  return create( &type_SCharTObj, value );
}

UCharTObj* create_UCharTObj(UCharT value)
{
  return create( &type_UCharTObj, value );
}

ShortTObj* create_ShortTObj(ShortT value)
{
  return create( &type_ShortTObj, value );
}

UShortTObj* create_UShortTObj(UShortT value)
{
  return create( &type_UShortTObj, value );
}

IntTObj* create_IntTObj(IntT value)
{
  return create( &type_IntTObj, value );
}

UIntTObj* create_UIntTObj(UIntT value)
{
  return create( &type_UIntTObj, value );
}

LongTObj* create_LongTObj(LongT value)
{
  return create( &type_LongTObj, value );
}

ULongTObj* create_ULongTObj(ULongT value)
{
  return create( &type_ULongTObj, value );
}

LLongTObj* create_LLongTObj(LLongT value)
{
  return create( &type_LLongTObj, value );
}

ULLongTObj* create_ULLongTObj(ULLongT value)
{
  return create( &type_ULLongTObj, value );
}


WCharTObj* create_WCharTObj(WCharT value)
{
  return create( &type_WCharTObj, value );
}

WIntTObj* create_WIntTObj(WIntT value)
{
  return create(&type_WIntTObj, value);
}

/********************************************************************/
/**          Specification Types for Real Floating Types           **/
/********************************************************************/
specification typedef FloatT FloatTObj = {};

specification typedef DoubleT     DoubleTObj = {};
specification typedef LongDoubleT LongDoubleTObj = {};

FloatTObj* create_FloatTObj(FloatT value)
{
  return create( &type_FloatTObj, value );
}

DoubleTObj* create_DoubleTObj(DoubleT value)
{
  return create( &type_DoubleTObj, value );
}

LongDoubleTObj* create_LongDoubleTObj(LongDoubleT value)
{
  return create( &type_LongDoubleTObj, value );
}


/********************************************************************/
/**       Specification Types for Exact-Width Integer Types        **/
/********************************************************************/
specification typedef Int8T   Int8TObj = {};
specification typedef Int16T  Int16TObj = {};
specification typedef Int32T  Int32TObj = {};
specification typedef Int64T  Int64TObj = {};
specification typedef UInt8T  UInt8TObj = {};
specification typedef UInt16T UInt16TObj = {};
specification typedef UInt32T UInt32TObj = {};
specification typedef UInt64T UInt64TObj = {};

Int8TObj* create_Int8TObj(Int8T value)
{
  return create( &type_Int8TObj, value );
}

Int16TObj* create_Int16TObj(Int16T value)
{
  return create( &type_Int16TObj, value );
}

Int32TObj* create_Int32TObj(Int32T value)
{
  return create( &type_Int32TObj, value );
}

Int64TObj* create_Int64TObj(Int64T value)
{
  return create( &type_Int64TObj, value );
}

UInt8TObj* create_UInt8TObj(UInt8T value)
{
  return create( &type_UInt8TObj, value );
}

UInt16TObj* create_UInt16TObj(UInt16T value)
{
  return create( &type_UInt16TObj, value );
}

UInt32TObj* create_UInt32TObj(UInt32T value)
{
  return create( &type_UInt32TObj, value );
}

UInt64TObj* create_UInt64TObj(UInt64T value)
{
  return create( &type_UInt64TObj, value );
}


/********************************************************************/
/**      Specification Types for Greatest-Width Integer Types      **/
/********************************************************************/
specification typedef IntMaxT  IntMaxTObj = {};
specification typedef UIntMaxT UIntMaxTObj = {};

IntMaxTObj* create_IntMaxTObj(IntMaxT value)
{
  return create( &type_IntMaxTObj, value );
}

UIntMaxTObj* create_UIntMaxTObj(UIntMaxT value)
{
  return create( &type_UIntMaxTObj, value );
}


/********************************************************************/
/**         Specification Typed for Integer types                  **/
/**                    capable of holding object pointers          **/
/********************************************************************/
specification typedef IntPtrT IntPtrTObj = {};
specification typedef UIntPtrT UIntPtrTObj = {};

IntPtrTObj* create_IntPtrTObj(IntPtrT value)
{
    return create(&type_IntPtrTObj, value);
}

UIntPtrTObj* create_UIntPtrTObj(UIntPtrT value)
{
    return create(&type_UIntPtrTObj, value);
}


/********************************************************************/
/**          Specification Types for Other Integer Types           **/
/********************************************************************/
specification typedef PtrDiffT PtrDiffTObj = {};
specification typedef SizeT    SizeTObj = {};
specification typedef SSizeT   SSizeTObj = {};

PtrDiffTObj* create_PtrDiffTObj(PtrDiffT value)
{
  return create( &type_PtrDiffTObj, value );
}

SizeTObj* create_SizeTObj(SizeT  value)
{
  return create( &type_SizeTObj, value );
}

SSizeTObj* create_SSizeTObj(SizeT value)
{
  return create( &type_SSizeTObj, value );
}


/********************************************************************/
/**                Specification Types for Pointers                **/
/********************************************************************/
specification typedef VoidTPtr VoidTPtrObj = {};

VoidTPtrObj* create_VoidTPtrObj( VoidTPtr ptr )
{
  return create( &type_VoidTPtrObj, ptr.system, ptr.process, ptr.address );
}


