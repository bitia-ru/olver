/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "data/signal_model.seh"
#include "common/common_model.seh" 

/********************************************************************/
/**                     Sigaction functions                        **/
/********************************************************************/

specification typedef struct SigAction SigAction = {};
specification typedef struct CalledFunctionDescription CalledFunctionDescription = {};
specification typedef struct SignalValue SignalValue = {};
specification typedef struct SignalParams SignalParams = {};

specification typedef struct SigInfo SigInfo = {};

SigAction* create_SigAction()
{
    SigAction* sa;
    Set* s = create_Set(&type_SignalObj);
    SigActionFlag f;

    f.SA_NOCLDSTOP_Flag = false;
    f.SA_ONSTACK_Flag   = false;
    f.SA_RESETHAND_Flag = false;
    f.SA_RESTART_Flag   = false;
    f.SA_INTERRUPT_Flag = false;
    f.SA_SIGINFO_Flag   = false;
    f.SA_NOCLDWAIT_Flag = false;
    f.SA_NODEFER_Flag   = false;

    sa = create(&type_SigAction, SUT_SIG_DFL, s, f, SUT_SIGACT_DFL); 
    return sa;
}

Signal* create_Signal(int signo)
{
    return create(&type_SignalObj, signo);
}

CalledFunctionDescription* create_CalledFunctionDescription(int uid, int function_called, int function_nested)
{
    CalledFunctionDescription* res;
    res = create(&type_CalledFunctionDescription, uid, function_called, function_nested);

    //verbose("Create funct_descr called %d nested %d uid %d\n", res->function_called, res->function_nested, res->uid);
    return res;
}

SignalValue* create_SignalValue(bool is_int, IntT int_value, VoidTPtr ptr_value)
{
    return create(&type_SignalValue, is_int, int_value, ptr_value);
}

SignalParams* create_SignalParams(bool is_int, IntT int_value, VoidTPtr ptr_value, CallContext call_context, IntT unique_id, bool returned_kill)
{
    return create(&type_SignalParams, create_SignalValue(is_int, int_value, ptr_value), call_context, unique_id, returned_kill);
}

SigInfo* create_SigInfo(VoidTPtr address, IntT m_si_signo, IntT m_si_code, IntT m_si_errno, 
                        ProcessId m_si_pid, UidT m_si_uid, VoidTPtr m_si_addr,
                        IntT m_si_status, LongT m_si_band, SignalValue* m_si_value)
{
    return create(&type_SigInfo, address, m_si_signo, m_si_code, m_si_errno, m_si_pid, m_si_uid, 
                    m_si_addr, m_si_status, m_si_band, m_si_value);
}
