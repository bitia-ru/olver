/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "data/basis.seh"


/********************************************************************/
/**                         System Identifier                      **/
/********************************************************************/
specification typedef SystemId SystemIdObj = {};

SystemIdObj* create_SystemIdObj( SystemId systemid )
{
  return create(&type_SystemIdObj, systemid);
}


/********************************************************************/
/**                        Process Identifier                      **/
/********************************************************************/
ProcessId WrongProcessId = { WrongId, -1 };

ProcessId create_ProcessId( SystemId system, PidT process )
{
ProcessId res;

  res.system = system;
  res.process = process;
  return res;
}

bool isWrong_ProcessId( ProcessId processid )
{
  return (processid.system == WrongId) || (processid.process == -1);
}

bool equals_ProcessId( ProcessId left, ProcessId right )
{
  return (left.system == right.system)
      && (left.process == right.process);
}

specification typedef ProcessId ProcessIdObj = {};

ProcessIdObj* create_ProcessIdObj( ProcessId processid )
{
  return create(&type_ProcessIdObj, processid.system, processid.process);
}


/********************************************************************/
/**                         Thread Identifier                      **/
/********************************************************************/
specification typedef PThreadT PThreadTObj = {};

PThreadTObj* create_PThreadTObj( PThreadT thread )
{
  return create( &type_PThreadTObj, thread );
}

ThreadId WrongThreadId = { WrongId, -1, -1 };

ThreadId create_ThreadId( SystemId system, PidT process, PThreadT thread )
{
ThreadId threadid;

  threadid.system = system;
  threadid.process = process;
  threadid.thread = thread;
  return threadid;
}

bool isWrong_ThreadId( ThreadId threadid )
{
  return (threadid.system == WrongId);
}

bool equals_ThreadId( ThreadId left, ThreadId right )
{
  return (left.system == right.system)
      && (left.process == right.process)
      && (left.thread == right.thread);
}

ProcessId getProcessId_ThreadId( ThreadId threadid )
{
ProcessId res;

  res.system = threadid.system;
  res.process = threadid.process;
  return res;
}

specification typedef ThreadId ThreadIdObj = {};


//ThreadIdObj* create_ThreadIdObj( SystemId system, PidT process, PThreadT thread )
//{
//  return create( &type_ThreadIdObj, system, process, thread );
//}

ThreadIdObj* create_ThreadIdObj( ThreadId threadid )
{
  return create( &type_ThreadIdObj, threadid.system, threadid.process, threadid.thread );
}


/********************************************************************/
/**                           Call Context                         **/
/********************************************************************/
CallContext create_CallContext( SystemId system, PidT process, PThreadT thread )
{
CallContext context;

  context.system = system;
  context.process = process;
  context.thread = thread;
  return context;
}

ProcessId getProcessId_CallContext( CallContext context )
{
ProcessId res;

  res.system = context.system;
  res.process = context.process;
  return res;
}

String* to_string_CallContext( CallContext* context )
{
    return format_String( "[pid=%u,thr=%lx]", context->process, context->thread );
}


/********************************************************************/
/**                          File Identifier                       **/
/********************************************************************/
FileId WrongFileId = { WrongId, -1 };

bool isWrong_FileId( FileId fileid )
{
  return (fileid.file == -1);
}

bool equals_FileId( FileId left, FileId right )
{
  return (left.system == right.system)
      && (left.file == right.file);
}

FileId create_FileId( SystemId system, Identifier file )
{
FileId res;
  
  res.system = system;
  res.file = file;
  return res;
}

specification typedef FileId FileIdObj = {};

FileIdObj* create_FileIdObj( FileId fileid )
{
  return create( &type_FileIdObj, fileid.system, fileid.file );
}


/********************************************************************/
/**                         File Descriptors                       **/
/********************************************************************/
FileDescId WrongFileDescId = { WrongId, -1, -1 };

bool isWrong_FileDescId( FileDescId filedesc )
{
  return (filedesc.filedesc == -1);
}

bool equals_FileDescId( FileDescId left, FileDescId right )
{
  return (left.system == right.system)
      && (left.process == right.process)
      && (left.filedesc == right.filedesc);
}

FileDescId create_FileDescId( SystemId system, PidT process, FileDescIdT filedesc )
{
FileDescId res;

  res.system   = system;
  res.process  = process;
  res.filedesc = filedesc;
  return res;
}

ProcessId getProcessId_FileDescId( FileDescId filedesc )
{
ProcessId res;

  res.system = filedesc.system;
  res.process = filedesc.process;
  return res;
}

specification typedef FileDescId FileDescIdObj = {};

FileDescIdObj* create_FileDescIdObj( FileDescId file_desc_id )
{
    return create(&type_FileDescIdObj, file_desc_id.system, file_desc_id.process, file_desc_id.filedesc);
}

specification typedef FileDescIdT FileDescIdTObj = {};

FileDescIdTObj* create_FileDescIdTObj( FileDescIdT filedesc )
{
  return create( &type_FileDescIdTObj, filedesc );
}


/********************************************************************/
/**                        Cancellation Status                     **/
/********************************************************************/
bool isValid_CancelStatus( CancelStatus status )
{
  return (status != NULL);
}

