/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_ASSERT_MEDIA_SEH
#define UTIL_ASSERT_MEDIA_SEH

#include "util/assert/assert_model.seh"


/********************************************************************/
/**                        Helper Functions                        **/
/********************************************************************/
CString * getStderr(void);

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilAssertSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __assert_fail_spec **/
mediator __assert_fail_media for specification
void __assert_fail_spec( CallContext context, CString * assertion_str, CString * file, UIntT line, CString * function_str);

mediator assertFail_return_media for reaction
AssertFailReturnType * assertFail_return( void );

//mediator assertFail_processTerminated_media for reaction
//AssertFailReturnType * assertFail_processTerminated( void );

/** common for err group and error **/
mediator errCalledProcess_return_media for reaction
ExitReturnType * errCalledProcess_return( void );

mediator err_processTerminated_media for reaction
ExitReturnType * err_processTerminated  ( void );

/** err_spec **/
mediator err_media for specification
void err_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** error_spec **/
mediator error_media for specification
void error_spec( CallContext context,
                 IntT exitstatus, IntT errnum, CString * format, List /* NULL */ * arguments, CString * stderrAsFile
               );

/** errx_spec **/
mediator errx_media for specification
void errx_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** verrx_spec **/
mediator verrx_media for specification
void verrx_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** warn_spec **/
mediator warn_media for specification
void warn_spec
         ( CallContext context, CString * fmt, List /* NULL */ * arguments, CString * errput, CString * stderrAsFile );

/** warnx_spec **/
mediator warnx_media for specification
void warnx_spec
         ( CallContext context, CString * fmt, List /* NULL */ * arguments, CString * errput, CString * stderrAsFile );

#endif
