/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_ASSERT_MODEL_SEH
#define UTIL_ASSERT_MODEL_SEH

#include "common/common_model.seh"
#include "process/process/process_model.seh"

/** __assert_fail_spec **/
specification typedef
struct AssertFailCall
{
    CallContext context;
    CString * result_stderr;
} AssertFailCall;

AssertFailCall * create_AssertFailCall( CallContext context, CString * result_stderr );

void onAssertFail( CallContext context );

specification typedef
struct AssertFailReturnType
{
    CallContext context;
} AssertFailReturnType;

AssertFailReturnType * create_AssertFailReturnType( CallContext context );

reaction AssertFailReturnType * assertFail_return( void );
reaction AssertFailReturnType * assertFail_processTerminated  ( void );


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __assert_fail_spec **/
specification
void __assert_fail_spec( CallContext context, CString * assertion_str, CString * file, UIntT line, CString * function_str);

reaction AssertFailReturnType * assertFail_return( void );

/** common for err group and error **/
reaction ExitReturnType * errCalledProcess_return( void );
reaction ExitReturnType * err_processTerminated  ( void );

/** err_spec **/
specification
void err_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** error_spec **/
specification
void error_spec( CallContext context,
                 IntT exitstatus, IntT errnum, CString * format, List /* NULL */ * arguments, CString * stderrAsFile
               );

/** errx_spec **/
specification
void errx_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** verrx_spec **/
specification
void verrx_spec( CallContext context, IntT eval, CString * fmt, List /* NULL */ * arguments, CString * stderrAsFile );

/** warn_spec **/
specification
void warn_spec
         ( CallContext context, CString * fmt, List /* NULL */ * arguments, CString * errput, CString * stderrAsFile );

/** warnx_spec **/
specification
void warnx_spec
         ( CallContext context, CString * fmt, List /* NULL */ * arguments, CString * errput, CString * stderrAsFile );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool checkWarnResult( const char * funcName, CString * format, List /* NULL */ * arguments, CString * errput );

#endif
