/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "common/common_media.seh"
#include "process/process/process_model.seh"
#include "util/pam/pam_media.seh"

IntT readListStr_TSStream(TSStream* stream, List* lst)
{
    IntT size, i;

    size=readInt_TSStream(stream);

    for(i=0;i<size;i++)
        append_List(lst, readCString_TSStream(stream));

    return size;
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initUtilPamSubsystem(void)
{
    // Set up mediators
    set_mediator_pam_acct_mgmt_spec    ( pam_acct_mgmt_media     );
    set_mediator_pam_authenticate_spec ( pam_authenticate_media  );
    set_mediator_pam_chauthtok_spec    ( pam_chauthtok_media     );
    set_mediator_pam_close_session_spec( pam_close_session_media );
    set_mediator_pam_end_spec          ( pam_end_media           );
    set_mediator_pam_fail_delay_spec   ( pam_fail_delay_media    );
    set_mediator_pam_get_item_spec     ( pam_get_item_media      );
    set_mediator_pam_getenvlist_spec   ( pam_getenvlist_media    );
    set_mediator_pam_open_session_spec ( pam_open_session_media  );
    set_mediator_pam_set_item_spec     ( pam_set_item_media      );
    set_mediator_pam_setcred_spec      ( pam_setcred_media       );
    set_mediator_pam_start_spec        ( pam_start_media         );
    set_mediator_pam_strerror_spec     ( pam_strerror_media      );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pam_acct_mgmt_spec **/
mediator pam_acct_mgmt_media for specification
IntT pam_acct_mgmt_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_acct_mgmt:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** pam_authenticate_spec **/
mediator pam_authenticate_media for specification
IntT pam_authenticate_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand
            ( & command, "pam_authenticate:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_authenticate_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            PamData * pamData = find_PamDatas( processState->pamDatas, pamh );
            setAuthentication_PamData( pamData );
        }
    }
}

/** pam_chauthtok_spec **/
mediator pam_chauthtok_media for specification
IntT pam_chauthtok_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_chauthtok:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** pam_close_session_spec **/
mediator pam_close_session_media for specification
IntT pam_close_session_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand
            ( & command, "pam_close_session:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_close_session_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            PamData * pamData = find_PamDatas( processState->pamDatas, pamh );
            closeSession_PamData( pamData );
        }
    }
}

/** pam_end_spec **/
mediator pam_end_media for specification
IntT pam_end_spec( CallContext context, PamHandleT pamh, IntT pam_status ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_end:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( pam_status ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_end_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            remove_PamDatas( processState->pamDatas, pamh );
        }
    }
}

/** pam_fail_delay_spec **/
mediator pam_fail_delay_media for specification
IntT pam_fail_delay_spec( CallContext context, PamHandleT pamh, UIntT micro_sec ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand
            ( & command, "pam_fail_delay:$(ptr)$(uint)", create_VoidTPtrObj( pamh ), create_UIntTObj( micro_sec ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** pam_get_item_spec **/
mediator pam_get_item_media for specification
IntT pam_get_item_spec( CallContext context, PamHandleT pamh, IntT item_type, VoidTPtr * item ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_get_item:$(ptr)$(int)$(ptr)",
                          create_VoidTPtrObj( pamh ), create_IntTObj( item_type ), create_VoidTPtrObj( * item )
                        );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res    = readInt_TSStream    (          & command.response );
            * item = readPointer_TSStream( context, & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** pam_getenvlist_spec **/
mediator pam_getenvlist_media for specification
List /* CString */ * pam_getenvlist_spec( CallContext context, PamHandleT pamh ) {
    call {
        TSCommand command = create_TSCommand();
        List /* CString */ * res = create_List( & type_CString );
        IntT size;
        format_TSCommand( & command, "pam_getenvlist:$(ptr)", create_VoidTPtrObj( pamh ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            size = readListStr_TSStream( & command.response, res );
        }
        destroy_TSCommand( & command );
        if ( size == -1 ) { return NULL; }
                     else { return res ; }
    }
}

/** pam_open_session_spec **/
mediator pam_open_session_media for specification
IntT pam_open_session_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand
            ( & command, "pam_open_session:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_open_session_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            PamData * pamData = find_PamDatas( processState->pamDatas, pamh );
            openSession_PamData( pamData );
        }
    }
}

/** pam_set_item_spec **/
mediator pam_set_item_media for specification
IntT pam_set_item_spec( CallContext context, PamHandleT pamh, IntT item_type, VoidTPtr item ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_set_item:$(ptr)$(int)$(ptr)",
                          create_VoidTPtrObj( pamh ), create_IntTObj( item_type ), create_VoidTPtrObj( item )
                        );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_set_item_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            PamData * pamData = find_PamDatas( processState->pamDatas, pamh );
            setItem_PamData( pamData, item_type, item );
        }
    }
}

/** pam_setcred_spec **/
mediator pam_setcred_media for specification
IntT pam_setcred_spec( CallContext context, PamHandleT pamh, IntT flags ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand( & command, "pam_setcred:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( flags ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
}

/** pam_start_spec **/
mediator pam_start_media for specification
IntT pam_start_spec
         ( CallContext context, CString * service_name, CString * username, IntT pam_conversation, PamHandleT * pamh ) {
    call {
        TSCommand command = create_TSCommand();
        IntT res;
        format_TSCommand
            ( & command, "pam_start:$(str)$(str)$(int)", service_name, username, create_IntTObj( pam_conversation ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            * pamh = readPointer_TSStream( context, & command.response );
            res    = readInt_TSStream    (          & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
    state {
        if ( pam_start_spec == SUT_PAM_SUCCESS ) {
            ProcessState * processState = getProcessState_CallContext( context );
            assertion( find_PamDatas( processState->pamDatas, * pamh ) == NULL,
                       "pam_start_media : processState->pamDatas->find( * pamh ) is not NULL\n"
                     );
            add_PamDatas( processState->pamDatas, create_PamData( service_name, username, pam_conversation, * pamh ) );
        }
    }
}

/** pam_strerror_spec **/
mediator pam_strerror_media for specification
CString * pam_strerror_spec( CallContext context, PamHandleT pamh, IntT errnum ) {
    call {
        TSCommand command = create_TSCommand();
        CString * res;
        format_TSCommand( & command, "pam_strerror:$(ptr)$(int)", create_VoidTPtrObj( pamh ), create_IntTObj( errnum ) );
        executeCommandInContext( context, & command );
        if ( ! isBadVerdict() ) {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream( & command.response );
        }
        destroy_TSCommand( & command );
        return res;
    }
}
