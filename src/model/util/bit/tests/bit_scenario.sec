/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/bit/tests/bit_scenario.seh"
#include "util/bit/bit_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include <limits.h>


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static IntT ffs_seeds[] = { INT_MAX, INT_MIN, 0, 0xFFFFFFFF, 
                            3,7, 15, 172, 1685, 0x5A755AC0  
                          };
static int num_ffs_seeds = sizeof(ffs_seeds) / sizeof(ffs_seeds[0]);


static IntT toascii_seeds[] = { INT_MAX, INT_MIN, 0, 0x7F, 0xFFFFFFFF, 
                                7, 15, 0x0F, 0x70,      
                                0x700, 0x7700,          
                                0x77F, 0x777, 0x740,    
                                0x80ABCD00, 0x8000007F, 
                                0x80ABCDE0
                              };
static int num_toascii_seeds = sizeof(toascii_seeds)/sizeof(toascii_seeds[0]);


/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_bit_scenario(int argc, char** argv)
{
    /* Init test scenario data */
    context = getContext();

    ffs_seeds[0] = max_IntT;
    ffs_seeds[1] = min_IntT;

    toascii_seeds[0] = max_IntT;
    toascii_seeds[1] = min_IntT;

    return true;
}

static void finish_bit_scenario(void)
{
}


scenario
bool ffs1_scen()
{
    /* [Testing each bit] */
    iterate(int i=0; i<sizeof_Type(context, "int");i++;)
    {
        ffs_spec(context, 1<<i);
    }
        
    return true;
}

scenario
bool ffs2_scen()
{      
    /* [Testing other values] */
    iterate(int i=0; i < num_ffs_seeds; i++;)
    {
        ffs_spec(context, ffs_seeds[i]);
    }

    return true;
}

scenario
bool toascii_scen()
{
    iterate( int i=0; i < num_toascii_seeds; i++;)
    {
        toascii_spec(context, toascii_seeds[i]);
    }
    
}

scenario dfsm bit_scenario =
{
    .init = init_bit_scenario,
    .finish = finish_bit_scenario,
    .actions = {
        ffs1_scen,
        ffs2_scen,
        toascii_scen,
        NULL
    }
};


// ----------------------------------------------

#ifdef UTIL_BIT_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/bit/bit_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilBitSubsystem();
}


bool main_util_bit(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    bit_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_util_bit(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif
