/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "util/bit/bit_model.seh"
#include "config/system_config.seh"
#include <limits.h>


#pragma SEC subsystem bit "util.bit"


/* 
   The group of functions 'util.bit' consists of: 
       ffs [2]
       toascii [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

        ffs - find first set bit

SYNOPSIS

        #include <strings.h>

        int ffs(int i); 

DESCRIPTION

        The ffs() function shall find the first bit set (beginning with the 
        least significant bit) in i, and return the index of that bit. Bits are
        numbered starting at one (the least significant bit).

RETURN VALUE

        The ffs() function shall return the index of the first bit set. If i is
        0, then ffs() shall return 0.
*/

specification
IntT ffs_spec( CallContext context, IntT i )
{
    pre
    {
        return true;
    }
    
    coverage C
    {
        if( i == 0 ) 
            
            return { Zero, "ZERO" };
        
        else
        {         
            if( i!=min_IntT && is_only_bit(context,i) )
                return{ Only_bit, "Only bit"};

            if( i>0 )
            {
                
                if( i == max_IntT ) 
                    return { Max, "INT_MAX"};
                
            }
            else if( i<0)
            {
                if( i == min_IntT ) 
                    return { Min, "INT_MIN"};
                
                return { NegativeNotMin, "Negative, but not minimal"};
            }
        } 
        
        return { Other, "Other values"};
    }
    
    post
    {
        
        /* [Result shall be positive or zero.] */
        REQ("", "Result shall be positive or zero." , !(ffs_spec < 0) );
        
        
        /* [Result shall not exceed the amount of bits in integer variable]*/
        REQ("", "Result shall not exceeds the amount of bits in an int variable",
            !(ffs_spec > sizeof_Type(context,"int") * 8) 
            );
        
        /*  The ffs() function shall return the index of the first bit set. If i is
         *  0, then ffs() shall return 0.
         */
        REQ("ffs.01", "Fuction shall return the index of the first bit set",
            ffs_spec == ffs_model(context, i) 
            );
        
        return true;
    }
}

IntT ffs_model(CallContext context, IntT i)
{
   IntT j;
   
   for(j=0;j<sizeof_Type(context,"int")*8;j++)
    {
      if(i & (1<<j))
        return j+1;
    }
    return 0;
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    toascii - translate an integer to a 7-bit ASCII character

SYNOPSIS
    
    #include <ctype.h>
    int toascii(int c); 

DESCRIPTION

    The toascii() function shall convert its argument into a 7-bit ASCII 
    character.

RETURN VALUE

    The toascii() function shall return the value (c &0x7f).
    
*/

specification
IntT toascii_spec( CallContext context, IntT c )
{
  pre
  {
  
      return true;
  }
  
  coverage C
  {
      if( c == 0)
          return { Zero, "Zero parameter" };
      else 
      if( c<0 )
      {
          if( c == min_IntT )
              return { IntMin, "INT_MIN"};

          if( c & 0x7F )
              return { NegativeNotZeroResult,
                       "Negative parameter, not zero result"
                     };
          else
              return { NegativeZeroResult,"Negative parameter, zero result"};
      }
      else
      if( c>0 )
      {
          if( c == max_IntT )
              return { IntMax, "INT_MAX"};

          if( c == 0x7F )
              return { Parameter07F, "Parameter equals 0x7F"};

          if( c & 0x7F )
              return { PositiveNotZeroResult,
                       "Positive parameter, not zero result"
                     };
          else
              return { PositiveZeroResult, 
                       "Positive parameter, zero result"
                     };
      }
  }

  post
  {
      /* The toascii() function shall return the value (c &0x7f) 
       */
      REQ("toascii.01.01", "The toascii() function shall return the value (c &0x7f)",
           toascii_spec == (c & 0x7F)
         );
  }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

/* [Returns true if i has set only single bit.] */
bool is_only_bit(CallContext context, IntT i)
{
  IntT j;
  
  for(j=0;j<sizeof_Type(context,"int")*8;j++)
    if( i == (1<<j) )
      return true;
  return false;
}
