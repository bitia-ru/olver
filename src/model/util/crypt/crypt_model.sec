/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "util/crypt/crypt_model.seh"
#include "data/errno_model.seh"
#include "config/interpretation.seh"
#include "util/crypt/crypt_config.h"

#pragma SEC subsystem crypt "util.crypt"



/* 
   The group of functions 'util.crypt' consists of: 
       crypt [1]
       encrypt [1]
       setkey [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.0
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved. 

NAME 

    crypt - string encoding function (CRYPT) 

SYNOPSIS 

    [XSI] #include <unistd.h>

    char *crypt(const char *key, const char *salt); 

DESCRIPTION 

    The crypt() function is a string encoding function. The algorithm is 
    implementation-defined. 

    The key argument points to a string to be encoded. The salt argument is a 
    string chosen from the set: 

    a b c d e f g h i j k l m n o p q r s t u v w x y z
    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    0 1 2 3 4 5 6 7 8 9 . / 

    The first two characters of this string may be used to perturb the encoding 
    algorithm. 

    The return value of crypt() points to static data that is overwritten by
    each call. 

    The crypt() function need not be reentrant. A function that is not required
    to be reentrant is not required to be thread-safe. 

RETURN VALUE 

    Upon successful completion, crypt() shall return a pointer to the encoded 
    string. The first two characters of the returned value shall be those of
    the salt argument. Otherwise, it shall return a null pointer and set errno
    to indicate the error. 

ERRORS 

    The crypt() function shall fail if: 

    [ENOSYS] 

        The functionality is not supported on this implementation.
*/

specification
CString* crypt_spec( CallContext context, CString* key, CString* salt,
                    ErrorCode* errno)
{
    pre
    {
        /*
         * The salt argument is a string chosen from the set:
         * 
         * a b c d e f g h i j k l m n o p q r s t u v w x y z
         * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
         * 0 1 2 3 4 5 6 7 8 9 . / 
         */
        REQ("crypt.03.child", 
            "The salt argument is a string chosen from the set", 
            checkSalt(salt));

        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        DUMP("Salt==$(obj), ret==$(obj)(endline)\n", salt, crypt_spec);

        /*
         * Otherwise, it shall return a null pointer and set
         * errno to indicate the error.
         */
        ERROR_BEGIN(POSIX_CRYPT, "crypt.09", crypt_spec==NULL, *errno)
        /*
         * The crypt() function shall fail if:
         * 
         * [ENOSYS] 
         * 
         * The functionality is not supported on this implementation. 
         */
            ERROR_SHALL(POSIX_CRYPT, ENOSYS, "crypt.10.01", TODO_ERR(ENOSYS))

        ERROR_END()

        /*
         * Upon successful completion, crypt() shall return a pointer
         * to the encoded string.
         */
        REQ("crypt.07", 
            "Upon successful, shall return a pointer to the encoded string", 
            crypt_spec!=NULL);
        
        /*
         * The first two characters of the returned value shall be
         * those of the salt argument.
         */
        REQ("crypt.08", 
            "The first two characters of the returned value shall be "
            "those of the salt argument", checkFirstChars(crypt_spec, salt));
        
        /*
         * The crypt() function is a string encoding function.
         * The algorithm is implementation-defined.
         */
        /*
         * The key argument points to a string to be encoded.
         */
        /*
         * The first two characters of this string may be used to perturb
         * the encoding algorithm.
         */
        /*
         * The return value of crypt() points to static data that is
         * overwritten by each call.
         */
        /*
         * The crypt() function need not be reentrant. A function that
         * is not required to be reentrant is not required to be thread-safe.
         */
        IMPLEMENT_REQ("crypt.01;crypt.02;crypt.04;crypt.05;crypt.06");


        return true;
    }
}



/*
Linux Standard Base Core Specification 3.0
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved. 

NAME 

    encrypt - encoding function (CRYPT) 

SYNOPSIS 

    [XSI] #include <unistd.h>

    void encrypt(char block[64], int edflag); 

DESCRIPTION 

    The encrypt() function shall provide access to an implementation-defined 
    encoding algorithm. The key generated by setkey() is used to encrypt the 
    string block with encrypt(). 

    The block argument to encrypt() shall be an array of length 64 bytes
    containing only the bytes with values of 0 and 1. The array is modified in
    place to a similar array using the key set by setkey(). If edflag is 0, the
    argument is encoded. If edflag is 1, the argument may be decoded (see the
    APPLICATION USAGE section); if the argument is not decoded, errno shall be
    set to [ENOSYS]. 

    The encrypt() function shall not change the setting of errno if successful.
    An application wishing to check for error situations should set errno to 0
    before calling encrypt(). If errno is non-zero on return, an error has
    occurred. 

    The encrypt() function need not be reentrant. A function that is not
    required to be reentrant is not required to be thread-safe. 

RETURN VALUE 

    The encrypt() function shall not return a value. 

ERRORS 

    The encrypt() function shall fail if: 

    [ENOSYS] 

        The functionality is not supported on this implementation.
*/

specification
void encrypt_spec( CallContext context, StringTPtr* block, IntT edflag,
                  ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * If errno is non-zero on return, an error has occurred.
         */
        ERROR_BEGIN(POSIX_ENCRYPT, "encrypt.10", *errno!=SUT_EOK,  *errno)
        /*
         * The encrypt() function shall fail if:
         * 
         * [ENOSYS] 
         * 
         * The functionality is not supported on this implementation. 
         */
        /*
         * if the argument is not decoded, errno shall be set to [ENOSYS].
         */
            ERROR_SHALL(POSIX_ENCRYPT, ENOSYS, "encrypt.07;encrypt.13.01",
                TODO_ERR(ENOSYS))

        ERROR_END()
        
        /*
         * The encrypt() function shall provide access to an
         * implementation-defined encoding algorithm. 
         */
        /*
         * The key generated by setkey() is used to encrypt the string
         * block with encrypt() 
         */
        /*
         * The block argument to encrypt() shall be an array of length
         * 64 bytes containing only the bytes with values of 0 and 1.
         */
        /*
         * The array is modified in place to a similar array using the
         * key set by setkey().
         */
        /*
         * If edflag is 0, the argument is encoded. 
         */
        /*
         * If edflag is 1, the argument may be decoded (see the
         * APPLICATION USAGE section) 
         * ;
         */
        /*
         * The encrypt() function shall not change the setting of
         * errno if successful. 
         */
        /*
         * An application wishing to check for error situations
         * should set errno to 0 before calling encrypt().
         */
        /*
         * The encrypt() function need not be reentrant.
         * A function that is not required to be reentrant
         * is not required to be thread-safe.
         */
        /*
         * The encrypt() function shall not return a value.
         */
        IMPLEMENT_REQ("encrypt.01;encrypt.02;encrypt.03;encrypt.04;encrypt.05;"
            "encrypt.06;encrypt.08;encrypt.09;encrypt.11;encrypt.12");


        return true;
    }
}



/*
Linux Standard Base Core Specification 3.0
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved. 

NAME 

    setkey - set encoding key (CRYPT) 

SYNOPSIS 

    [XSI] #include <stdlib.h>

    void setkey(const char *key); 

DESCRIPTION 

    The setkey() function provides access to an implementation-defined encoding 
    algorithm. The argument of setkey() is an array of length 64 bytes
    containing only the bytes with numerical value of 0 and 1. If this string
    is divided into groups of 8, the low-order bit in each group is ignored;
    this gives a 56-bit key which is used by the algorithm. This is the key
    that shall be used with the algorithm to encode a string block passed to
    encrypt(). 

    The setkey() function shall not change the setting of errno if successful.
    An application wishing to check for error situations should set errno to 0
    before calling setkey(). If errno is non-zero on return, an error has
    occurred. 

    The setkey() function need not be reentrant. A function that is not
    required to be reentrant is not required to be thread-safe. 

RETURN VALUE 

    No values are returned. 

ERRORS 

    The setkey() function shall fail if: 

    [ENOSYS] 

        The functionality is not supported on this implementation.
*/

specification
void setkey_spec( CallContext context, StringTPtr key, ErrorCode* errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * If errno is non-zero on return, an error has occurred.
         */
        ERROR_BEGIN( POSIX_SETKEY, "setkey.07", *errno!=SUT_EOK, *errno)
        /*
         * The setkey() function shall fail if:
         * 
         * [ENOSYS] 
         * 
         * The functionality is not supported on this implementation. 
         */
            ERROR_SHALL( POSIX_SETKEY, ENOSYS, "setkey.10.01", TODO_ERR(ENOSYS))

        ERROR_END()

        /*
         * The setkey() function provides access to an
         * implementation-defined encoding algorithm.
         */
        /*
         * The argument of setkey() is an array of length 64 bytes
         * containing only the bytes with numerical value of 0 and 1.
         */
        /*
         * If this string is divided into groups of 8, the low-order
         * bit in each group is ignored; this gives a 56-bit key
         * which is used by the algorithm.
         */
        /*
         * This is the key that shall be used with the algorithm to
         * encode a string block passed to encrypt().
         */
        /*
         * The setkey() function shall not change the setting of
         * errno if successful.
         */
        /*
         * An application wishing to check for error situations
         * should set errno to 0 before calling setkey().
         */
        /*
         * The setkey() function need not be reentrant. A function
         * that is not required to be reentrant is not required
         * to be thread-safe.
         */
        /*
         * No values are returned.
         */
        IMPLEMENT_REQ("setkey.01;setkey.02;setkey.03;setkey.04;setkey.05;"
            "setkey.06;setkey.08;setkey.09");

        return true;
    }
}



/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool checkSalt(CString* salt)
{
    int size=length_CString(salt), i;
    for(i=0;i<size;i++)
        if( 
            (charAt_CString(salt, i)<'a' || charAt_CString(salt, i)>'z')
            &&
            (charAt_CString(salt, i)<'A' || charAt_CString(salt, i)>'Z')
            &&
            (charAt_CString(salt, i)<'0' || charAt_CString(salt, i)>'9')
            &&
            charAt_CString(salt, i)!='.'
            && 
            charAt_CString(salt, i)!='/'
          )
          return false;

    return true;
}
bool checkFirstChars(CString* ret, CString* salt)
{
    if(length_CString(salt)>1 && length_CString(ret)>1)
        
        return  charAt_CString(ret, 0)==charAt_CString(salt, 0)
                &&
                charAt_CString(ret, 1)==charAt_CString(salt, 1);

    return true;        
}
