/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/crypt/crypt_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilCryptSubsystem(void)
{
  // Set up mediators
    set_mediator_crypt_spec(crypt_media);
    set_mediator_encrypt_spec(encrypt_media);
    set_mediator_setkey_spec(setkey_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** crypt_spec **/

mediator crypt_media for specification
CString* crypt_spec( CallContext context, CString* key, CString* salt,
                    ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
        
        format_TSCommand( &command, "crypt:$(str)$(str)", key, salt);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readCString_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        //returning thrash, cause don't calling crypt:(

        destroy_TSCommand(&command);
        
        return res;
    }
}


/** encrypt_spec **/

mediator encrypt_media for specification
void encrypt_spec( CallContext context, StringTPtr* block, IntT edflag,
                  ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "encrypt:$(ptr)$(int)",
                        create_VoidTPtrObj(*block),
                        create_IntTObj(edflag) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *block=readPointer_TSStream(context, &command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);

        return;
    }
    state
    {
        //Inner copy of block? Or block rewriting?
    }
}

/** setkey_spec **/

mediator setkey_media for specification
void setkey_spec( CallContext context, StringTPtr key, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand( &command, "setkey:$(ptr)",
            create_VoidTPtrObj(key));

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno=readInt_TSStream(&command.response);                
        }
        
        destroy_TSCommand(&command);
        
        return;
    }
    state
    {
        //Inner copy of key? Or key rewriting?
    }
}



