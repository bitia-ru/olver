/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_CONVERSION_WSTRINT_MODEL_SEH
#define UTIL_CONVERSION_WSTRINT_MODEL_SEH

#include "common/common_model.seh"
#include "util_conversion_common.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
/** wcstol_spec **/
specification
LongT wcstol_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
LongT wcstol_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoll_spec **/
specification
LLongT wcstoll_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
LLongT wcstoll_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoul_spec **/
specification
ULongT wcstoul_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
ULongT wcstoul_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoull_spec **/
specification
ULLongT wcstoull_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
ULLongT wcstoull_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** __wcstol_internal_spec **/
specification
LongT __wcstol_internal_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno, IntT group);
LongT __wcstol_internal_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** __wcstoul_internal_spec **/
specification
ULongT __wcstoul_internal_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno, IntT group);
ULongT __wcstoul_internal_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoimax_spec **/
specification
IntMaxT wcstoimax_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
IntMaxT wcstoimax_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoq_spec **/
specification
LLongT wcstoq_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
LLongT wcstoq_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstoumax_spec **/
specification
UIntMaxT wcstoumax_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
UIntMaxT wcstoumax_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/** wcstouq_spec **/
specification
ULLongT wcstouq_spec( CallContext context, WStringTPtr nptr,
                        WStringTPtr* endptr, IntT base, ErrorCode* errno);
ULLongT wcstouq_model( CallContext context, WStringTPtr nptr,
    WStringTPtr* endptr, IntT base, ErrorCode* my_errno, WStringTPtr* exp_end);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isEINVAL_wcstoll(IntT base);
bool isWideSpace(WCharT ch);
bool firstCharNotMatch_wcstol(WCharT wch, IntT base);
IntT dec2Int_WCharT(WCharT wch);
IntT oct2Int_WCharT(WCharT wch);
IntT hex2Int_WCharT(WCharT wch);
IntT other2Int_WCharT(WCharT wch);

bool WOverPos_L(LongT par, LongT mul, LongT m, LongT add);
bool WOverNeg_L(LongT par, LongT mul, LongT m, LongT add);

bool WOverPos_LL(LLongT par, LLongT mul, LLongT m, LLongT add);
bool WOverNeg_LL(LLongT par, LLongT mul, LLongT m, LLongT add);

bool WOverPos_IM(IntMaxT par, IntMaxT mul, IntMaxT m, IntMaxT add);
bool WOverNeg_IM(IntMaxT par, IntMaxT mul, IntMaxT m, IntMaxT add);

bool WOverPos_LI(LongT par, LongT mul, LongT m, LongT add);
bool WOverNeg_LI(LongT par, LongT mul, LongT m, LongT add);

bool WOverPos_Q(LLongT par, LLongT mul, LLongT m, LLongT add);
bool WOverNeg_Q(LLongT par, LLongT mul, LLongT m, LLongT add);

bool WOverPos_UL(ULongT par, ULongT mul, ULongT m, ULongT add);

bool WOverPos_ULL(ULLongT par, ULLongT mul, ULLongT m, ULLongT add);

bool WOverPos_ULI(ULongT par, ULongT mul, ULongT m, ULongT add);

bool WOverPos_UIM(UIntMaxT par, UIntMaxT mul, UIntMaxT m, UIntMaxT add);

bool WOverPos_UQ(ULLongT par, ULLongT mul, ULLongT m, ULLongT add);

LongT andable(IntT bytes);

#endif

