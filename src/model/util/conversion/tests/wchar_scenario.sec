/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/tests/wchar_scenario.seh"


#include "util/conversion/wchar_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/pointer.seh"
/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static char* char_arr[]=
{
    "asdf",
    "4321",
    "1",
    "mnbvc",
    "",
    " ",
    "\n",
    "\t",
    "\\",
    "\"",
    "%",
    "a1s2d3f4",
    "qwertyuiop",
    "zaqwsxcderfvbgtyhnmjuiklop",
    "newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};
static int wchars[]=
{
    1329,
    1408,
    1377,
    1376,
    63,
    48,
    0x0101,
    0x20ac,
    0x20d0
};
static CharT* wstrings[]=
{
    (CharT *)"asdf",
    (CharT *)"4321",
    (CharT *)"1",
    (CharT *)"mnbvc",
    (CharT *)"",
    (CharT *)" ",
    (CharT *)"\n",
    (CharT *)"\t",
    (CharT *)"\\",
    (CharT *)"\"",
    (CharT *)"%",
    (CharT *)"a1s2d3f4",
    (CharT *)"qwertyuiop",
    (CharT *)"zaqwsxcderfvbgtyhnmjuiklop",
    (CharT *)"newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};
static int char_arr_size=sizeof(char_arr)/sizeof(char*);
static int wchars_size=sizeof(wchars)/sizeof(int);
static int wstrings_size=sizeof(wstrings)/sizeof(char*);
/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
StringTPtr ch_par;
WStringTPtr wch_par;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static int maxSize=1024;

static bool init_wchar_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();
    ch_par = allocateMemoryBlock(context, maxSize);
    wch_par = allocateMemoryBlock(context, maxSize);

    return true;
}
static void finish_wchar_scenario(void)
{
    if(!isNULL_VoidTPtr(ch_par))
        deallocateMemoryBlock(context, ch_par);
    if(!isNULL_VoidTPtr(wch_par))
        deallocateMemoryBlock(context, wch_par);

    TEST_SCENARIO_VERDICT_VERBOSE(wchar_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool btowc_wctob_scen()
{
    WIntT b_ret;
    IntT w_ret;

    DUMP("btowc_wctob_scen\n");

    iterate(int i=0;i<256;i++;)
    {
        b_ret=btowc_spec(context, i);
        if(b_ret!=(WIntT)-1)
        {
            w_ret=wctob_spec(context, b_ret);
            if(w_ret!=(WIntT)-1 && w_ret!=i)
                ;//DUMP("Error: %d, %u, %d; WEOF==%d\n", i, b_ret, w_ret, WEOF);
        }
    }

    DUMP("btowc_wctob_scen done\n");

    return true;
}

scenario
bool wctomb_mblen_mbtowc_scen()
{
    WCharT ret;
    IntT tmp, mblen_ret;

    DUMP("wctomb_mblen_mbtowc_scen\n");

    iterate(int i=0;i<wchars_size;i++;)
    {
        tmp=wctomb_spec(context, &ch_par, wchars[i]);
        if(tmp!=-1)
        {
            mblen_ret=mblen_spec(context, ch_par, 10, requestErrorCode());
            if(tmp!=mblen_ret)
                DUMP("Error(size): %d!=%d\n", tmp, mblen_ret);

            DUMP("wc_ret==%d, char==%c\n", tmp, readChar_VoidTPtr(ch_par));
            tmp=mbtowc_spec(context, &wch_par, ch_par, 10, requestErrorCode());
            if(tmp!=-1)
            {
                DUMP("\nmb_ret==%d\n", tmp);
                ret=readWChar_VoidTPtr(wch_par);
                if(ret!=wchars[i])
                    DUMP("Error: %d!=%d\n", wchars[i], ret);
            }
        }
    }

    DUMP("wctomb_mblen_mbtowc_scen done \n");

    return true;
}

scenario
bool mbtowc_scen()
{
    IntT    i=0;
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("mbtowc_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbtowc_spec(context, &wch_par, ch_par, 10, requestErrorCode());
    mbtowc_spec(context, &null, ch_par, 10, requestErrorCode());
    mbtowc_spec(context, &wch_par, NULL_VoidTPtr, 10, requestErrorCode());
    mbtowc_spec(context, &null, NULL_VoidTPtr, 10, requestErrorCode());

    DUMP("mbtowc_scen done\n");

    return true;
}

scenario
bool wctomb_scen()
{
    wchar_t wch=125;
    int i=0;
    
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("wctomb_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wctomb_spec(context, &ch_par, wch);
    wctomb_spec(context, &null, wch);

    DUMP("wctomb_scen done\n");

    return true;
}

scenario
bool mblen_scen()
{
    IntT    i=0;
    DUMP("mblen_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));

    mblen_spec(context, ch_par, 10, requestErrorCode());
    mblen_spec(context, NULL_VoidTPtr, 10, requestErrorCode());

    DUMP("mblen_scen done\n");

    return true;
}

scenario
bool wcrtomb_mbrlen_mbrtowc_scen()
{
    WCharT ret;
    IntT tmp, mblen_ret;
    Mbstate* ps=create_Mbstate(0, 0);

    DUMP("wcrtomb_mbrlen_mbrtowc_scen\n");

    iterate(int i=0;i<wchars_size;i++;)
    {
        tmp=wcrtomb_spec(context, &ch_par, wchars[i], ps,requestErrorCode());
        if(tmp!=-1)
        {
            mblen_ret=mbrlen_spec(context, ch_par, 10, ps, requestErrorCode());
            if(tmp!=mblen_ret)
                DUMP("Error(size): %d!=%d\n", tmp, mblen_ret);

            DUMP("wrc_ret==%d, char==%c\n", tmp, readChar_VoidTPtr(ch_par));
            tmp=mbrtowc_spec(context, &wch_par, ch_par, 10, ps, requestErrorCode());
            if(tmp!=-1)
            {
                DUMP("\nmrb_ret==%d\n", tmp);
                ret=readWChar_VoidTPtr(wch_par);
                if(ret!=wchars[i])
                    DUMP("Error: %d!=%d\n", wchars[i], ret);
            }
        }
    }

    DUMP("wcrtomb_mbrlen_mbrtowc_scen done\n");

    return true;
}

scenario
bool mbrtowc_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("mbrtowc_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbrtowc_spec(context, &wch_par, ch_par, 10, ps, requestErrorCode());
    mbrtowc_spec(context, &null, ch_par, 10, ps, requestErrorCode());
    mbrtowc_spec(context, &wch_par, ch_par, 10, 0, requestErrorCode());
    mbrtowc_spec(context, &null, ch_par, 10, 0, requestErrorCode());

    DUMP("mbrtowc_scen done\n");

    return true;
}
scenario
bool mbrlen_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);

    DUMP("mbrlen_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbrlen_spec(context, ch_par, 10, ps, requestErrorCode());
    mbrlen_spec(context, ch_par, 10, 0, requestErrorCode());

    DUMP("mbrlen_scen done\n");

    return true;
}
scenario
bool wcrtomb_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("wcrtomb_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcrtomb_spec(context, &ch_par, 10, ps, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcrtomb_spec(context, &null, 10, ps,requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcrtomb_spec(context, &ch_par, 10, 0, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcrtomb_spec(context, &null, 10, 0,requestErrorCode());

    DUMP("wcrtomb_scen done\n");

    return true;
}
scenario
bool mbsinit_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);

    DUMP("mbsinit_scen\n");

    mbsinit_spec(context, ps);
    mbsinit_spec(context, 0);

    DUMP("mbsinit_scen done\n");

    return true;
}

scenario
bool wcstombs_mbstowcs_scen()
{
    IntT wc_ret, mb_ret;
    WString* tmp;

    DUMP("wcstombs_mbstowcs_scen\n");

    iterate(int i=0;i<wstrings_size;i++;)
    {
        writeWString_VoidTPtr(wch_par, createFromCharArray_WString(wstrings[i]));
        wc_ret=wcstombs_spec(context, &ch_par, wch_par, 100, requestErrorCode());
        if(wc_ret!=-1)
        {
            mb_ret=mbstowcs_spec(context, &wch_par, ch_par, 100, requestErrorCode());
            if(mb_ret!=-1)
            {
                tmp=readWString_VoidTPtr(wch_par);
                if(!equals(tmp, createFromCharArray_WString(wstrings[i])))
                    DUMP("wcstombs_mbstowcs_scen_error: %dth wstring doesn't match\n");
                else
                    DUMP("wcstombs_mbstowcs_scen: Ok\n");
            }
        }
    }

    DUMP("wcstombs_mbstowcs_scen done\n");

}


scenario
bool mbstowcs_scen()
{
    IntT    i=0;
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("mbstowcs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbstowcs_spec(context, &wch_par, ch_par, 10, requestErrorCode());
    mbstowcs_spec(context, &null, ch_par, 10, requestErrorCode());

    //s!=NULL??Check in standard...

    DUMP("mbstowcs_scen done\n");

    return true;
}
scenario
bool wcstombs_scen()
{
    IntT    i=0;
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("wcstombs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcstombs_spec(context, &wch_par, ch_par, 10, requestErrorCode());
    wcstombs_spec(context, &null, ch_par, 10, requestErrorCode());

    DUMP("wcstombs_scen done\n");

    //s!=NULL??Check in standard...
    return true;
}
scenario
bool wcsrtombs_mbsrtowcs_scen()
{
    IntT wc_ret, mb_ret;
    WString* tmp;
    Mbstate* ps=create_Mbstate(0, 0);

    DUMP("wcsrtombs_mbsrtowcs_scen\n");

    iterate(int i=0;i<wstrings_size;i++;)
    {
        writeWString_VoidTPtr(wch_par, createFromCharArray_WString(wstrings[i]));
        wc_ret=wcsrtombs_spec(context, &ch_par, &wch_par, 100, ps, requestErrorCode());
        if(wc_ret!=-1)
        {
            mb_ret=mbsrtowcs_spec(context, &wch_par, &ch_par, 100, ps, requestErrorCode());
            if(mb_ret!=-1)
            {
                tmp=readWString_VoidTPtr(wch_par);
                if(!equals(tmp, createFromCharArray_WString(wstrings[i])))
                    DUMP("wcsrtombs_mbsrtowcs_scen_error: %dth wstring doesn't match\n");
                else
                    DUMP("wcsrtombs_mbsrtowcs_scen: Ok\n");
            }
        }
    }

    DUMP("wcsrtombs_mbsrtowcs_scen done\n");

}
scenario
bool wcsrtombs_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("wcsrtombs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcsrtombs_spec(context, &wch_par, &ch_par, 10, ps, requestErrorCode());
    wcsrtombs_spec(context, &null, &ch_par, 10, ps, requestErrorCode());
    wcsrtombs_spec(context, &wch_par, &ch_par, 10, 0, requestErrorCode());
    wcsrtombs_spec(context, &null, &ch_par, 10, 0, requestErrorCode());
    //s!=NULL??Check in standard...

    DUMP("wcsrtombs_scen done\n");

    return true;
}
scenario
bool mbsrtowcs_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(0, 0);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("mbsrtowcs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsrtowcs_spec(context, &wch_par, &ch_par, 10, ps, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsrtowcs_spec(context, &wch_par, &ch_par, 10, 0, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsrtowcs_spec(context, &null, &ch_par, 10, ps, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsrtowcs_spec(context, &null, &ch_par, 10, 0, requestErrorCode());
    //s!=NULL??Check in standard...

    DUMP("mbsrtowcs_scen done\n");

    return true;
}
scenario
bool wcsnrtombs_mbsnrtowcs_scen()
{
    IntT wc_ret, mb_ret;
    WString* tmp;
    Mbstate* ps=create_Mbstate(0, 0);

    DUMP("wcsnrtombs_mbsnrtowcs_scen\n");

    iterate(int i=0;i<wstrings_size;i++;)
    {
        writeWString_VoidTPtr(wch_par, createFromCharArray_WString(wstrings[i]));
        wc_ret=wcsnrtombs_spec(context, &ch_par, &wch_par, 100, 100, ps, requestErrorCode());
        if(wc_ret!=-1)
        {
            mb_ret=mbsnrtowcs_spec(context, &wch_par, &ch_par, 100, 100, ps, requestErrorCode());
            if(mb_ret!=-1)
            {
                tmp=readWString_VoidTPtr(wch_par);
                if(!equals(tmp, createFromCharArray_WString(wstrings[i])))
                    DUMP("wcsnrtombs_mbsnrtowcs_scen_error: %dth wstring doesn't match\n");
                else
                    DUMP("wcsnrtombs_mbsnrtowcs_scen: Ok\n");
            }
        }
    }

    DUMP("wcsnrtombs_mbsnrtowcs_scen done\n");

}
scenario
bool mbsnrtowcs_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(0, 0);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("mbsnrtowcs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsnrtowcs_spec(context, &wch_par, &ch_par, 10, 10, ps, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsnrtowcs_spec(context, &wch_par, &ch_par, 10, 10, 0, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsnrtowcs_spec(context, &null, &ch_par, 10, 10, ps, requestErrorCode());
    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    mbsnrtowcs_spec(context, &null, &ch_par, 10, 10, 0, requestErrorCode());
    //s!=NULL??Check in standard...

    DUMP("mbsnrtowcs_scen done\n");

    return true;
}
scenario
bool wcsnrtombs_scen()
{
    IntT    i=0;
    Mbstate* ps=create_Mbstate(1, 1);
    VoidTPtr null = NULL_VoidTPtr;

    DUMP("wcsnrtombs_scen\n");

    writeCString_VoidTPtr(ch_par, create_CString(char_arr[i]));
    wcsnrtombs_spec(context, &wch_par, &ch_par, 10, 10, ps, requestErrorCode());
    wcsnrtombs_spec(context, &null, &ch_par, 10, 10, ps, requestErrorCode());
    wcsnrtombs_spec(context, &wch_par, &ch_par, 10, 10, 0, requestErrorCode());
    wcsnrtombs_spec(context, &null, &ch_par, 10, 10, 0, requestErrorCode());

    DUMP("wcsnrtombs_scen done\n");

    //s!=NULL??Check in standard...
    return true;
}
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm wchar_scenario =
{
    .init = init_wchar_scenario,
    .finish = finish_wchar_scenario,
    .actions = { 
                    btowc_wctob_scen,
                    wctomb_mblen_mbtowc_scen,
                    wcrtomb_mbrlen_mbrtowc_scen,
                    wcstombs_mbstowcs_scen,
                    wcsrtombs_mbsrtowcs_scen,
                    wcsnrtombs_mbsnrtowcs_scen,
                    mbtowc_scen,
                    wctomb_scen,
                    mblen_scen,
                    mbrtowc_scen,
                    mbrlen_scen,
                    wcrtomb_scen,
                    mbsinit_scen,
                    mbstowcs_scen,
                    wcstombs_scen,
                    wcsrtombs_scen,
                    mbsrtowcs_scen,
                    mbsnrtowcs_scen,
                    wcsnrtombs_scen,
                    NULL 
                }
};

#include "util/conversion/tests/wchar_scenario.seh"

bool main_util_conversion_wchar(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    wchar_scenario(argc,argv);
    return true;
}


#ifdef UTIL_CONVERSION_WCHAR_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/conversion/wchar_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();

    initUtilConversionWcharSubsystem();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    main_util_conversion_wchar(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif


