/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "util/conversion/tests/wtoken_scenario.seh"


#include "util/conversion/wtoken_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static CharT* strtok_stringp[]=
{
    (CharT *)"a1s2d3f4",
    (CharT *)"",
    (CharT *)"qwertyuiop",
    (CharT *)"zaqwsxcderfvbgtyhnmjuiklop",
    (CharT *)"newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};

static CharT* strtok_delim[]=
{
    (CharT *)"asdf",
    (CharT *)"4321",
    (CharT *)"1",
    (CharT *)"mnbvc",
    (CharT *)"",
    (CharT *)" ",
    (CharT *)"\n",
    (CharT *)"\t",
    (CharT *)"\\",
    (CharT *)"\"",
    (CharT *)"%",
    (CharT *)"a1s2d3f4",
    (CharT *)"qwertyuiop",
    (CharT *)"zaqwsxcderfvbgtyhnmjuiklop",
    (CharT *)"newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};

static int strtok_stringp_size=sizeof(strtok_stringp)/sizeof(CharT*);
static int strtok_delim_size=sizeof(strtok_delim)/sizeof(CharT*);

static const int maxSize=1024;
/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr stringp;
static VoidTPtr delim;
static VoidTPtr buffer;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_wtoken_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();
    stringp = allocateMemoryBlock(context, maxSize);
    delim = allocateMemoryBlock(context, maxSize);
    return true;
}
static void finish_wtoken_scenario(void)
{
    if(!isNULL_VoidTPtr(stringp))
        deallocateMemoryBlock(context, stringp);
    if(!isNULL_VoidTPtr(delim))
        deallocateMemoryBlock(context, delim);

    TEST_SCENARIO_VERDICT_VERBOSE(wtoken_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool wcstok_scen()
{
    StringTPtr ret;
    WString* stringp_str, *delim_str;
    IntT it;

    iterate(int i=0;i<strtok_stringp_size;i++;)
        iterate(int j=0;j<strtok_delim_size;j++;)
        {
            it=j;
            DUMP("In _r do...\n");
            stringp_str=createFromCharArray_WString(strtok_stringp[i]);
            DUMP("stringp==$(obj)\n", stringp_str);
            writeWString_VoidTPtr(stringp, stringp_str);

            delim_str=createFromCharArray_WString(
                        strtok_delim[(++it)%strtok_delim_size]);
            DUMP("delim==$(obj)\n", delim_str);
            writeWString_VoidTPtr(delim, delim_str);

            VERBOSE("bef_spec...\n");

            ret=wcstok_spec(context, stringp, delim, &buffer);

            DUMP("\n");
            while(!isNULL_VoidTPtr(ret))
            {
                delim_str=createFromCharArray_WString(
                            strtok_delim[(++it)%strtok_delim_size]);
                DUMP("delim==$(obj)\n", delim_str);
                writeWString_VoidTPtr(delim, delim_str);

                ret=wcstok_spec(context, NULL_VoidTPtr, delim, &buffer);
                DUMP("\n");
            }

            delim_str=createFromCharArray_WString(
                        strtok_delim[(++it)%strtok_delim_size]);
            DUMP("delim==$(obj)\n", delim_str);
            writeWString_VoidTPtr(delim, delim_str);

            ret=wcstok_spec(context, NULL_VoidTPtr, delim, &buffer);
            DUMP("\n");
        }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm wtoken_scenario =
{
    .init = init_wtoken_scenario,
    .finish = finish_wtoken_scenario,
    .actions = {
                    wcstok_scen,
                    NULL
                }
};

#include "util/conversion/tests/wtoken_scenario.seh"


#ifdef UTIL_CONVERSION_WTOKEN_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/conversion/wtoken_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilConversionWtokenSubsystem();
}


bool main_util_conversion_wtoken(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    wtoken_scenario(argc, argv);
   // c(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    main_util_conversion_wtoken(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
