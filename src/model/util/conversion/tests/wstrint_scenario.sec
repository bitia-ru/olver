/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "util/conversion/tests/wstrint_scenario.seh"


#include "util/conversion/wstrint_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static CharT* wstrint_data[]=
{
    (CharT *)" 0   ",//0
    (CharT *)" +0   ",
    (CharT *)" -0   ",

    (CharT *)" 1   ",//3
    (CharT *)" +1   ",
    (CharT *)" -1   ",

    (CharT *)" 2147483647   ",//6
    (CharT *)" +2147483647   ",
    (CharT *)" -2147483647   ",

    (CharT *)" 2147483650   ",//9
    (CharT *)" +2147483648   ",
    (CharT *)" -2147483648   ",

    (CharT *)" x   ",//12
    (CharT *)" +x   ",
    (CharT *)" -x   ",

    (CharT *)" 0x   ",//15
    (CharT *)" +0x   ",
    (CharT *)" -0x  ",

    (CharT *)" 0xz   ",//18
    (CharT *)" +0xz   ",
    (CharT *)" -0xz  ",

    (CharT *)"   0123456789erwerdsfsdfds",//21
    (CharT *)"   +0123456789erwerdsfsdfds",
    (CharT *)"   -0123456789erwerdsfsdfds",

    (CharT *)"  123 sdfsdfs",//24
    (CharT *)"  +123 sdfsdfs",
    (CharT *)"  -123 sdfsdfs",

    (CharT *)"  0X123  sfsdfsdfs",//27
    (CharT *)"  +0X123  sfsdfsdfs",
    (CharT *)"  -0X123  sfsdfsdfs",

    (CharT *)"qwerty",//30
    (CharT *)"+qwerty",
    (CharT *)"-qwerty",

    (CharT *)" 2000000zzz",//33
    (CharT *)" +2000000zzz",
    (CharT *)" -2000000zzz",

    (CharT *)" 1vvvvvvzzz",//36
    (CharT *)" +1vvvvvvzzz",
    (CharT *)" -1vvvvvvzzz",

    (CharT *)" 0x7FFFFFFF",//39
    (CharT *)" +0x7FFFFFFF",
    (CharT *)" -0x7FFFFFFF",

    (CharT *)" 0x80000000",//42
    (CharT *)" +0x80000000",
    (CharT *)" -0x80000000",

    (CharT *)" 0x7FFFFFFFFFFFFFFF",//45
    (CharT *)" +0x7FFFFFFFFFFFFFFF",
    (CharT *)" -0x7FFFFFFFFFFFFFFF",

    (CharT *)" 0x8000000000000000",//48
    (CharT *)" +0x8000000000000000",
    (CharT *)" -0x8000000000000000"
};

static int wstrint_base[]=
{
    0,
    2,
    7,
    8,
    16,
    21,
    32,
    36
};
static int wstrint_data_size=sizeof(wstrint_data)/sizeof(CharT*);
static int wstrint_base_size=sizeof(wstrint_base)/sizeof(int);

static const int maxSize=1024;
/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr nptr;
static VoidTPtr endptr;
/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_wtoken_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();
    nptr = allocateMemoryBlock(context, maxSize);
    initReqFilters();
    return true;
}
static void finish_wtoken_scenario(void)
{
    if(!isNULL_VoidTPtr(nptr))
        deallocateMemoryBlock(context, nptr);

    TEST_SCENARIO_VERDICT_VERBOSE(wtoken_scenario);
}
/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
#define myscen wcstol_scen
#define myspec wcstol_spec
#include "wstrint_scen.seh"

#define myscen __wcstol_internal_scen
#define myspec __wcstol_internal_spec
#define ParameterGroupExists
#include "wstrint_scen.seh"

#define myscen wcstoll_scen
#define myspec wcstoll_spec
#include "wstrint_scen.seh"

#define myscen wcstoq_scen
#define myspec wcstoq_spec
#include "wstrint_scen.seh"

#define myscen wcstoimax_scen
#define myspec wcstoimax_spec
#include "wstrint_scen.seh"

#define myscen wcstoul_scen
#define myspec wcstoul_spec
#include "wstrint_scen.seh"

#define myscen wcstoull_scen
#define myspec wcstoull_spec
#include "wstrint_scen.seh"

#define myscen __wcstoul_internal_scen
#define myspec __wcstoul_internal_spec
#define ParameterGroupExists
#include "wstrint_scen.seh"

#define myscen wcstoumax_scen
#define myspec wcstoumax_spec
#include "wstrint_scen.seh"

#define myscen wcstouq_scen
#define myspec wcstouq_spec
#include "wstrint_scen.seh"
/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm wstrint_scenario =
{
    .init = init_wtoken_scenario,
    .finish = finish_wtoken_scenario,
    .actions = {
//Working...
//Signed
                    wcstol_scen,
                    __wcstol_internal_scen,
                    wcstoll_scen,
                    wcstoimax_scen,
                    wcstoq_scen,

//Unsigned
                    wcstoul_scen,
                    __wcstoul_internal_scen,
                    wcstoull_scen,
                    wcstouq_scen,
                    wcstoumax_scen,

                    NULL
                }
};

#include "util/conversion/tests/wstrint_scenario.seh"

bool main_util_conversion_wstrint(int argc, char** argv)
{
    wstrint_scenario(argc,argv);
    return true;
}

#ifdef UTIL_CONVERSION_WSTRINT_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/conversion/wstrint_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();

    initUtilConversionWstrintSubsystem();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    // Set up tracer
    setTraceEncoding("windows-1251");

    addTraceToFile("trace.xml");

    // Run test scenario
    main_util_conversion_wstrint(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
