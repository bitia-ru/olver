/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/tests/strreal_scenario.seh"
#include "util/conversion/strreal_model.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"

/********************************************************************/
/**                  Test Static Data                              **/
/********************************************************************/

static CallContext context;
static VoidTPtr ptr;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_util_conversion_strreal(int argc,char** argv)
{
    // Init test scenario data
    context = getContext();

    initReqFilters();

    ptr = allocateMemoryBlock(context, 1024);

    setFinishMode(UNTIL_END);

    return true;
}


static void finish_conversion_strreal(void)
{
    deallocateMemoryBlock(context, ptr);
    TEST_SCENARIO_VERDICT_VERBOSE(strreal_scenario);
}

/********************************************************************/
/**                  Test Actions                                  **/
/********************************************************************/

scenario
bool __strtod_internal_strtod_scen()
{

    CString* endptr;
    CString* st[30] = {
    create_CString("-inf"),
    create_CString("         iNfInItY-NaN"),
    create_CString("  \n \t     -infFinity"),
    create_CString("-ininity"),
    create_CString("InfinityThis stoped scan"),
    create_CString("NaN"),
    create_CString("       NaN(123)"),
    create_CString("\n   \t -NaN(1ab3cD)This stoped scan"),
    create_CString("NaN()The end."),
    create_CString("-NaN("),
    create_CString("\nNaN(Hello world) - Hello!"),
    create_CString(" \n 123.456.789"),
    create_CString(".."),
    create_CString("       .1"),
    create_CString("-.1234567890"),
    create_CString(" -987.654This stoped scan"),
    create_CString("1e10"),
    create_CString("4.55e-5With negativ exponent"),
    create_CString("12."),
    create_CString("-123e"),
    create_CString("456eBad exponent"),
    create_CString("123e-"),
    create_CString(" NaN(123"),
    create_CString("No number"),
    create_CString("1e-12345"),
    create_CString("-1e12345"),
    create_CString("\n---------Hello--------"),
    create_CString("123e-end"),
    create_CString("234e5.2"),
    create_CString("e5")
    };

    iterate ( IntT type = 0; type < 3; type++; )
        iterate ( IntT i = 0; i < 30; i++; )
        {
            __strtod_internal_spec(context, st[i], &endptr, type, requestErrorCode());
            strtod_spec(context, st[i], &endptr, type, requestErrorCode());
        }

    return true;
}

scenario
bool atof_scen()
{
    CString* endptr;
    CString* st[30] = {
    create_CString("-inf"),
    create_CString("         iNfInItY-NaN"),
    create_CString("  \n \t     -infFinity"),
    create_CString("-ininity"),
    create_CString("InfinityThis stoped scan"),
    create_CString("NaN"),
    create_CString("       NaN(123)"),
    create_CString("\n   \t -NaN(1ab3cD)This stoped scan"),
    create_CString("NaN()The end."),
    create_CString("-NaN("),
    create_CString("\nNaN(Hello world) - Hello!"),
    create_CString(" \n 123.456.789"),
    create_CString(".."),
    create_CString("       .1"),
    create_CString("-.1234567890"),
    create_CString(" -987.654This stoped scan"),
    create_CString("1e10"),
    create_CString("4.55e-5With negativ exponent"),
    create_CString("12."),
    create_CString("-123e"),
    create_CString("456eBad exponent"),
    create_CString("123e-"),
    create_CString(" NaN(123"),
    create_CString("No number"),
    create_CString("1e-12345"),
    create_CString("-1e12345"),
    create_CString("\n---------Hello--------"),
    create_CString("123e-end"),
    create_CString("234e5.2"),
    create_CString("e5")
    };

	iterate ( IntT i = 0; i < 30; i++; )
	{
	    atof_spec(context, st[i], requestErrorCode());
	}

    return true;
}

scenario
bool ecvt_gcvt_scen()
{
    Unifloat* X[15] = 
    {
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(-12763.5674),
        convertDouble_Unifloat(-0.00000127635674),
        convertDouble_Unifloat(0.1),
        convertDouble_Unifloat(-12345),
        convertDouble_Unifloat(0.0),
	convertDouble_Unifloat(-00.00),
        convertDouble_Unifloat(53.21),
        convertDouble_Unifloat(2e100),
        convertDouble_Unifloat(1234e-100),
	convertDouble_Unifloat(-899999.999999),
        convertDouble_Unifloat(0.89999999),
        convertDouble_Unifloat(10000.00000001),
        convertDouble_Unifloat(123e-123),
        convertDouble_Unifloat(-123e+123)
    };

    IntT ndigit[15] = 
    {
        3,
        5,
	12,
	10,
	2,
	3,
	4,
	15,
	10,
	5,
	10,
	7,
	6,
	10,
	5
    };
	IntT decpt = 0;
	IntT sign = 0;
	CString* res;
	iterate ( IntT i = 0; i < 15; i++; )
	{
	    ecvt_spec(context, X[i], ndigit[i], &decpt, &sign);
	    gcvt_spec(context, X[i], ndigit[i], res);
	}
    
}

scenario
bool fcvt_scen()
{
    Unifloat* X[12] = 
    {
        convertDouble_Unifloat(12.763),
        convertDouble_Unifloat(-12763.5674),
        convertDouble_Unifloat(-0.00000127635674),
        convertDouble_Unifloat(0.1),
        convertDouble_Unifloat(-12345),
        convertDouble_Unifloat(0.0),
	convertDouble_Unifloat(-00.00),
        convertDouble_Unifloat(53.21),
        convertDouble_Unifloat(2e100),
        convertDouble_Unifloat(1234e-5),
	convertDouble_Unifloat(-899999.999999),
        convertDouble_Unifloat(0.89999999)
    };

    IntT ndigit[12] = 
    {
        3,
        5,
	12,
	10,
	2,
	3,
	4,
	15,
	10,
	5,
	10,
	5
    };
	IntT decpt = 0;
	IntT sign = 0;
	iterate ( IntT i = 0; i < 12; i++; )
	{
	    fcvt_spec(context, X[i], ndigit[i], &decpt, &sign);
	}
    
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm strreal_scenario =
{
    .init = init_util_conversion_strreal,
    .finish = finish_conversion_strreal,
    .actions = {
                    __strtod_internal_strtod_scen,
		    atof_scen,
		    ecvt_gcvt_scen,
		    fcvt_scen,
                    NULL
                }
};

bool main_util_conversion_strreal(int argc, char** argv)
{
    strreal_scenario(argc,argv);
    return true;
}

#include "util/conversion/tests/strreal_scenario.seh"


#ifdef STRREAL_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "process/process/process_media.seh"
#include "system/sysconf/sysconf_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();
    
    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    
    initSystemSysconfSubsystem();

    initUtilConversionStrrealSubsystem();
    initMath();
    initMathMedia();

}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    
    // Set up tracer
    //setTraceEncoding("windows-1251");
    
    addTraceToFile("trace.xml");
    
    trace_all_requirements = true;
    // Run test scenario
    strreal_scenario(argc, argv);
    
    //  unloadSUT();
    return 0;
}

#ifdef WIN32

int main(int argc, char** argv)
{
    clock_t start, finish;
    double duration;

    initTestSystem();

    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");


    start = clock();

    main_util_conversion_strreal(argc,argv);


    finish = clock();
    duration = (double) (finish - start) / CLOCKS_PER_SEC;

    verbose( "%2.3f seconds\n", duration );

    //  unloadSUT();
    return 0;
}

#else

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    addTraceToFile("trace.xml");
    main_util_conversion_strreal(argc,argv);

    //  unloadSUT();
    return 0;
}

#endif

#endif






