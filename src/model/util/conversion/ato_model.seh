/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
bool over_pos(model_mytype par, model_mytype mul, model_mytype m, model_mytype add)
{
    model_mytype tmp=par;

    while(--mul)
    {
        if(tmp>m-par)
            return true;
        tmp+=par;
    }
    if(tmp>m-add)
        return true;
   
    return false;
}
bool over_neg(model_mytype par, model_mytype mul, model_mytype m, model_mytype add)
{
    model_mytype tmp=par;

    while(--mul)
    {
        if(tmp<m-par)
            return true;
        tmp+=par;
    }
    if(tmp<m-add)
        return true;

    return false;
}
model_mytype a_model(CallContext context, CString* str, IntT* err)
{
    model_mytype ret=0;
    IntT i=0, size=length_CString(str);
    bool neg=false;
    IntT sh;

    /*
     * First, they shall decompose the input string into three parts:
     * 
     * An initial, possibly empty, sequence of white-space  character codes (as 
     * specified by isspace())
     * 
     */
    IMPLEMENT_REQ("atoi.02.01;atol.02.01;atoll.02.01");
    while(i<size && isSpace(charAt_CString(str, i)))
        i++;

    /*
     * First, they shall decompose the input string into three parts:
     * 
     * A subject sequence interpreted as an integer represented in some radix 
     * determined by the value of base
     * 
     */
    IMPLEMENT_REQ("atoi.02.02;atol.02.02;atoll.02.02");
    /*
     * The subject sequence is defined as the longest initial subsequence of the input 
     *  character string, starting with the first non-white-space  character 
     * code that is of the expected form.
     * 
     */
    IMPLEMENT_REQ("atoi.07;atol.07;atoll.07");

    /*
     * Then they shall attempt to convert the subject sequence to an integer, and 
     * return the result.
     * 
     */
    IMPLEMENT_REQ("atoi.03;atol.03;atoll.03");

    if( i==size ||
        firstCharNotMatch_strtol(charAt_CString(str, i), 10))
    {
        /*
         * The subject sequence contains no  character codes if the input   
         * character string is empty or consists entirely of white-space  character 
         * code, or if the first non-white-space  character code is other than a sign 
         * or a permissible letter or digit.
         * 
         */
        IMPLEMENT_REQ("atoi.08;atol.08;atoll.08");
        *err=1;
        return 0;
    }
    if(charAt_CString(str, i)==(CharT)'+')
        i++;

    /*
     * If the subject sequence begins with a minus sign, the value resulting from the 
     * conversion shall be negated.
     * 
     */
    IMPLEMENT_REQ("atoi.11;atol.11;atoll.11");
    if(charAt_CString(str, i)==(CharT)'-')
    {
        neg=true;
        i++;
    }    

    /*
     * only letters whose ascribed values are less than that of base shall
     * be permitted.        
     */
    IMPLEMENT_REQ("atoi.05.02;atol.05.02;atoll.05.02");
    if(i==size || !isOther(charAt_CString(str, i), 10))
    {
        /*
         * The subject sequence contains no  character codes if the input   
         * character string is empty or consists entirely of white-space  character 
         * code, or if the first non-white-space  character code is other than a sign 
         * or a permissible letter or digit.
         * 
         */
        IMPLEMENT_REQ("atoi.08;atol.08;atoll.08");
        *err=1;
        return 0;            
    }
    /*
     * If the value of base is between 2 and 36, the expected form of the subject 
     * sequence is a sequence of letters and digits representing an integer with the 
     * radix specified by base, optionally preceded by a '+' or '-' sign, but not 
     * including an integer suffix. The letters from 'a' (or 'A' ) to 'z' (or 'Z' ) 
     * inclusive are ascribed the values 10 to 35; 
     * 
     */
    IMPLEMENT_REQ("atoi.05.01;atol.05.01;atoll.05.01");
    /*
     * If the subject sequence has the expected form and the value of base is between 
     * 2 and 36, it shall be used as the base for conversion, ascribing to each letter 
     * its value as given above.
     * 
     */
    IMPLEMENT_REQ("atoi.10;atol.10;atoll.10");
    while(i<size && isOther(charAt_CString(str, i), 10))
    {
        if(neg)
        {
            if(!over_neg(-ret, 10, mymin, -other2Int_CharT(charAt_CString(str, i))))
            {
                ret=ret*10+other2Int_CharT(charAt_CString(str, i));
            }
            else
            {
                *err=1;
                return mymin;
            }
        }
        else
        {
            if(!over_pos(ret, 10, mymax, other2Int_CharT(charAt_CString(str, i))))
            {
                ret=ret*10+other2Int_CharT(charAt_CString(str, i));
            }
            else
            {
                *err=1;
                return mymax;
            }                
        }
        i++;
    }   

    if(neg)
        ret=-ret;

    return (model_mytype)convert_L(ret, model_mytype_size);
}
