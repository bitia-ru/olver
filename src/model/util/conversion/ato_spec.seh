/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef UTIL_CONVERSION_STRINT_ATO_SUBSYSTEM

#define UTIL_CONVERSION_STRINT_ATO_SUBSYSTEM
#pragma SEC subsystem conversion "util.conversion"
#endif

specification
mytype a_spec( CallContext context, CString*  str)
{
    CString* str_pre=clone(str);

    FILTER(a_name);

    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        IntT err=0;
        mytype ret=(mytype)a_model(context, str, &err);
        REQ("", "Str has no changes", equals(str, str_pre));

        if(err==1)
            return true;
        
        REQ_UNCHECKABLE("atoi.002;atoi.003;atol.002;atol.003;atoll.002;atoll.003", "");

        /*
         * The call atol(str) shall be equivalent to: 
         * 
         * strtol(str, (char **)NULL, 10) 
         */
        /*
         * These functions shall return the converted value if the value can be 
         * represented.
         */
        /*
         * The call atoll(str) shall be equivalent to: 
         * 
         * strtoll(str, (char **)NULL, 10) 
         */
        /*
         * These functions shall return the converted value if the value can be 
         * represented.
         */
        /*
         * The call atoi(str) shall be equivalent to: 
         * 
         * (int) strtol(str, (char **)NULL, 10) 
         */
        /*
         * The atoi() function shall return the converted value if the value
         * can be represented.
         */
        REQ("atoi.001;atoi.004;atol.001;atol.004;atoll.001;atoll.004", "Returning correct value", ret==a_spec);

        return true;
    }
    
    FILTER_CLEAN;
}

#undef a_name
#undef model_mytype_size
#undef model_mytype
#undef mytype
#undef mymin
#undef mymax
#undef over_pos
#undef over_neg
#undef a_model
#undef a_spec
