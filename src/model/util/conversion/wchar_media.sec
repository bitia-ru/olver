/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/wchar_media.seh"
#include "common/common_media.seh"

void writeMbstate_TSStream( TSStream* stream, Mbstate* value )
{
    writeTypeHeaderTSStream(stream,"mbstate");
    if(value==NULL)
    {
        writeInt_TSStream(stream, -1);
        writeLong_TSStream(stream, -1);

        return;
    }

    writeInt_TSStream(stream, value->count);
    writeLong_TSStream(stream, value->value);
}

static void mbstate_formatter(TSStream* stream,Mbstate* value)
{
  VERIFY_TYPE( mbstate_formatter, &type_Mbstate, value );

  writeMbstate_TSStream( stream, value );
}
/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilConversionWcharSubsystem(void)
{
  // Set up mediators
    set_mediator_btowc_spec(btowc_media);
    set_mediator_mblen_spec(mblen_media);
    set_mediator_mbrlen_spec(mbrlen_media);
    set_mediator_mbrtowc_spec(mbrtowc_media);
    set_mediator_mbsinit_spec(mbsinit_media);
    set_mediator_mbsnrtowcs_spec(mbsnrtowcs_media);
    set_mediator_mbsrtowcs_spec(mbsrtowcs_media);
    set_mediator_mbstowcs_spec(mbstowcs_media);
    set_mediator_mbtowc_spec(mbtowc_media);
    set_mediator_wcrtomb_spec(wcrtomb_media);
    set_mediator_wcsnrtombs_spec(wcsnrtombs_media);
    set_mediator_wcsrtombs_spec(wcsrtombs_media);
    set_mediator_wcstombs_spec(wcstombs_media);
    set_mediator_wctob_spec(wctob_media);
    set_mediator_wctomb_spec(wctomb_media);

    registerTSFormatter("mbstate", (TSFormatterFuncType)mbstate_formatter);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** btowc_spec **/

mediator btowc_media for specification
WIntT btowc_spec( CallContext context, IntT c)
{
    call
    {
        LongT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "btowc:$(int)", 
                            create_IntTObj(c));

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readUInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}



/** mblen_spec **/
mediator mblen_media for specification
IntT mblen_spec( CallContext context, StringTPtr s, IntT n, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mblen:$(ptr)$(int)",
                                create_VoidTPtrObj(s),
                                create_IntTObj(n));
    
        DUMP("bef exec\n");
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** mbrlen_spec **/
mediator mbrlen_media for specification
IntT mbrlen_spec( CallContext context, StringTPtr s, IntT n, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
         
        format_TSCommand( &command, "mbrlen:$(ptr)$(int)$(mbstate)",
                                create_VoidTPtrObj(s),
                                create_IntTObj(n),
                                ps);

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}


/** mbrtowc_spec **/

mediator mbrtowc_media for specification
IntT mbrtowc_spec( CallContext context, WStringTPtr* pwc, StringTPtr s, IntT n, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
         
        format_TSCommand( &command, "mbrtowc:$(int)$(ptr)$(ptr)$(int)$(mbstate)",
                create_IntTObj(isNULL_VoidTPtr(*pwc)? 0:1),
                                create_VoidTPtrObj(*pwc),
                                create_VoidTPtrObj(s),
                                create_IntTObj(n),
                                ps);

        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            if(!isNULL_VoidTPtr(*pwc))
                *pwc=readPointer_TSStream(context, &command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}



/** mbsinit_spec **/

mediator mbsinit_media for specification
IntT mbsinit_spec( CallContext context, Mbstate* ps)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mbsinit:$(mbstate)", ps);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}



/** mbsnrtowcs_spec **/
mediator mbsnrtowcs_media for specification
IntT mbsnrtowcs_spec( CallContext context, WStringTPtr* dst, StringTPtr* src, IntT nms, IntT len, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        StringTPtr src_ret;
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mbsnrtowcs:$(int)$(int)$(ptr)$(ptr)$(int)$(int)$(mbstate)",
            create_IntTObj(isNULL_VoidTPtr(*dst) ? 0 : 1),
            create_IntTObj(isNULL_VoidTPtr(*src) ? 0 : 1),
            create_VoidTPtrObj(*dst),
            create_VoidTPtrObj(*src),
            create_IntTObj(nms),
            create_IntTObj(len),
            ps);

        DUMP("before exec\n");
        executeCommandInContext( context, &command );
        DUMP("After exec\n");

        if (!isBadVerdict())
        {
            DUMP("In verdict");
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            DUMP("Bef dst read\n");
            if(!isNULL_VoidTPtr(*dst))
                *dst=readPointer_TSStream(context, &command.response);
            DUMP("Bef src read\n");
            if(!isNULL_VoidTPtr(*src))
                src_ret=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(src_ret))
                *src=src_ret;
            DUMP("Bef errno read\n");
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** mbsrtowcs_spec **/
mediator mbsrtowcs_media for specification
IntT mbsrtowcs_spec( CallContext context, WStringTPtr* dst, StringTPtr* src, IntT len, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        StringTPtr src_ret;
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mbsrtowcs:$(int)$(int)$(ptr)$(ptr)$(int)$(mbstate)",
            create_IntTObj(isNULL_VoidTPtr(*dst) ? 0 : 1),
            create_IntTObj(isNULL_VoidTPtr(*src) ? 0 : 1),
            create_VoidTPtrObj(*dst),
            create_VoidTPtrObj(*src),
            create_IntTObj(len),
            ps);

        DUMP("before exec\n");
        executeCommandInContext( context, &command );
        DUMP("After exec\n");

        if (!isBadVerdict())
        {
            DUMP("In verdict");
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            DUMP("Bef dst read\n");
            if(!isNULL_VoidTPtr(*dst))
                *dst=readPointer_TSStream(context, &command.response);
            DUMP("Bef src read\n");
            if(!isNULL_VoidTPtr(*src))
                src_ret=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(src_ret))
                *src=src_ret;
            DUMP("Bef errno read\n");
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** mbstowcs_spec **/

mediator mbstowcs_media for specification
IntT mbstowcs_spec( CallContext context, WStringTPtr* pwcs, StringTPtr s, IntT n, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "mbstowcs:$(ptr)$(ptr)$(int)",
            create_VoidTPtrObj(*pwcs),
            create_VoidTPtrObj(s),
            create_IntTObj(n));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            if(!isNULL_VoidTPtr(*pwcs))
                *pwcs=readPointer_TSStream(context, &command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** mbtowc_spec **/
mediator mbtowc_media for specification
IntT mbtowc_spec( CallContext context, WStringTPtr* pwc, StringTPtr s, IntT n, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        VoidTPtr tmp;
    
        format_TSCommand( &command, "mbtowc:$(int)$(ptr)$(ptr)$(int)",
                create_IntTObj(isNULL_VoidTPtr(*pwc)? 0:1),
                                create_VoidTPtrObj(*pwc),
                                create_VoidTPtrObj(s),
                                create_IntTObj(n));
    
        DUMP("bef exec");
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *pwc = tmp;
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** wcrtomb_spec **/

mediator wcrtomb_media for specification
IntT wcrtomb_spec( CallContext context, StringTPtr* s, WCharT wc, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "wcrtomb:$(ptr)$(wchar)$(mbstate)",
            create_VoidTPtrObj(*s),
            create_WCharTObj(wc),
            ps);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            if(!isNULL_VoidTPtr(*s))
                *s=readPointer_TSStream(context, &command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}



/** wcsnrtombs_spec **/
mediator wcsnrtombs_media for specification
IntT wcsnrtombs_spec( CallContext context, StringTPtr* dst, WStringTPtr* src, IntT nws, IntT len, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr tmp;
        IntT res;
    
        format_TSCommand( &command, "wcsnrtombs:$(ptr)$(ptr)$(int)$(int)$(mbstate)",
            create_VoidTPtrObj(*dst),
            create_VoidTPtrObj(*src),
            create_IntTObj(nws),
            create_IntTObj(len),
            ps);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *dst = tmp;
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *src = tmp;
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** wcsrtombs_spec **/

mediator wcsrtombs_media for specification
IntT wcsrtombs_spec( CallContext context, StringTPtr* dst, WStringTPtr* src, IntT len, Mbstate* ps, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        VoidTPtr tmp;
    
        format_TSCommand( &command, "wcsrtombs:$(ptr)$(ptr)$(int)$(mbstate)",
            create_VoidTPtrObj(*dst),
            create_VoidTPtrObj(*src),
            create_IntTObj(len),
            ps);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *dst = tmp;
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *src = tmp;
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** wcstombs_spec **/
mediator wcstombs_media for specification
IntT wcstombs_spec( CallContext context, StringTPtr* s, WStringTPtr pwcs, IntT n, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "wcstombs:$(ptr)$(ptr)$(int)",
            create_VoidTPtrObj(*s),
            create_VoidTPtrObj(pwcs),
            create_IntTObj(n));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            if(!isNULL_VoidTPtr(*s))
                *s=readPointer_TSStream(context, &command.response);
            *errno=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** wctob_spec **/

mediator wctob_media for specification
IntT wctob_spec( CallContext context, WIntT c )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
    
        format_TSCommand( &command, "wctob:$(uint)",
            create_UIntTObj(c));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** wctomb_spec **/
mediator wctomb_media for specification
IntT wctomb_spec( CallContext context, StringTPtr* s, WCharT wchar )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        StringTPtr tmp;
    
         
        format_TSCommand( &command, "wctomb:$(ptr)$(wchar)",
            create_VoidTPtrObj(*s),
            create_WCharTObj(wchar) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            tmp=readPointer_TSStream(context, &command.response);
            if(!isNULL_VoidTPtr(tmp))
                *s=tmp;
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}




