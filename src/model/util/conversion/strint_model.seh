/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_CONVERSION_STRINT_MODEL_SEH
#define UTIL_CONVERSION_STRINT_MODEL_SEH

#include "common/common_model.seh"
#include "util_conversion_common.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __strtol_internal_spec **/
specification
LongT __strtol_internal_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno, IntT group );
LongT __strtol_internal_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** __strtoll_internal_spec **/
specification
LLongT __strtoll_internal_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno, IntT group );
LLongT __strtoll_internal_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** __strtoul_internal_spec **/
specification
ULongT __strtoul_internal_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno, IntT group );
ULongT __strtoul_internal_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** __strtoull_internal_spec **/
specification
ULLongT __strtoull_internal_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno, IntT group );
ULLongT __strtoull_internal_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** a64l_spec **/
specification
LongT a64l_spec( CallContext context, CString* str);
LongT a64l_model( CallContext context, CString* str, IntT* err);

/** atoi_spec **/
specification
IntT atoi_spec( CallContext context, CString* str);
LongT atoi_model( CallContext context, CString* str, IntT* err);

/** atol_spec **/
specification
LongT atol_spec( CallContext context, CString* str);
LongT atol_model( CallContext context, CString* str, IntT* err);

/** atoll_spec **/
specification
LLongT atoll_spec( CallContext context, CString* str);
LLongT atoll_model( CallContext context, CString* str, IntT* err);

/** l64a_spec **/
specification
CString* l64a_spec( CallContext context, LongT value );

/** strtoimax_spec **/
specification
IntMaxT strtoimax_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
IntMaxT strtoimax_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtol_spec **/
specification
LongT strtol_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
LongT strtol_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtoll_spec **/
specification
LLongT strtoll_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
LLongT strtoll_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtoq_spec **/
specification
LLongT strtoq_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
LLongT strtoq_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtoul_spec **/
specification
ULongT strtoul_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
ULongT strtoul_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtoull_spec **/
specification
ULLongT strtoull_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
ULLongT strtoull_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtoumax_spec **/
specification
UIntMaxT strtoumax_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
UIntMaxT strtoumax_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/** strtouq_spec **/
specification
ULLongT strtouq_spec( CallContext context, StringTPtr nptr,
                        StringTPtr* endptr, IntT base, ErrorCode* errno);
ULLongT strtouq_model( CallContext context, StringTPtr nptr,
    StringTPtr* endptr, IntT base, ErrorCode* my_errno, StringTPtr* exp_end);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isEINVAL_strtoll(IntT base);
bool isSpace(CharT ch);
bool firstCharNotMatch_strtol(CharT wch, IntT base);
IntT dec2Int_CharT(CharT wch);
IntT oct2Int_CharT(CharT wch);
IntT hex2Int_CharT(CharT wch);
IntT other2Int_CharT(CharT wch);

bool OverPos_L(LongT par, LongT mul, LongT m, LongT add);
bool OverNeg_L(LongT par, LongT mul, LongT m, LongT add);

bool OverPos_LL(LLongT par, LLongT mul, LLongT m, LLongT add);
bool OverNeg_LL(LLongT par, LLongT mul, LLongT m, LLongT add);

bool OverPos_LLI(LLongT par, LLongT mul, LLongT m, LLongT add);
bool OverNeg_LLI(LLongT par, LLongT mul, LLongT m, LLongT add);

bool OverPos_IM(IntMaxT par, IntMaxT mul, IntMaxT m, IntMaxT add);
bool OverNeg_IM(IntMaxT par, IntMaxT mul, IntMaxT m, IntMaxT add);

bool OverPos_LI(LongT par, LongT mul, LongT m, LongT add);
bool OverNeg_LI(LongT par, LongT mul, LongT m, LongT add);

bool OverPos_Q(LLongT par, LLongT mul, LLongT m, LLongT add);
bool OverNeg_Q(LLongT par, LLongT mul, LLongT m, LLongT add);

bool OverPos_UL(ULongT par, ULongT mul, ULongT m, ULongT add);

bool OverPos_ULL(ULLongT par, ULLongT mul, ULLongT m, ULLongT add);

bool OverPos_ULI(ULongT par, ULongT mul, ULongT m, ULongT add);

bool OverPos_ULLI(ULLongT par, ULLongT mul, ULLongT m, ULLongT add);

bool OverPos_UIM(UIntMaxT par, UIntMaxT mul, UIntMaxT m, UIntMaxT add);

bool OverPos_UQ(ULLongT par, ULLongT mul, ULLongT m, ULLongT add);

bool OverPos_AI(LongT par, LongT mul, LongT m, LongT add);
bool OverNeg_AI(LongT par, LongT mul, LongT m, LongT add);

bool OverPos_AL(LongT par, LongT mul, LongT m, LongT add);
bool OverNeg_AL(LongT par, LongT mul, LongT m, LongT add);

bool OverPos_ALL(LLongT par, LLongT mul, LLongT m, LLongT add);
bool OverNeg_ALL(LLongT par, LLongT mul, LLongT m, LLongT add);

LongT char2_a64l(CharT ch);

#endif

