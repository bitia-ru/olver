/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/wtoken_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilConversionWtokenSubsystem(void)
{
  // Set up mediators
    set_mediator_wcstok_spec(wcstok_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** wcstok_spec **/

mediator wcstok_media for specification
StringTPtr wcstok_spec( CallContext context, StringTPtr ws1,
                                        StringTPtr ws2, StringTPtr* ptr)
{
    StringTPtr buff=*ptr;
    
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr ret=NULL_VoidTPtr;

        format_TSCommand( &command, "wcstok:$(ptr)$(ptr)$(ptr)",
                                create_VoidTPtrObj(ws1),
                                create_VoidTPtrObj(ws2),
                                create_VoidTPtrObj(*ptr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            ret=readPointer_TSStream(context, &command.response);
            *ptr=readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return ret; 
    }
    state
    {
        if(buff.address==ptr->address)
            *ptr=NULL_VoidTPtr;
    }
}




