/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/token_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilConversionTokenSubsystem(void)
{
  // Set up mediators

    set_mediator_strsep_spec(strsep_media);
    set_mediator_strtok_spec(strtok_media);
    set_mediator_strtok_r_spec(strtok_r_media);
    set_mediator___strtok_r_spec(__strtok_r_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** strsep_spec **/

mediator strsep_media for specification
StrSepResult* strsep_spec( CallContext context, StringTPtr stringp,
                                                            StringTPtr delim)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr ret=NULL_VoidTPtr;
        StringTPtr param=NULL_VoidTPtr;
        StrSepResult* res;
        
        format_TSCommand( &command, "strsep:$(ptr)$(ptr)",
                    create_VoidTPtrObj(stringp), create_VoidTPtrObj(delim));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            ret=readPointer_TSStream(context, &command.response);
            param=readPointer_TSStream(context, &command.response);            

            res=create_StrSepResult(ret, param);
        }

        destroy_TSCommand(&command);
        
        return res; 
    }
}



/** strtok_spec **/

mediator strtok_media for specification
StringTPtr strtok_spec( CallContext context, StringTPtr stringp,
                                                            StringTPtr delim)
{
    ProcessState* ps=getProcessState_CallContext(context);
    CByteArray* buff_pre=NULL;
    StringTPtr ps_buf_pre, buff;

    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr ret=NULL_VoidTPtr;

        ps_buf_pre=ps->buffer_string;
        
        if(!isNULL_VoidTPtr(stringp))
        {
            buff=stringp;
            buff_pre=readCByteArray_MemoryBlock(getMemoryBlock(stringp));
        }
        else
        {
            buff=ps->buffer_string;
            if(!isNULL_VoidTPtr(ps->buffer_string))
                buff_pre=readCByteArray_MemoryBlock(
                            getMemoryBlock(ps->buffer_string));
        }

        format_TSCommand( &command, "strtok:$(ptr)$(ptr)",
                    create_VoidTPtrObj(stringp), create_VoidTPtrObj(delim));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            ret=readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return ret; 
    }
    state
    {
        OnStrtok(context, stringp, delim, strtok_spec, &(ps->buffer_string),
                buff_pre, ps_buf_pre, buff);
    }
}



/** strtok_r_spec **/
mediator strtok_r_media for specification
StringTPtr strtok_r_spec( CallContext context, StringTPtr stringp,
                                        StringTPtr delim, StringTPtr* buffer)
{
    StringTPtr buff=*buffer;

    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr ret=NULL_VoidTPtr;

        format_TSCommand( &command, "strtok_r:$(ptr)$(ptr)$(ptr)",
                                create_VoidTPtrObj(stringp),
                                create_VoidTPtrObj(delim),
                                create_VoidTPtrObj(*buffer));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            ret=readPointer_TSStream(context, &command.response);
            *buffer=readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return ret; 
    }
    state
    {
        if(buff.address==buffer->address)
            *buffer=NULL_VoidTPtr;
    }
}

/** __strtok_r_spec **/
mediator __strtok_r_media for specification
StringTPtr __strtok_r_spec( CallContext context, StringTPtr stringp,
                                        StringTPtr delim, StringTPtr* buffer)
{
    StringTPtr buff=*buffer;

    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr ret=NULL_VoidTPtr;

        format_TSCommand( &command, "__strtok_r:$(ptr)$(ptr)$(ptr)",
                                create_VoidTPtrObj(stringp),
                                create_VoidTPtrObj(delim),
                                create_VoidTPtrObj(*buffer));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;

            ret=readPointer_TSStream(context, &command.response);
            *buffer=readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return ret; 
    }
    state
    {
        if(buff.address==buffer->address)
            *buffer=NULL_VoidTPtr;
    }
}
