/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/conversion/strreal_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilConversionStrrealSubsystem(void)
{
  // Set up mediators
    set_mediator___strtod_internal_spec(__strtod_internal_media);
    set_mediator_strtod_spec(strtod_media);
    set_mediator_atof_spec(atof_media);
    set_mediator_ecvt_spec(ecvt_media);
    set_mediator_fcvt_spec(fcvt_media);
    set_mediator_gcvt_spec(gcvt_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __strtod_internal_spec **/
//This mediator refers to: __strtof_internal, __strtod_internal, __strtold_internal
mediator __strtod_internal_media for
specification
Unifloat* __strtod_internal_spec(CallContext context, CString* st,
                                 CString** endptr, UnifloatType type,
                                 ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        IntT shift;
        char command_string[3][100] = {
                "__strtof_internal:$(str)",
                "__strtod_internal:$(str)",
                "__strtold_internal:$(str)"};

        format_TSCommand( &command, command_string[type], st);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            shift = readInt_TSStream(&command.response);
            *endptr = substring_CString(st, shift, length_CString(st));
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}


/** strtod_spec **/
//This mediator refers to: strtof, strtod, strtold
mediator strtod_media for
specification
Unifloat* strtod_spec(CallContext context, CString* st, CString** endptr,
                      UnifloatType type, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        IntT shift;
        char command_string[3][100] = {
                "strtof:$(str)",
                "strtod:$(str)",
                "strtold:$(str)"};

        format_TSCommand( &command, command_string[type], st);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            shift = readInt_TSStream(&command.response);
            *endptr = substring_CString(st, shift, length_CString(st));
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}

/** atof_spec **/
//This specification refers to: atof
mediator atof_media for
specification
Unifloat* atof_spec(CallContext context, CString* st, 
                    ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        IntT shift;
        char command_string[100] = "atof:$(str)";

        format_TSCommand( &command, command_string, st);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}

/** ecvt_spec **/
//This mediator refers to: ecvt 
mediator ecvt_media for
specification
CString* ecvt_spec(CallContext context, Unifloat * x, IntT ndigit, IntT* decpt, IntT* sign)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
        char command_string[100] = "ecvt:$(unifloat)$(int)";

        format_TSCommand( &command, command_string, x, create_IntTObj(ndigit));

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
            *decpt = readInt_TSStream(&command.response);
            *sign = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}

mediator fcvt_media for
specification
CString* fcvt_spec(CallContext context, Unifloat * x, IntT ndigit, IntT* decpt, IntT* sign)
{
    call
    {
        TSCommand command = create_TSCommand();
        CString* res;
        char command_string[100] = "fcvt:$(unifloat)$(int)";

        format_TSCommand( &command, command_string, x, create_IntTObj(ndigit));

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readCString_TSStream(&command.response);
            *decpt = readInt_TSStream(&command.response);
            *sign = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}

/** gcvt_spec **/
//This specification refers to: gcvt 
mediator gcvt_media for
specification
CString* gcvt_spec(CallContext context, Unifloat * x, IntT ndigit, CString* buf)
{
    call
    {
        TSCommand command = create_TSCommand();
	CString* result;
        char command_string[100] = "gcvt:$(unifloat)$(int)";

        format_TSCommand( &command, command_string, x, create_IntTObj(ndigit));

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            result = readCString_TSStream(&command.response);
            buf = readCString_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return result;
  }
}
