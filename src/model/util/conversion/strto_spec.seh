/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef UTIL_CONVERSION_STRINT_STRO_SUBSYSTEM

#define UTIL_CONVERSION_STRINT_STRO_SUBSYSTEM
#pragma SEC subsystem conversion "util.conversion"

#endif

specification
#ifndef ParameterGroupExists
    mytype spec( CallContext context, StringTPtr nptr, StringTPtr * endptr, IntT base, ErrorCode * errno )
#else
    mytype spec( CallContext context, StringTPtr nptr, StringTPtr * endptr, IntT base, ErrorCode * errno, IntT group )
#endif
{
    ErrorCode* errno_pre=clone(errno);
    ErrorCode* my_errno=requestErrorCode();
    StringTPtr exp_end;

    FILTER(a_name);

    pre
    {
#ifdef ParameterGroupExists
        /*
         * __group shall be 0 or the behavior of __strtol_internal() is undefined.
         *
         * __group shall be 0 or the behavior of __strtoll_internal() is undefined.
         *
         * __group shall be 0 or the behavior of __strtoul_internal() is undefined.
         *
         * __group shall be 0 or the behavior of __strtoull_internal() is undefined.
         */
        REQ( "app.__strtol_internal.30;app.__strtoll_internal.30;app.__strtoul_internal.30;app.__strtoull_internal.30",
             "__group shall be 0 or the behavior of __strto(l|ll|ul|ull)_internal() is undefined", group == 0
           );
#endif

        /*
         * The conversion is done according to the given base, which shall be between 2
         * and 36 inclusive, or be the special value 0.
         */
        REQ("app.strtoq.31;app.strtouq.31", "", TODO_REQ());

//        REQ("", "Implement req", endptr!=NULL);
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        mytype ret=model(context, nptr, endptr, base, my_errno, &exp_end);

        //Implemented in agent
        /*
         * Since 0, {LONG_MIN} or {LLONG_MIN} and {LONG_MAX} or {LLONG_MAX} are returned
         * on error and are also valid returns on success, an application wishing to
         * check for error situations should set errno to 0, then call strtol() or strtoll(
         * ), then check errno.
         *
         */
        /*
         * Since 0, {ULONG_MAX}, and {ULLONG_MAX} are returned on error and 0 is also a
         * valid return on success, an application wishing to check for error situations
         * should set errno to 0, then call strtoul() or strtoull(), then check errno.
         */

        IMPLEMENT_REQ("strtol.16;strtoul.16;__strtol_internal.16;__strtoul_internal.16;__strtoll_internal.16;__strtoull_internal.16;strtoll.16;strtoull.16;strtoq.16;strtouq.16;strtoimax.16;strtoumax.16");
        /*
         * If the subject sequence is empty or does not have the expected form, no
         * conversion shall be performed; the value of nptr shall be stored in the object
         * pointed to by endptr, provided that endptr is not a null pointer.
         *
         */
        REQ("strtol.14;strtoul.14;__strtol_internal.14;__strtoul_internal.14;__strtoll_internal.14;__strtoull_internal.14;strtoll.14;strtoull.14;strtoq.14;strtouq.14;strtoimax.14;strtoumax.14", "", *my_errno==SUT_EINVAL ? equals_VoidTPtr(exp_end, nptr) : true);

        if(*my_errno==SUT_ERANGE)
        {
            /*
             * If the correct value is outside the range of representable values, {LONG_MIN}, {
             * LONG_MAX}, {LLONG_MIN}, or {LLONG_MAX} shall be returned (according to the
             * sign of the value), and errno set to [ERANGE].
             *
             */
            /*
             * If the correct value is outside the range of representable values, {ULONG_MAX}
             * or {ULLONG_MAX} respectively shall be returned and errno set to [ERANGE].
             */
            /*
             * If the correct value is outside the range of representable values, {INTMAX_MAX}
             * , {INTMAX_MIN}, or {UINTMAX_MAX} shall be returned (according to the return
             * type and sign of the value, if any), and errno shall be set to [ERANGE].
             */
            REQ("strtol.19;strtoul.19;__strtol_internal.19;__strtoul_internal.19;__strtoll_internal.19;__strtoull_internal.19;strtoll.19;strtoull.19;strtoq.19;strtouq.19;strtoimax.19;strtoumax.19", "ret==wctol_spec, checking for LONG_MIN, LONG_MAX, etc", ret==spec);
        }

        if(*my_errno==SUT_EINVAL)
        {
            /*
             * If no conversion could be performed, 0 shall be returned [CX]  and errno may
             * be set to indicate the error.
             *
             */
            /*
             * If no conversion could be performed, zero shall be returned.
             */
            REQ("strtol.18;strtoul.18;__strtol_internal.18;__strtoul_internal.18;__strtoll_internal.18;__strtoull_internal.18;strtoll.18;strtoull.18;strtoq.18;strtouq.18;strtoimax.18;strtoumax.18", "No conversion", ret==spec);
        }

        ERROR_BEGIN(FUNC_ERR_ID, "strtoul.20.01;__strtoul_internal.20.01;__strtoull_internal.20.01;strtoull.20.01;strtouq.20.01;strtoumax.20.01", *errno!=SUT_EOK, *errno)
        /*
         * These functions shall fail if:
         *
         * [EINVAL]
         *
         * [CX] The value of base is not supported.
         *
         */
            ERROR_SHALL(FUNC_ERR_ID, EINVAL, "strtoul.20.01;__strtoul_internal.20.01;__strtoull_internal.20.01;strtoull.20.01;strtouq.20.01;strtoumax.20.01", isEINVAL_strtoll(base))

        /*
         * These functions shall fail if:
         *
         * [ERANGE]
         *
         * The value to be returned is not representable.
         *
         */

         ERROR_SHALL(FUNC_ERR_ID, ERANGE, "strtol.20.01;strtoul.20.02;__strtol_internal.20.01;__strtoul_internal.20.02;__strtoll_internal.20.01;__strtoull_internal.20.02;strtoll.20.01;strtoull.20.02;strtoq.20.01;strtouq.20.02;strtoimax.20.01;strtoumax.20.02;strtoq.36.01;strtouq.36.01", *my_errno==SUT_ERANGE)

        /*
         * These functions may fail if:
         *
         * [EINVAL]
         *
         * [CX] No conversion could be performed.
         *
         */
         ERROR_MAY(FUNC_ERR_ID, EINVAL, "strtol.21.01;strtoul.21.01;__strtol_internal.21.01;__strtoul_internal.21.01;__strtoll_internal.21.01;__strtoull_internal.21.01;strtoll.21.01;strtoull.21.01;strtoq.21.01;strtouq.21.01;strtoimax.21.01;strtoumax.21.01", *my_errno==SUT_EINVAL)

        ERROR_END()

        DUMP("\n\nnptr==%d, endptr==%d, exp_end==%d\n\n", (IntT)nptr.address, (endptr!=NULL) ? (IntT)endptr->address : 0, (IntT)exp_end.address);
        if(endptr!=NULL)
        {
            /*
             * A pointer to the final  character string shall be stored in the object
             * pointed to by endptr, provided that endptr is not a null pointer.
             *
             */
            REQ("strtol.12;strtoul.12;__strtol_internal.12;__strtoul_internal.12;__strtoll_internal.12;__strtoull_internal.12;strtoll.12;strtoull.12;strtoq.12;strtouq.12;strtoimax.12;strtoumax.12", "exp_end==endptr", exp_end.address==endptr->address);
        }
        /*
         * [CX] These functions shall not change the setting of errno if successful.
         *
         */
        REQ("strtol.15;strtoul.15;__strtol_internal.15;__strtoul_internal.15;__strtoll_internal.15;__strtoull_internal.15;strtoll.15;strtoull.15;strtoq.15;strtouq.15;strtoimax.15;strtoumax.15", "", *errno==*errno_pre);

        /*
         * In other than the C [CX]  or POSIX locales, other implementation-defined
         * subject sequences may be accepted.
         *
         */
        REQ("strtol.13;strtoul.13;__strtol_internal.13;__strtoul_internal.13;__strtoll_internal.13;__strtoull_internal.13;strtoll.13;strtoull.13;strtoq.13;strtouq.13;strtoimax.13;strtoumax.13", "", TODO_REQ());

        /*
         * Upon successful completion, these functions shall return the converted value,
         * if any.
         *
         */
        /*
         * These functions shall convert the initial portion of the  character string
         * pointed to by nptr to long, long long, unsigned long, and unsigned long long
         * representation, respectively.
         *
         */
        /*
         * The strtoul() and strtoull() functions shall convert the initial portion of the
         *  character string pointed to by nptr to unsigned long and unsigned long
         * long representation, respectively.
         */
        /*
         * These functions shall return the converted value, if any.
         */
        REQ("strtol.01;strtoul.01;__strtol_internal.01;__strtoul_internal.01;__strtoll_internal.01;__strtoull_internal.01;strtoll.01;strtoull.01;strtoq.01;strtouq.01;strtoimax.01;strtoumax.01;strtol.17;strtoul.17;__strtol_internal.17;__strtoul_internal.17;__strtoll_internal.17;__strtoull_internal.17;strtoll.17;strtoull.17;strtoq.17;strtouq.17;strtoimax.17;strtoumax.17", "ret==wctol_spec", ret==spec);

#ifdef ParameterGroupExists
        /*
         * __strtol_internal(__nptr, __endptr, __base, 0) has the same specification as
         * strtol(__nptr, __endptr, __base).
         *
         * __strtoll_internal(__nptr, __endptr, __base, 0) has the same specification as
         * strtoll(__nptr, __endptr, __base).
         *
         * __strtoul_internal(__nptr, __endptr, __base, 0) has the same specification as
         * strtoul(__nptr, __endptr, __base).
         *
         * __strtoull_internal(__nptr, __endptr, __base, 0) has the same specification as
         * strtoull(__nptr, __endptr, __base).
         */
        REQ( "__strtol_internal.30;__strtoll_internal.30;__strtoul_internal.30;__strtoull_internal.30",
             "__strto(l|ll|ul|ull)_internal(__nptr, __endptr, __base, 0) equal to strto(l|ll|ul|ull)(__nptr, __endptr, __base)",
             true
           );
#endif

        /*
         * strtoq() converts the string nptr to a quadt value.
         */
        REQ("strtoq.31", "", TODO_REQ());

        /*
         * strtouq() converts the string nptr to an unsigned long long value.
         */
        REQ("strtouq.31", "", TODO_REQ());

        /*
         * nptr may begin with an arbitrary amount of white space (as determined by
         * isspace()), followed by a single optional + or - sign character.
         */
        REQ("strtoq.32;strtouq.32", "", TODO_REQ());

        /*
         * If base is 0 or 16, the string may then include a 0x prefix, and the number
         * will be read in base 16
         */
        REQ("strtoq.33.01;strtouq.33.01", "", TODO_REQ());

        /*
         * otherwise, a 0 base is taken as 10 (decimal), unless the next character is 0
         */
        REQ("strtoq.33.02;strtouq.33.02", "", TODO_REQ());

        /*
         * in which case it is taken as 8 (octal)
         */
        REQ("strtoq.33.03;strtouq.33.03", "", TODO_REQ());

        /*
         * The remainder of the string is converted to a long value in the obvious manner,
         * stopping at the first character which is not a valid digit in the given base.
         * (In bases above 10, the letter A in either upper or lower case represents 10, B
         * represents 11, and so forth, with Z representing 35.)
         */
        REQ("strtoq.34", "", TODO_REQ());

        /*
         * The remainder of the string is converted to an unsigned long value in the
         * obvious manner, stopping at the end of the string or at the first character
         * that does not produce a valid digit in the given base. (In bases above 10, the
         * letter A in either upper or lower case represents 10, B represents 11, and so
         * forth, with Z representing 35.)
         */
        REQ("strtouq.34", "", TODO_REQ());

        /*
         * strtoq() returns the result of the conversion, unless the value would underflow
         * or overflow.
         */
        REQ("strtoq.35.01", "", TODO_REQ());

        /*
         * On success, strtouq() returns either the result of the conversion
         */
        REQ("strtouq.35.01", "", TODO_REQ());

        /*
         * if there was a leading minus sign, the negation of the result of the
         * conversion, unless the original (non-negated) value would overflow
         */
        REQ("strtouq.35.02", "", TODO_REQ());

        /*
         * If an underflow occurs, strtoq() returns QUAD_MIN.
         */
        REQ("strtoq.35.02", "", TODO_REQ());

        /*
         * If an overflow occurs, strtoq() returns QUAD_MAX.
         */
        REQ("strtoq.35.03", "", TODO_REQ());

        /*
         * In the case of an overflow the function returns UQUAD_MAX and the global
         * variable errno is set to ERANGE.
         */
        REQ("strtouq.35.03", "", TODO_REQ());

        return true;
    }

    FILTER_CLEAN;
}


#undef a_name
#undef FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES
#undef FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE
#undef FUNC_ERR_ID_FAILS_WITH_EINVAL
#undef FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL
#undef mytype_size
#undef mayneg
#undef mytype
#undef mymin
#undef mymax
#undef over_pos
#undef over_neg
#undef model
#undef spec
#ifdef ParameterGroupExists
    #undef ParameterGroupExists
#endif
