/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "util/conversion/wstrint_model.seh"
#include "config/interpretation.seh"
#include "util/conversion/wstrint_config.h"
#include "data/errno_model.seh"
#include "common/common_scenario.seh"
#include "config/system_config.seh"
#pragma SEC subsystem conversion "util.conversion"


/*
   The group of functions 'util.conversion.wstrint' consists of:
       wcstol [2]
       wcstoll [2]
       wcstoul [2]
       wcstoull [2]
       __wcstol_internal [1]
       __wcstoul_internal [1]
       wcstoimax [2]
       wcstoq [1]
       wcstoumax [2]
       wcstouq [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstol, wcstoll - convert a wide-character string to a long integer

SYNOPSIS

    #include <wchar.h>

    long wcstol(const wchar_t *restrict nptr, wchar_t **restrict endptr,

        int base);

    long long wcstoll(const wchar_t *restrict nptr,

    wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

These functions shall convert the initial portion of the wide-character string
pointed to by nptr to long, long long, unsigned long, and unsigned long long
representation, respectively. First, they shall decompose the input string
into three parts:

An initial, possibly empty, sequence of white-space wide-character codes (as
specified by iswspace())

A subject sequence interpreted as an integer represented in some radix
determined by the value of base

A final wide-character string of one or more unrecognized wide-character codes,
including the terminating null wide-character code of the input wide-character
string

Then they shall attempt to convert the subject sequence to an integer, and
return the result.

If base is 0, the expected form of the subject sequence is that of a decimal
constant, octal constant, or hexadecimal constant, any of which may be
preceded by a '+' or '-' sign. A decimal constant begins with a non-zero digit,
and consists of a sequence of decimal digits. An octal constant consists of
the prefix '0' optionally followed by a sequence of the digits '0' to '7' only.
A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence
of the decimal digits and letters 'a' (or 'A' ) to 'f' (or 'F' ) with values
10 to 15 respectively.

If the value of base is between 2 and 36, the expected form of the subject
sequence is a sequence of letters and digits representing an integer with the
radix specified by base, optionally preceded by a '+' or '-' sign, but not
including an integer suffix. The letters from 'a' (or 'A' ) to 'z' (or 'Z' )
inclusive are ascribed the values 10 to 35; only letters whose ascribed values
are less than that of base shall be permitted. If the value of base is 16,
the wide-character code representations of 0x or 0X may optionally precede the
sequence of letters and digits, following the sign if present.

The subject sequence is defined as the longest initial subsequence of the input
wide-character string, starting with the first non-white-space wide-character
code that is of the expected form. The subject sequence contains no wide-
character codes if the input wide-character string is empty or consists
entirely of white-space wide-character code, or if the first non-white-space
wide-character code is other than a sign or a permissible letter or digit.

If the subject sequence has the expected form and base is 0, the sequence of
wide-character codes starting with the first digit shall be interpreted as an
integer constant. If the subject sequence has the expected form and the value
of base is between 2 and 36, it shall be used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion shall be
negated. A pointer to the final wide-character string shall be stored in the
object pointed to by endptr, provided that endptr is not a null pointer.

In other than the C [CX]  or POSIX locales, other implementation-defined
subject sequences may be accepted.

If the subject sequence is empty or does not have the expected form, no
conversion shall be performed; the value of nptr shall be stored in the object
pointed to by endptr, provided that endptr is not a null pointer.

[CX] These functions shall not change the setting of errno if successful.

Since 0, {LONG_MIN} or {LLONG_MIN} and {LONG_MAX} or {LLONG_MAX} are returned
on error and are also valid returns on success, an application wishing to
check for error situations should set errno to 0, then call wcstol() or wcstoll(
), then check errno.

RETURN VALUE

Upon successful completion, these functions shall return the converted value,
if any. If no conversion could be performed, 0 shall be returned [CX]  and
errno may be set to indicate the error. If the correct value is outside the
range of representable values, {LONG_MIN}, {LONG_MAX}, {LLONG_MIN}, or {
LLONG_MAX} shall be returned (according to the sign of the value), and errno
set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        [CX] The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        [CX] No conversion could be performed.
*/
#define mytype LongT
#define mymin min_LongT
#define mymax max_LongT
#define over_pos WOverPos_L
#define over_neg WOverNeg_L
#define mayneg true
#define mytype_size sizeof_LongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOL_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstol"
#define model wcstol_model
#define spec wcstol_spec
#include "wstrint.seh"


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstol, wcstoll - convert a wide-character string to a long integer

SYNOPSIS

    #include <wchar.h>

    long wcstol(const wchar_t *restrict nptr, wchar_t **restrict endptr,

        int base);

    long long wcstoll(const wchar_t *restrict nptr,

    wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

These functions shall convert the initial portion of the wide-character string
pointed to by nptr to long, long long, unsigned long, and unsigned long long
representation, respectively. First, they shall decompose the input string
into three parts:

An initial, possibly empty, sequence of white-space wide-character codes (as
specified by iswspace())

A subject sequence interpreted as an integer represented in some radix
determined by the value of base

A final wide-character string of one or more unrecognized wide-character codes,
including the terminating null wide-character code of the input wide-character
string

Then they shall attempt to convert the subject sequence to an integer, and
return the result.

If base is 0, the expected form of the subject sequence is that of a decimal
constant, octal constant, or hexadecimal constant, any of which may be
preceded by a '+' or '-' sign. A decimal constant begins with a non-zero digit,
and consists of a sequence of decimal digits. An octal constant consists of
the prefix '0' optionally followed by a sequence of the digits '0' to '7' only.
A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence
of the decimal digits and letters 'a' (or 'A' ) to 'f' (or 'F' ) with values
10 to 15 respectively.

If the value of base is between 2 and 36, the expected form of the subject
sequence is a sequence of letters and digits representing an integer with the
radix specified by base, optionally preceded by a '+' or '-' sign, but not
including an integer suffix. The letters from 'a' (or 'A' ) to 'z' (or 'Z' )
inclusive are ascribed the values 10 to 35; only letters whose ascribed values
are less than that of base shall be permitted. If the value of base is 16,
the wide-character code representations of 0x or 0X may optionally precede the
sequence of letters and digits, following the sign if present.

The subject sequence is defined as the longest initial subsequence of the input
wide-character string, starting with the first non-white-space wide-character
code that is of the expected form. The subject sequence contains no wide-
character codes if the input wide-character string is empty or consists
entirely of white-space wide-character code, or if the first non-white-space
wide-character code is other than a sign or a permissible letter or digit.

If the subject sequence has the expected form and base is 0, the sequence of
wide-character codes starting with the first digit shall be interpreted as an
integer constant. If the subject sequence has the expected form and the value
of base is between 2 and 36, it shall be used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion shall be
negated. A pointer to the final wide-character string shall be stored in the
object pointed to by endptr, provided that endptr is not a null pointer.

In other than the C [CX]  or POSIX locales, other implementation-defined
subject sequences may be accepted.

If the subject sequence is empty or does not have the expected form, no
conversion shall be performed; the value of nptr shall be stored in the object
pointed to by endptr, provided that endptr is not a null pointer.

[CX] These functions shall not change the setting of errno if successful.

Since 0, {LONG_MIN} or {LLONG_MIN} and {LONG_MAX} or {LLONG_MAX} are returned
on error and are also valid returns on success, an application wishing to
check for error situations should set errno to 0, then call wcstol() or wcstoll(
), then check errno.

RETURN VALUE

Upon successful completion, these functions shall return the converted value,
if any. If no conversion could be performed, 0 shall be returned [CX]  and
errno may be set to indicate the error. If the correct value is outside the
range of representable values, {LONG_MIN}, {LONG_MAX}, {LLONG_MIN}, or {
LLONG_MAX} shall be returned (according to the sign of the value), and errno
set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        [CX] The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        [CX] No conversion could be performed.
*/
#define mytype LLongT
#define mymin min_LLongT
#define mymax max_LLongT
#define over_pos WOverPos_LL
#define over_neg WOverNeg_LL
#define mayneg true
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOLL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOLL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOLL_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoll"
#define model wcstoll_model
#define spec wcstoll_spec
#include "wstrint.seh"
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstoul, wcstoull - convert a wide-character string to an unsigned long

SYNOPSIS

    #include <wchar.h>

    unsigned long wcstoul(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

    unsigned long long wcstoull(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

The wcstoul() and wcstoull() functions shall convert the initial portion of the
wide-character string pointed to by nptr to unsigned long and unsigned long
long representation, respectively. First, they shall decompose the input wide-
character string into three parts:

An initial, possibly empty, sequence of white-space wide-character codes (as
specified by iswspace())

A subject sequence interpreted as an integer represented in some radix
determined by the value of base

A final wide-character string of one or more unrecognized wide-character codes,
including the terminating null wide-character code of the input wide-character
string

Then they shall attempt to convert the subject sequence to an unsigned integer,
and return the result.

If base is 0, the expected form of the subject sequence is that of a decimal
constant, octal constant, or hexadecimal constant, any of which may be
preceded by a '+' or '-' sign. A decimal constant begins with a non-zero digit,
and consists of a sequence of decimal digits. An octal constant consists of
the prefix '0' optionally followed by a sequence of the digits '0' to '7' only.
A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence
of the decimal digits and letters 'a' (or 'A' ) to 'f' (or 'F' ) with values
10 to 15 respectively.

If the value of base is between 2 and 36, the expected form of the subject
sequence is a sequence of letters and digits representing an integer with the
radix specified by base, optionally preceded by a '+' or '-' sign, but not
including an integer suffix. The letters from 'a' (or 'A' ) to 'z' (or 'Z' )
inclusive are ascribed the values 10 to 35; only letters whose ascribed
values are less than that of base shall be permitted. If the value of base is
16, the wide-character codes 0x or 0X may optionally precede the sequence of
letters and digits, following the sign if present.

The subject sequence is defined as the longest initial subsequence of the input
wide-character string, starting with the first wide-character code that is not
white space and is of the expected form. The subject sequence contains no wide-
character codes if the input wide-character string is empty or consists
entirely of white-space wide-character codes, or if the first wide-character
code that is not white space is other than a sign or a permissible letter or
digit.

If the subject sequence has the expected form and base is 0, the sequence of
wide-character codes starting with the first digit shall be interpreted as an
integer constant. If the subject sequence has the expected form and the value
of base is between 2 and 36, it shall be used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion shall be
negated. A pointer to the final wide-character string shall be stored in the
object pointed to by endptr, provided that endptr is not a null pointer.

In other than the C [CX]  or POSIX locales, other implementation-defined
subject sequences may be accepted.

If the subject sequence is empty or does not have the expected form, no
conversion shall be performed; the value of nptr shall be stored in the object
pointed to by endptr, provided that endptr is not a null pointer.

[CX] The wcstoul() function shall not change the setting of errno if
successful.

Since 0, {ULONG_MAX}, and {ULLONG_MAX} are returned on error and 0 is also a
valid return on success, an application wishing to check for error situations
should set errno to 0, then call wcstoul() or wcstoull(), then check errno.

RETURN VALUE

Upon successful completion, the wcstoul() and wcstoull() functions shall return
the converted value, if any. If no conversion could be performed, 0 shall be
returned [CX]  and errno may be set to indicate the error. If the correct
value is outside the range of representable values, {ULONG_MAX} or {ULLONG_MAX}
respectively shall be returned and errno set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        [CX] The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        [CX] No conversion could be performed.
*/
#define mytype ULongT
#define mymin 0
#define mymax max_ULongT
#define over_pos WOverPos_UL
#define over_neg WOverNeg_UL
#define mayneg false
#define mytype_size sizeof_LongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOUL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOUL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOUL_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoul"
#define model wcstoul_model
#define spec wcstoul_spec
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstoul, wcstoull - convert a wide-character string to an unsigned long

SYNOPSIS

    #include <wchar.h>

    unsigned long wcstoul(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

    unsigned long long wcstoull(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

The wcstoul() and wcstoull() functions shall convert the initial portion of the
wide-character string pointed to by nptr to unsigned long and unsigned long
long representation, respectively. First, they shall decompose the input wide-
character string into three parts:

An initial, possibly empty, sequence of white-space wide-character codes (as
specified by iswspace())

A subject sequence interpreted as an integer represented in some radix
determined by the value of base

A final wide-character string of one or more unrecognized wide-character codes,
including the terminating null wide-character code of the input wide-character
string

Then they shall attempt to convert the subject sequence to an unsigned integer,
and return the result.

If base is 0, the expected form of the subject sequence is that of a decimal
constant, octal constant, or hexadecimal constant, any of which may be
preceded by a '+' or '-' sign. A decimal constant begins with a non-zero digit,
and consists of a sequence of decimal digits. An octal constant consists of
the prefix '0' optionally followed by a sequence of the digits '0' to '7' only.
A hexadecimal constant consists of the prefix 0x or 0X followed by a sequence
of the decimal digits and letters 'a' (or 'A' ) to 'f' (or 'F' ) with values
10 to 15 respectively.

If the value of base is between 2 and 36, the expected form of the subject
sequence is a sequence of letters and digits representing an integer with the
radix specified by base, optionally preceded by a '+' or '-' sign, but not
including an integer suffix. The letters from 'a' (or 'A' ) to 'z' (or 'Z' )
inclusive are ascribed the values 10 to 35; only letters whose ascribed
values are less than that of base shall be permitted. If the value of base is
16, the wide-character codes 0x or 0X may optionally precede the sequence of
letters and digits, following the sign if present.

The subject sequence is defined as the longest initial subsequence of the input
wide-character string, starting with the first wide-character code that is not
white space and is of the expected form. The subject sequence contains no wide-
character codes if the input wide-character string is empty or consists
entirely of white-space wide-character codes, or if the first wide-character
code that is not white space is other than a sign or a permissible letter or
digit.

If the subject sequence has the expected form and base is 0, the sequence of
wide-character codes starting with the first digit shall be interpreted as an
integer constant. If the subject sequence has the expected form and the value
of base is between 2 and 36, it shall be used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion shall be
negated. A pointer to the final wide-character string shall be stored in the
object pointed to by endptr, provided that endptr is not a null pointer.

In other than the C [CX]  or POSIX locales, other implementation-defined
subject sequences may be accepted.

If the subject sequence is empty or does not have the expected form, no
conversion shall be performed; the value of nptr shall be stored in the object
pointed to by endptr, provided that endptr is not a null pointer.

[CX] The wcstoul() function shall not change the setting of errno if
successful.

Since 0, {ULONG_MAX}, and {ULLONG_MAX} are returned on error and 0 is also a
valid return on success, an application wishing to check for error situations
should set errno to 0, then call wcstoul() or wcstoull(), then check errno.

RETURN VALUE

Upon successful completion, the wcstoul() and wcstoull() functions shall return
the converted value, if any. If no conversion could be performed, 0 shall be
returned [CX]  and errno may be set to indicate the error. If the correct
value is outside the range of representable values, {ULONG_MAX} or {ULLONG_MAX}
respectively shall be returned and errno set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        [CX] The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        [CX] No conversion could be performed.
*/
#define mytype ULLongT
#define mymin 0
#define mymax max_ULLongT
#define over_pos WOverPos_ULL
#define over_neg WOverNeg_ULL
#define mayneg false
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOULL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOULL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOULL_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoull"
#define model wcstoull_model
#define spec wcstoull_spec
#include "wstrint.seh"
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    __wcstol_internal

Name

    __wcstol_internal -- underlying function for wcstol

Synopsis

    long __wcstol_internal(const wchar_t * nptr, wchar_t * * endptr, int base,
        int group);

Description

    group shall be 0 or the behavior of __wcstol_internal() is undefined.

    __wcstol_internal(nptr, endptr, base, 0) shall behave as wcstol(nptr,
    endptr, base) as specified by ISO POSIX (2003).

    __wcstol_internal() is not in the source standard; it is only in the binary
    standard.
*/
#define mytype LongT
#define mymin min_LongT
#define mymax max_LongT
#define over_pos WOverPos_LI
#define over_neg WOverNeg_LI
#define mayneg true
#define mytype_size sizeof_LongT
#define a_name "__wcstol_internal"
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES LSB___WCSTOL_INTERNAL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL LSB___WCSTOL_INTERNAL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL LSB___WCSTOL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL
#define model __wcstol_internal_model
#define spec __wcstol_internal_spec
#define ParameterGroupExists
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    __wcstoul_internal

Name

    __wcstoul_internal -- underlying function for wcstol

Synopsis

    long __wcstoul_internal(const wchar_t * nptr, wchar_t * * endptr, int base,
        int group);

Description

    group shall be 0 or the behavior of __wcstoul_internal() is undefined.

    __wcstoul_internal(nptr, endptr, base, 0) shall behave as wcstoul(nptr,
    endptr, base) as specified by ISO POSIX (2003).

    __wcstoul_internal() is not in the source standard; it is only in the
    binary standard.
*/

#define mytype ULongT
#define mymin 0
#define mymax max_ULongT
#define over_pos WOverPos_ULI
#define over_neg WOverNeg_ULI
#define mayneg false
#define mytype_size sizeof_LongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES LSB___WCSTOUL_INTERNAL_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL LSB___WCSTOUL_INTERNAL_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL LSB___WCSTOUL_INTERNAL_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "__wcstoul_internal"
#define model __wcstoul_internal_model
#define spec __wcstoul_internal_spec
#define ParameterGroupExists
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstoimax, wcstoumax - convert a wide-character string to an integer type

SYNOPSIS

    #include <stddef.h>

    #include <inttypes.h>

    intmax_t wcstoimax(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

    uintmax_t wcstoumax(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

These functions shall be equivalent to the wcstol(), wcstoll(), wcstoul(), and
wcstoull() functions, respectively, except that the initial portion of the wide
string shall be converted to intmax_t and uintmax_t representation,
respectively.

RETURN VALUE

These functions shall return the converted value, if any.

If no conversion could be performed, zero shall be returned. If the correct
value is outside the range of representable values, {INTMAX_MAX}, {INTMAX_MIN},
or {UINTMAX_MAX} shall be returned (according to the return type and sign of
the value, if any), and errno shall be set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        No conversion could be performed.
*/
#define mytype IntMaxT
#define mymin min_IntMaxT
#define mymax max_IntMaxT
#define over_pos WOverPos_IM
#define over_neg WOverNeg_IM
#define mayneg true
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOIMAX_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOIMAX_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOIMAX_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoimax"
#define model wcstoimax_model
#define spec wcstoimax_spec
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    wcstoq -- convert wide string to long long int representation

SYNOPSIS

    #include <wchar.h>

    long long int wcstoq(const wchar_t * restrict nptr,
    wchar_t ** restrict endptr, int base);

DESCRIPTION

    The wcstoq() function shall convert the initial portion of the wide string
    nptr to long long int representation. It is identical to wcstoll().

RETURN VALUE

    Refer to wcstoll().

ERRORS

    Refer to wcstoll().
*/

#define mytype LLongT
#define mymin min_LLongT
#define mymax max_LLongT
#define over_pos WOverPos_Q
#define over_neg WOverNeg_Q
#define mayneg true
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES LSB_WCSTOQ_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL LSB_WCSTOQ_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL LSB_WCSTOQ_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoq"
#define model wcstoq_model
#define spec wcstoq_spec
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    wcstoimax, wcstoumax - convert a wide-character string to an integer type

SYNOPSIS

    #include <stddef.h>

    #include <inttypes.h>

    intmax_t wcstoimax(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

    uintmax_t wcstoumax(const wchar_t *restrict nptr,

        wchar_t **restrict endptr, int base);

DESCRIPTION

[CX] The functionality described on this reference page is aligned with the
ISO C standard. Any conflict between the requirements described here and the
ISO C standard is unintentional. This volume of IEEE Std 1003.1-2001 defers to
the ISO C standard.

These functions shall be equivalent to the wcstol(), wcstoll(), wcstoul(), and
wcstoull() functions, respectively, except that the initial portion of the wide
string shall be converted to intmax_t and uintmax_t representation,
respectively.

RETURN VALUE

These functions shall return the converted value, if any.

If no conversion could be performed, zero shall be returned. If the correct
value is outside the range of representable values, {INTMAX_MAX}, {INTMAX_MIN},
or {UINTMAX_MAX} shall be returned (according to the return type and sign of
the value, if any), and errno shall be set to [ERANGE].

ERRORS

    These functions shall fail if:

    [EINVAL]

        The value of base is not supported.

    [ERANGE]

        The value to be returned is not representable.

    These functions may fail if:

    [EINVAL]

        No conversion could be performed.
*/
#define mytype UIntMaxT
#define mymin 0
#define mymax max_UIntMaxT
#define over_pos WOverPos_UIM
#define over_neg WOverNeg_UIM
#define mayneg false
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES POSIX_WCSTOUMAX_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL POSIX_WCSTOUMAX_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL POSIX_WCSTOUMAX_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstoumax"
#define model wcstoumax_model
#define spec wcstoumax_spec
#include "wstrint.seh"

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    wcstouq -- convert wide string to unsigned long long int representation

SYNOPSIS

    #include <wchar.h>

    unsigned long long wcstouq(const wchar_t * restrict nptr, wchar_t **
    restrict endptr, int base);

DESCRIPTION

    The wcstouq() function shall convert the initial portion of the wide string
    nptr to unsigned long long int representation. It is identical to
    wcstoull().

RETURN VALUE

    Refer to wcstoull().

ERRORS

    Refer to wcstoull().
*/
#define mytype ULLongT
#define mymin 0
#define mymax max_ULLongT
#define over_pos WOverPos_UQ
#define over_neg WOverNeg_UQ
#define mayneg false
#define mytype_size sizeof_LLongT
#define FUNC_ERR_ID_HAS_EXTRA_ERROR_CODES LSB_WCSTOUQ_HAS_EXTRA_ERROR_CODES
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_ERANGE LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_ERANGE
#define FUNC_ERR_ID_FAILS_WITH_EINVAL LSB_WCSTOUQ_FAILS_WITH_EINVAL
#define FUNC_ERR_ID_HAS_EXTRA_CONDITION_ON_EINVAL LSB_WCSTOUQ_HAS_EXTRA_CONDITION_ON_EINVAL
#define a_name "wcstouq"
#define model wcstouq_model
#define spec wcstouq_spec
#include "wstrint.seh"

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isEINVAL_wcstoll(IntT base)
{
    return !(base>=0 && base<=36 && base!=1);
}

bool isWideSpace(WCharT ch)
{
    return ch==(WCharT)' ' || ch==(WCharT)'\t' || ch==(WCharT)'\n';
}

bool firstCharNotMatch_wcstol(WCharT wch, IntT base)
{
    CharT ch=tolower((CharT)wch);//??

    DUMP("ch==%c\n", ch);

    return  isalpha(ch) && ch-'a'>=base
        ||  ch>='0' && ch<='9' && ch-'0'>=base && base!=0;
}

IntT dec2Int_WCharT(WCharT wch)
{
    return wch>=(WCharT)'0' && wch<=(WCharT)'9' ? ((CharT)wch)-'0'
        :  -1;
}

IntT oct2Int_WCharT(WCharT wch)
{
    return wch>=(WCharT)'0' && wch<=(WCharT)'7' ? ((CharT)wch)-'0'
        :  -1;
}

IntT hex2Int_WCharT(WCharT wch)
{
    return wch>=(WCharT)'0' && wch<=(WCharT)'9' ? ((CharT)wch)-'0'
        :  wch>=(WCharT)'a' && wch<=(WCharT)'f' ? ((CharT)wch)-'a'+10
        :  wch>=(WCharT)'A' && wch<=(WCharT)'F' ? ((CharT)wch)-'A'+10
        :  -1;
}

IntT other2Int_WCharT(WCharT wch)
{
    return wch>=(WCharT)'0' && wch<=(WCharT)'9' ? ((CharT)wch)-'0'
        :  wch>=(WCharT)'a' && wch<=(WCharT)'z' ? ((CharT)wch)-'a'+10
        :  wch>=(WCharT)'A' && wch<=(WCharT)'Z' ? ((CharT)wch)-'A'+10
        :  -1;
}
