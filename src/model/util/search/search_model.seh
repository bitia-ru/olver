/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_SEARCH_MODEL_SEH
#define UTIL_SEARCH_MODEL_SEH

#include "common/common_model.seh"
#include <atl/multiset.h>

invariant typedef List CByteArrayList;

/********************************************************************/
/**                      Defines                                   **/
/********************************************************************/

#define C_EVENNESS(number) \
    coverage C_EVENNESS \
    { \
        if ( ((unsigned)(number))&0x1 != 0) \
        { \
            return { OddNumberElements, "Array includes odd amount of elements"}; \
        } else { \
            return { EvenNumberElements, "Array includes even amount of elements"}; \
        } \
    }

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** bsearch_spec **/
specification
SizeT bsearch_spec(CallContext context, CByteArray* key, CByteArrayList* base,
                   SizeT nel, SizeT width)
    reads base, key;

/** lfind_spec **/
specification
bool lfind_spec(CallContext context, CByteArray* key, CByteArrayList* base,
                SizeT *nelp, SizeT width, SizeT * index)
    reads base, key, *nelp;

/** lsearch_spec **/
specification
bool lsearch_spec(CallContext context, CByteArray* key, CByteArrayList* base,
                  SizeT *nelp, SizeT width, SizeT * index)
    reads key
    updates base, *nelp;

/** qsort_spec **/
specification
void qsort_spec(CallContext context, CByteArrayList* base, SizeT nel, SizeT width)
    updates base;

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
MultiSet* toMultiSet_List(List* list);
bool check_PartSort(CByteArray* key, CByteArrayList* base, SizeT nel, SizeT* equals);
bool check_Sort(CByteArrayList* base, SizeT nel);
int number_Uniques(CByteArrayList* base, SizeT nel);
bool check_Sizes(CByteArrayList* base);
unsigned int count_CByteArrayList(CByteArray* key, CByteArrayList* base, SizeT *nelp);
bool is_IndexOfFirstElem(CByteArray* key, CByteArrayList* base, SizeT *nelp, SizeT index);
CByteArrayList* create_CByteArrayList(void);

#endif
