/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_SEARCH_QUEUE_MEDIA_SEH
#define UTIL_SEARCH_QUEUE_MEDIA_SEH

#include "util/search/queue_model.seh"

#include <atl/list.h>


/* 
    Model queue state is refreshed every time the queue related functions are 
    called. These parameters are used to control the amount of the elements 
    being refreshed. r_adv is the number of refreshed elements to the right and 
    l_adv to the left from the element that is worked with. 
*/

extern size_t r_adv; //has to be greater than 0
extern size_t l_adv; //has to be greater than 0

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilSearchQueueSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

void registerObjectInMemoryD( VoidTPtr ptr, SizeT size, Object* data );

/** insque_spec **/
mediator insque_media for specification
void insque_spec(CallContext context, VoidTPtr element, QueueElementPtr pred);

/** remque_spec **/
mediator remque_media for specification
void remque_spec(CallContext context, QueueElementPtr element);

mediator create_circular_queue_media for specification
void create_circular_queue_spec(CallContext context, VoidTPtr element);

mediator create_linear_queue_media for specification
void create_linear_queue_spec(CallContext context, VoidTPtr element);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

void updateModelQueue(CallContext context, QueueElementPtr pred, int l, int r);
QueueElement* read_QueueElement(CallContext context, VoidTPtr element);

#endif

