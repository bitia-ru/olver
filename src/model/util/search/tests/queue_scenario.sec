/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/search/tests/queue_scenario.seh"
#include "util/search/queue_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "util/search/queue_config.h"
#include <atl/integer.h>


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/



/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;
static CallContext context1;
static CallContext context2;

/* should be bigger than 5*/
#define QUEUE_ELEM_NUMBER 10

static int maxSize = 32800;
static VoidTPtr src;
static QueueElementPtr queue_elems[QUEUE_ELEM_NUMBER];
static bool firstRun=true;

/* 
 Accounts for the method of queue creation. If QueueCreationFlag equals to 0
 queues are created according to LSB specification by insque method otherwise they 
 are created by create_linear_queue_spec. This flag is needed because  many 
 implementation of Linux violate standard and do not allow to create linear 
 queue by means of passing null second argument to insque function.
 
 The bug is fixed in the glibc CVS.
 See http://sources.redhat.com/bugzilla/show_bug.cgi?id=2766.
*/

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_queue_scenario(int argc, char** argv)
{
    // Init test scenario data
    int i, offset;

    if(firstRun)
    {
        context1 = createProcess();
        context2 = createProcess();
        context = context1;
    }
    else
    {
        context = context2;
    }
    offset = 2 * (int)sizeof_VoidTPtr;

    src = allocateMemoryBlock(context, maxSize);

    if(isNULL_VoidTPtr(src)) return false;

    for(i = 0; i < QUEUE_ELEM_NUMBER; i++)
    {
        queue_elems[i] = add_VoidTPtr(src, i*offset);
    }

    return true;
}

static void finish_queue_scenario(void)
{
    deallocateMemoryBlock(context, src);
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/


scenario
bool linear_queue_scen()
{
    int i = 0;
    
    if(QueueCreationFlag)
    {
        create_linear_queue_spec(context, queue_elems[0]);
    }
    else
    {
        insque_spec(context, queue_elems[0], NULL_VoidTPtr);
    }

    if(getQueueElement(queue_elems[0]) != NULL)
    {
    
        for(i = 1; i < QUEUE_ELEM_NUMBER; i++)
        {
            insque_spec(context, queue_elems[i], queue_elems[0]);
        }

        for(i = 1; i < QUEUE_ELEM_NUMBER; i++)
        {
            remque_spec(context, queue_elems[i]);
        }

        insque_spec(context, queue_elems[1], queue_elems[0]);
        insque_spec(context, queue_elems[2], queue_elems[0]);
        insque_spec(context, queue_elems[3], queue_elems[1]);
        insque_spec(context, queue_elems[4], queue_elems[1]);

        remque_spec(context, queue_elems[2]);
        remque_spec(context, queue_elems[3]);
        remque_spec(context, queue_elems[4]);
        remque_spec(context, queue_elems[0]);
        remque_spec(context, queue_elems[1]);
    }

    return true;
}

scenario
bool circular_queue_scen()
{
    int i;
    create_circular_queue_spec(context, queue_elems[0]);
    
    for(i=1;i<QUEUE_ELEM_NUMBER;i++)
    {
        insque_spec(context, queue_elems[i], queue_elems[0]);
    }

    for(i=1;i<QUEUE_ELEM_NUMBER;i++)
    {
        remque_spec(context, queue_elems[i]);
    }
    
    insque_spec(context,queue_elems[1],queue_elems[0]);
    
    insque_spec(context,queue_elems[2],queue_elems[0]);
    insque_spec(context,queue_elems[3],queue_elems[1]);
    insque_spec(context,queue_elems[4],queue_elems[1]);

    remque_spec(context, queue_elems[0]);
    remque_spec(context, queue_elems[2]);
    remque_spec(context, queue_elems[1]);
    remque_spec(context, queue_elems[3]);
    remque_spec(context, queue_elems[4]);

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm queue_scenario =
{
    .init = init_queue_scenario,
    .finish = finish_queue_scenario,
    .actions = {
        linear_queue_scen,
        circular_queue_scen,
        NULL
    }
};

bool main_util_search_queue(int argc, char** argv)
{
    bool verdict;
    
    QueueCreationFlag = 0;
    firstRun = true;
    verdict = queue_scenario(argc,argv);

    // See http://sources.redhat.com/bugzilla/show_bug.cgi?id=2766.
    if (!verdict)
    {
        QueueCreationFlag = 1;
        firstRun = false;
        queue_scenario(argc,argv);
    }

    return verdict;
}

#ifdef UTIL_SEARCH_QUEUE_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/search/queue_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilSearchQueueSubsystem();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");

    // Run test scenario
    main_util_search_queue(argc, argv) == 0 ? verbose("FAIL\n") : verbose("PASS\n");

    //  unloadSUT();
    return 0;
}

#endif
