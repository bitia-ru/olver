/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_SEARCH_TREE_MODEL_SEH
#define UTIL_SEARCH_TREE_MODEL_SEH

#include "common/common_model.seh"
#include "common/tree.seh"



/********************************************************************/
/**             Model Representation of Binary Search Tree         **/
/********************************************************************/

typedef VoidTPtr SearchTreePtr;

specification typedef struct SearchTree
{
    SearchTreePtr   address;
    Set*            data;   // SearchTreeNode-set
    Tree*           tree;   // SearchTreeNode-tree
} SearchTree;

SearchTree* create_SearchTree(SearchTreePtr address);
SearchTree* getSearchTree(SearchTreePtr address);

/********************************************************************/
/**           Model Representation of Binary Search Tree Node      **/
/********************************************************************/

typedef VoidTPtr    SearchTreeNodePtr;
specification typedef struct SearchTreeNode
{
    SearchTreeNodePtr   address;
    VoidTPtr            data;
} SearchTreeNode;

SearchTreeNode* create_SearchTreeNode(SearchTreeNodePtr address, VoidTPtr key);

/********************************************************************/
/**           Model Representation of Binary Search Callbacks      **/
/********************************************************************/

specification typedef struct TreeNodeCompareCall
{
    VoidTPtr        node;
    VoidTPtr        key;
} TreeNodeCompareCall;

TreeNodeCompareCall* create_TreeNodeCompareCall(VoidTPtr node, VoidTPtr key);


specification typedef struct TreeNodeFunctionResult
{
    List*           compare_calls; // TreeNodeCompareCall-list
    SearchTreeNode* returned_value;
    SearchTreePtr   returned_proot;
} TreeNodeFunctionResult;

TreeNodeFunctionResult* create_TreeNodeFunctionResult(List* compare_calls,
            SearchTreeNode *returned_value, SearchTreePtr returned_root);

typedef
enum TreeVisitT {
    SUT_preorder,
    SUT_postorder,
    SUT_endorder,
    SUT_leaf
} TreeVisitT;

specification typedef struct TreeVisitCall
{
    SearchTreeNode  *node;
    TreeVisitT      visit;
    IntT            level;
} TreeVisitCall;

TreeVisitCall* create_TreeVisitCall(SearchTreeNode *node, TreeVisitT visit,
                                    IntT level);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** tdelete_spec **/
specification
TreeNodeFunctionResult* tdelete_spec( CallContext context, VoidTPtr key,
                                     SearchTreePtr rootp );

/** tfind_spec **/
specification
TreeNodeFunctionResult* tfind_spec( CallContext context, VoidTPtr key,
                                   SearchTreePtr rootp );

/** tsearch_spec **/
specification
TreeNodeFunctionResult* tsearch_spec( CallContext context, VoidTPtr key,
                                     SearchTreePtr rootp );

/** twalk_spec **/
specification
List* twalk_spec( CallContext context, SearchTreePtr rootp,
                 SearchTreeNodePtr root );


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isTreeRoot(SearchTreePtr treeptr, Tree* tree );
bool isNodeExists( VoidTPtr key, SearchTreePtr rootp);
TreeNode* findTreeNode(VoidTPtr key, SearchTreePtr rootp, SearchTree* tree );
SearchTreePtr getNodeParent( VoidTPtr key, SearchTreePtr rootp,
                            SearchTree* stree );
bool isValidTrace(TreeNodeFunctionResult* result,  SearchTreePtr rootp,
                  VoidTPtr key, bool isTFind);
int getNumChildren(VoidTPtr key, SearchTreePtr rootp, SearchTree* tree);
bool isKeyTreeRoot(VoidTPtr key, SearchTreePtr rootp, SearchTree* tree);
bool isNodeInTree(SearchTreePtr rootp, SearchTree* stree);

SearchTreeNode* getNodeByAddress(SearchTree *tree, SearchTreeNodePtr address);
SearchTreeNode* getNodeByKey(SearchTree *tree, VoidTPtr key);

bool addCallToList(TreeNode* curNode, TreeVisitT visit, List* lst, Tree* tree,
                   IntT offset);
void buildTreeVisits(Tree* tree, TreeNode* curNode, List* lst, IntT offset);
bool compareLists(List* builtList, List* visList);
bool isValidVisits(List* visList, SearchTree* tree, Tree* clonedTree,
                   SearchTreeNodePtr rootp);
TreeNode* search_Tree(TreeNode* tree, SearchTreeNode* tag);

#endif

