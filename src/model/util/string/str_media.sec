/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/str_media.seh"
#include "common/common_media.seh"

#include "memory/heap/heap_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilStringStrSubsystem(void)
{
    // Set up mediators
    set_mediator___stpcpy_spec(__stpcpy_media);
    set_mediator___strdup_spec(__strdup_media);
    set_mediator_rindex_spec(rindex_media);
    set_mediator_stpcpy_spec(stpcpy_media);
    set_mediator_stpncpy_spec(stpncpy_media);
    set_mediator_strcat_spec(strcat_media);
    set_mediator_index_spec(index_media);
    set_mediator_strchr_spec(strchr_media);
    set_mediator_strcmp_spec(strcmp_media);
    set_mediator_strcpy_spec(strcpy_media);
    set_mediator_strcspn_spec(strcspn_media);
    set_mediator_strdup_spec(strdup_media);
    set_mediator_strlen_spec(strlen_media);
    set_mediator_strncat_spec(strncat_media);
    set_mediator_strncmp_spec(strncmp_media);
    set_mediator_strncpy_spec(strncpy_media);
    set_mediator_strndup_spec(strndup_media);
    set_mediator_strnlen_spec(strnlen_media);
    set_mediator_strpbrk_spec(strpbrk_media);
    set_mediator_strrchr_spec(strrchr_media);
    set_mediator_strspn_spec(strspn_media);
    set_mediator_strstr_spec(strstr_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __stpcpy_spec **/
mediator __stpcpy_media for specification
StringTPtr __stpcpy_spec(CallContext context, StringTPtr dest, StringTPtr src)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "__stpcpy:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(dest),
                                    create_VoidTPtrObj(src)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** __strdup_spec **/
mediator __strdup_media for specification
StringTPtr __strdup_spec(CallContext context, StringTPtr s1, ErrorCode* errno)
{
    SizeT len = length_CString(readCString_VoidTPtr(s1)) + 1;
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "__strdup:$(ptr)",
                                    create_VoidTPtrObj(s1)
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response); 
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onMalloc(context, len, __strdup_spec);
    }

}

/** rindex_spec **/
mediator rindex_media for specification
StringTPtr rindex_spec(CallContext context, StringTPtr s, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "rindex:$(ptr)$(int)",
                                    create_VoidTPtrObj(s),
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** stpcpy_spec **/
mediator stpcpy_media for specification
StringTPtr stpcpy_spec(CallContext context, StringTPtr dest, StringTPtr src)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "stpcpy:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(dest),
                                    create_VoidTPtrObj(src)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** stpncpy_spec **/
mediator stpncpy_media for specification
StringTPtr stpncpy_spec(CallContext context, StringTPtr dest, StringTPtr src, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "stpncpy:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(dest),
                                    create_VoidTPtrObj(src),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** strcat_spec **/
mediator strcat_media for specification
StringTPtr strcat_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strcat:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** index_spec **/
mediator index_media for specification
StringTPtr index_spec(CallContext context, StringTPtr s, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "index:$(ptr)$(int)",
                                    create_VoidTPtrObj(s),
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** strchr_spec **/
mediator strchr_media for specification
StringTPtr strchr_spec(CallContext context, StringTPtr s, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strchr:$(ptr)$(int)",
                                    create_VoidTPtrObj(s),
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** strcmp_spec **/
mediator strcmp_media for specification
IntT strcmp_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
  call
  {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "strcmp:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
  }
}

/** strcpy_spec **/
mediator strcpy_media for specification
StringTPtr strcpy_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strcpy:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strcspn_spec **/
mediator strcspn_media for specification
SizeT strcspn_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res = 0;

        format_TSCommand(&command, "strcspn:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        } 

        destroy_TSCommand(&command);

        return res;
    }
}

/** strdup_spec **/
mediator strdup_media for specification
StringTPtr strdup_spec(CallContext context, StringTPtr s1, ErrorCode* errno)
{
    SizeT len = length_CString(readCString_VoidTPtr(s1)) + 1;
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;
        
        format_TSCommand(&command, "strdup:$(ptr)",
                                    create_VoidTPtrObj(s1)
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onMalloc(context, len, strdup_spec);
    }
}


/** strlen_spec **/
mediator strlen_media for specification
SizeT strlen_spec(CallContext context, StringTPtr s)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res;  

        format_TSCommand(&command, "strlen:$(ptr)",
                                    create_VoidTPtrObj(s)
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strncat_spec **/
mediator strncat_media for specification
StringTPtr strncat_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strncat:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strncmp_spec **/
mediator strncmp_media for specification
IntT strncmp_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "strncmp:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strncpy_spec **/
mediator strncpy_media for specification
StringTPtr strncpy_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strncpy:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strndup_spec **/
mediator strndup_media for specification
StringTPtr strndup_spec(CallContext context, StringTPtr s, SizeT n, ErrorCode* errno)
{
    SizeT len = length_CString(readLimitedCString_VoidTPtr(s, n));

    if (len < n)
       len++;

    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strndup:$(ptr)$(size)",
                                    create_VoidTPtrObj(s),
                                    create_SizeTObj(n)
                            
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onMalloc(context, len, strndup_spec);
    }

}


mediator strnlen_media for specification
SizeT strnlen_spec(CallContext context, StringTPtr s, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res;
        format_TSCommand(&command, "strnlen:$(ptr)$(size)",
                                    create_VoidTPtrObj(s),
                                    create_SizeTObj(n)
            );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        return res;
    }
}


/** strpbrk_spec **/
mediator strpbrk_media for specification
StringTPtr strpbrk_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strpbrk:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** strrchr_spec **/

mediator strrchr_media for specification
StringTPtr strrchr_spec(CallContext context, StringTPtr s, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strrchr:$(ptr)$(int)",
                                    create_VoidTPtrObj(s),
                                    create_IntTObj(c)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strspn_spec **/
mediator strspn_media for specification
SizeT strspn_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res = 0;

        format_TSCommand(&command, "strspn:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** strstr_spec **/
mediator strstr_media for specification
StringTPtr strstr_spec(CallContext context, StringTPtr s1, StringTPtr s2)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "strstr:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(s1),
                                    create_VoidTPtrObj(s2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}



