/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/wcasecmp_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilStringWcasecmpSubsystem(void)
{
  // Set up mediators
    set_mediator_wcscasecmp_spec(wcscasecmp_media);
    set_mediator_wcsncasecmp_spec(wcsncasecmp_media);

    // Set up formatters
    registerTSFormatter("wstr", (TSFormatterFuncType)wstring_formatter);

}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** wcscasecmp_spec **/
mediator wcscasecmp_media for specification
IntT wcscasecmp_spec( CallContext context, WString* s1, WString* s2)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "wcscasecmp:$(wstr)$(wstr)", s1, s2 );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}


/** wcsncasecmp_spec **/
mediator wcsncasecmp_media for specification
IntT wcsncasecmp_spec( CallContext context, WString* s1, WString* s2, SizeT n)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "wcsncasecmp:$(wstr)$(wstr)$(size)", s1, s2, create_SizeTObj(n) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res = readInt_TSStream(&command.response);

        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}



