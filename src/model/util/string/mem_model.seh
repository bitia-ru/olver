/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_STRING_MEM_MODEL_SEH
#define UTIL_STRING_MEM_MODEL_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                       Interface Functions                      **/
/********************************************************************/

/** __mempcpy_spec **/
specification
VoidTPtr __mempcpy_spec( CallContext context, VoidTPtr dest, VoidTPtr src,
                            SizeT n );


/** __rawmemchr_spec **/
specification
VoidTPtr __rawmemchr_spec(CallContext context, VoidTPtr s, IntT c);


/** bcmp_spec **/
specification
IntT bcmp_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n );


/** bcopy_spec **/
specification
void bcopy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n );

/** bzero_spec **/
specification
void bzero_spec(CallContext context, VoidTPtr s, SizeT n );

/** memccpy_spec **/
specification
VoidTPtr memccpy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, IntT c,
                        SizeT n );

/** memchr_spec **/
specification
VoidTPtr memchr_spec(CallContext context, VoidTPtr s, IntT c, SizeT n );
VoidTPtr memchr_model(VoidTPtr s, IntT c, SizeT n);

/** memcmp_spec **/
specification
IntT memcmp_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n );
IntT memcmp_model(VoidTPtr s1, VoidTPtr s2, SizeT n, IntT* signedDiff );

/** memcpy_spec **/
specification
VoidTPtr memcpy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n );

/** memmem_spec **/
specification 
VoidTPtr memmem_spec(   CallContext context, VoidTPtr haystack,
                        SizeT haystacklen, VoidTPtr needle, SizeT needlelen);
VoidTPtr memmem_model( VoidTPtr haystack, SizeT haystacklen, VoidTPtr needle,
                        SizeT needlelen );


/** memmove_spec **/
specification
VoidTPtr memmove_spec( CallContext context, VoidTPtr s1, VoidTPtr s2,
                        SizeT n );

/** memrchr_spec **/
specification
VoidTPtr memrchr_spec(CallContext context, VoidTPtr s, IntT c, SizeT n );
VoidTPtr memrchr_model(VoidTPtr s, IntT c, SizeT n);

/** memset_spec **/
specification
VoidTPtr memset_spec(CallContext context, VoidTPtr s, IntT c, SizeT n );

/** swab_spec **/
specification
void swab_spec(CallContext context, VoidTPtr src, VoidTPtr dest,
                SSizeT nbytes );

/********************************************************************/
/**                      Helper Functions                          **/
/********************************************************************/

SizeT countArrayChars(VoidTPtr s, IntT c,  SizeT n);
bool isExchangedBytes(VoidTPtr src, VoidTPtr dest, SSizeT n);

#endif

