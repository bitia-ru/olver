/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/casecmp_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilStringCasecmpSubsystem(void)
{
  // Set up mediators
    set_mediator_strcasecmp_spec(strcasecmp_media);
    set_mediator_strcasestr_spec(strcasestr_media);
    set_mediator_strncasecmp_spec(strncasecmp_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** strcasecmp_spec **/
mediator strcasecmp_media for specification
IntT strcasecmp_spec( CallContext context, CString* s1, CString* s2)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "strcasecmp:$(str)$(str)", s1, s2);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res = readInt_TSStream(&command.response);

        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


/** strcasestr_spec **/
mediator strcasestr_media for specification
IntT strcasestr_spec( CallContext context, CString* s1, CString* s2)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "strcasestr:$(str)$(str)", s1, s2);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             

            res = readInt_TSStream(&command.response);

        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


/** strncasecmp_spec **/
mediator strncasecmp_media for specification
IntT strncasecmp_spec( CallContext context, CString* s1, CString* s2, SizeT n)
{
    call
    {
        IntT res;
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "strncasecmp:$(str)$(str)$(size)", s1, s2, create_SizeTObj(n));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
             
            
            res = readInt_TSStream(&command.response);
            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


