/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "util/string/casecmp_model.seh"


#pragma SEC subsystem string "util.string"



/*
   The group of functions 'util.string.casecmp' consists of:
       strcasecmp [2]
       strcasestr [1]
       strncasecmp [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    strcasecmp, strncasecmp - case-insensitive string comparisons

SYNOPSIS

    [XSI]  #include <strings.h>
    int strcasecmp(const char *s1, const char *s2);
    int strncasecmp(const char *s1, const char *s2, size_t n);

DESCRIPTION

    The strcasecmp() function shall compare, while ignoring differences in
    case, the string pointed to by s1 to the string pointed to by s2. The
    strncasecmp() function shall compare, while ignoring differences in case,
    not more than n bytes from the string pointed to by s1 to the string
    pointed to by s2.

    In the POSIX locale, strcasecmp() and strncasecmp() shall behave as if the
    strings had been converted to lowercase and then a byte comparison
    performed. The results are unspecified in other locales.

RETURN VALUE

    Upon completion, strcasecmp() shall return an integer greater than, equal
    to, or less than 0, if the string pointed to by s1 is, ignoring case,
    greater than, equal to, or less than the string pointed to by s2,
    respectively.

    Upon successful completion, strncasecmp() shall return an integer greater
    than, equal to, or less than 0, if the possibly null-terminated array
    pointed to by s1 is, ignoring case, greater than, equal to, or less than
    the possibly null-terminated array pointed to by s2, respectively.

ERRORS

    No errors are defined.
*/
specification
IntT strcasecmp_spec( CallContext context, CString* s1, CString* s2)
{
    pre
    {
        return true;
    }
    post
    {
        CString* lower1 = toLowerCase_POSIX(s1);
        CString* lower2 = toLowerCase_POSIX(s2);
        IntT     compRes = compare(lower1, lower2);


        /*
        * Upon completion, strcasecmp() shall return an integer greater than, equal to,
        * or less than 0, if the string pointed to by s1 is, ignoring case, greater than,
        * equal to, or less than the string pointed to by s2, respectively.
        */
        /*
        * In the POSIX locale, strcasecmp() and strncasecmp() shall behave as if the
        * strings had been converted to lowercase and then a byte comparison performed.
        */
        REQ("strcasecmp.04;strcasecmp.02", "Compare result shall be valid", (compRes*strcasecmp_spec >0)
            || (compRes == 0 && strcasecmp_spec == 0));


      
        return true;
    }
}

IntT strncasecmp_model(CString* str1, CString* str2, SizeT n)
{
    int i;
    bool confined = false;

    CString* s1;
    CString* s2;

    SizeT len1 = length_CString(str1);
    SizeT len2 = length_CString(str2);

    SizeT len = len2 > len1 ? len1 : len2;

    if(len >= n)
    {
        confined = true;
        len = n;
    }


    /*
     * In the POSIX locale, strcasecmp() and strncasecmp() shall behave as if the
     * strings had been converted to lowercase and then a byte comparison performed.
     */
    IMPLEMENT_REQ("strncasecmp.02");

    s1 = toLowerCase_POSIX(str1);
    s2 = toLowerCase_POSIX(str2);


    for(i = 0; i < len; i++)
    {
        UCharT c1 = (UCharT)charAt_CString(s1, i);
        UCharT c2 = (UCharT)charAt_CString(s2, i);

        /*
         * The strncasecmp() function shall compare, while ignoring differences in case,
         * not more than n bytes from the string pointed to by s1 to the string pointed to
         * by s2.
         */
        IMPLEMENT_REQ("strncasecmp.01");

        if (c1 > c2)
        {
            return 1;
        }
        if (c1 < c2)
        {
            return -1;
        }
    }

    if(!confined)
    {
        if (len1 != len2)
        {
            if (len1 > len2)
                return 1;
            else
                return -1;
        }
        else
            return 0;
    }
    else
        return 0;
}

specification
IntT strncasecmp_spec( CallContext context, CString* s1, CString* s2, SizeT n)
{
    pre
    {
        return true;
    }
    post
    {
        IntT model_res = strncasecmp_model(s1, s2, n);

        /*
         * Upon successful completion, strncasecmp() shall return an integer greater than,
         * equal to, or less than 0, if the possibly null-terminated array pointed to by
         * s1 is, ignoring case, greater than, equal to, or less than the possibly null-
         * terminated array pointed to by s2, respectively.
         */
        REQ("strncasecmp.04", "Compare result shall be valid", (model_res*strncasecmp_spec > 0) ||
            (model_res==0 && strncasecmp_spec == 0));

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    strcasestr -- locate a substring ignoring case

SYNOPSIS

    #include <string.h>
    char * strcasestr(const char * s1, const char * s2);

DESCRIPTION

    The strcasestr() shall behave as strstr(), except that it shall ignore the
    case of both strings.The strcasestr() function shall be locale aware; that
    is strcasestr() shall behave as if both strings had been converted to lower
    case in the current locale before the comparison is performed.

RETURN VALUE

    Upon successful completion, strcasestr() shall return a pointer to the
    located string or a null pointer if the string is not found. If s2 points
    to a string with zero length, the function shall return s1.
*/
specification
IntT strcasestr_spec( CallContext context, CString* s1, CString* s2)
{
    pre
    {
        return true;
    }
    post
    {
        IntT model_res = strcasestr_model(s1, s2);

        /*
        * The strstr() function shall locate the first occurrence in the string pointed
        * to by s1 of the sequence of bytes (excluding the terminating null byte) in the
        * string pointed to by s2.
        */
        /*
        * Upon successful completion, strcasestr() shall return a pointer to the located
        * string
        */
        /*
        * or a null pointer if the string is not found
        */
        REQ("strcasestr.01;strcasestr.04.01;strcasestr.04.02", "Returned value shall be valid",
            model_res == strcasestr_spec);


        return true;
    }
}

IntT strcasestr_model(CString* str1, CString* str2)
{
    int i = 0;
    int j;
    bool found;

    CString* s1;
    CString* s2;

    SizeT len1 = length_CString(str1);
    SizeT len2 = length_CString(str2);


    /*
    * The strcasestr() shall behave as strstr(), except that it shall ignore the case
    * of both strings.
    */
    IMPLEMENT_REQ("strcasestr.02");

    /*
    * he strcasestr() function shall be locale aware; that is strcasestr() shall
    * behave as if both strings had been converted to lower case in the current
    * locale before the comparison is performed.
    */
    IMPLEMENT_REQ("strcasestr.03");

    s1 = toLowerCase_POSIX(str1);
    s2 = toLowerCase_POSIX(str2);

    if (len2 == 0)
    {
        /*
        * If s2 points to a string with zero length, the function shall return s1.
        */
        IMPLEMENT_REQ("strcasestr.05");

        return 0;
    }

    while (i < len1)
    {
        if (charAt_CString(s1, i) == charAt_CString(s2, 0))
        {
            /* The rest is too short, s2 cannot be there. */
            if (i + len2 > len1)
                return -1;

            found = true;
            for (j=0; j<len2; j++)
            {
                if (charAt_CString(s1, i + j) != charAt_CString(s2, j))
                {
                    found = false;
                    break;
                }
            }
            if (found)
                return i;
        }
        ++i;
    }

    return -1;
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

static bool isUpperCase_POSIX(IntT c)
{
    return ((c >= 'A') && (c <= 'Z'));
}

static bool isLowerCase_POSIX(IntT c)
{
    return ((c >= 'a') && (c <= 'z'));
}

static IntT getUpperCase_POSIX(IntT c)
{
    return isLowerCase_POSIX(c) ? c & 0xdf : c;
}

static IntT getLowerCase_POSIX(IntT c)
{
    return isUpperCase_POSIX(c) ? c | 0x20 : c;
}

CString* toLowerCase_POSIX(CString* str)
{
    IntT i=0;
    CString* res = clone(str);

    for (i=0;i<length_CString(res);i++)
    {
        CharT ch = charAt_CString(res, i);
        IntT  lw =getLowerCase_POSIX(ch);

        setCharAt_CString(res, i, (CharT) lw);
    }

    return res;

}
