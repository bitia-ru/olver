/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_STRING_WSTR_MODEL_SEH
#define UTIL_STRING_WSTR_MODEL_SEH

#include "common/common_model.seh"


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** wcpcpy_spec **/
specification
WStringTPtr wcpcpy_spec( CallContext context, WStringTPtr dest, WStringTPtr src);

/** wcpncpy_spec **/
specification
WStringTPtr wcpncpy_spec(CallContext context, WStringTPtr dest, WStringTPtr src, SizeT n);

/** wcscat_spec **/
specification
WStringTPtr wcscat_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);

/** wcschr_spec **/
specification
WStringTPtr wcschr_spec(CallContext context, WStringTPtr ws, WCharT wc);
IntT wcschr_model(WString* ws, WCharT wc);

/** wcscmp_spec **/
specification
IntT wcscmp_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);
IntT wcscmp_model(WString* ws1, WString* ws2);

/** wcscpy_spec **/
specification
WStringTPtr wcscpy_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);

/** wcscspn_spec **/
specification
SizeT wcscspn_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);
SizeT wcscspn_model(WString* ws1, WString* ws2);

/** wcsdup_spec **/
specification
WStringTPtr wcsdup_spec(CallContext context, WStringTPtr s, ErrorCode* errno);

/** wcslen_spec **/
specification
SizeT wcslen_spec(CallContext context, WStringTPtr ws);

/** wcsncat_spec **/
specification
WStringTPtr wcsncat_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n);

/** wcsncmp_spec **/
specification
IntT wcsncmp_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n);
IntT wcsncmp_model(WString* ws1, WString* ws2, SizeT n);

/** wcsncpy_spec **/
specification
WStringTPtr wcsncpy_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n);

/** wcsnlen_spec **/
specification
SizeT wcsnlen_spec(CallContext context, WStringTPtr s, SizeT maxlen);

/** wcspbrk_spec **/
specification
WStringTPtr wcspbrk_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);
IntT wcspbrk_model(WString* ws1, WString* ws2); // returns position of a char found in ws1

/** wcsrchr_spec **/
specification
WStringTPtr wcsrchr_spec(CallContext context, WStringTPtr ws, WCharT wc);
IntT wcsrchr_model(WString* ws, WCharT wc);

/** wcsspn_spec **/
specification
SizeT wcsspn_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);
SizeT wcsspn_model(WString* ws1, WString* ws2);

/** wcsstr_spec **/
specification
WStringTPtr wcsstr_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);
IntT wcsstr_model(WString* ws1, WString* ws2);

/** wcswcs_spec **/
specification
WStringTPtr wcswcs_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2);


/********************************************************************/
/**                      Helper Functions                          **/
/********************************************************************/

bool compareNWCharArray(WCharArray* x, WCharArray* y, SizeT n);

#endif

