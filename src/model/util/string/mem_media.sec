/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/mem_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**            Util String Mem Subsystem Initialization            **/
/********************************************************************/
void initUtilStringMemSubsystem(void)
{
  set_mediator___mempcpy_spec(__mempcpy_media);
  set_mediator___rawmemchr_spec(__rawmemchr_media);
    set_mediator_bcmp_spec(bcmp_media);
    set_mediator_bcopy_spec(bcopy_media);
    set_mediator_bzero_spec(bzero_media);
    set_mediator_memccpy_spec(memccpy_media);
    set_mediator_memchr_spec(memchr_media);
    set_mediator_memcmp_spec(memcmp_media);
    set_mediator_memcpy_spec(memcpy_media);
    set_mediator_memmem_spec(memmem_media);
    set_mediator_memmove_spec(memmove_media);
    set_mediator_memrchr_spec(memrchr_media);
    set_mediator_memset_spec(memset_media);
  set_mediator_swab_spec(swab_media);
}


/********************************************************************/
/**                       Interface Functions                      **/
/********************************************************************/

/** __mempcpy_spec **/
mediator __mempcpy_media for specification
VoidTPtr __mempcpy_spec( CallContext context, VoidTPtr dest, VoidTPtr src,
                        SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "__mempcpy:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(dest),
            create_VoidTPtrObj(src),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** __rawmemchr_spec **/
mediator __rawmemchr_media for specification
VoidTPtr __rawmemchr_spec(CallContext context, VoidTPtr s, IntT c)
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "__rawmemchr:$(ptr)$(int)",
            create_VoidTPtrObj(s),
            create_IntTObj(c)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** bcmp_spec **/
mediator bcmp_media for specification
IntT bcmp_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT  res = 0;
        
        format_TSCommand(&command, "bcmp:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}



/** bcopy_spec **/
mediator bcopy_media for specification
void bcopy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        format_TSCommand(&command, "bcopy:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_SizeTObj(n)
            );
        executeCommandInContext(context, &command);
        timestamp = command.meta.timestamp;
        destroy_TSCommand(&command);
    }
}


/** bzero_spec **/
mediator bzero_media for specification
void bzero_spec(CallContext context, VoidTPtr s, SizeT n ){
    call
    {
        TSCommand command = create_TSCommand();
        format_TSCommand(&command, "bzero:$(ptr)$(size)",
            create_VoidTPtrObj(s),
            create_SizeTObj(n)
            );
        executeCommandInContext(context, &command);
        timestamp = command.meta.timestamp;
        destroy_TSCommand(&command);
    }
}


/** memccpy_spec **/
mediator memccpy_media for specification
VoidTPtr memccpy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, IntT c,
                      SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memccpy:$(ptr)$(ptr)$(int)$(size)",
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_IntTObj(c),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** memchr_spec **/
mediator memchr_media for specification
VoidTPtr memchr_spec(CallContext context, VoidTPtr s, IntT c, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memchr:$(ptr)$(int)$(size)",
            create_VoidTPtrObj(s),
            create_IntTObj(c),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    
}


/** memcmp_spec **/
mediator memcmp_media for specification
IntT memcmp_spec(CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT  res = 0;
        
        format_TSCommand(&command, "memcmp:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** memcpy_spec **/
mediator memcpy_media for specification
VoidTPtr memcpy_spec( CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memcpy:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** memmem_spec **/
mediator memmem_media for specification
VoidTPtr memmem_spec( CallContext context, VoidTPtr haystack,
                     SizeT haystacklen, VoidTPtr needle, SizeT needlelen)
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memmem:$(ptr)$(size)$(ptr)$(size)", 
            create_VoidTPtrObj(haystack),
            create_SizeTObj(haystacklen),
            create_VoidTPtrObj(needle),
            create_SizeTObj(needlelen)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}


/** memmove_spec **/
mediator memmove_media for specification
VoidTPtr memmove_spec(CallContext context, VoidTPtr s1, VoidTPtr s2, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memmove:$(ptr)$(ptr)$(size)", 
            create_VoidTPtrObj(s1),
            create_VoidTPtrObj(s2),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    
}


/** memrchr_spec **/
mediator memrchr_media for specification
VoidTPtr memrchr_spec(CallContext context, VoidTPtr s, IntT c, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memrchr:$(ptr)$(int)$(size)", 
            create_VoidTPtrObj(s),
            create_IntTObj(c),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    
}

/** memset_spec **/
mediator memset_media for specification
VoidTPtr memset_spec(CallContext context, VoidTPtr s, IntT c, SizeT n )
{
    call
    {
        TSCommand command = create_TSCommand();
        VoidTPtr  res = NULL_VoidTPtr;
        
        format_TSCommand( &command, "memset:$(ptr)$(int)$(size)", 
            create_VoidTPtrObj(s),
            create_IntTObj(c),
            create_SizeTObj(n)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream( context, &command.response );
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    
}

/** swab_spec **/
mediator swab_media for specification
void swab_spec(CallContext context, VoidTPtr src, VoidTPtr dest, SSizeT nbytes)
{
    call
    {
        TSCommand command = create_TSCommand();
        format_TSCommand(&command, "swab:$(ptr)$(ptr)$(ssize)",
                                    create_VoidTPtrObj(src),
                                    create_VoidTPtrObj(dest),
                                    create_SSizeTObj(nbytes)
                        );
        executeCommandInContext(context, &command);
        timestamp = command.meta.timestamp;

        destroy_TSCommand(&command);
    }
}



/*
   The group of functions 'util.string.mem' consists of:
       __mempcpy [1]
       __rawmemchr [1]
       bcmp [2]
       bcopy [2]
       bzero [2]
       memccpy [2]
       memchr [2]
       memcmp [2]
       memcpy [2]
       memmem [2]
       memmove [2]
       memrchr [1]
       memset [2]
       swab [2]
 */

