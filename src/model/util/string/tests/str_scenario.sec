/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/tests/str_scenario.seh"
#include "util/string/str_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/*
 * strcpy, strncpy, strdup, __strdup, strcat, strncat, strlen, strstr, stpcpy,
 * __stpcpy, stpncpy, strndup, strnlen
 */
static int maxSize = 32800;

static char* strings[] = {
    "",
    "x",
    "xtz",
    "01234567890123456789012345678901234567890123456789",
    "A string containing tabulation\t, newline\n, carriage return\r, and other\b special\a characters\v."
};

static char* searchStrings[] = {
    "",
    "x",
    "t",
    "90123456",
    "xt",
    "return\r"
};

static int numStrings = sizeof(strings)/sizeof(char*);

static int numSearchStrings = sizeof(searchStrings)/sizeof(char*);

static int sizes[] = {
  0, 1, 10, 32768, 32769
};
static int numSizes = sizeof(sizes)/sizeof(int);

/*
 * strcmp
 */
#define CMP_SEQUENCE_LENGTH 4

static char* s1_array_cmp[CMP_SEQUENCE_LENGTH] = {"1234567890", "1999999999", "1234511111", "5123456789"};
static char* s2_array_cmp[CMP_SEQUENCE_LENGTH] = {"1234567890", "1966666666", "1234567889", "6459832133"};

static SizeT offset_cmp[CMP_SEQUENCE_LENGTH] = {0, 1, 3, 10};

/*
 * strncmp
 */
static IntT strncmp_N[] = {0,1,5,10,100};
static int num_strncmp_N = sizeof(strncmp_N)/sizeof(IntT);

/*
 * strchr, strrchr, index , rindex
 */

static char* search_strchrStrings[] = 
{
    "qwed8765*&^$%^^\xff\xf0",
    "",
    "\n\r\t\\23\\\\"
    "Q",
    "Moscow \n New York \n London"
};

static int num_search_strchrStrings = sizeof(search_strchrStrings)/sizeof(char*);

static IntT search_chars[] = {'q', '7', '&',' ', 'L' ,0xff, 0xf0, 0xffff, 0x123456, 0};
static int num_search_chars = sizeof(search_chars)/sizeof(IntT);

/*
 * strcspn, strspn
 */
static char* s_array_cspn[] = {
    "",
    "string",
    "aaaaaaa",
    "b",
    "aaabaaa",
    "cdefbgh",
    "bgh",
    "qwerty",
    "tyraaba"
};

static int num_strings_cspn = sizeof(s_array_cspn)/sizeof(char*);

/*
 * strpbrk
 */
static char* s_array_pbrk[] = {
    "",
    "string",
    "aaaaaaa",
    "b",
    "aaabaaa",
    "cdefbgh",
    "bgh",
    "qwerty",
    "tyraaba"
};

static int num_strings_pbrk = sizeof(s_array_cspn)/sizeof(char*);



/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

StringTPtr src,dst;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_str_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();

    src = allocateMemoryBlock(context,maxSize);
    if (isNULL_VoidTPtr(src))
        return false;

    dst = allocateMemoryBlock(context,maxSize);
    if (isNULL_VoidTPtr(dst))
    {
        deallocateMemoryBlock(context,src);
        return false;
    }

    return true;
}

static void finish_str_scenario(void)
{
    deallocateMemoryBlock(context,src);
    deallocateMemoryBlock(context,dst);
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool strcpy_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
            {
                VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                strcpy_spec(context, dst_tmp, src_tmp);
            }
        }
    }
    return true;
}

scenario
bool stpcpy_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
            {
                VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                stpcpy_spec(context, dst_tmp, src_tmp);
            }
        }
    }
    return true;
}

scenario
bool __stpcpy_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
            {
                VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                __stpcpy_spec(context, dst_tmp, src_tmp);
            }
        }
    }
    return true;
}

scenario
bool strcat_scen()
{
    iterate(int str_index1 = 0; str_index1 < numStrings; str_index1++;)
    {
        iterate(int str_index2 = 0; str_index2 < numStrings; str_index2++;)
        {
            iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
            {
                iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                {
                    VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                    VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                    writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index1]));
                    writeCString_VoidTPtr(dst_tmp, create_CString(strings[str_index2]));
                    strcat_spec(context, dst_tmp, src_tmp);
                }
            }
        }
    }
    return true;
}

scenario
bool strncat_scen()
{
    iterate(int str_index1 = 0; str_index1 < numStrings; str_index1++;)
    {
        iterate(int str_index2 = 0; str_index2 < numStrings; str_index2++;)
        {
            iterate(int size = 0; size < numSizes; size++;)
            {
                iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
                {
                    iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                    {
                        VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                        VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                        writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index1]));
                        writeCString_VoidTPtr(dst_tmp, create_CString(strings[str_index2]));
                        strncat_spec(context, dst_tmp, src_tmp, sizes[size]);
                    }
                }
            }
        }
    }
    return true;
}

scenario
bool strdup_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            VoidTPtr src_tmp = add_VoidTPtr(src, offset1);
            writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
            strdup_spec(context, src_tmp, errno_model);
        }
    }
    return true;
}

scenario
bool __strdup_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            VoidTPtr src_tmp = add_VoidTPtr(src, offset1);
            writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
            __strdup_spec(context, src_tmp, errno_model);
        }
    }
    return true;
}

scenario
bool strndup_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
        int length,delta;
            VoidTPtr src_tmp = add_VoidTPtr(src, offset1);
        CString* test_CString = create_CString(strings[str_index]);
            writeCString_VoidTPtr(src_tmp, test_CString);
        length = length_CString(test_CString);
        delta = ((length/5)>1)? length/5:1;
        iterate(unsigned n_var=0;n_var<length+2*delta;n_var+=delta;)
        {
                strndup_spec(context, src_tmp,n_var,errno_model);
            }
        }
    }
    return true;
}

scenario
bool strlen_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            VoidTPtr src_tmp = add_VoidTPtr(src, offset1);
            writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
            strlen_spec(context, src_tmp);
        }
    }
    return true;
}

scenario
bool strnlen_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
        {
            int length,delta;
            VoidTPtr src_tmp = add_VoidTPtr(src, offset1);
            CString* test_CString = create_CString(strings[str_index]);
            writeCString_VoidTPtr(src_tmp, test_CString );
            strnlen_spec(context, src_tmp,1000);

            length = length_CString(test_CString);
            delta = ((length/5)>1)? length/5:1;
            iterate(unsigned n_var=0;n_var<length+2*delta;n_var+=delta;)
            {
                strnlen_spec(context, src_tmp,n_var);
            }
       }
    }
    return true;
}

scenario
bool strncpy_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(int size = 0; size < numSizes; size++;)
        {
            iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
            {
                iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                {
                    VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                    VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                    writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                    strncpy_spec(context, dst_tmp, src_tmp, sizes[size]);
                }
            }
        }
    }

    return true;
}

scenario
bool stpncpy_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(int size = 0; size < numSizes; size++;)
        {
            iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
            {
                iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                {
                    VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                    VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                    writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                    stpncpy_spec(context, dst_tmp, src_tmp, sizes[size]);
                }
            }
        }
    }
    return true;
}

scenario
bool strcmp_scen()
{
    iterate(int i = 0; i < CMP_SEQUENCE_LENGTH;i++;)
    {
        iterate(int j = 0; j < CMP_SEQUENCE_LENGTH; j++;)
        {
            iterate(int k = 0; k < CMP_SEQUENCE_LENGTH; k++;)
            {
                writeCString_VoidTPtr(src, create_CString(s1_array_cmp[i] + offset_cmp[j]));
                writeCString_VoidTPtr(dst, create_CString(s2_array_cmp[i] + offset_cmp[k]));
                strcmp_spec(context, src, dst);
            }
        }
    }
    return true;
}


scenario
bool strncmp_scen()
{
    iterate(int i = 0; i < CMP_SEQUENCE_LENGTH;i++;)
    {
        iterate(int j = 0; j < CMP_SEQUENCE_LENGTH; j++;)
        {
            iterate(int k = 0; k < CMP_SEQUENCE_LENGTH; k++;)
            {
                iterate(int l = 0; l < num_strncmp_N; l++;)
                {
                    writeCString_VoidTPtr(src, create_CString(s1_array_cmp[i] + offset_cmp[j]));
                    writeCString_VoidTPtr(dst, create_CString(s2_array_cmp[i] + offset_cmp[k]));
                    strncmp_spec(context, src, dst,strncmp_N[l]);
                }
            }
            
        }
    }
    return true;
}

scenario
bool strchr_scen()
{
    iterate(int ii=0; ii<num_search_strchrStrings; ii++;)
    {
        writeCString_VoidTPtr(src, create_CString(search_strchrStrings[ii]));
        iterate(int i = 0; i < num_search_chars; i++;)
        {
            strchr_spec(context, src, search_chars[i]);
        }
    }
    return true;
}

scenario
bool strspn_scen()
{
    iterate(int i = 0; i < num_strings_cspn;i++;)
    {
        iterate(int j = 0; j < num_strings_cspn; j++;)
        {
            iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
            {
                iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                {
                    VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                    VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                    writeCString_VoidTPtr(src_tmp, create_CString(s_array_cspn[i]));
                    writeCString_VoidTPtr(dst_tmp, create_CString(s_array_cspn[j]));
                    strspn_spec(context, src_tmp, dst_tmp);
                }
            }
        }
    }
    return true;
}

scenario
bool strrchr_scen()
{
    iterate(int ii=0;ii<num_search_strchrStrings;ii++;)
    {
        writeCString_VoidTPtr(src, create_CString(search_strchrStrings[ii]));
        iterate(int i = 0; i < num_search_chars; i++;)
        {
            strrchr_spec(context, src, search_chars[i]);
        }
    }
    return true;
}


scenario
bool rindex_scen()
{
    iterate(int ii=0;ii<num_search_strchrStrings;ii++;)
    {
        writeCString_VoidTPtr(src, create_CString(search_strchrStrings[ii]));
        iterate(int i = 0; i < num_search_chars; i++;)
        {
            rindex_spec(context, src, search_chars[i]);
        }
    }
    return true;
}

scenario
bool strstr_scen()
{
    iterate(int str_index = 0; str_index < numStrings; str_index++;)
    {
        iterate(int sstr_index = 0; sstr_index < numSearchStrings; sstr_index++;)
        {
            iterate(unsigned offset1 = 0; offset1 < sizeof_Type(context, "int"); offset1++;)
            {
                iterate(unsigned offset2 = 0; offset2 < sizeof_Type(context, "int"); offset2++;)
                {
                    VoidTPtr dst_tmp = add_VoidTPtr(dst, offset1);
                    VoidTPtr src_tmp = add_VoidTPtr(src, offset2);
                    writeCString_VoidTPtr(src_tmp, create_CString(strings[str_index]));
                    writeCString_VoidTPtr(dst_tmp, create_CString(searchStrings[sstr_index]));
                    strstr_spec(context, src_tmp, dst_tmp);
                }
            }
        }
    }
    return true;
}

scenario
bool index_scen()
{
    iterate(int ii=0;ii<num_search_strchrStrings;ii++;)
    {
        writeCString_VoidTPtr(src, create_CString(search_strchrStrings[ii]));
        iterate(int i = 0; i < num_search_chars; i++;)
        {
            index_spec(context, src, search_chars[i]);
        }
    }
    return true;
}

scenario
bool strcspn_scen()
{
    iterate(int i = 0; i < num_strings_cspn;i++;)
    {
        iterate(int j = 0; j < num_strings_cspn; j++;)
        {
            writeCString_VoidTPtr(src, create_CString(s_array_cspn[i]));
            writeCString_VoidTPtr(dst, create_CString(s_array_cspn[j]));
            strcspn_spec(context, src, dst);
        }
    }
    return true;
}

scenario
bool strpbrk_scen()
{
    iterate(int i = 0; i < num_strings_pbrk;i++;)
    {
        iterate(int j = 0; j < num_strings_pbrk; j++;)
        {
            writeCString_VoidTPtr(src, create_CString(s_array_pbrk[i]));
            writeCString_VoidTPtr(dst, create_CString(s_array_pbrk[j]));
            strpbrk_spec(context, src, dst);
        }
    }
    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm str_scenario =
{
    .init = init_str_scenario,
    .finish = finish_str_scenario,
    .actions = {
        strcpy_scen,
        strncpy_scen,
        strcat_scen,
        strncat_scen,
        strstr_scen,
        strspn_scen,
        strdup_scen,
        strcmp_scen,
        strchr_scen,
        index_scen,
        strlen_scen,
        strncmp_scen,
        strcspn_scen,
        strpbrk_scen,
        strndup_scen,
        stpcpy_scen,
        __stpcpy_scen,
        stpncpy_scen,
        strnlen_scen,
        __strdup_scen,
        strrchr_scen,
        rindex_scen,
        NULL
    }
};

#ifdef UTIL_STRING_STR_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/string/str_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilStringStrSubsystem();
}


bool main_util_string_str(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    str_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    main_util_string_str(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
