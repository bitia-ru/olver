/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/tests/wmem_scenario.seh"
#include "util/string/wmem_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "data/wchar_model.seh"
#include "data/embed_model.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
#define MAX_SIZE 8192
static int maxSize = MAX_SIZE;

static int sizes[] = {
  0, 1, 5, 8191, 8192, 8193
};

static int numSizes = sizeof(sizes)/sizeof(int);

static int offsets[] = {
  0, 17, 500, 8193
};
static int numOffsets = sizeof(offsets)/sizeof(int);


// wmemchr

static WCharT wmemchrChars[] = {
    /*NULL_WCharT*/0000, /*WEOF_WIntT*/0000, 100, 30000, 40000, 65500 };

static int numWMemchrChars = sizeof(wmemchrChars)/sizeof(int);

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;
static VoidTPtr buf1Ptr, buf2Ptr;
static VoidTPtr writeBuf;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_wmem_scenario(int argc,char** argv)
{
  int i=0;

  // Init test scenario data
  context = getContext();

  {

      WCharT refBuff[MAX_SIZE*2];

      for(i=0;i<2*maxSize;i++){
          refBuff[i] = (WCharT)i*i+i;
      }

      refBuff[10] = WEOF_WIntT;
      refBuff[125] = NULL_WCharT;
      refBuff[0] = WEOF_WIntT;

      wmemchrChars[0] = NULL_WCharT;
      wmemchrChars[1] = WEOF_WIntT;

      buf1Ptr = allocateMemoryBlock(context, maxSize*2*sizeof_WCharT);
      buf2Ptr = allocateMemoryBlock(context, maxSize*2*sizeof_WCharT);
      writeBuf = allocateMemoryBlock(context, maxSize*2*sizeof_WCharT);
      if (isNULL_VoidTPtr(buf1Ptr))
      {
        return false;
      }
      if (isNULL_VoidTPtr(buf2Ptr))
      {
        deallocateMemoryBlock(context, buf1Ptr);
        return false;
      }
      if (isNULL_VoidTPtr(writeBuf))
      {
        deallocateMemoryBlock(context, buf1Ptr);
        deallocateMemoryBlock(context, buf2Ptr);
        return false;
      }


      writeWCharArray_VoidTPtr(buf1Ptr, create_WCharArray(refBuff,
          sizeof(refBuff)/sizeof(WCharT)) );
      writeWCharArray_VoidTPtr(buf2Ptr, create_WCharArray(refBuff,
          sizeof(refBuff)/sizeof(WCharT)) );
      writeWCharArray_VoidTPtr(writeBuf, create_WCharArray(refBuff,
          sizeof(refBuff)/sizeof(WCharT)) );
  }

  return true;
}

static void finish_wmem_scenario(void)
{
   deallocateMemoryBlock(context, buf1Ptr);
   deallocateMemoryBlock(context, buf2Ptr);
   deallocateMemoryBlock(context, writeBuf);
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool wmemchr_scen()
{
    iterate (int cInd=0; cInd<numWMemchrChars; cInd++;)
    {
        iterate( int size = 0; size < numSizes; size++; )
        {
            iterate ( unsigned offset1 = 0; offset1 < numOffsets; offset1++; )
            {
                wmemchr_spec(context, add_VoidTPtr(buf1Ptr,offsets[offset1]),
                    wmemchrChars[cInd], sizes[size]);
            }
        }
    }

    return true;
}


scenario
bool wmemcmp_same_scen()
{
    /* [Same buffer] */
    iterate( int size = 0; size < numSizes; size++; )
    {
        iterate ( unsigned offset1 = 0; offset1 < numOffsets; offset1++; )
        {
            iterate ( unsigned offset2 = 0; offset2 < numOffsets; offset2++; )
            {
                wmemcmp_spec(context, add_VoidTPtr(buf1Ptr,offsets[offset1]),
                    add_VoidTPtr(buf1Ptr,offsets[offset2]), sizes[size]);
            }
        }
    }

    return true;
}

scenario
bool wmemcmp_diff_scen()
{
    /* [Different buffers] */
    iterate( int size = 0; size < numSizes; size++; )
    {
        iterate( unsigned offset1 = 0; offset1 < numOffsets; offset1++; )
        {
            iterate( unsigned offset2 = 0; offset2 < numOffsets; offset2++; )
            {
                wmemcmp_spec( context, add_VoidTPtr(buf1Ptr, offsets[offset1]),
                    add_VoidTPtr(buf2Ptr, offsets[offset2]), sizes[size] );
            }
        }
    }

    return true;
}


scenario
bool wmemcpy_scen()
{
    iterate( int size = 0; size < numSizes; size++; )
    {
        iterate( unsigned offset1 = 0; offset1 < sizeof_WCharT; offset1++; )
        {
            iterate( unsigned offset2 = 0; offset2 < sizeof_WCharT; offset2++;)
            {
                wmemcpy_spec( context, add_VoidTPtr(writeBuf, offset1),
                    add_VoidTPtr(buf1Ptr, offset2), sizes[size] );
            }
        }
    }

    return true;
}



scenario
bool wmemmove_scen()
{
    iterate( int size = 0; size < numSizes; size++; )
    {
        iterate( unsigned offset1 = 0; offset1 < numOffsets; offset1++; )
        {
            iterate( unsigned offset2 = 0; offset2 < numOffsets; offset2++; )
            {
                wmemmove_spec( context,
                    add_VoidTPtr(writeBuf, offsets[offset1]),
                    add_VoidTPtr(writeBuf, offsets[offset2]), sizes[size] );
            }
        }
    }

    return true;
}



scenario
bool wmemset_scen()
{
    iterate (int cInd=0; cInd<numWMemchrChars; cInd++;)
    {
        iterate( int size = 0; size < numSizes; size++; )
        {
            iterate ( unsigned offset1 = 0; offset1 < numOffsets; offset1++; )
            {
                wmemset_spec(context, add_VoidTPtr(buf1Ptr,offsets[offset1]),
                    wmemchrChars[cInd], sizes[size]);
            }
        }
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_string_wmem_scenario =
{
  .init = init_wmem_scenario,
  .finish = finish_wmem_scenario,
  .actions = {
    wmemchr_scen,
    wmemcmp_same_scen,
    wmemcmp_diff_scen,
    wmemcpy_scen,
    wmemmove_scen,
    wmemset_scen,
    NULL
  }
};

bool main_util_string_wmem( int argc, char** argv )
{
  util_string_wmem_scenario(argc,argv);
  return true;
}

#ifdef UTIL_STRING_WMEM_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/string/wmem_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
  reinitControlCenter();
  initCommonModel();
  initCommonMedia();
  //initCommonScenarioState();

  initSystemConfiguration();
  initSystemModel();
  initProcessModel();
  initPThreadModel();

  initUtilStringWmemSubsystem();
}

int main(int argc, char** argv)
{
  //
  initTestSystem();
  loadSUT();

  // Set up tracer
  //setTraceEncoding("windows-1251");
  addTraceToFile("trace.xml");
  // Run test scenario
  main_util_string_wmem(argc,argv);

//  unloadSUT();
  return 0;
}
#endif
