/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/string/wstr_media.seh"
#include "common/common_media.seh"
#include "memory/heap/heap_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilStringWStrSubsystem(void)
{
    // Set up mediators
    set_mediator_wcpcpy_spec(wcpcpy_media);
    set_mediator_wcpncpy_spec(wcpncpy_media);
    set_mediator_wcscat_spec(wcscat_media);
    set_mediator_wcschr_spec(wcschr_media);
    set_mediator_wcscmp_spec(wcscmp_media);
    set_mediator_wcscpy_spec(wcscpy_media);
    set_mediator_wcscspn_spec(wcscspn_media);
    set_mediator_wcsdup_spec(wcsdup_media);
    set_mediator_wcslen_spec(wcslen_media);
    set_mediator_wcsncat_spec(wcsncat_media);
    set_mediator_wcsncmp_spec(wcsncmp_media);
    set_mediator_wcsncpy_spec(wcsncpy_media);
    set_mediator_wcsnlen_spec(wcsnlen_media);
    set_mediator_wcspbrk_spec(wcspbrk_media);
    set_mediator_wcsrchr_spec(wcsrchr_media);
    set_mediator_wcsspn_spec(wcsspn_media);
    set_mediator_wcsstr_spec(wcsstr_media);
    set_mediator_wcswcs_spec(wcswcs_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/


/** wcpcpy_spec **/
mediator wcpcpy_media for specification
WStringTPtr wcpcpy_spec( CallContext context, WStringTPtr dest, WStringTPtr src)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand( &command, "wcpcpy:$(ptr)$(ptr)" ,
                                    create_VoidTPtrObj(dest),
                                    create_VoidTPtrObj(src)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}


/** wcpncpy_spec **/
mediator wcpncpy_media for specification
WStringTPtr wcpncpy_spec(CallContext context, WStringTPtr dest, WStringTPtr src, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcpncpy:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(dest),
                                    create_VoidTPtrObj(src),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcscat_spec **/
mediator wcscat_media for specification
WStringTPtr wcscat_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcscat:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcschr_spec **/
mediator wcschr_media for specification
WStringTPtr wcschr_spec(CallContext context, WStringTPtr ws, WCharT wc)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcschr:$(ptr)$(wchar)",
                                    create_VoidTPtrObj(ws),
                                    create_WCharTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcscmp_spec **/
mediator wcscmp_media for specification
IntT wcscmp_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        IntT res = 0;

        format_TSCommand(&command, "wcscmp:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcscpy_spec **/
mediator wcscpy_media for specification
WStringTPtr wcscpy_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcscpy:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcscspn_spec **/
mediator wcscspn_media for specification
SizeT wcscspn_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res = 0;

        format_TSCommand(&command, "wcscspn:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsdup_spec **/
mediator wcsdup_media for specification
WStringTPtr wcsdup_spec(CallContext context, WStringTPtr s, ErrorCode* errno)
{
    SizeT wlen = (length_WString(readWString_VoidTPtr(s)) + 1) * sizeof_WCharT;
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;
        
        format_TSCommand(&command, "wcsdup:$(ptr)",
                                    create_VoidTPtrObj(s)
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
            *errno = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onMalloc(context, wlen, wcsdup_spec);
    }
}


/** wcslen_spec **/
mediator wcslen_media for specification
SizeT wcslen_spec(CallContext context, WStringTPtr ws)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res;  

        format_TSCommand(&command, "wcslen:$(ptr)",
                                    create_VoidTPtrObj(ws)
                         );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsncat_spec **/
mediator wcsncat_media for specification
WStringTPtr wcsncat_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcsncat:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcsncmp_spec **/
mediator wcsncmp_media for specification
IntT wcsncmp_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res = 0;

        format_TSCommand(&command, "wcsncmp:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsncpy_spec **/
mediator wcsncpy_media for specification
WStringTPtr wcsncpy_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2, SizeT n)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcsncpy:$(ptr)$(ptr)$(size)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2),
                                    create_SizeTObj(n)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsnlen_spec **/
mediator wcsnlen_media for specification
SizeT wcsnlen_spec(CallContext context, WStringTPtr s, SizeT maxlen)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res;
        format_TSCommand(&command, "wcsnlen:$(ptr)$(size)",
                                    create_VoidTPtrObj(s),
                                    create_SizeTObj(maxlen)
            );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);
        return res;
    }
}


/** wcspbrk_spec **/
mediator wcspbrk_media for specification
WStringTPtr wcspbrk_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
        StringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcspbrk:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsrchr_spec **/
mediator wcsrchr_media for specification
WStringTPtr wcsrchr_spec(CallContext context, WStringTPtr ws, WCharT wc)
{
    call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcsrchr:$(ptr)$(wchar)",
                                    create_VoidTPtrObj(ws),
                                    create_WCharTObj(wc)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** wcsspn_spec **/
mediator wcsspn_media for specification
SizeT wcsspn_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
    call
    {
        TSCommand command = create_TSCommand();
        SizeT res = 0;

        format_TSCommand(&command, "wcsspn:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readSize_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcsstr_spec **/
mediator wcsstr_media for specification
WStringTPtr wcsstr_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
   call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcsstr:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}


/** wcswcs_spec **/
mediator wcswcs_media for specification
WStringTPtr wcswcs_spec(CallContext context, WStringTPtr ws1, WStringTPtr ws2)
{
   call
    {
        TSCommand command = create_TSCommand();
        WStringTPtr res = NULL_VoidTPtr;

        format_TSCommand(&command, "wcswcs:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(ws1),
                                    create_VoidTPtrObj(ws2)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readPointer_TSStream(context, &command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

