/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "util/string/wcasecmp_model.seh"
#include "config/type_config.seh"


#pragma SEC subsystem string "util.string"



/*
   The group of functions 'util.string.wcasecmp' consists of:
       wcscasecmp [1]
       wcsncasecmp [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    wcscasecmp -- compare two wide-character strings, ignoring case

SYNOPSIS

    #include <wchar.h>
    int wcscasecmp(const wchar_t * s1, const wchar_t * s2);

DESCRIPTION

    wcscasecmp() is the wide-character equivalent of strcasecmp(). It compares
    the wide-character string s1 and the wide-character string s2, ignoring
    case differences (towupper, towlower).

RETURN VALUE

    The wcscasecmp() function shall return 0 if the wide-character strings s1
    and s2 are equal except for case distinctions. It shall return a positive
    integer if s1 is greater than s2, ignoring case. It shall return a negative
    integer if s1 is less than s2, ignoring case.
*/
specification
IntT wcscasecmp_spec( CallContext context, WString* s1, WString* s2)
{
    pre
    {
        return true;
    }
    post
    {
        IntT model_res = wcscasecmp_model(s1, s2);


        if (model_res>0)
        {
            /*
            * It shall return a positive integer if s1 is greater than s2, ignoring case.
            */
            REQ("wcscasecmp.03.02", "Function shall return a positive integer if s1 is greater than s2", wcscasecmp_spec>0);
        }
        else if (model_res<0)
        {
            /*
            * It shall return a negative integer if s1 is less than s2, ignoring case.
            */
            REQ("wcscasecmp.03.03", "Function shall return a negative integer if s1 is less than s2", wcscasecmp_spec<0);
        }
        else
        {
            /*
            * The wcscasecmp() function shall return 0 if the wide-character strings s1 and
            * s2 are equal except for case distinctions.
            */
            REQ("wcscasecmp.03.01",
                "Function shall return 0 if the wide-character strings s1 and s2 are equal", wcscasecmp_spec==0);
        }

       

        return true;
    }
}

IntT wcscasecmp_model(WString* wstr1, WString* wstr2)
{
    int i;

    WString* ws1;
    WString* ws2;

    SizeT len1 = length_WString(wstr1);
    SizeT len2 = length_WString(wstr2);

    SizeT len = len2 > len1 ? len1 : len2;

    /*
    * It compares the wide-character string s1 and the wide-character string s2,
    * ignoring case differences (towupper, towlower).
    */
    IMPLEMENT_REQ("wcscasecmp.02");

    ws1 = WString_toLowerCase_POSIX(wstr1);
    ws2 = WString_toLowerCase_POSIX(wstr2);

    for(i = 0; i < len; i++)
    {
        WCharT c1 = wcharAt_WString(ws1, i);
        WCharT c2 = wcharAt_WString(ws2, i);

        if (c1 > c2)
        {
            return 1;
        }
        if (c1 < c2)
        {
            return -1;
        }
    }

    if (len1 != len2)
    {
        if (len1 > len2)
            return 1;
        else
            return -1;
    }
    else
        return 0;
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    wcsncasecmp -- compare two fixed-size wide-character strings, ignoring case

SYNOPSIS

    #include <wchar.h>
    int wcsncasecmp(const wchar_t * s1, const wchar_t * s2, size_t n);

DESCRIPTION

     wcsncasecmp() is the wide-character equivalent of strncasecmp().It
     compares the wide-character string s1 and the wide-character string s2,
     but at most n wide characters from each string, ignoring case differences
     (towupper, towlower).

RETURN VALUE

    wcscasecmp() returns 0 if the wide-character strings s1 and s2, truncated
    to at most length n, are equal except for case distinctions. It returns a
    positive integer if truncated s1 is greater than truncated s2, ignoring
    case. It returns a negative integer if truncated s1 is smaller than
    truncated s2, ignoring case.
*/
specification
IntT wcsncasecmp_spec( CallContext context, WString* s1, WString* s2, SizeT n)
{
    pre
    {
        return true;
    }
    post
    {
        IntT model_res = wcsncasecmp_model(s1, s2, n);


        if (model_res>0)
        {
            /*
            * It returns a positive integer if truncated s1 is greater than truncated s2,
            * ignoring case.
            */
            REQ("wcsncasecmp.03.02", "It returns a positive integer if truncated s1 is greater than truncated s2",
                wcsncasecmp_spec>0);
        }
        else if (model_res<0)
        {
            /*
            * It returns a negative integer if truncated s1 is smaller than truncated s2,
            * ignoring case.
            */
            REQ("wcsncasecmp.03.03", "It returns a negative integer if truncated s1 is smaller than truncated s2",
                wcsncasecmp_spec<0);
        }
        else
        {
            /*
            * wcscasecmp() returns 0 if the wide-character strings s1 and s2, truncated to at
            * most length n, are equal except for case distinctions.
            */
            REQ("wcsncasecmp.03.01", "If strings are equal function shall return zero", wcsncasecmp_spec==0);
        }


       

        return true;
    }
}

IntT wcsncasecmp_model(WString* wstr1, WString* wstr2, SizeT n)
{
    int i;
    bool confine = false;

    WString* ws1;
    WString* ws2;

    SizeT len1 = length_WString(wstr1);
    SizeT len2 = length_WString(wstr2);

    SizeT len = len2 > len1 ? len1 : len2;

    /*
    * It compares the wide-character string s1 and the wide-character string s2, but
    * at most n wide characters from each string, ignoring case
    * differences (towupper, towlower).
    */
    IMPLEMENT_REQ("wcsncasecmp.02");

    ws1 = WString_toLowerCase_POSIX(wstr1);
    ws2 = WString_toLowerCase_POSIX(wstr2);

    if(len >= n)
    {
        confine = true;
        len = n;
    }

    for(i = 0; i < len; i++)
    {
        WCharT c1 = wcharAt_WString(ws1, i);
        WCharT c2 = wcharAt_WString(ws2, i);

        if (c1 > c2)
        {
            return 1;
        }
        if (c1 < c2)
        {
            return -1;
        }
    }

    if(!confine)
    {
        if (len1 != len2)
        {
            if (len1 > len2)
                return 1;
            else
                return -1;
        }
        else
            return 0;
    }
    else
        return 0;
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
static bool isUpperCase_POSIX(IntT c)
{
    return ((c >= 'A') && (c <= 'Z'));
}

static bool isLowerCase_POSIX(IntT c)
{
    return ((c >= 'a') && (c <= 'z'));
}

static IntT getUpperCase_POSIX(IntT c)
{
    return isLowerCase_POSIX(c) ? c & 0xdf : c;
}

static IntT getLowerCase_POSIX(IntT c)
{
    return isUpperCase_POSIX(c) ? c | 0x20 : c;
}


/*
 * Creates the wide-character string from a usual string on the Instrumental Machine
 * by adding zero bytes before every single character.
 */
WCharT* convert_to_wcstring(char* str)
{
    char* tmp;
    size_t len = strlen(str) + 1;
    size_t wlen = len * sizeof_WCharT;

    size_t i, j;

    /* Allocate memory for the wide string. */
    tmp = malloc(wlen);

    if(__BYTE_ORDER == __LITTLE_ENDIAN)
    {
        /* Little Endian, add zeroes after chars. */
        for (i = 0; i < len; i++)
        {
            tmp[i * sizeof_WCharT] = str[i];
            for (j = 1; j < sizeof_WCharT; j++)
            {
                tmp[i * sizeof_WCharT + j] = '\0';
            }
        }
    }
    else if(__BYTE_ORDER == __BIG_ENDIAN)
    {
        /* Big Endian, add zeroes before chars. */
        for (i = 0; i < len; i++)
        {
            for (j = 0; j < sizeof_WCharT - 1; j++)
            {
                tmp[i * sizeof_WCharT + j] = '\0';
            }
            tmp[i * sizeof_WCharT + sizeof_WCharT - 1] = str[i];
        }
    }
    else
    {
        traceUserInfo("Requirements failed: __BYTE_ORDER is undefined or has incorrect value");
    }

    return (WCharT*)tmp;
}


WCharT getZeroWCharLowerCase_POSIX(WCharT ch)
{
    WCharT res=ch;
    char* charVal=(char*)&res;
    if(__BYTE_ORDER == __LITTLE_ENDIAN)
    {
        charVal[0]=(char)getLowerCase_POSIX(charVal[0]);
    }
    else  if(__BYTE_ORDER == __BIG_ENDIAN)
    {
        charVal[sizeof_WCharT - 1]=(char)getLowerCase_POSIX(charVal[sizeof_WCharT - 1]);
    }
    else
    {
        traceUserInfo("Requirements failed: __BYTE_ORDER is undefined or has incorrect value");
    }
    return res;
}

WString* WString_toLowerCase_POSIX(WString* str)
{
    IntT i=0;
    WString* res = clone(str);

    for (i=0;i<length_WString(res);i++)
    {
        WCharT ch = wcharAt_WString(res, i);
        WCharT lw =getZeroWCharLowerCase_POSIX(ch);

        setWCharAt_CString(res, i, lw);
    }

    return res;


}
