/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_STRING_STR_MODEL_SEH
#define UTIL_STRING_STR_MODEL_SEH

#include "common/common_model.seh"

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __stpcpy_spec **/
specification
StringTPtr __stpcpy_spec(CallContext context, StringTPtr dest, StringTPtr src);

/** __strdup_spec **/
specification
StringTPtr __strdup_spec( CallContext context, StringTPtr s1, ErrorCode* errno);

/** stpcpy_spec **/
specification
StringTPtr stpcpy_spec(CallContext context, StringTPtr dest, StringTPtr src);

/** stpncpy_spec **/
specification
StringTPtr stpncpy_spec(CallContext context, StringTPtr dest, StringTPtr src, SizeT n);

/** strcat_spec **/
specification
StringTPtr strcat_spec(CallContext context, StringTPtr s1, StringTPtr s2);

/** index_spec **/
specification
StringTPtr index_spec(CallContext context, StringTPtr s, IntT c);

/** strchr_spec **/
specification
StringTPtr strchr_spec(CallContext context, StringTPtr s, IntT c);
IntT strchr_model(CString* s, IntT c); // returns position of c in s

/** strcmp_spec **/
specification
IntT strcmp_spec(CallContext context, StringTPtr s1, StringTPtr s2);
IntT strcmp_model(CString* s1, CString* s2);

/** strcpy_spec **/
specification
StringTPtr strcpy_spec(CallContext context, StringTPtr s1, StringTPtr s2);

/** strcspn_spec **/
specification
SizeT strcspn_spec(CallContext context, StringTPtr s1, StringTPtr s2);
SizeT strcspn_model(CString* s1, CString* s2);

/** strdup_spec **/
specification
StringTPtr strdup_spec( CallContext context, StringTPtr s1, ErrorCode* errno);

/** strlen_spec **/
specification
SizeT strlen_spec(CallContext context, StringTPtr s);

/** strncat_spec **/
specification
StringTPtr strncat_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n);

/** strncmp_spec **/
specification
IntT strncmp_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n);
IntT strncmp_model(CString* s1, CString* s2, SizeT n);

/** strncpy_spec **/
specification
StringTPtr strncpy_spec(CallContext context, StringTPtr s1, StringTPtr s2, SizeT n);

/** strndup_spec **/
specification
StringTPtr strndup_spec(CallContext context, StringTPtr s, SizeT n, ErrorCode* errno);

/** strnlen_spec **/
specification
SizeT strnlen_spec(CallContext context, StringTPtr s, SizeT n);

/** strpbrk_spec **/
specification
StringTPtr strpbrk_spec(CallContext context, StringTPtr s1, StringTPtr s2);
IntT strpbrk_model(CString* s1, CString* s2); // returns position of a byte found in s1

/** strrchr_spec **/
specification
StringTPtr strrchr_spec(CallContext context, StringTPtr s, IntT c);
IntT strrchr_model(CString* s, IntT c); // returns position of c in s

specification
StringTPtr rindex_spec(CallContext context, StringTPtr s, IntT c);

/** strspn_spec **/
specification
SizeT strspn_spec(CallContext context, StringTPtr s1, StringTPtr s2);
SizeT strspn_model(CString* s1, CString* s2);

/** strstr_spec **/
specification
StringTPtr strstr_spec(CallContext context, StringTPtr s1, StringTPtr s2);
IntT strstr_model(CString* s1, CString* s2);

#endif

