/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef UTIL_FORMAT_PRINTF_MEDIA_SEH
#define UTIL_FORMAT_PRINTF_MEDIA_SEH

#include "util/format/printf_model.seh"
#include "process/process/process_common.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initUtilFormatPrintfSubsystem(void);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** asprintf_spec **/
mediator asprintf_media for specification
IntT asprintf_spec
         ( CallContext context, StringTPtr * ptr, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/** fprintf_spec **/
mediator fprintf_media for specification
IntT fprintf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                   ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                 );

/** printf_spec **/
mediator printf_media for specification
IntT printf_spec
         ( CallContext context, CString * format, List /* NULL */ * arguments, CString * output, ErrorCode * errno );

/** snprintf_spec **/
mediator snprintf_media for specification
IntT snprintf_spec
         ( CallContext context, CString * s, SizeT n, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/** sprintf_spec **/
mediator sprintf_media for specification
IntT sprintf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/** vasprintf_spec **/
mediator vasprintf_media for specification
IntT vasprintf_spec
         ( CallContext context, StringTPtr * ptr, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/** vdprintf_spec **/
mediator vdprintf_media for specification
IntT vdprintf_spec( CallContext context, FileDescId * fd, CString * format, List /* NULL */ * arguments,
                    ErrorCode * errno, CString * fileForFdName, OpenFlags oflag
                  );

/** vfprintf_spec **/
mediator vfprintf_media for specification
IntT vfprintf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                    ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                  );

/** vprintf_spec **/
mediator vprintf_media for specification
IntT vprintf_spec
         ( CallContext context, CString * format, List /* NULL */ * arguments, CString * output, ErrorCode * errno );

/** vsnprintf_spec **/
mediator vsnprintf_media for specification
IntT vsnprintf_spec
         ( CallContext context, CString * s, SizeT n, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/** vsprintf_spec **/
mediator vsprintf_media for specification
IntT vsprintf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

IntT oneOfPrintfCall( CallContext context, char * funcName, List /* NULL */ * arguments, ErrorCode * errno,
                      CString * output, TimeInterval * stimulTime
                    );

#endif
