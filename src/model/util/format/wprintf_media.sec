/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "locale/wcollate/wcollate_media.seh"
#include "util/format/wprintf_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilFormatWprintfSubsystem(void)
{
    // Set up mediators
    set_mediator_fwprintf_spec ( fwprintf_media  );
    set_mediator_swprintf_spec ( swprintf_media  );
    set_mediator_vfwprintf_spec( vfwprintf_media );
    set_mediator_vswprintf_spec( vswprintf_media );
    set_mediator_vwprintf_spec ( vwprintf_media  );
    set_mediator_wprintf_spec  ( wprintf_media   );

    // Set up formatters
    registerTSFormatter( "typedlist"    , (TSFormatterFuncType)typedlist_formatter     );
    registerTSFormatter( "dotsarguments", (TSFormatterFuncType)dotsarguments_formatter );
    registerTSFormatter( "wstr"         , (TSFormatterFuncType)wstring_formatter       );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** fwprintf_spec **/
mediator fwprintf_media for specification
IntT fwprintf_spec( CallContext context, FILETPtr * stream, WString * format, List /* NULL */ * arguments,
                    ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                  )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfWprintfCall( context, "fwprintf", arguments, errno, NULL, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** swprintf_spec **/
mediator swprintf_media for specification
IntT swprintf_spec
         ( CallContext context, WString * ws, SizeT n, WString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        if ( ws == NULL ) { add_List( arguments, 0, create_LongTObj( 0 ) ); }
                     else { add_List( arguments, 0, ws                   ); }
        add_List( arguments, 1, create_SizeTObj( n ) );
        add_List( arguments, 2, format               );

        res = oneOfWprintfCall( context, "swprintf", arguments, errno, NULL, & timestamp );

        if ( ws != NULL ) { copy( get_List( arguments, 0 ), ws     ); }    remove_List( arguments, 0 );
                                                                           remove_List( arguments, 0 );
                            copy( get_List( arguments, 0 ), format );      remove_List( arguments, 0 );

        return res;
    }
}

/** vfwprintf_spec **/
mediator vfwprintf_media for specification
IntT vfwprintf_spec( CallContext context, FILETPtr * stream, WString * format, List /* NULL */ * arguments,
                     ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                   )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfWprintfCall( context, "vfwprintf", arguments, errno, NULL, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vswprintf_spec **/
mediator vswprintf_media for specification
IntT vswprintf_spec
         ( CallContext context, WString * ws, SizeT n, WString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        if ( ws == NULL ) { add_List( arguments, 0, create_LongTObj( 0 ) ); }
                     else { add_List( arguments, 0, ws                   ); }
        add_List( arguments, 1, create_SizeTObj( n ) );
        add_List( arguments, 2, format               );

        res = oneOfWprintfCall( context, "vswprintf", arguments, errno, NULL, & timestamp );

        if ( ws != NULL ) { copy( get_List( arguments, 0 ), ws     ); }    remove_List( arguments, 0 );
                                                                           remove_List( arguments, 0 );
                            copy( get_List( arguments, 0 ), format );      remove_List( arguments, 0 );

        return res;
    }
}

/** vwprintf_spec **/
mediator vwprintf_media for specification
IntT vwprintf_spec
         ( CallContext context, WString * format, List /* NULL */ * arguments, WString * output, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfWprintfCall( context, "vwprintf", arguments, errno, output, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** wprintf_spec **/
mediator wprintf_media for specification
IntT wprintf_spec
         ( CallContext context, WString * format, List /* NULL */ * arguments, WString * output, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfWprintfCall( context, "wprintf", arguments, errno, output, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

IntT oneOfWprintfCall( CallContext context, char * funcName, List /* NULL */ * arguments, ErrorCode * errno,
                       WString * wOutput, TimeInterval * stimulTime
                     ) {
    return functionWithDotsCall( context, funcName, arguments, false, NULL, NULL, errno, NULL, wOutput, NULL, stimulTime );
}
