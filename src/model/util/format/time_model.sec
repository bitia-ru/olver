/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#define NEWREQ

#include "util/format/time_model.seh"


#pragma SEC subsystem format "util.format"



/*
   The group of functions 'util.format.time' consists of:
       getdate [1]
       strftime [2]
       strptime [1]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    getdate - convert user format date and time

SYNOPSIS

    [XSI]  #include <time.h>
    struct tm *getdate(const char *string);

DESCRIPTION

    The getdate() function shall convert a string representation of a date or
    time into a broken-down time.

    The external variable or macro getdate_err is used by getdate() to return
    error values.

    Templates are used to parse and interpret the input string. The templates
    are contained in a text file identified by the environment variable
    DATEMSK . The DATEMSK variable should be set to indicate the full pathname
    of the file that contains the templates.The first line in the template that
    matches the input specification is used for interpretation and conversion
    into the internal time format.

    The following conversion specifications shall be supported:

        %%
        Equivalent to %.

        %a
        Abbreviated weekday name.

        %A
        Full weekday name.

        %b
        Abbreviated month name.

        %B
        Full month name.

        %c
        Locale's appropriate date and time representation.

        %C
        Century number [00,99]; leading zeros are permitted but not required.

        %d
        Day of month [01,31]; the leading 0 is optional.

        %D
        Date as %m / %d / %y.

        %e
        Equivalent to %d.

        %h
        Abbreviated month name.

        %H
        Hour [00,23].

        %I
        Hour [01,12].

        %m
        Month number [01,12].

        %M
        Minute [00,59].

        %n
        Equivalent to <newline>.

        %p
        Locale's equivalent of either AM or PM.

        %r
        The locale's appropriate representation of time in AM and PM notation.
        In the POSIX locale, this shall be equivalent to %I : %M : %S %p.

        %R
        Time as %H : %M.

        %S
        Seconds [00,60]. The range goes to 60 (rather than stopping at 59) to
        allow positive leap seconds to be expressed. Since leap seconds cannot
        be predicted by any algorithm, leap second data must come from some
        external source.

        %t
        Equivalent to <tab>.

        %T
        Time as %H : %M : %S.

        %w
        Weekday number (Sunday = [0,6]).

        %x
        Locale's appropriate date representation.

        %X
        Locale's appropriate time representation.

        %y
        Year within century. When a century is not otherwise specified, values
        in the range [69,99] shall refer to years 1969 to 1999 inclusive, and
        values in the range [00,68] shall refer to years 2000 to 2068
        inclusive.

        Note:
        It is expected that in a future version of IEEE Std 1003.1-2001 the
        default century inferred from a 2-digit year will change. (This would
        apply to all commands accepting a 2-digit year as input.)

        %Y
        Year as "ccyy" (for example, 2001).

        %Z
        Timezone name or no characters if no timezone exists. If the timezone
        supplied by %Z is not the timezone that getdate() expects, an invalid
        input specification error shall result. The getdate() function
        calculates an expected timezone based on information supplied to the
        function (such as the hour, day, and month).

    The match between the template and input specification performed by
    getdate() shall be case-insensitive.

    The month and weekday names can consist of any combination of upper and
    lowercase letters. The process can request that the input date or time
    specification be in a specific language by setting the LC_TIME category
    (see setlocale()).

    Leading zeros are not necessary for the descriptors that allow leading
    zeros. However, at most two digits are allowed for those descriptors,
    including leading zeros. Extra whitespace in either the template file or
    in string shall be ignored.

    The results are undefined if the conversion specifications %c, %x, and %X
    include unsupported conversion specifications.

    The following rules apply for converting the input specification into the
    internal format:

    If %Z is being scanned, then getdate() shall initialize the broken-down
    time to be the current time in the scanned timezone. Otherwise, it shall
    initialize the broken-down time based on the current local time as if
    localtime() had been called.

    If only the weekday is given, the day chosen shall be the day, starting
    with today and moving into the future, which first matches the named day.

    If only the month (and no year) is given, the month chosen shall be the
    month, starting with the current month and moving into the future, which
    first matches the named month. The first day of the month shall be assumed
    if no day is given.

    If no hour, minute, and second are given, the current hour, minute, and
    second shall be assumed.

    If no date is given, the hour chosen shall be the hour, starting with the
    current hour and moving into the future, which first matches the named
    hour.

    If a conversion specification in the DATEMSK file does not correspond to
    one of the conversion specifications above, the behavior is unspecified.

    The getdate() function need not be reentrant. A function that is not
    required to be reentrant is not required to be thread-safe.

RETURN VALUE

    Upon successful completion, getdate() shall return a pointer to a struct
    tm. Otherwise, it shall return a null pointer and set getdate_err to
    indicate the error.

ERRORS

    The getdate() function shall fail in the following cases, setting
    getdate_err to the value shown in the list below. Any changes to errno are
    unspecified.

        The DATEMSK environment variable is null or undefined.

        The template file cannot be opened for reading.

        Failed to get file status information.

        The template file is not a regular file.

        An I/O error is encountered while reading the template file.

        Memory allocation failed (not enough memory available).

        There is no line in the template that matches the input.

        Invalid input specification. For example, February 31; or a time is
        specified that cannot be represented in a time_t (representing the time
        in seconds since the Epoch).
*/

invariant specification typedef struct TmT TmT = {};

specification
TmT* getdate_spec( CallContext context, CString* str)
{
    pre
    {
        /*
        * The results are undefined if the conversion specifications %c, %x, and %X
        * include unsupported conversion specifications.
        */
        REQ("app.getdate.14", "", TODO_REQ());

        /*
        * If a conversion specification in the DATEMSK file does not correspond to one of
        * the conversion specifications above, the behavior is unspecified.
        */
        REQ("app.getdate.16", "", TODO_REQ());

        return true;
    }
    post
    {
        /*
         * The external variable or macro getdate_err is used by getdate() to return error
         * values.
         */
        REQ("getdate.02", "", TODO_REQ());

        /*
         * The process can request that the input date or time specification be in a
         * specific language by setting the LC_TIME category (see setlocale()).
         */
        REQ("getdate.10", "", TODO_REQ());


        /*
         * If %Z is being scanned, then getdate() shall initialize the broken-down time to
         * be the current time in the scanned timezone.
         */
        REQ("getdate.15.01.01", "", TODO_REQ());

        /*
         * Otherwise, it shall initialize the broken-down time based on the current local
         * time as if localtime() had been called.
         */
        REQ("getdate.15.01.02", "", TODO_REQ());

        /*
         * The getdate() function need not be reentrant. A function that is not required
         * to be reentrant is not required to be thread-safe.
         */
        REQ("getdate.17", "", TODO_REQ());

        /*
         * Upon successful completion, getdate() shall return a pointer to a struct tm.
         */
        REQ("getdate.18.01", "", TODO_REQ());

        /*
         * Otherwise, it shall return a null pointer and set getdate_err to indicate the
         * error.
         */
        REQ("getdate.18.02", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * The DATEMSK environment variable is null or undefined.
         */
        REQ("getdate.19.01", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * The template file cannot be opened for reading.
         */
        REQ("getdate.19.02", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * Failed to get file status information.
         */
        REQ("getdate.19.03", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * The template file is not a regular file.
         */
        REQ("getdate.19.04", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * An I/O error is encountered while reading the template file.
         */
        REQ("getdate.19.05", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * Memory allocation failed (not enough memory available).
         */
        REQ("getdate.19.06", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * There is no line in the template that matches the input.
         */
        REQ("getdate.19.07", "", TODO_REQ());

        /*
         * The getdate() function shall fail in the following cases, setting getdate_err
         * to the value shown in the list below. Any changes to errno are unspecified.
         *
         * Invalid input specification.
         */
        REQ("getdate.19.08", "", TODO_REQ());



        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    strftime - convert date and time to a string

SYNOPSIS

    #include <time.h>
    size_t strftime(char *restrict s, size_t maxsize,
           const char *restrict format, const struct tm *restrict timeptr);

DESCRIPTION

    [CX]  The functionality described on this reference page is aligned with
    the ISO C standard. Any conflict between the requirements described here
    and the ISO C standard is unintentional. This volume of IEEE Std
    1003.1-2001 defers to the ISO C standard.

    The strftime() function shall place bytes into the array pointed to by s as
    controlled by the string pointed to by format. The format is a character
    string, beginning and ending in its initial shift state, if any. The format
    string consists of zero or more conversion specifications and ordinary
    characters. A conversion specification consists of a '%' character,
    possibly followed by an E or O modifier, and a terminating conversion
    specifier character that determines the conversion specification's
    behavior. All ordinary characters (including the terminating null byte) are
    copied unchanged into the array. If copying takes place between objects
    that overlap, the behavior is undefined. No more than maxsize bytes are
    placed into the array. Each conversion specifier is replaced by appropriate
    characters as described in the following list. The appropriate characters
    are determined using the LC_TIME category of the current locale and by the
    values of zero or more members of the broken-down time structure pointed to
    by timeptr, as specified in brackets in the description. If any of the
    specified values are outside the normal range, the characters stored are
    unspecified.

    [CX]  Local timezone information is used as though strftime() called
    tzset().

    The following conversion specifications are supported:

        %a
        Replaced by the locale's abbreviated weekday name. [ tm_wday]

        %A
        Replaced by the locale's full weekday name. [ tm_wday]

        %b
        Replaced by the locale's abbreviated month name. [ tm_mon]

        %B
        Replaced by the locale's full month name. [ tm_mon]

        %c
        Replaced by the locale's appropriate date and time representation.
        (See the Base Definitions volume of IEEE Std 1003.1-2001, <time.h>.)

        %C
        Replaced by the year divided by 100 and truncated to an integer, as a
        decimal number [00,99]. [ tm_year]

        %d
        Replaced by the day of the month as a decimal number [01,31].
        [ tm_mday]

        %D
        Equivalent to %m / %d / %y. [ tm_mon, tm_mday, tm_year]

        %e
        Replaced by the day of the month as a decimal number [1,31]; a single
        digit is preceded by a space. [ tm_mday]

        %F
        Equivalent to %Y - %m - %d (the ISO 8601:2000 standard date format).
        [ tm_year, tm_mon, tm_mday]

        %g
        Replaced by the last 2 digits of the week-based year (see below) as a
        decimal number [00,99]. [ tm_year, tm_wday, tm_yday]

        %G
        Replaced by the week-based year (see below) as a decimal number (for
        example, 1977). [ tm_year, tm_wday, tm_yday]

        %h
        Equivalent to %b. [ tm_mon]

        %H
        Replaced by the hour (24-hour clock) as a decimal number [00,23].
        [ tm_hour]

        %I
        Replaced by the hour (12-hour clock) as a decimal number [01,12].
        [ tm_hour]

        %j
        Replaced by the day of the year as a decimal number [001,366].
        [ tm_yday]

        %m
        Replaced by the month as a decimal number [01,12]. [ tm_mon]

        %M
        Replaced by the minute as a decimal number [00,59]. [ tm_min]

        %n
        Replaced by a <newline>.

        %p
        Replaced by the locale's equivalent of either a.m. or p.m. [ tm_hour]

        %r
        Replaced by the time in a.m. and p.m. notation; [CX]   in the POSIX
        locale this shall be equivalent to %I : %M : %S %p.
        [ tm_hour, tm_min, tm_sec]

        %R
        Replaced by the time in 24-hour notation ( %H : %M ).
        [ tm_hour, tm_min]

        %S
        Replaced by the second as a decimal number [00,60]. [ tm_sec]

        %t
        Replaced by a <tab>.

        %T
        Replaced by the time ( %H : %M : %S ). [ tm_hour, tm_min, tm_sec]

        %u
        Replaced by the weekday as a decimal number [1,7], with 1 representing
        Monday. [ tm_wday]

        %U
        Replaced by the week number of the year as a decimal number [00,53].
        The first Sunday of January is the first day of week 1; days in the new
        year before this are in week 0. [ tm_year, tm_wday, tm_yday]

        %V
        Replaced by the week number of the year (Monday as the first day of the
        week) as a decimal number [01,53]. If the week containing 1 January has
        four or more days in the new year, then it is considered week 1.
        Otherwise, it is the last week of the previous year, and the next week
        is week 1. Both January 4th and the first Thursday of January are
        always in week 1. [ tm_year, tm_wday, tm_yday]

        %w
        Replaced by the weekday as a decimal number [0,6], with 0 representing
        Sunday. [ tm_wday]

        %W
        Replaced by the week number of the year as a decimal number [00,53].
        The first Monday of January is the first day of week 1; days in the new
        year before this are in week 0. [ tm_year, tm_wday, tm_yday]

        %x
        Replaced by the locale's appropriate date representation. (See the Base
        Definitions volume of IEEE Std 1003.1-2001, <time.h>.)

        %X
        Replaced by the locale's appropriate time representation. (See the Base
        Definitions volume of IEEE Std 1003.1-2001, <time.h>.)

        %y
        Replaced by the last two digits of the year as a decimal number
        [00,99]. [ tm_year]

        %Y
        Replaced by the year as a decimal number (for example, 1997).
        [ tm_year]

        %z
        Replaced by the offset from UTC in the ISO 8601:2000 standard format
        ( +hhmm or -hhmm ), or by no characters if no timezone is determinable.
        For example, "-0430" means 4 hours 30 minutes behind UTC (west of
        Greenwich). [CX]   If tm_isdst is zero, the standard time offset is
        used. If tm_isdst is greater than zero, the daylight savings time
        offset is used. If tm_isdst is negative, no characters are returned.
        [ tm_isdst]

        %Z
        Replaced by the timezone name or abbreviation, or by no bytes if no
        timezone information exists. [ tm_isdst]

        %%
        Replaced by %.

    If a conversion specification does not correspond to any of the above, the
    behavior is undefined.

    [CX]  If a struct tm broken-down time structure is created by localtime()
    or localtime_r(), or modified by mktime(), and the value of TZ is
    subsequently modified, the results of the %Z and %z strftime() conversion
    specifiers are undefined, when strftime() is called with such a
    broken-down time structure.

    If a struct tm broken-down time structure is created or modified by
    gmtime() or gmtime_r(), it is unspecified whether the result of the %Z and
    %z conversion specifiers shall refer to UTC or the current local timezone,
    when strftime() is called with such a broken-down time structure.

    Modified Conversion Specifiers

    Some conversion specifiers can be modified by the E or O modifier
    characters to indicate that an alternative format or specification should
    be used rather than the one normally used by the unmodified conversion
    specifier. If the alternative format or specification does not exist for
    the current locale (see ERA in the Base Definitions volume of IEEE Std
    1003.1-2001, Section 7.3.5, LC_TIME), the behavior shall be as if the
    unmodified conversion specification were used.

        %Ec
        Replaced by the locale's alternative appropriate date and time
        representation.

        %EC
        Replaced by the name of the base year (period) in the locale's
        alternative representation.

        %Ex
        Replaced by the locale's alternative date representation.

        %EX
        Replaced by the locale's alternative time representation.

        %Ey
        Replaced by the offset from %EC (year only) in the locale's alternative
        representation.

        %EY
        Replaced by the full alternative year representation.

        %Od
        Replaced by the day of the month, using the locale's alternative
        numeric symbols, filled as needed with leading zeros if there is any
        alternative symbol for zero; otherwise, with leading spaces.

        %Oe
        Replaced by the day of the month, using the locale's alternative
        numeric symbols, filled as needed with leading spaces.

        %OH
        Replaced by the hour (24-hour clock) using the locale's alternative
        numeric symbols.

        %OI
        Replaced by the hour (12-hour clock) using the locale's alternative
        numeric symbols.

        %Om
        Replaced by the month using the locale's alternative numeric symbols.

        %OM
        Replaced by the minutes using the locale's alternative numeric symbols.

        %OS
        Replaced by the seconds using the locale's alternative numeric symbols.

        %Ou
        Replaced by the weekday as a number in the locale's alternative
        representation (Monday=1).

        %OU
        Replaced by the week number of the year (Sunday as the first day of the
        week, rules corresponding to %U ) using the locale's alternative
        numeric symbols.

        %OV
        Replaced by the week number of the year (Monday as the first day of the
        week, rules corresponding to %V ) using the locale's alternative
        numeric symbols.

        %Ow
        Replaced by the number of the weekday (Sunday=0) using the locale's
        alternative numeric symbols.

        %OW
        Replaced by the week number of the year (Monday as the first day of the
        week) using the locale's alternative numeric symbols.

        %Oy
        Replaced by the year (offset from %C ) using the locale's alternative
        numeric symbols.

    %g, %G, and %V give values according to the ISO 8601:2000 standard
    week-based year. In this system, weeks begin on a Monday and week 1 of the
    year is the week that includes January 4th, which is also the week that
    includes the first Thursday of the year, and is also the first week that
    contains at least four days in the year. If the first Monday of January is
    the 2nd, 3rd, or 4th, the preceding days are part of the last week of the
    preceding year; thus, for Saturday 2nd January 1999, %G is replaced by 1998
    and %V is replaced by 53. If December 29th, 30th, or 31st is a Monday, it
    and any following days are part of week 1 of the following year. Thus, for
    Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by
    01.

    If a conversion specifier is not one of the above, the behavior is
    undefined.

RETURN VALUE

    If the total number of resulting bytes including the terminating null byte
    is not more than maxsize, strftime() shall return the number of bytes
    placed into the array pointed to by s, not including the terminating null
    byte. Otherwise, 0 shall be returned and the contents of the array are
    unspecified.

ERRORS

    No errors are defined.
*/

specification
SizeT strftime_spec( CallContext context, StringTPtr s, SizeT maxsize, StringTPtr format, TmT* timeptr)
{
    SizeT len;

    CString* s_post;
    CString* format_pre;
    CString* format_post;

    pre
    {
        REQ("", "format is not NULL", !isNULL_VoidTPtr(format));
        REQ("", "s is not NULL", !isNULL_VoidTPtr(s));

        REQ("", "Memory pointed to by format is available in the context", isValidPointer(context, format));
        REQ("", "Memory pointed to by s is available in the context", isValidPointer(context, s));

        format_pre = readCString_VoidTPtr(format);
        len = length_CString(format_pre) + 1;

        /*
         * If copying takes place between objects that overlap, the behavior is undefined.
         */
        REQ("app.strftime.06", "If copying takes place between objects that overlap, the behavior is undefined", !areObjectsOverlapped(s, len, format, len));

        /*
         * timeptr is validated through invariant
         */
        /*
         * If any of the specified values are outside the normal range, the characters
         * stored are unspecified.
         */
        REQ("app.strftime.10", " If any of the specified values are outside the normal range, the characters stored are unspecified", true);

        /*
         * If a conversion specification does not correspond to any of the above, the
         * behavior is undefined.
         */
        REQ("app.strftime.12", "", TODO_REQ());

        /*
         * If a struct tm broken-down time structure is created by localtime() or
         * localtime_r(), or modified by mktime(), and the value of TZ is subsequently
         * modified, the results of the %Z and %z strftime() conversion specifiers are
         * undefined, when strftime() is called with such a broken-down time structure.
         */
        REQ("app.strftime.13", "", TODO_REQ());

        /*
         * If a struct tm broken-down time structure is created or modified by gmtime() or
         * gmtime_r(), it is unspecified whether the result of the %Z and %z conversion
         * specifiers shall refer to UTC or the current local timezone, when strftime() is
         * called with such a broken-down time structure.
         */
        REQ("app.strftime.14", "", TODO_REQ());

        /*
         * If a conversion specifier is not one of the above, the behavior is undefined.
         */
        REQ("app.strftime.19", "", TODO_REQ());

        return true;
    }
    post
    {
        format_post = readCString_VoidTPtr(format);
        if (!isNULL_VoidTPtr(s))
            s_post = readCString_VoidTPtr(s);
        else
            s_post = create_CString("");

        REQ("", "format shall not be changed", equals(format_post, format_pre));

        /*
         * The format is a character string, beginning and ending in its initial shift
         * state, if any.
         */
        REQ("strftime.02", "The format is a character string, beginning and ending in its initial shift state, if any", STRUCT_REQ());

        /*
         * The format string consists of zero or more conversion specifications and
         * ordinary characters.
         */
        REQ("strftime.03", "The format string consists of zero or more conversion specifications and ordinary characters", STRUCT_REQ());

        /*
         * A conversion specification consists of a '%' character, possibly followed by an
         * E or O modifier, and a terminating conversion specifier character that
         * determines the conversion specification's behavior.
         */
        REQ("strftime.04", "A conversion specification consists of a '%' character, possibly followed by an E or O modifier, and a terminating conversion specifier", STRUCT_REQ());

        /*
         * No more than maxsize bytes are placed into the array.
         */
        REQ("strftime.07", "No more than maxsize bytes are placed into the array",
            equals( readCByteArray_MemoryBlockExceptFor(getTopMemoryBlock(s), s, maxsize),
                   @readCByteArray_MemoryBlockExceptFor(getTopMemoryBlock(s), s, maxsize)
                )
            );

        /*
         * The appropriate characters are determined using the LC_TIME category of the
         * current locale and by the values of zero or more members of the broken-down
         * time structure pointed to by timeptr, as specified in brackets in the
         * description.
         */
        REQ("strftime.09", "The appropriate characters are determined using the LC_TIME category of the current locale and by the values of zero or more members of the broken-down time structure", STRUCT_REQ());

        /*
         * Some conversion specifiers can be modified by the E or O modifier characters to
         * indicate that an alternative format or specification should be used rather than
         * the one normally used by the unmodified conversion specifier.
         */
        REQ("strftime.15", "Some conversion specifiers can be modified by the E or O modifier characters to indicate that an alternative format", STRUCT_REQ());

        /*
         * If the alternative format or specification does not exist for the current
         * locale (see ERA in the Base Definitions volume of IEEE Std 1003.1-2001, Section
         * 7.3.5, LC_TIME), the behavior shall be as if the unmodified conversion
         * specification were used.
         */
        REQ("strftime.16", "", TODO_REQ());


        if(strftime_spec != 0)
        {
            /*
             * If the total number of resulting bytes including the terminating null byte is
             * not more than maxsize, strftime() shall return the number of bytes placed into
             * the array pointed to by s, not including the terminating null byte.
             */
            REQ("strftime.20.01", "shall return the number of bytes placed into the array",
                !isNULL_VoidTPtr(s) && length_CString(s_post) == strftime_spec
                );
        }

        return true;
    }
}

/*
NAME

    strptime -- parse a time string

DESCRIPTION

    The strptime() shall behave as specified in the ISO POSIX (2003) with
    differences as listed below.

    Number of leading zeroes may be limited

    The ISO POSIX (2003) specifies fields for which "leading zeros are permitted
    but not required"; however, applications shall not expect to be able to supply
    more leading zeroes for these fields than would be implied by the range of the
    field. Implementations may choose to either match an input with excess leading
    zeroes, or treat this as a non-matching input. For example, %j has a range of
    001 to 366, so 0, 00, 000, 001, and 045 are acceptable inputs, but inputs such
    as 0000, 0366 and the like are not.

    Rationale

    glibc developers consider it appropriate behavior to forbid excess leading
    zeroes. When trying to parse a given input against several format strings,
    forbidding excess leading zeroes could be helpful. For example, if one matches
    0011-12-26 against %m-%d-%Y and then against %Y-%m-%d, it seems useful for the
    first match to fail, as it would be perverse to parse that date as November 12,
    year 26. The second pattern parses it as December 26, year 11.

    The ISO POSIX (2003) is not explicit that an unlimited number of leading zeroes
    are required, although it may imply this. The LSB explicitly allows
    implementations to have either behavior. Future versions of this standard may
    require implementations to forbid excess leading zeroes.

    An Interpretation Request is currently pending against ISO POSIX (2003) for
    this matter.
*/
/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    strptime - date and time conversion

SYNOPSIS

    [XSI]  #include <time.h>
    char *strptime(const char *restrict buf, const char *restrict format,
           struct tm *restrict tm);

DESCRIPTION

    The strptime() function shall convert the character string pointed to by
    buf to values which are stored in the tm structure pointed to by tm, using
    the format specified by format.

    The format is composed of zero or more directives. Each directive is
    composed of one of the following: one or more white-space characters (as
    specified by isspace()); an ordinary character (neither '%' nor a
    white-space character); or a conversion specification. Each conversion
    specification is composed of a '%' character followed by a conversion
    character which specifies the replacement required. The application shall
    ensure that there is white-space or other non-alphanumeric characters
    between any two conversion specifications. The following conversion
    specifications are supported:

        %a
        The day of the week, using the locale's weekday names; either the
        abbreviated or full name may be specified.

        %A
        Equivalent to %a.

        %b
        The month, using the locale's month names; either the abbreviated or
        full name may be specified.

        %B
        Equivalent to %b.

        %c
        Replaced by the locale's appropriate date and time representation.

        %C
        The century number [00,99]; leading zeros are permitted but not
        required.

        %d
        The day of the month [01,31]; leading zeros are permitted but not
        required.

        %D
        The date as %m / %d / %y.

        %e
        Equivalent to %d.

        %h
        Equivalent to %b.

        %H
        The hour (24-hour clock) [00,23]; leading zeros are permitted but not
        required.

        %I
        The hour (12-hour clock) [01,12]; leading zeros are permitted but not
        required.

        %j
        The day number of the year [001,366]; leading zeros are permitted but
        not required.

        %m
        The month number [01,12]; leading zeros are permitted but not required.

        %M
        The minute [00,59]; leading zeros are permitted but not required.

        %n
        Any white space.

        %p
        The locale's equivalent of a.m or p.m.

        %r
        12-hour clock time using the AM/PM notation if t_fmt_ampm is not an
        empty string in the LC_TIME portion of the current locale; in the POSIX
        locale, this shall be equivalent to %I : %M : %S %p.

        %R
        The time as %H : %M.

        %S
        The seconds [00,60]; leading zeros are permitted but not required.

        %t
        Any white space.

        %T
        The time as %H : %M : %S.

        %U
        The week number of the year (Sunday as the first day of the week) as a
        decimal number [00,53]; leading zeros are permitted but not required.

        %w
        The weekday as a decimal number [0,6], with 0 representing Sunday;
        leading zeros are permitted but not required.

        %W
        The week number of the year (Monday as the first day of the week) as a
        decimal number [00,53]; leading zeros are permitted but not required.

        %x
        The date, using the locale's date format.

        %X
        The time, using the locale's time format.

        %y
        The year within century. When a century is not otherwise specified,
        values in the range [69,99] shall refer to years 1969 to 1999
        inclusive, and values in the range [00,68] shall refer to years 2000 to
        2068 inclusive; leading zeros shall be permitted but shall not be
        required.

        Note:
        It is expected that in a future version of IEEE Std 1003.1-2001 the
        default century inferred from a 2-digit year will change. (This would
        apply to all commands accepting a 2-digit year as input.)

        %Y
        The year, including the century (for example, 1988).

        %%
        Replaced by %.

    Modified Conversion Specifiers

    Some conversion specifiers can be modified by the E and O modifier
    characters to indicate that an alternative format or specification should
    be used rather than the one normally used by the unmodified conversion
    specifier. If the alternative format or specification does not exist in the
    current locale, the behavior shall be as if the unmodified conversion
    specification were used.

        %Ec
        The locale's alternative appropriate date and time representation.

        %EC
        The name of the base year (period) in the locale's alternative
        representation.

        %Ex
        The locale's alternative date representation.

        %EX
        The locale's alternative time representation.

        %Ey
        The offset from %EC (year only) in the locale's alternative
        representation.

        %EY
        The full alternative year representation.

        %Od
        The day of the month using the locale's alternative numeric symbols;
        leading zeros are permitted but not required.

        %Oe
        Equivalent to %Od.

        %OH
        The hour (24-hour clock) using the locale's alternative numeric
        symbols.

        %OI
        The hour (12-hour clock) using the locale's alternative numeric
        symbols.

        %Om
        The month using the locale's alternative numeric symbols.

        %OM
        The minutes using the locale's alternative numeric symbols.

        %OS
        The seconds using the locale's alternative numeric symbols.

        %OU
        The week number of the year (Sunday as the first day of the week) using
        the locale's alternative numeric symbols.

        %Ow
        The number of the weekday (Sunday=0) using the locale's alternative
        numeric symbols.

        %OW
        The week number of the year (Monday as the first day of the week) using
        the locale's alternative numeric symbols.

        %Oy
        The year (offset from %C ) using the locale's alternative numeric
        symbols.

    A conversion specification composed of white-space characters is executed
    by scanning input up to the first character that is not white-space (which
    remains unscanned), or until no more characters can be scanned.

    A conversion specification that is an ordinary character is executed by
    scanning the next character from the buffer. If the character scanned from
    the buffer differs from the one comprising the directive, the directive
    fails, and the differing and subsequent characters remain unscanned.

    A series of conversion specifications composed of %n, %t, white-space
    characters, or any combination is executed by scanning up to the first
    character that is not white space (which remains unscanned), or until no
    more characters can be scanned.

    Any other conversion specification is executed by scanning characters until
    a character matching the next directive is scanned, or until no more
    characters can be scanned. These characters, except the one matching the
    next directive, are then compared to the locale values associated with the
    conversion specifier. If a match is found, values for the appropriate tm
    structure members are set to values corresponding to the locale
    information. Case is ignored when matching items in buf such as month or
    weekday names. If no match is found, strptime() fails and no more
    characters are scanned.

RETURN VALUE

    Upon successful completion, strptime() shall return a pointer to the
    character following the last character parsed. Otherwise, a null pointer
    shall be returned.

ERRORS

    No errors are defined.
*/

specification
CString* strptime_spec( CallContext context, StringTPtr buf, StringTPtr format, TmT* timeptr)
{
    CString* buf_pre;
    CString* buf_post;
    CString* format_pre;
    CString* format_post;

    pre
    {
        format_pre = readCString_VoidTPtr(format);
        buf_pre = readCString_VoidTPtr(buf);

        REQ("", "buf is not NULL", !isNULL_VoidTPtr(buf));
        REQ("", "format is not NULL", !isNULL_VoidTPtr(format));

        REQ("", "Memory pointed to by buf is available in the context", isValidPointer(context, buf));
        REQ("", "Memory pointed to by format is available in the context", isValidPointer(context, format));

        /*
         * The ISO POSIX (2003) specifies fields for which "leading zeros are permitted
         * but not required"; however, applications shall not expect to be able to supply
         * more leading zeroes for these fields than would be implied by the range of the
         * field. Implementations may choose to either match an input with excess leading
         * zeroes, or treat this as a non-matching input. For example, %j has a range of
         * 001 to 366, so 0, 00, 000, 001, and 045 are acceptable inputs, but inputs such
         * as 0000, 0366 and the like are not.
         */
        REQ("app.strptime.30", "", TODO_REQ());

        return true;
    }
    post
    {
        IntT oldpos = 0, pos = 0, err = 0;
        format_post = readCString_VoidTPtr(format);
        buf_post = readCString_VoidTPtr(buf);

        REQ("", "format shall not be changed", equals(format_post, format_pre));
        REQ("", "buf shall not be changed", equals(buf_post, buf_pre));


        // Transformation of templates
        pos = indexOfCharFrom_CString(format_post, '%', 0);

        while(pos != -1)
        {
            oldpos = pos;
            pos = indexOfCharFrom_CString(format_post, '%', pos + 1);
            if(pos != -1)
            {
                if(pos == oldpos + 1)
                {
                    if(indexOfCharFrom_CString(format_post, '%', pos + 1) == pos + 1)
                        err++;

                    oldpos = pos + 1;
                    pos++;
                }
                else
                {
                    if(charAt_CString(format_post, oldpos + 1) == 'E' || charAt_CString(format_post, oldpos + 1) == 'O')
                    {
                        if(pos <= oldpos + 3)
                            err++;
                    }
                    else
                    {
                        if(pos <= oldpos + 2)
                            err++;
                    }
                }
            }
        }

        /*
         * The application shall ensure that there is white-space or other non-
         * alphanumeric characters between any two conversion specifications.
         */
        REQ("strptime.05", "there is white-space or other non-alphanumeric characters between any two conversion specifications",
            err == 0
            );







        /*
         * A conversion specification composed of white-space characters is executed by
         * scanning input up to the first character that is not white-space (which remains
         * unscanned), or until no more characters can be scanned.
         */
        REQ("strptime.10", "", TODO_REQ());


        /*
         * A conversion specification that is an ordinary character is executed by
         * scanning the next character from the buffer.
         */
        REQ("strptime.11", "", TODO_REQ());


        /*
         * If the character scanned from the buffer differs from the one comprising the
         * directive, the directive fails, and the differing and subsequent characters
         * remain unscanned.
         */
        REQ("strptime.12", "", TODO_REQ());



        /*
         * A series of conversion specifications composed of %n, %t, white-space
         * characters, or any combination is executed by scanning up to the first
         * character that is not white space (which remains unscanned), or until no more
         * characters can be scanned.
         */
        REQ("strptime.13", "", TODO_REQ());

        /*
         * Any other conversion specification is executed by scanning characters until a
         * character matching the next directive is scanned, or until no more characters
         * can be scanned.
         */
        REQ("strptime.14", "", TODO_REQ());

        /*
         * These characters, except the one matching the next directive, are then compared
         * to the locale values associated with the conversion specifier.
         */
        REQ("strptime.15", "", TODO_REQ());

        /*
         * If a match is found, values for the appropriate tm structure members are set to
         * values corresponding to the locale information.
         */
        REQ("strptime.16", "", TODO_REQ());


     
        return true;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

TmT* create_TmT(IntT tm_sec, IntT tm_min, IntT tm_hour, IntT tm_mday, IntT tm_mon, IntT tm_year, IntT tm_wday, IntT tm_yday, IntT tm_isdst, LongT tm_gmtoff, CString *tm_zone)
{
    return create(&type_TmT, tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst, tm_gmtoff, tm_zone);
}

invariant(TmT* time)
{
    if (time->tm_sec >= 0 && time->tm_sec <= 60)
    if (time->tm_min >= 0 && time->tm_min <= 59)
    if (time->tm_hour >= 0 && time->tm_hour <=23)
    if (time->tm_mday >=1 && time->tm_mday <= 31)
    if (time->tm_mon >= 0 && time->tm_mon <= 11)
    if (time->tm_wday >= 0 && time->tm_wday <= 6)
    if (time->tm_yday >= 0 && time->tm_yday <= 365)
//    if (time->tm_isdst);
//  TODO: Inadequate reaction on this parameter.
    return true;
    else return false;
}

