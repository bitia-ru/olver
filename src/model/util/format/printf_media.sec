/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "locale/wcollate/wcollate_media.seh"
#include "util/format/printf_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initUtilFormatPrintfSubsystem(void)
{
    // Set up mediators
    set_mediator_asprintf_spec ( asprintf_media  );
    set_mediator_fprintf_spec  ( fprintf_media   );
    set_mediator_printf_spec   ( printf_media    );
    set_mediator_snprintf_spec ( snprintf_media  );
    set_mediator_sprintf_spec  ( sprintf_media   );
    set_mediator_vasprintf_spec( vasprintf_media );
    set_mediator_vdprintf_spec ( vdprintf_media  );
    set_mediator_vfprintf_spec ( vfprintf_media  );
    set_mediator_vprintf_spec  ( vprintf_media   );
    set_mediator_vsnprintf_spec( vsnprintf_media );
    set_mediator_vsprintf_spec ( vsprintf_media  );

    // Set up formatters
    registerTSFormatter( "typedlist"    , (TSFormatterFuncType)typedlist_formatter     );
    registerTSFormatter( "dotsarguments", (TSFormatterFuncType)dotsarguments_formatter );
    registerTSFormatter( "wstr"         , (TSFormatterFuncType)wstring_formatter       );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** asprintf_spec **/
mediator asprintf_media for specification
IntT asprintf_spec
         ( CallContext context, StringTPtr * ptr, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        VoidTPtr ptrPtr = allocateMemoryBlock( context, sizeof( LongT ) );
        writePointer_VoidTPtr( context, ptrPtr, * ptr );

        add_List( arguments, 0, create_VoidTPtrObj( ptrPtr ) );
        add_List( arguments, 1, format                       );

        res = oneOfPrintfCall( context, "asprintf", arguments, errno, NULL, & timestamp );

        * ptr = readPointer_VoidTPtr( context, ptrPtr );
        deallocateMemoryBlock( context, ptrPtr );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** fprintf_spec **/
mediator fprintf_media for specification
IntT fprintf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                   ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                 )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfPrintfCall( context, "fprintf", arguments, errno, NULL, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** printf_spec **/
mediator printf_media for specification
IntT printf_spec( CallContext context, CString * format, List /* NULL */ * arguments, CString * output, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfPrintfCall( context, "printf", arguments, errno, output, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** snprintf_spec **/
mediator snprintf_media for specification
IntT snprintf_spec
         ( CallContext context, CString * s, SizeT n, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        if ( s == NULL ) { add_List( arguments, 0, create_LongTObj( 0 ) ); }
                    else { add_List( arguments, 0, s                    ); }
        add_List( arguments, 1, create_SizeTObj( n ) );
        add_List( arguments, 2, format               );

        res = oneOfPrintfCall( context, "snprintf", arguments, errno, NULL, & timestamp );

        if ( s != NULL ) { copy( get_List( arguments, 0 ), s      ); }    remove_List( arguments, 0 );
                                                                          remove_List( arguments, 0 );
                           copy( get_List( arguments, 0 ), format );      remove_List( arguments, 0 );

        return res;
    }
}

/** sprintf_spec **/
mediator sprintf_media for specification
IntT sprintf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, s      );
        add_List( arguments, 1, format );

        res = oneOfPrintfCall( context, "sprintf", arguments, errno, NULL, & timestamp );

        copy( get_List( arguments, 0 ), s      );    remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vasprintf_spec **/
mediator vasprintf_media for specification
IntT vasprintf_spec
         ( CallContext context, StringTPtr * ptr, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        VoidTPtr ptrPtr = allocateMemoryBlock( context, sizeof( LongT ) );
        writePointer_VoidTPtr( context, ptrPtr, * ptr );

        add_List( arguments, 0, create_VoidTPtrObj( ptrPtr ) );
        add_List( arguments, 1, format                       );

        res = oneOfPrintfCall( context, "vasprintf", arguments, errno, NULL, & timestamp );

        * ptr = readPointer_VoidTPtr( context, ptrPtr );
        deallocateMemoryBlock( context, ptrPtr );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vdprintf_spec **/
mediator vdprintf_media for specification
IntT vdprintf_spec( CallContext context, FileDescId * fd, CString * format, List /* NULL */ * arguments,
                    ErrorCode * errno, CString * fileForFdName, OpenFlags oflag
                  )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_IntTObj( fd->filedesc ) );
        add_List( arguments, 1, format                         );

        res = oneOfPrintfCall( context, "vdprintf", arguments, errno, NULL, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vfprintf_spec **/
mediator vfprintf_media for specification
IntT vfprintf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                    ErrorCode * errno, CString * fileForStreamName, CString * fileForStreamMode
                  )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfPrintfCall( context, "vfprintf", arguments, errno, NULL, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vprintf_spec **/
mediator vprintf_media for specification
IntT vprintf_spec
         ( CallContext context, CString * format, List /* NULL */ * arguments, CString * output, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfPrintfCall( context, "vprintf", arguments, errno, output, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vsnprintf_spec **/
mediator vsnprintf_media for specification
IntT vsnprintf_spec
         ( CallContext context, CString * s, SizeT n, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        if ( s == NULL ) { add_List( arguments, 0, create_LongTObj( 0 ) ); }
                    else { add_List( arguments, 0, s                    ); }
        add_List( arguments, 1, create_SizeTObj( n ) );
        add_List( arguments, 2, format               );

        res = oneOfPrintfCall( context, "vsnprintf", arguments, errno, NULL, & timestamp );

        if ( s != NULL ) { copy( get_List( arguments, 0 ), s      ); }    remove_List( arguments, 0 );
                                                                          remove_List( arguments, 0 );
                           copy( get_List( arguments, 0 ), format );      remove_List( arguments, 0 );

        return res;
    }
}

/** vsprintf_spec **/
mediator vsprintf_media for specification
IntT vsprintf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, s      );
        add_List( arguments, 1, format );

        res = oneOfPrintfCall( context, "vsprintf", arguments, errno, NULL, & timestamp );

        copy( get_List( arguments, 0 ), s      );    remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

IntT oneOfPrintfCall( CallContext context, char * funcName, List /* NULL */ * arguments, ErrorCode * errno,
                      CString * output, TimeInterval * stimulTime
                    ) {
    return functionWithDotsCall( context, funcName, arguments, false, NULL, NULL, errno, output, NULL, NULL, stimulTime );
}
