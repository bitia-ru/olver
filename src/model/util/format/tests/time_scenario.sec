/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/format/tests/time_scenario.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "util/format/time_model.seh"
#include "util/format/time_media.seh"

#include "process/environ/environ_media.seh"
#include "fs/fs/fs_media.seh"
#include "locale/locale/locale_media.seh"
// TODO: Implement locale setup.

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

static int maxMSize = 32800;

static CharT* formatters[] = {
    (CharT *)"",
    (CharT *)"%d %b %Y %H:%M:%S",
    (CharT *)"%w %j %y %I:%M:%S",
    (CharT *)"this_is! a? test_string...",
    (CharT *)"1337",
    (CharT *)"\this"
};

#define numStrings (sizeof(formatters)/sizeof(CharT*))

/********************************************************************/
/**                  Test Static Data                              **/
/********************************************************************/

static CallContext context;
bool crashFound=false;

StringTPtr s, format;
CString* s_a;

StringTPtr buf, formatp;

static FILETPtr file;
/********************************************************************/
/**                  Test Helper Functions                         **/
/********************************************************************/
#define P(path)  (create_CString(path))

TmT* UseGetdate(CString* str, CString* templates)
{
    TmT* gret;
    CString* mode=create_CString("w+");
    CString* name=create_CString("DATEMSK");

    CString* testfilepath = getTestScenarioSandboxPathCh("getdate.tmpl");

    createTestFile(context, testfilepath, templates);
    setenv_spec(context, name, testfilepath, 1, requestErrorCode());

    gret = getdate_spec(context, str);

    unsetenv_spec(context, name, requestErrorCode());
    remove_spec(context, testfilepath, requestErrorCode(), cancel_status);

    return gret;
}

void UseStrftime(CString* inputS, TmT* inputT)
{
    SizeT fret;

    writeCString_VoidTPtr(format, inputS);

    fret = strftime_spec(context, s, 100, format, inputT);

    s_a = readCString_VoidTPtr(s);
}

CString* UseStrptime(CString* inputB, CString* inputF, TmT* inputT)
{
    CString* pret;

    writeCString_VoidTPtr(buf, inputB);
    writeCString_VoidTPtr(formatp, inputF);

    pret = strptime_spec(context, buf, formatp, inputT);

    return pret;
}

bool checkStrFTime(CString* expRet, CString* format_arg, TmT* gret)
{
    if(gret == NULL)
        return false;

    UseStrftime(format_arg, gret);

    return equals(expRet, s_a);
}

bool checkStrPTime(CString* arg, CString* format_arg)
{
    CString* pret;
    TmT* gret;

    gret = UseGetdate(create_CString("12"), create_CString("%H"));

    if(gret == NULL)
        return false;

    pret = UseStrptime(arg, format_arg, gret);

    UseStrftime(format_arg, gret);

    return equals(arg, s_a);
}

bool checkGetDate(CString* arg, CString* templates)
{
    TmT* gret;

    gret = UseGetdate(arg, templates);

    if(gret == NULL)
    {
        crashFound=true;
        return false;
    }

    UseStrftime(templates, gret);

    return equals(arg, s_a);
}

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_util_format_time_scenario(int argc,char** argv)
{
    int i;
    bool result = true;

    context = getContext();
    
    //Initializing locale data
    /*all_locales = create_Map(&type_CByteArray, &type_Map);
    global_locale = create_Map(&type_IntTObj, &type_CString);
    for (i=0; i<=MAX_LC_TYPE_NUMBER; ++i)
        put_Map(global_locale, create_IntTObj(i), create_CString(""));

    locale_contexts[0] = context;
    context_locales[0] = create_GlobalLocale();
    put_Map(all_locales, context_locales[0]->Data, context_locales[0]->LocaleMap);
    
    for (i=1; i<THREAD_NUM_LOC; ++i)
    {
        locale_contexts[i] = createThread();
        if (isWrong_ThreadId(locale_contexts[i]))
        {
            result = false;
            break;
        }
        else
            context_locales[i] = create_GlobalLocale();
    }
*/
    // prepare test data dir
    INIT_SCENARIO_ACTION( makeSureProcessHasAppropriatePrivileges(context) );
    INIT_SCENARIO_ACTION( createTestScenarioSandboxDir(context) );
	
    format = allocateMemoryBlock(context, maxMSize);
    if (isNULL_VoidTPtr(format))
        return false;

    s = allocateMemoryBlock(context, maxMSize);
    if (isNULL_VoidTPtr(s))
    {
        deallocateMemoryBlock(context, format);
        return false;
    }

    formatp = allocateMemoryBlock(context, maxMSize);
    if (isNULL_VoidTPtr(formatp))
        return false;

    buf = allocateMemoryBlock(context, maxMSize);
    if (isNULL_VoidTPtr(buf))
    {
        deallocateMemoryBlock(context, formatp);
        return false;
    }

    initProcessEnvironment(context);
    
//  Set POSIX locale
//    setlocale_spec(context, SUT_LC_TIME, create_CString("POSIX"));

    initProcessEnvironment(context);
    setFinishMode(UNTIL_END);

    return true;

}


static void finish_util_format_time_scenario(void)
{
//    int i;
    removeTestScenarioSandboxDir(context);

    deallocateMemoryBlock(context, format);
    deallocateMemoryBlock(context, s);

    deallocateMemoryBlock(context, formatp);
    deallocateMemoryBlock(context, buf);
    
    TEST_SCENARIO_VERDICT_VERBOSE(util_format_time_scenario);
}

/********************************************************************/
/**                  Test Actions                                  **/
/********************************************************************/

scenario
bool util_format_strftime_scen()
{
    TmT* gret;
    int str_index = 0;

    INIT_REQ_SCEN;

    gret = UseGetdate(create_CString("04 02 2001 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));

    /*
     * The following conversion specifications are supported:
     *
     * %a Replaced by the locale's abbreviated weekday name. [ tm_wday]
     */
    REQ_SCEN("strftime.11.01", "%%a Replaced by the locale's abbreviated weekday name", 
        checkStrFTime(
            create_CString("Sun"),
            create_CString("%a"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %A Replaced by the locale's full weekday name. [ tm_wday]
     */
    REQ_SCEN("strftime.11.02", "%%A Replaced by the locale's full weekday name",
        checkStrFTime(
            create_CString("Sunday"),
            create_CString("%A"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %b Replaced by the locale's abbreviated month name. [ tm_mon]
     */
    REQ_SCEN("strftime.11.03", "%%b Replaced by the locale's abbreviated month name",
        checkStrFTime(
            create_CString("Feb"),
            create_CString("%b"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %B Replaced by the locale's full month name. [ tm_mon]
     */
    REQ_SCEN("strftime.11.04", "%%B Replaced by the locale's full month name",
        checkStrFTime(
            create_CString("February"),
            create_CString("%B"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %c Replaced by the locale's appropriate date and time representation. (See the 
     * Base Definitions volume of IEEE Std 1003.1-2001, <time.h>.)
     */
    REQ_SCEN("strftime.11.05", "%%c Replaced by the locale's appropriate date and time representation",
        checkStrFTime(
            create_CString("Sun Feb  4 15:13:54 2001"),
            create_CString("%c"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %C Replaced by the year divided by 100 and truncated to an integer, as a 
     * decimal number [00,99]. [ tm_year]
     */
    REQ_SCEN("strftime.11.06", "%%C Replaced by the year divided by 100 and truncated to an integer",
        checkStrFTime(
            create_CString("20"),
            create_CString("%C"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %d Replaced by the day of the month as a decimal number [01,31]. [ tm_mday]
     */
    REQ_SCEN("strftime.11.07", "%%d Replaced by the day of the month as a decimal number [01,31]",
        checkStrFTime(
            create_CString("04"),
            create_CString("%d"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %D Equivalent to %m / %d / %y. [ tm_mon, tm_mday, tm_year]
     */
    REQ_SCEN("strftime.11.08", "%%D Equivalent to %%m / %%d / %%y",
        checkStrFTime(
            create_CString("02/04/01"),
            create_CString("%D"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %e Replaced by the day of the month as a decimal number [1,31]; a single digit 
     * is preceded by a space. [ tm_mday]
     */
    REQ_SCEN("strftime.11.09", "%%e Replaced by the day of the month as a decimal number [1,31]",
        checkStrFTime(
            create_CString(" 4"),
            create_CString("%e"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %F Equivalent to %Y - %m - %d (the ISO 8601:2000 standard date format). [ 
     * tm_year, tm_mon, tm_mday]
     */
    REQ_SCEN("strftime.11.10", "%%F Equivalent to %%Y - %%m - %%d",
        checkStrFTime(
            create_CString("2001-02-04"),
            create_CString("%F"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %g Replaced by the last 2 digits of the week-based year (see below) as a 
     * decimal number [00,99]. [ tm_year, tm_wday, tm_yday]
     */
    gret = UseGetdate(create_CString("04 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.11", "%%g Replaced by the last 2 digits of the week-based year, this year",
        checkStrFTime(
            create_CString("99"),
            create_CString("%g"),
            gret
            )
        );
    gret = UseGetdate(create_CString("03 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.11", "%%g Replaced by the last 2 digits of the week-based year, previous year",
        checkStrFTime(
            create_CString("98"),
            create_CString("%g"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %G Replaced by the week-based year (see below) as a decimal number (for 
     * example, 1977). [ tm_year, tm_wday, tm_yday]
     */
    gret = UseGetdate(create_CString("04 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.12", "%%G Replaced by the week-based year (see below) as a decimal number, this year",
        checkStrFTime(
            create_CString("1999"),
            create_CString("%G"),
            gret
            )
        );
    gret = UseGetdate(create_CString("03 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.12", "%%G Replaced by the week-based year (see below) as a decimal number, previous year",
        checkStrFTime(
            create_CString("1998"),
            create_CString("%G"),
            gret
            )
        );

    gret = UseGetdate(create_CString("04 02 2001 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    /*
     * The following conversion specifications are supported:
     *
     * %h Equivalent to %b. [ tm_mon]
     */
    REQ_SCEN("strftime.11.13", "%%h Equivalent to %%b",
        checkStrFTime(
            create_CString("Feb"),
            create_CString("%h"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %H Replaced by the hour (24-hour clock) as a decimal number [00,23]. [ tm_hour]
     */
    REQ_SCEN("strftime.11.14", "%%H Replaced by the hour (24-hour clock) as a decimal number [00,23]",
        checkStrFTime(
            create_CString("15"),
            create_CString("%H"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %I Replaced by the hour (12-hour clock) as a decimal number [01,12]. [ tm_hour]
     */
    REQ_SCEN("strftime.11.15", "%%I Replaced by the hour (12-hour clock) as a decimal number [01,12]",
        checkStrFTime(
            create_CString("03"),
            create_CString("%I"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %j Replaced by the day of the year as a decimal number [001,366]. [ tm_yday]
     */
    REQ_SCEN("strftime.11.16", "%%j Replaced by the day of the year as a decimal number [001,366]",
        checkStrFTime(
            create_CString("035"),
            create_CString("%j"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %m Replaced by the month as a decimal number [01,12]. [ tm_mon]
     */
    REQ_SCEN("strftime.11.17", "%%m Replaced by the month as a decimal number [01,12]",
        checkStrFTime(
            create_CString("02"),
            create_CString("%m"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %M Replaced by the minute as a decimal number [00,59]. [ tm_min]
     */
    REQ_SCEN("strftime.11.18", "%%M Replaced by the minute as a decimal number [00,59]",
        checkStrFTime(
            create_CString("13"),
            create_CString("%M"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %n Replaced by a <newline>.
     */
    REQ_SCEN("strftime.11.19", "%%n Replaced by a <newline>",
        checkStrFTime(
            create_CString("\n"),
            create_CString("%n"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %p Replaced by the locale's equivalent of either a.m. or p.m. [ tm_hour]
     */
    REQ_SCEN("strftime.11.20", "%%p Replaced by the locale's equivalent of either a.m. or p.m.",
        checkStrFTime(
            create_CString("PM"),
            create_CString("%p"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %r Replaced by the time in a.m. and p.m. notation; [CX] in the POSIX locale 
     * this shall be equivalent to %I : %M : %S %p. [ tm_hour, tm_min, tm_sec]
     */
    REQ_SCEN("strftime.11.21", "%%r Replaced by the time in a.m. and p.m. notation",
        checkStrFTime(
            create_CString("03:13:54 PM"),
            create_CString("%r"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %R Replaced by the time in 24-hour notation ( %H : %M ). [ tm_hour, tm_min]
     */
    REQ_SCEN("strftime.11.22", "%%R Replaced by the time in 24-hour notation ( %%H : %%M )",
        checkStrFTime(
            create_CString("15:13"),
            create_CString("%R"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %S Replaced by the second as a decimal number [00,60]. [ tm_sec]
     */
    REQ_SCEN("strftime.11.23", "%%S Replaced by the second as a decimal number [00,60]",
        checkStrFTime(
            create_CString("54"),
            create_CString("%S"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %t Replaced by a <tab>.
     */
    REQ_SCEN("strftime.11.24", "%%t Replaced by a <tab>",
        checkStrFTime(
            create_CString("\t"),
            create_CString("%t"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %T Replaced by the time ( %H : %M : %S ). [ tm_hour, tm_min, tm_sec]
     */
    REQ_SCEN("strftime.11.25", "%%T Replaced by the time ( %%H : %%M : %%S )",
        checkStrFTime(
            create_CString("15:13:54"),
            create_CString("%T"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %u Replaced by the weekday as a decimal number [1,7], with 1 representing 
     * Monday. [ tm_wday]
     */
    REQ_SCEN("strftime.11.26", "%%u Replaced by the weekday as a decimal number [1,7], with 1 representing Monday",
        checkStrFTime(
            create_CString("7"),
            create_CString("%u"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %U Replaced by the week number of the year as a decimal number [00,53]. The 
     * first Sunday of January is the first day of week 1; days in the new year before 
     * this are in week 0. [ tm_year, tm_wday, tm_yday]
     */
    gret = UseGetdate(create_CString("07 02 2004 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.27", "%%U Replaced by the week number of the year as a decimal number [00,53]",
        checkStrFTime(
            create_CString("05"),
            create_CString("%U"),
            gret
            )
        );
    gret = UseGetdate(create_CString("03 01 2004 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.27", "%%U Replaced by the week number of the year as a decimal number [00,53], week 0",
        checkStrFTime(
            create_CString("00"),
            create_CString("%U"),
            gret
            )
        );
    gret = UseGetdate(create_CString("04 01 2004 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.27", "%%U Replaced by the week number of the year as a decimal number [00,53], week 1",
        checkStrFTime(
            create_CString("01"),
            create_CString("%U"),
            gret
            )
        );
    gret = UseGetdate(create_CString("01 01 2006 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.27", "%%U Replaced by the week number of the year as a decimal number [00,53], year without week 0",
        checkStrFTime(
            create_CString("01"),
            create_CString("%U"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %V Replaced by the week number of the year (Monday as the first day of the week) 
     * as a decimal number [01,53]. If the week containing 1 January has four or more 
     * days in the new year, then it is considered week 1. Otherwise, it is the last 
     * week of the previous year, and the next week is week 1. Both January 4th and 
     * the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
     */
    gret = UseGetdate(create_CString("04 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.28", "%%V Replaced by the week number of the week-based year, this year",
        checkStrFTime(
            create_CString("01"),
            create_CString("%V"),
            gret
            )
        );
    gret = UseGetdate(create_CString("03 01 1999 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.28", "%%V Replaced by the week number of the week-based year, previous year",
        checkStrFTime(
            create_CString("53"),
            create_CString("%V"),
            gret
            )
        );

    gret = UseGetdate(create_CString("04 02 2001 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));

    /*
     * The following conversion specifications are supported:
     *
     * %w Replaced by the weekday as a decimal number [0,6], with 0 representing 
     * Sunday. [ tm_wday]
     */
    REQ_SCEN("strftime.11.29", "%%w Replaced by the weekday as a decimal number",
        checkStrFTime(
            create_CString("0"),
            create_CString("%w"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %W Replaced by the week number of the year as a decimal number [00,53]. The 
     * first Monday of January is the first day of week 1; days in the new year before 
     * this are in week 0. [ tm_year, tm_wday, tm_yday]
     */
    gret = UseGetdate(create_CString("02 01 2000 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.30", "%%W Replaced by the week number of the year as a decimal number [00,53]",
        checkStrFTime(
            create_CString("00"),
            create_CString("%W"),
            gret
            )
        );
    gret = UseGetdate(create_CString("03 01 2000 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));
    REQ_SCEN("strftime.11.30", "%%W Replaced by the week number of the year as a decimal number [00,53]",
        checkStrFTime(
            create_CString("01"),
            create_CString("%W"),
            gret
            )
        );

    gret = UseGetdate(create_CString("04 02 2001 15:13:54"), create_CString("%d %m %Y %H:%M:%S"));

    /*
     * The following conversion specifications are supported:
     *
     * %x Replaced by the locale's appropriate date representation. (See the Base 
     * Definitions volume of IEEE Std 1003.1-2001, <time.h>.)
     */
    REQ_SCEN("strftime.11.31", "%%x Replaced by the locale's appropriate date representation",
        checkStrFTime(
            create_CString("02/04/01"),
            create_CString("%x"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %X Replaced by the locale's appropriate time representation. (See the Base 
     * Definitions volume of IEEE Std 1003.1-2001, <time.h>.)
     */
    REQ_SCEN("strftime.11.32", "%%X Replaced by the locale's appropriate time representation",
        checkStrFTime(
            create_CString("15:13:54"),
            create_CString("%X"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %y Replaced by the last two digits of the year as a decimal number [00,99]. [ 
     * tm_year]
     */
    REQ_SCEN("strftime.11.33", "%%y Replaced by the last two digits of the year as a decimal number",
        checkStrFTime(
            create_CString("01"),
            create_CString("%y"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %Y Replaced by the year as a decimal number (for example, 1997). [ tm_year]
     */
    REQ_SCEN("strftime.11.34", "%%Y Replaced by the year as a decimal number",
        checkStrFTime(
            create_CString("2001"),
            create_CString("%Y"),
            gret
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %z Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm 
     * or -hhmm ), or by no characters if no timezone is determinable. For example, "- 
     * 0430" means 4 hours 30 minutes behind UTC (west of Greenwich). [CX] If tm_isdst 
     * is zero, the standard time offset is used. If tm_isdst is greater than zero, 
     * the daylight savings time offset is used. If tm_isdst is negative, no 
     * characters are returned. [ tm_isdst]
     */
    /*
    REQ_SCEN("strftime.11.35", "%z Replaced by the offset from UTC in the ISO 8601:2000 standard format",
        checkStrFTime(
            create_CString("+0300"),
            create_CString("%z"),
            gret
            )
        );
    */
    REQ_SCEN("strftime.11.35", "%%z Replaced by the offset from UTC in the ISO 8601:2000 standard format",TODO_REQ());

    /*
     * The following conversion specifications are supported:
     *
     * %Z Replaced by the timezone name or abbreviation, or by no bytes if no timezone 
     * information exists. [ tm_isdst]
     */
    /*
    REQ_SCEN("strftime.11.36", "%Z Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists",
        checkStrFTime(
            create_CString("MSK"),
            create_CString("%Z"),
            gret
            )
        );
    */
    REQ_SCEN("strftime.11.36", "%%Z Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists",TODO_REQ());

    /*
     * The following conversion specifications are supported:
     *
     * %% Replaced by %.
     */
    REQ_SCEN("strftime.11.37", "%% Replaced by %%",
        checkStrFTime(
            create_CString("%"),
            create_CString("%%"),
            gret
            )
        );

    /*
     * All ordinary characters (including the terminating null byte) are copied 
     * unchanged into the array.
     */
    REQ("strftime.05", "", TODO_REQ());


    /*
     * %Ec Replaced by the locale's alternative appropriate date and time 
     * representation.
     */
    REQ_SCEN("strftime.17.01", "", TODO_REQ());

    /*
     * %EC Replaced by the name of the base year (period) in the locale's alternative 
     * representation.
     */
    REQ_SCEN("strftime.17.02", "", TODO_REQ());

    /*
     * %Ex Replaced by the locale's alternative date representation.
     */
    REQ_SCEN("strftime.17.03", "", TODO_REQ());

    /*
     * %EX Replaced by the locale's alternative time representation.
     */
    REQ_SCEN("strftime.17.04", "", TODO_REQ());

    /*
     * %Ey Replaced by the offset from %EC (year only) in the locale's alternative 
     * representation.
     */
    REQ_SCEN("strftime.17.05", "", TODO_REQ());

    /*
     * %EY Replaced by the full alternative year representation.
     */
    REQ_SCEN("strftime.17.06", "", TODO_REQ());

    /*
     * %Od Replaced by the day of the month, using the locale's alternative numeric 
     * symbols, filled as needed with leading zeros if there is any alternative symbol 
     * for zero; otherwise, with leading spaces.
     */
    REQ_SCEN("strftime.17.07", "", TODO_REQ());

    /*
     * %Oe Replaced by the day of the month, using the locale's alternative numeric 
     * symbols, filled as needed with leading spaces.
     */
    REQ_SCEN("strftime.17.08", "", TODO_REQ());

    /*
     * %OH Replaced by the hour (24-hour clock) using the locale's alternative numeric 
     * symbols.
     */
    REQ_SCEN("strftime.17.09", "", TODO_REQ());

    /*
     * %OI Replaced by the hour (12-hour clock) using the locale's alternative numeric 
     * symbols.
     */
    REQ_SCEN("strftime.17.10", "", TODO_REQ());

    /*
     * %Om Replaced by the month using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strftime.17.11", "", TODO_REQ());

    /*
     * %OM Replaced by the minutes using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strftime.17.12", "", TODO_REQ());

    /*
     * %OS Replaced by the seconds using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strftime.17.13", "", TODO_REQ());

    /*
     * %Ou Replaced by the weekday as a number in the locale's alternative 
     * representation (Monday=1).
     */
    REQ_SCEN("strftime.17.14", "", TODO_REQ());

    /*
     * %OU Replaced by the week number of the year (Sunday as the first day of the 
     * week, rules corresponding to %U ) using the locale's alternative numeric 
     * symbols.
     */
    REQ_SCEN("strftime.17.15", "", TODO_REQ());

    /*
     * %OV Replaced by the week number of the year (Monday as the first day of the 
     * week, rules corresponding to %V ) using the locale's alternative numeric 
     * symbols.
     */
    REQ_SCEN("strftime.17.16", "", TODO_REQ());

    /*
     * %Ow Replaced by the number of the weekday (Sunday=0) using the locale's 
     * alternative numeric symbols.
     */
    REQ_SCEN("strftime.17.17", "", TODO_REQ());

    /*
     * %OW Replaced by the week number of the year (Monday as the first day of the 
     * week) using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strftime.17.18", "", TODO_REQ());

    /*
     * %Oy Replaced by the year (offset from %C ) using the locale's alternative 
     * numeric symbols.
     */
    REQ_SCEN("strftime.17.19", "", TODO_REQ());
    
    for(str_index = 0; str_index < numStrings; str_index++)
        UseStrftime(create_CString(formatters[str_index]), create_TmT(10, 5, 6, 8, 11, 27, 0, 234, -1, 0, create_CString("") ));

    VERDICT_REQ_SCEN;
    return true;
}

scenario
bool util_format_getdate_scen()
{
    TmT* gret;
    SizeT fret;
    IntT ret;

    INIT_REQ_SCEN;

    /*
     * The first line in the template that matches the input specification is used for 
     * interpretation and conversion into the internal time format.
     */
    gret = UseGetdate(create_CString("11 45 02"), create_CString("%H\n%H %M %S\n%H %M %m"));
    if(gret != NULL)
    {
        REQ_SCEN("getdate.06", "The first line in the template is used for interpretation", 
            gret->tm_sec == 2
            );
    }

    /*
     * The following conversion specifications shall be supported:
     *
     * %% Equivalent to %.
     */
    REQ_SCEN("getdate.07.01", "%%%% Equivalent to %%",
        checkGetDate(
            create_CString("%Look"),
            create_CString("%%Look")
            )        
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %a Abbreviated weekday name.
     */
    REQ_SCEN("getdate.07.02", "%%a Abbreviated weekday name",
        checkGetDate(
            create_CString("Sun"),
            create_CString("%a")
            )        
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %A Full weekday name.
     */
    REQ_SCEN("getdate.07.03", "%%A Full weekday name",
        checkGetDate(
            create_CString("Friday"),
            create_CString("%A")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %b Abbreviated month name.
     */
    REQ_SCEN("getdate.07.04", "%%b Abbreviated month name", 
        checkGetDate(
            create_CString("Apr"),
            create_CString("%b")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %B Full month name.
     */
    REQ_SCEN("getdate.07.05", "%%B Full month name", 
        checkGetDate(
            create_CString("June"),
            create_CString("%B")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %c Locale's appropriate date and time representation.
     */
    REQ_SCEN("getdate.07.06", "", TODO_REQ());

    /*
     * The following conversion specifications shall be supported:
     *
     * %C Century number [00,99]; leading zeros are permitted but not required.
     */
    REQ_SCEN("getdate.07.07", "%%C Century number [00,99]", 
        checkGetDate(
            create_CString("19"),
            create_CString("%C")
            )
        );
    
    if(crashFound)
    {
        return false;
    }
    REQ_SCEN("getdate.07.07", "%%C Century number [00,99] with %%y %%m", 
        checkGetDate(
            create_CString("19 86 09"),
            create_CString("%C %y %m")
            )
        );
    REQ_SCEN("getdate.07.07", "%%C Century number [00,99] with %%y %%m, C = 22", 
        checkGetDate(
            create_CString("22 86 09"),
            create_CString("%C %y %m")
            )
        );


    /*
     * The following conversion specifications shall be supported:
     *
     * %d Day of month [01,31]; the leading 0 is optional.
     */
    REQ_SCEN("getdate.07.08", "%%d Day of month [01,31]", 
        checkGetDate(
            create_CString("02"),
            create_CString("%d")
            )        
        );
    REQ_SCEN("getdate.07.08", "%%d Day of month [01,31] with %%m", 
        checkGetDate(
            create_CString("05 02"),
            create_CString("%m %d")
            )        
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %D Date as %m / %d / %y.
     */
    REQ_SCEN("getdate.07.09", "%%D Date as %%m / %%d / %%y", 
        checkGetDate(
            create_CString("04/20/05"),
            create_CString("%D")
            )          
        );
    
    /*
     * The following conversion specifications shall be supported:
     *
     * %e Equivalent to %d.
     */
    REQ_SCEN("getdate.07.10", "%%e Equivalent to %%d", 
       checkGetDate(
           create_CString("13"),
           create_CString("%e")
            )    
       );
    REQ_SCEN("getdate.07.10", "%%e Equivalent to %%d with %%m", 
        checkGetDate(
            create_CString("02 13"),
            create_CString("%m %e")
            )    
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %h Abbreviated month name.
     */
    REQ_SCEN("getdate.07.11", "%%h Abbreviated month name",
        checkGetDate(
            create_CString("Feb"),
            create_CString("%h")
            )                
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %H Hour [00,23].
     */
    REQ_SCEN("getdate.07.12", "%%H Hour [00,23]",
        checkGetDate(
            create_CString("21"),
            create_CString("%H")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %I Hour [01,12].
     */
    REQ_SCEN("getdate.07.13", "%%I Hour [01,12]",
        checkGetDate(
            create_CString("09"),
            create_CString("%I")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %m Month number [01,12].
     */
    REQ_SCEN("getdate.07.14", "%%m Month number [01,12]",
        checkGetDate(
            create_CString("09"),
            create_CString("%m")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %M Minute [00,59].
     */
    REQ_SCEN("getdate.07.15", "%%M Minute [00,59]",
        checkGetDate(
            create_CString("23"),
            create_CString("%M")
            )  
        );
    REQ_SCEN("getdate.07.15", "%%M Minute [00,59] with %%H",
        checkGetDate(
            create_CString("12 23"),
            create_CString("%H %M")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %n Equivalent to <newline>.
     */
    REQ_SCEN("getdate.07.16", "%%n Equivalent to <newline>",
        checkGetDate(
            create_CString("\nLook"),
            create_CString("%nLook")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %p Locale's equivalent of either AM or PM.
     */
    REQ_SCEN("getdate.07.17", "%%p Locale's equivalent of either AM or PM",
        checkGetDate(
            create_CString("AM"),
            create_CString("%p")
            )  
        );
    REQ_SCEN("getdate.07.17", "%%p Locale's equivalent of either AM or PM with %%I",
        checkGetDate(
            create_CString("09 AM"),
            create_CString("%I %p")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %r The locale's appropriate representation of time in AM and PM notation. In 
     * the POSIX locale, this shall be equivalent to %I : %M : %S %p.
     */
    REQ_SCEN("getdate.07.18", "%%r in the POSIX locale, this shall be equivalent to %%I : %%M : %%S %%p",
        checkGetDate(
            create_CString("11:04:58 PM"),
            create_CString("%r")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %R Time as %H : %M.
     */
    REQ_SCEN("getdate.07.19", "%%R Time as %%H : %%M",
        checkGetDate(
            create_CString("13:06"),
            create_CString("%R")
            )  
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %S Seconds [00,60]. The range goes to 60 (rather than stopping at 59) to allow 
     * positive leap seconds to be expressed. Since leap seconds cannot be predicted 
     * by any algorithm, leap second data must come from some external source.
     */
    REQ_SCEN("getdate.07.20", "%%S Seconds [00,60]",
        checkGetDate(
            create_CString("19"),
            create_CString("%S")
            )
        );
    REQ_SCEN("getdate.07.20", "%%S Seconds [00,60] with %%H",
        checkGetDate(
            create_CString("13 19"),
            create_CString("%H %S")
            )
        );

    gret = UseGetdate(create_CString("13 60"), create_CString("%H %S"));
    if(gret != NULL)
        UseStrftime(create_CString("%H %M %S"), gret);

    if(fret!=0)
    {
        REQ_SCEN("getdate.07.20", "%%S Seconds [00,60] with %%H, S = 60",
            equals(s_a, create_CString("13 01 00"))
            );
    }
    
    /*
     * The following conversion specifications shall be supported:
     *
     * %t Equivalent to <tab>.
     */
    REQ_SCEN("getdate.07.21", "%%t Equivalent to <tab>",
        checkGetDate(
            create_CString("\tLook"),
            create_CString("%tLook")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %T Time as %H : %M : %S.
     */
    REQ_SCEN("getdate.07.22", "%%T Time as %%H : %%M : %%S",
        checkGetDate(
            create_CString("14:21:08"),
            create_CString("%T")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %w Weekday number (Sunday = [0,6]).
     */
    gret = UseGetdate(create_CString("0"), create_CString("%w"));
    if(gret != NULL)
        UseStrftime(create_CString("%A"), gret);

    if(fret!=0)
    {
        REQ_SCEN("getdate.07.23", "%%w Weekday number (Sunday = [0,6])",
            checkGetDate(
                create_CString("0"),
                create_CString("%w")
                )
            && equals(s_a, create_CString("Sunday"))
            );
    }
    /*
     * The following conversion specifications shall be supported:
     *
     * %x Locale's appropriate date representation.
     */
    REQ_SCEN("getdate.07.24", "", TODO_REQ());

    /*
     * The following conversion specifications shall be supported:
     *
     * %X Locale's appropriate time representation.
     */
    REQ_SCEN("getdate.07.25", "", TODO_REQ());

    /*
     * The following conversion specifications shall be supported:
     *
     * %y Year within century. When a century is not otherwise specified, values in 
     * the range [69,99] shall refer to years 1969 to 1999 inclusive, and values in 
     * the range [00,68] shall refer to years 2000 to 2068 inclusive.
     */
    REQ_SCEN("getdate.07.26", "%%y Year within century",
        checkGetDate(
            create_CString("08"),
            create_CString("%y")
            )
        );
    REQ_SCEN("getdate.07.26", "%%y Year within century with %%m",
        checkGetDate(
            create_CString("08 08"),
            create_CString("%y %m")
            )
        );


    /*
     * The following conversion specifications shall be supported:
     *
     * %Y Year as "ccyy" (for example, 2001).
     */
    REQ_SCEN("getdate.07.27", "%%Y Year as ccyy",
        checkGetDate(
            create_CString("2001"),
            create_CString("%Y")
            )
        );
    REQ_SCEN("getdate.07.27", "%%Y Year as ccyy with %%m",
        checkGetDate(
            create_CString("2001 08"),
            create_CString("%Y %m")
            )
        );

    /*
     * The following conversion specifications shall be supported:
     *
     * %Z Timezone name or no characters if no timezone exists. If the timezone 
     * supplied by %Z is not the timezone that getdate() expects, an invalid input 
     * specification error shall result. The getdate() function calculates an expected 
     * timezone based on information supplied to the function (such as the hour, day, 
     * and month).
     */
    REQ_SCEN("getdate.07.28", "", TODO_REQ());



    /*
     * The match between the template and input specification performed by getdate() 
     * shall be case-insensitive.
     */
    REQ_SCEN("getdate.08", "The match shall be case-insensitive", 
            UseGetdate(create_CString("Hello 11"), create_CString("hELLo %H")) != NULL
        );

    /*
     * The month and weekday names can consist of any combination of upper and 
     * lowercase letters.
     */
    REQ_SCEN("getdate.09", "The weekday name can consist of any combination of upper and lowercase letters",
            UseGetdate(create_CString("friDay 11"), create_CString("%A %H")) != NULL
        );
    REQ_SCEN("getdate.09", "The weekday name can consist of any combination of upper and lowercase letters",
            UseGetdate(create_CString("fRI 11"), create_CString("%a %H")) != NULL
        );
    REQ_SCEN("getdate.09", "The month name can consist of any combination of upper and lowercase letters",
            UseGetdate(create_CString("jUne 11"), create_CString("%B %H")) != NULL
        );
    REQ_SCEN("getdate.09", "The month name can consist of any combination of upper and lowercase letters",
            UseGetdate(create_CString("ApR 11"), create_CString("%b %H")) != NULL
        );


    /*
     * Leading zeros are not necessary for the descriptors that allow leading zeros.
     */
    REQ_SCEN("getdate.11", "Leading zeros are not necessary", 
        UseGetdate(create_CString("1"), create_CString("%H")) != NULL
        );

    /*
     * However, at most two digits are allowed for those descriptors, including 
     * leading zeros.
     */
    REQ_SCEN("getdate.12", "at most two digits are allowed", 
        UseGetdate(create_CString("031"), create_CString("%H")) == NULL
        );

    /*
     * Extra whitespace in either the template file or in string shall be ignored.
     */
    REQ_SCEN("getdate.13", "Extra whitespace in string shall be ignored", 
        UseGetdate(create_CString("  05"), create_CString("%H")) != NULL
        );

    gret = UseGetdate(create_CString("11 45 02"), create_CString("%H\n %H   %M %S\n%H %M %m"));
    if(gret != NULL)
    {
        REQ_SCEN("getdate.13", "Extra whitespace in the template file shall be ignored",
            gret->tm_sec == 2
            );
    }

    
    /*
     * The following rules apply for converting the input specification into the 
     * internal format:
     *
     * If only the weekday is given, the day chosen shall be the day, starting with 
     * today and moving into the future, which first matches the named day.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    if(gret != NULL)
    {
        ret = gret->tm_year * 366 + gret->tm_yday;
        gret = UseGetdate(create_CString("Monday"), create_CString("%A"));
        ret = gret->tm_year * 366 + gret->tm_yday - ret;
    
        REQ_SCEN("getdate.15.02", "only the weekday is given", 
            checkGetDate(
                create_CString("Monday"),
                create_CString("%A")
                )
            && ret >= 0 
            && ret < 7
            );
    }


    /*
     * If only the month (and no year) is given, the month chosen shall be the month, 
     * starting with the current month and moving into the future, which first matches 
     * the named month.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    if(gret != NULL)
    {
        ret = gret->tm_year * 12 + gret->tm_mon;
        gret = UseGetdate(create_CString("04"), create_CString("%m"));
        ret = gret->tm_year * 12 + gret->tm_mon - ret;
        REQ_SCEN("getdate.15.03.01", "only the month (and no year) is given",
            checkGetDate(
                create_CString("04"),
                create_CString("%m")
                )
            && ret >= 0 
            && ret < 12
            );
    }

    /*
     * The first day of the month shall be assumed if no day is given.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    if(gret != NULL)
    {
        UseStrftime(create_CString("%m"), gret);
        
        gret = UseGetdate(s_a, create_CString("%m"));
        
        UseStrftime(create_CString("%d"), gret);
    
    REQ_SCEN("getdate.15.03.02", "The first day of the month shall be assumed, this year", 
        equals(s_a, create_CString("01"))
       );
    }

    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    if(gret != NULL)
    {
        gret->tm_mon = (gret->tm_mon + 11) % 12;
        
        UseStrftime(create_CString("%m"), gret);
            
        gret = UseGetdate(s_a, create_CString("%m"));

        UseStrftime(create_CString("%d"), gret);
    
    REQ_SCEN("getdate.15.03.02", "The first day of the month shall be assumed, next year", 
        equals(s_a, create_CString("01"))
        );
    }


    /*
     * The following rules apply for converting the input specification into the 
     * internal format:
     *
     * If no hour, minute, and second are given, the current hour, minute, and second 
     * shall be assumed.
     */
    REQ_SCEN("getdate.15.04", "", TODO_REQ());


    /*
     * The following rules apply for converting the input specification into the 
     * internal format:
     *
     * If no date is given, the hour chosen shall be the hour, starting with the 
     * current hour and moving into the future, which first matches the named hour.
     */
    gret = UseGetdate(create_CString("10"), create_CString("%H"));
    if(gret != NULL)
    {
        ret = gret->tm_year * 366 + gret->tm_yday;
        gret = UseGetdate(create_CString("15"), create_CString("%H"));
        ret = gret->tm_year * 366 + gret->tm_yday - ret;
        REQ_SCEN("getdate.15.05", "no date is given",
            checkGetDate(
                create_CString("15"),
                create_CString("%H")
                )
            && ret >= 0 
            && ret < 2
            );
    }

    VERDICT_REQ_SCEN;
    return true;
}

scenario
bool util_format_strptime_scen()
{
    TmT* gret;
    CString* pret;

    INIT_REQ_SCEN;

    /*
     * Each directive is composed of one of the following: one or more white-space 
     * characters (as specified by isspace()); an ordinary character (neither '%' nor 
     * a white-space character); or a conversion specification.
     */
    gret = UseGetdate(create_CString("10"), create_CString("%H"));
    pret = UseStrptime(create_CString("Friday"), create_CString("%a %"), gret);

    REQ("strptime.03", "Each directive is composed of ' ', an ordinary character or a conversion specification",
        pret == NULL
        );



    /*
     * The following conversion specifications are supported:
     *
     * %a The day of the week, using the locale's weekday names; either the 
     * abbreviated or full name may be specified.
     */
    gret = UseGetdate(create_CString("10"), create_CString("%H"));
    pret = UseStrptime(create_CString("Friday"), create_CString("%a"), gret);

    REQ_SCEN("strptime.06.01", "%%a The day of the week",
        gret != NULL
        );
    REQ_SCEN("strptime.06.01", "%%a The day of the week", 
        checkStrPTime(
            create_CString("Fri"),
            create_CString("%a")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %A Equivalent to %a.
     */
    REQ_SCEN("strptime.06.02", "%%A Equivalent to %%a",
        checkStrPTime(
            create_CString("Friday"),
            create_CString("%A")
            )
        );
    /*
     * The following conversion specifications are supported:
     *
     * %b The month, using the locale's month names; either the abbreviated or full 
     * name may be specified.
     */
    gret = UseGetdate(create_CString("10"), create_CString("%H"));
    pret = UseStrptime(create_CString("June"), create_CString("%b"), gret);

    REQ_SCEN("strptime.06.03", "%%b The month, using the locale's month names",
        gret != NULL
        );

    REQ_SCEN("strptime.06.03", "%%b The month, using the locale's month names",
        checkStrPTime(
            create_CString("Jun"),
            create_CString("%b")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %B Equivalent to %b.
     */
    REQ_SCEN("strptime.06.04", "%%B Equivalent to %%b",
        checkStrPTime(
            create_CString("June"),
            create_CString("%B")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %c Replaced by the locale's appropriate date and time representation.
     */

    REQ_SCEN("strptime.06.05", "%%c Replaced by the locale's appropriate date and time representation",
        checkStrPTime(
            create_CString("Sun Feb  4 15:13:54 2001"),
            create_CString("%c")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %C The century number [00,99]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.06", "%%C The century number [00,99]",
        checkStrPTime(
            create_CString("20"),
            create_CString("%C")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %d The day of the month [01,31]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.07", "%%d The day of the month [01,31]",
        checkStrPTime(
            create_CString("20"),
            create_CString("%d")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %D The date as %m / %d / %y.
     */
    REQ_SCEN("strptime.06.08", "%%D The date as %%m / %%d / %%y",
        checkStrPTime(
            create_CString("11/20/04"),
            create_CString("%D")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %e Equivalent to %d.
     */
    REQ_SCEN("strptime.06.09", "%%e Equivalent to %%d",
        checkStrPTime(
            create_CString("20"),
            create_CString("%e")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %h Equivalent to %b.
     */
    REQ_SCEN("strptime.06.10", "%%h Equivalent to %%b",
        checkStrPTime(
            create_CString("Jun"),
            create_CString("%h")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %H The hour (24-hour clock) [00,23]; leading zeros are permitted but not 
     * required.
     */
    REQ_SCEN("strptime.06.11", "%%H The hour (24-hour clock) [00,23]",
        checkStrPTime(
            create_CString("00"),
            create_CString("%H")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %I The hour (12-hour clock) [01,12]; leading zeros are permitted but not 
     * required.
     */
    REQ_SCEN("strptime.06.12", "%%I The hour (12-hour clock) [01,12]",
        checkStrPTime(
            create_CString("12"),
            create_CString("%I")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %j The day number of the year [001,366]; leading zeros are permitted but not 
     * required.
     */
    REQ_SCEN("strptime.06.13", "%%j The day number of the year [001,366]",
        checkStrPTime(
            create_CString("007"),
            create_CString("%j")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %m The month number [01,12]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.14", "%%m The month number [01,12]",
        checkStrPTime(
            create_CString("02"),
            create_CString("%m")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %M The minute [00,59]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.15", "%%M The minute [00,59]",
        checkStrPTime(
            create_CString("07"),
            create_CString("%M")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %n Any white space.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    pret = UseStrptime(create_CString("     17"), create_CString("%n %H"), gret);

    UseStrftime(create_CString("%H"), gret);

    REQ_SCEN("strptime.06.16", "%%n Any white space",
        equals(s_a, create_CString("17"))
        );

    /*
     * The following conversion specifications are supported:
     *
     * %p The locale's equivalent of a.m or p.m.
     */
    REQ_SCEN("strptime.06.17", "%%p The locale's equivalent of a.m or p.m",
        checkStrPTime(
            create_CString("PM"),
            create_CString("%p")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %r 12-hour clock time using the AM/PM notation if t_fmt_ampm is not an empty 
     * string in the LC_TIME portion of the current locale; in the POSIX locale, this 
     * shall be equivalent to %I : %M : %S %p.
     */
    REQ_SCEN("strptime.06.18", "%%r 12-hour clock time using the AM/PM",
        checkStrPTime(
            create_CString("01:45:12 AM"),
            create_CString("%r")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %R The time as %H : %M.
     */
    REQ_SCEN("strptime.06.19", "%%R The time as %%H : %%M",
        checkStrPTime(
            create_CString("01:45"),
            create_CString("%R")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %S The seconds [00,60]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.20", "%%S The seconds [00,60]", 
        checkStrPTime(
            create_CString("58"),
            create_CString("%S")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %t Any white space.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    pret = UseStrptime(create_CString("     17"), create_CString("%t %H"), gret);

    UseStrftime(create_CString("%H"), gret);

    REQ_SCEN("strptime.06.21", "%%t Any white space",
        equals(s_a, create_CString("17"))
        );

    /*
     * The following conversion specifications are supported:
     *
     * %T The time as %H : %M : %S.
     */
    REQ_SCEN("strptime.06.22", "%%T The time as %%H : %%M : %%S",
        checkStrPTime(
            create_CString("04:12:00"),
            create_CString("%T")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %U The week number of the year (Sunday as the first day of the week) as a 
     * decimal number [00,53]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.23", "%%U The week number of the year (Sunday as the first day of the week)",
        checkStrPTime(
            create_CString("32 2"),
            create_CString("%U %w")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %w The weekday as a decimal number [0,6], with 0 representing Sunday; leading 
     * zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.24", "%%w The weekday as a decimal number [0,6], with 0 representing Sunday",
        checkStrPTime(
            create_CString("5"),
            create_CString("%w")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %W The week number of the year (Monday as the first day of the week) as a 
     * decimal number [00,53]; leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.06.25", "%%W The week number of the year (Monday as the first day of the week)",
        checkStrPTime(
            create_CString("32 3"),
            create_CString("%W %w")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %x The date, using the locale's date format.
     */
    REQ_SCEN("strptime.06.26", "%%x The date, using the locale's date format", 
        checkStrPTime(
            create_CString("03/23/06"),
            create_CString("%x")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %X The time, using the locale's time format.
     */
    REQ_SCEN("strptime.06.27", "%%X The time, using the locale's time format",
        checkStrPTime(
            create_CString("03:23:06"),
            create_CString("%X")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %y The year within century. When a century is not otherwise specified, values 
     * in the range [69,99] shall refer to years 1969 to 1999 inclusive, and values in 
     * the range [00,68] shall refer to years 2000 to 2068 inclusive; leading zeros 
     * shall be permitted but shall not be required.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    pret = UseStrptime(create_CString("69"), create_CString("%y"), gret);

    UseStrftime(create_CString("%Y"), gret);

    REQ_SCEN("strptime.06.28", "%%y The year within century, [69,99] shall refer to years 1969 to 1999",
        equals(s_a, create_CString("1969"))
        );
    pret = UseStrptime(create_CString("68"), create_CString("%y"), gret);

    UseStrftime(create_CString("%Y"), gret);

    REQ_SCEN("strptime.06.28", "%%y The year within century, [00,68] shall refer to years 2000 to 2068",
        equals(s_a, create_CString("2068"))
        );
    pret = UseStrptime(create_CString("02"), create_CString("%y"), gret);

    UseStrftime(create_CString("%Y"), gret);

    REQ_SCEN("strptime.06.28", "%%y The year within century, [00,68] shall refer to years 2000 to 2068",
        equals(s_a, create_CString("2002"))
        );


    /*
     * The following conversion specifications are supported:
     *
     * %Y The year, including the century (for example, 1988).
     */
    REQ_SCEN("strptime.06.29", "%%Y The year, including the century",
        checkStrPTime(
            create_CString("2001"),
            create_CString("%Y")
            )
        );

    /*
     * The following conversion specifications are supported:
     *
     * %% Replaced by %.
     */
    REQ_SCEN("strptime.06.30", "%% Replaced by %%",
        checkStrPTime(
            create_CString("% 2003"),
            create_CString("%% %Y")
            )
        );

    /*
     * Some conversion specifiers can be modified by the E and O modifier characters 
     * to indicate that an alternative format or specification should be used rather 
     * than the one normally used by the unmodified conversion specifier.
     */
    REQ_SCEN("strptime.07", "", TODO_REQ());

    /*
     * If the alternative format or specification does not exist in the current 
     * locale, the behavior shall be as if the unmodified conversion specification 
     * were used.
     */
    REQ_SCEN("strptime.08", "", TODO_REQ());

    /*
     * %Ec The locale's alternative appropriate date and time representation.
     */
    REQ_SCEN("strptime.09.01", "", TODO_REQ());

    /*
     * %EC The name of the base year (period) in the locale's alternative 
     * representation.
     */
    REQ_SCEN("strptime.09.02", "", TODO_REQ());

    /*
     * %Ex The locale's alternative date representation.
     */
    REQ_SCEN("strptime.09.03", "", TODO_REQ());

    /*
     * %EX The locale's alternative time representation.
     */
    REQ_SCEN("strptime.09.04", "", TODO_REQ());

    /*
     * %Ey The offset from %EC (year only) in the locale's alternative representation.
     */
    REQ_SCEN("strptime.09.05", "", TODO_REQ());

    /*
     * %EY The full alternative year representation.
     */
    REQ_SCEN("strptime.09.06", "", TODO_REQ());

    /*
     * %Od The day of the month using the locale's alternative numeric symbols; 
     * leading zeros are permitted but not required.
     */
    REQ_SCEN("strptime.09.07", "", TODO_REQ());

    /*
     * %Oe Equivalent to %Od.
     */
    REQ_SCEN("strptime.09.08", "", TODO_REQ());

    /*
     * %OH The hour (24-hour clock) using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.09", "", TODO_REQ());

    /*
     * %OI The hour (12-hour clock) using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.10", "", TODO_REQ());

    /*
     * %Om The month using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.11", "", TODO_REQ());

    /*
     * %OM The minutes using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.12", "", TODO_REQ());

    /*
     * %OS The seconds using the locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.13", "", TODO_REQ());

    /*
     * %OU The week number of the year (Sunday as the first day of the week) using the 
     * locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.14", "", TODO_REQ());

    /*
     * %Ow The number of the weekday (Sunday=0) using the locale's alternative numeric 
     * symbols.
     */
    REQ_SCEN("strptime.09.15", "", TODO_REQ());

    /*
     * %OW The week number of the year (Monday as the first day of the week) using the 
     * locale's alternative numeric symbols.
     */
    REQ_SCEN("strptime.09.16", "", TODO_REQ());

    /*
     * %Oy The year (offset from %C ) using the locale's alternative numeric symbols.
     */
   REQ_SCEN("strptime.09.17", "", TODO_REQ());



    /*
     * Case is ignored when matching items in buf such as month or weekday names.
     */
    gret = UseGetdate(create_CString("12"), create_CString("%H"));
    pret = UseStrptime(create_CString("SundaY"), create_CString("%A"), gret);

    UseStrftime(create_CString("%A"), gret);

    REQ_SCEN("strptime.17", "Case is ignored",
        equals(s_a, create_CString("Sunday"))
        );
    pret = UseStrptime(create_CString("ApRil"), create_CString("%B"), gret);

    UseStrftime(create_CString("%B"), gret);

    REQ_SCEN("strptime.17", "Case is ignored",
        equals(s_a, create_CString("April"))
        );

    /*
     * If no match is found, strptime() fails and no more characters are scanned.
     */
    pret = UseStrptime(create_CString("13 54"), create_CString("%b"), gret);
    REQ_SCEN("strptime.18", "no match is found, strptime() fails", 
        pret == NULL
        );

    /*
     * Upon successful completion, strptime() shall return a pointer to the character 
     * following the last character parsed.
     */
    pret = UseStrptime(create_CString("13:Friday:54"), create_CString("%d:%A"), gret);

    REQ_SCEN("strptime.19.01", "shall return a pointer to the character following the last character parsed",
        equals(pret, create_CString(":54"))
    );
    
    /*
     * Otherwise, a null pointer shall be returned.
     */
    pret = UseStrptime(create_CString("f2001"), create_CString("%Y"), gret);

    REQ_SCEN("strptime.19.02", "a null pointer shall be returned", 
        pret == NULL
        );

    VERDICT_REQ_SCEN;
    return true;
}



/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_format_time_scenario =
{
        .init = init_util_format_time_scenario,
        .finish = finish_util_format_time_scenario,
        .actions = {
            util_format_strftime_scen,
            util_format_strptime_scen,
            util_format_getdate_scen,
            NULL
    }
};


#ifdef FORMAT_TIME_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "process/process/process_media.seh"
#include "system/sysconf/sysconf_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();
    
    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    
    initSystemSysconfSubsystem();

    initFsFsSubsystem();
    initProcessEnvironSubsystem();
//    initLocaleLocaleSubsystem();

    initUtilFormatTimeSubsystem();

}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();
    
    // Set up tracer
    //setTraceEncoding("windows-1251");
    
    addTraceToFile("trace.xml");
    
    trace_all_requirements = true;
    // Run test scenario
    util_format_time_scenario(argc, argv);
    
    //  unloadSUT();
    return 0;
}

#endif








