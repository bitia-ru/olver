/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/format/tests/time_scenario.seh"
#include "common/common_scenario.seh"
#include "common/common_media.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "util/format/time_model.seh"
#include "util/format/time_media.seh"

#include "process/environ/environ_media.seh"
#include "fs/fs/fs_media.seh"
#include "locale/locale/locale_model.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

const struct GetDateTestData
{
    char*  query;
    char*  templates;
    char*  datemsk;
    char*  filepath;
    char*  locale;
    TmTAnsw answ;
} getdate_test_data[] =
{
#include "util.format.time/getdate_testdata.list"
};

/* TODO: const */struct StrPTimeTestData
{
    char* query;
    char* format;
    char* locale;
    TmTAnsw answ;
} strptime_test_data[] =
{
#include "util.format.time/strptime_testdata.list"
};


/********************************************************************/
/**                  Test Static Data                              **/
/********************************************************************/

static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_util_format_time_scenario(int argc, char** argv)
{
    context = getContext();

    initProcessEnvironment(context);

    INIT_SCENARIO_ACTION(createTestScenarioSandboxDir(context));

    setFinishMode(UNTIL_END);

    return true;

}


static void finish_util_format_time_scenario(void)
{
    removeTestScenarioSandboxDir(context);
}

/********************************************************************/
/**                  Test Actions                                  **/
/********************************************************************/

scenario
bool util_format_strftime_scen()
{
    return true;
}

scenario
bool util_format_getdate_scen()
{
    int i;

    for(i = 0; i < sizeof(getdate_test_data)/sizeof(getdate_test_data[0]); i++)
    {
        bool bRes;

        IntT res;
        CString* sRes;

        IntTObj * getdate_err = create_IntTObj( 0 );

        // getdate_test_data[i].datemsk
        if(getdate_test_data[i].datemsk != NULL)
            res = setenv_spec(context, _CS("DATEMSK"), SANDBOX_FILE(getdate_test_data[i].datemsk), 1, requestErrorCode());
        else
            res = unsetenv_spec(context, _CS("DATEMSK"), requestErrorCode());

        if(res == -1)
        {
            //traceExceptionInfo("Unable to change enviroment variable DATEMSK.");
            //return false;
            traceUserInfo( "Unable to change enviroment variable DATEMSK." );
            continue;
        }

        // GetDateTestData[i].locale
        sRes = setlocale_spec(context, SUT_LC_ALL, _CS(getdate_test_data[i].locale));

        if(sRes == NULL)
        {
            //traceExceptionInfo("Unable to change current locale.");
            //return false;
            traceUserInfo( "Unable to change current locale." );
            continue;
        }

        // GetDateTestData[i].filepath / getdate_test_data[i].templates
        bRes = createTestFile(context, SANDBOX_FILE(getdate_test_data[i].filepath), _CS(getdate_test_data[i].templates));

        if(bRes == false)
        {
            //traceExceptionInfo("Unable to create templates file.");
            //return false;
            traceUserInfo( "Unable to create templates file." );
            continue;
        }

        getdate_spec(context, _CS(getdate_test_data[i].query), getdate_test_data[i].answ, getdate_err );
    }

    return true;
}

scenario
bool util_format_strptime_scen()
{
    int i;

    for(i = 0; i < sizeof(getdate_test_data)/sizeof(getdate_test_data[0]); i++)
    {
        CString* sRes;
        TmT* tmt = create_TmT(0,0,0,1,0,0,0,0,0,0,NULL);

        // StrPTimeTestData[i].locale
        sRes = setlocale_spec(context, SUT_LC_ALL, _CS(strptime_test_data[i].locale));

        if(sRes == NULL)
        {
            traceExceptionInfo("Unable to change current locale.");
            return false;
        }

        strptime_spec (
                       context,
                       _CS(strptime_test_data[i].query),
                       _CS(strptime_test_data[i].format),
                       tmt,
                       &strptime_test_data[i].answ
                      );
    }

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_format_time_scenario =
{
        .init = init_util_format_time_scenario,
        .finish = finish_util_format_time_scenario,
        .actions = {
//            util_format_strftime_scen,
            util_format_getdate_scen,
            util_format_strptime_scen,
            NULL
    }
};


#ifdef FORMAT_TIME_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "process/process/process_media.seh"
#include "system/sysconf/sysconf_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();
    
    initSystemConfiguration();
    initPathSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();
    
    initSystemSysconfSubsystem();

    initFsFsSubsystem();
    initProcessEnvironSubsystem();
    initLocaleLocaleSubsystem();

    initUtilFormatTimeSubsystem();

}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();
    
    addTraceToFile("trace.xml");
    
    trace_all_requirements = true;

    util_format_time_scenario(argc, argv);

    return 0;
}

#endif
