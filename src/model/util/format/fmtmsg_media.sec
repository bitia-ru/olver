/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/format/fmtmsg_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilFormatFmtmsgSubsystem(void)
{
  // Set up mediators
   set_mediator_fmtmsg_spec(fmtmsg_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** fmtmsg_spec **/
mediator fmtmsg_media for specification
FmtmsgReturnType* fmtmsg_spec( CallContext context, MsgClassAndSeverity* clsf, 
                              CString* label1, CString* label2, CString* text, CString* action, CString* tag)
{
    call
    {
        IntT funcRes;
        CString* resStr;
        CString* label=clone(label1);
        TSCommand command = create_TSCommand();
    
        label = concat_CString(label, create_CString(":"));
        label = concat_CString(label, label2);

        format_TSCommand( &command, "fmtmsg:$(int)$(int)$(int)$(int)$(str)$(str)$(str)$(str)$(size)", create_IntTObj(clsf->majorClass),
            create_IntTObj(clsf->messageSource), create_IntTObj(clsf->messageStatus), create_IntTObj(clsf->messageSeverity), label, text, action, tag,
            create_SizeTObj(length_CString(label)+length_CString(text)+length_CString(action)+length_CString(tag)+100));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes = readInt_TSStream(&command.response);
            resStr = readCString_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return create_FmtmsgReturnType( funcRes, resStr);
  }
}



