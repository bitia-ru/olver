/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "locale/wcollate/wcollate_media.seh"
#include "util/format/scanf_media.seh"
#include "common/common_media.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/

void initUtilFormatScanfSubsystem(void)
{
    // Set up mediators
    set_mediator_fscanf_spec ( fscanf_media  );
    set_mediator_scanf_spec  ( scanf_media   );
    set_mediator_sscanf_spec ( sscanf_media  );
    set_mediator_vfscanf_spec( vfscanf_media );
    set_mediator_vscanf_spec ( vscanf_media  );
    set_mediator_vsscanf_spec( vsscanf_media );

    // Set up formatters
    registerTSFormatter( "typedlist"    , (TSFormatterFuncType)typedlist_formatter     );
    registerTSFormatter( "dotsarguments", (TSFormatterFuncType)dotsarguments_formatter );
    registerTSFormatter( "wstr"         , (TSFormatterFuncType)wstring_formatter       );
}

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** fscanf_spec **/
mediator fscanf_media for specification
IntT fscanf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                  ErrorCode * errno, CString * fileForStreamName
                )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfScanfCall( context, "fscanf", arguments, NULL, errno, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** scanf_spec **/
mediator scanf_media for specification
IntT scanf_spec( CallContext context, CString * format, List /* NULL */ * arguments, CString * input, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfScanfCall( context, "scanf", arguments, input, errno, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** sscanf_spec **/
mediator sscanf_media for specification
IntT sscanf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, s      );
        add_List( arguments, 1, format );

        res = oneOfScanfCall( context, "sscanf", arguments, NULL, errno, & timestamp );

        copy( get_List( arguments, 0 ), s      );    remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vfscanf_spec **/
mediator vfscanf_media for specification
IntT vfscanf_spec( CallContext context, FILETPtr * stream, CString * format, List /* NULL */ * arguments,
                   ErrorCode * errno, CString * fileForStreamName
                 )
{
    call
    {
        IntT res;

        add_List( arguments, 0, create_VoidTPtrObj( * stream ) );
        add_List( arguments, 1, format                         );

        res = oneOfScanfCall( context, "vfscanf", arguments, NULL, errno, & timestamp );

                                                     remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vscanf_spec **/
mediator vscanf_media for specification
IntT vscanf_spec( CallContext context, CString * format, List /* NULL */ * arguments, CString * input, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, format );

        res = oneOfScanfCall( context, "vscanf", arguments, input, errno, & timestamp );

        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/** vsscanf_spec **/
mediator vsscanf_media for specification
IntT vsscanf_spec( CallContext context, CString * s, CString * format, List /* NULL */ * arguments, ErrorCode * errno )
{
    call
    {
        IntT res;

        add_List( arguments, 0, s      );
        add_List( arguments, 1, format );

        res = oneOfScanfCall( context, "vsscanf", arguments, NULL, errno, & timestamp );

        copy( get_List( arguments, 0 ), s      );    remove_List( arguments, 0 );
        copy( get_List( arguments, 0 ), format );    remove_List( arguments, 0 );

        return res;
    }
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

IntT oneOfScanfCall( CallContext context, char * funcName, List /* NULL */ * arguments, CString * input,
                     ErrorCode * errno, TimeInterval * stimulTime
                   ) {
    return functionWithDotsCall( context, funcName, arguments, true, input, NULL, errno, NULL, NULL, NULL, stimulTime );
}
