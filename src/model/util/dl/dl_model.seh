/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_DL_MODEL_SEH
#define UTIL_DL_MODEL_SEH

#include "common/common_model.seh"
#include "data/dl_model.seh"
    
/********************************************************************/
/**                      Defines                                   **/
/********************************************************************/

#define DL_HANDLE_COVERAGE(handle) \
    coverage Handle \
    { \
        if(isDLRootObjectHandle(handle)) \
            return { RootHandle, "root object handle" }; \
        else if(isDLObjectHandle(handle)) \
            return { ValHandle, "valid object handle" }; \
        /* else */ \
            return { ErrHandle, "handle is invalid" }; \
    } \

/********************************************************************/
/**                      Specification Types                       **/
/********************************************************************/

specification typedef
struct DLInfo
{
    CString*    fname;
    VoidTPtr    fbase;
    CString*    sname;
    VoidTPtr    saddr;
} DLInfo;

DLInfo* create_DLInfo(void);

specification typedef
struct DLObject
{   
    VoidTPtr Handle;
    Set* sNames;
    Map* mapSymbols;
} DLObject;

Object* create_DLObject(VoidTPtr hObject, CString* sName);

/********************************************************************/
/**                          Model State                           **/
/********************************************************************/

specification typedef
struct DLState
{
    bool bError;
} DLState;

Object* create_DLState(void);

bool isDLError(CallContext context);
void setDLError(CallContext context, bool bError);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** dladdr_spec **/
specification
IntT dladdr_spec(CallContext context, VoidTPtr addr, DLInfo* dlip);

void onDLAddr(CallContext context, VoidTPtr addr, DLInfo* dlip, IntT res);

/** dlclose_spec **/
specification
IntT dlclose_spec(CallContext context, VoidTPtr handle);

void onDLClose(CallContext context, VoidTPtr handle, IntT res);

/** dlerror_spec **/
specification
CString* dlerror_spec(CallContext context);

void onDLError(CallContext context, CString* res);

/** dlopen_spec **/
specification
VoidTPtr dlopen_spec(CallContext context, CString* file, IntT mode);

void onDLOpen(CallContext context, CString* file, IntT mode, VoidTPtr res);

/** dlsym_spec **/
specification
VoidTPtr dlsym_spec(CallContext context, VoidTPtr handle, CString* name);

void onDLSym(CallContext context, VoidTPtr handle, CString* name, VoidTPtr res);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool isFileNamePath(CString* name);
DLState* getProcessDLState(CallContext context);
VoidTPtr getDLObjectHandleByName(CallContext context, CString* name);
bool isDLRootObjectHandle(VoidTPtr handle);
bool isDLObjectHandle(VoidTPtr handle);

#endif


