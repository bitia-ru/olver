/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_COMPRESS_MEDIA_SEH
#define UTIL_COMPRESS_MEDIA_SEH

#include "util/compress/compress_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilCompressSubsystem(void);

/************************************************************************/
/*                          Utilities                                   */
/************************************************************************/
List* readULongList(TSStream* stream, IntT size);
CString* get_ZLIB_VERSION_macro(CallContext context);
IntT get_z_stream_size(CallContext context);
void readZStream_TSStream(CallContext context, TSStream* stream, ZStream* ret);
void writeZStream_TSStream( TSStream* stream, ZStream* value );
static void z_stream_formatter(TSStream* stream, ZStream* value);
/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** adler32_spec **/
mediator adler32_media for specification
ULongT adler32_spec( CallContext context, ULongT adler, CByteArray* buf,
                                                                    UIntT len);

/** compress_spec **/
mediator compress_media for specification
IntT compress_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen);

/** compress2_spec **/
mediator compress2_media for specification
IntT compress2_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen, IntT level);

/** compressBound_spec **/
mediator compressBound_media for specification
IntT compressBound_spec( CallContext context, ULongT sourceLen);

/** crc32_spec **/
mediator crc32_media for specification
ULongT crc32_spec( CallContext context, ULongT crc, StringTPtr buf,
                  UIntT len);

/** deflate_spec **/
mediator deflate_media for specification
IntT deflate_spec( CallContext context, ZStream* stream, IntT flush );

/** deflateBound_spec **/
mediator deflateBound_media for specification
IntT deflateBound_spec(CallContext context, ZStream* stream, ULongT sourceLen);

/** deflateCopy_spec **/
mediator deflateCopy_media for specification
IntT deflateCopy_spec( CallContext context, ZStream* dest, ZStream* source);

/** deflateEnd_spec **/
mediator deflateEnd_media for specification
IntT deflateEnd_spec( CallContext context, ZStream* stream );

/** deflateInit2__spec **/
mediator deflateInit2__media for specification
IntT deflateInit2__spec(    CallContext context, ZStream* strm, IntT level,
                            IntT method, IntT windowBits, IntT memLevel,
                            IntT strategy, CString* version, IntT stream_size);

/** deflateInit__spec **/
mediator deflateInit__media for specification
IntT deflateInit__spec(     CallContext context, ZStream* strm, IntT level,
                            CString* version, IntT stream_size );

/** deflateParams_spec **/
mediator deflateParams_media for specification
IntT deflateParams_spec( CallContext context, ZStream* stream, IntT level,
                            IntT strategy );

/** deflateReset_spec **/
mediator deflateReset_media for specification
IntT deflateReset_spec( CallContext context, ZStream* stream );

/** deflateSetDictionary_spec **/
mediator deflateSetDictionary_media for specification
IntT deflateSetDictionary_spec( CallContext context, ZStream* stream,
                               StringTPtr dictionary, UIntT dictlen);

/** get_crc_table_spec **/
mediator get_crc_table_media for specification
List* get_crc_table_spec( CallContext context);

/** gzclose_spec **/
mediator gzclose_media for specification
IntT gzclose_spec( CallContext context, VoidTPtr file, ErrorCode* errnum,
                                                    ErrorCode* errno);

/** gzdopen_spec **/
mediator gzdopen_media for specification
VoidTPtr gzdopen_spec( CallContext context, FileDescId fd, CString* mode,
                                            ErrorCode* errno);

/** gzeof_spec **/
mediator gzeof_media for specification
IntT gzeof_spec( CallContext context, VoidTPtr file );

/** gzerror_spec **/
mediator gzerror_media for specification
CString* gzerror_spec( CallContext context, VoidTPtr file, IntT* errnum);

/** gzflush_spec **/
mediator gzflush_media for specification
IntT gzflush_spec( CallContext context, VoidTPtr file, IntT flush,
                  ErrorCode* errnum, ErrorCode* errno);

/** gzgetc_spec **/
mediator gzgetc_media for specification
IntT gzgetc_spec( CallContext context, VoidTPtr file, ErrorCode* errno );

/** gzgets_spec **/
mediator gzgets_media for specification
StringTPtr gzgets_spec( CallContext context, VoidTPtr file, StringTPtr buf,
                        IntT len, ErrorCode* errno);

/** gzopen_spec **/
mediator gzopen_media for specification
VoidTPtr gzopen_spec( CallContext context, CString* path, CString* mode,
                                                            ErrorCode* errno);

/** gzprintf_spec **/
mediator gzprintf_media for specification
IntT gzprintf_spec( CallContext context, VoidTPtr file, CString *str,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzputc_spec **/
mediator gzputc_media for specification
IntT gzputc_spec( CallContext context, VoidTPtr file, IntT c);

/** gzputs_spec **/
mediator gzputs_media for specification
IntT gzputs_spec( CallContext context, VoidTPtr file, CString* s,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzread_spec **/
mediator gzread_media for specification
IntT gzread_spec( CallContext context, VoidTPtr file, VoidTPtr buf, UIntT len,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzrewind_spec **/
mediator gzrewind_media for specification
IntT gzrewind_spec( CallContext context, VoidTPtr file, ErrorCode* errnum);

/** gzseek_spec **/
mediator gzseek_media for specification
OffT gzseek_spec( CallContext context, VoidTPtr file, OffT offset,
                 IntT whence, ErrorCode* errnum);

/** gzsetparams_spec **/
mediator gzsetparams_media for specification
IntT gzsetparams_spec( CallContext context, VoidTPtr file, IntT level,
                      IntT strategy);

/** gztell_spec **/
mediator gztell_media for specification
OffT gztell_spec( CallContext context, VoidTPtr file, ErrorCode* errnum);

/** gzwrite_spec **/
mediator gzwrite_media for specification
IntT gzwrite_spec( CallContext context, VoidTPtr file, VoidTPtr buf, UIntT len,
                 ErrorCode* errnum, ErrorCode* errno);

/** inflate_spec **/
mediator inflate_media for specification
IntT inflate_spec( CallContext context, ZStream* stream, IntT flush );

/** inflateEnd_spec **/
mediator inflateEnd_media for specification
IntT inflateEnd_spec( CallContext context, ZStream* stream );

/** inflateInit2__spec **/
mediator inflateInit2__media for specification
IntT inflateInit2__spec(    CallContext context, ZStream* strm,
                            IntT windowBits,
                            CString* version, IntT stream_size );

/** inflateInit__spec **/
mediator inflateInit__media for specification
IntT inflateInit__spec(     CallContext context, ZStream* strm,
                            CString* version, IntT stream_size );

/** inflateReset_spec **/
mediator inflateReset_media for specification
IntT inflateReset_spec( CallContext context, ZStream* stream );

/** inflateSetDictionary_spec **/
mediator inflateSetDictionary_media for specification
IntT inflateSetDictionary_spec( CallContext context, ZStream* stream,
                               StringTPtr dictionary, UIntT dictlen);

/** inflateSync_spec **/
mediator inflateSync_media for specification
IntT inflateSync_spec( CallContext context, ZStream* stream );

/** inflateSyncPoint_spec **/
mediator inflateSyncPoint_media for specification
IntT inflateSyncPoint_spec( CallContext context, ZStream* stream );

/** uncompress_spec **/
mediator uncompress_media for specification
IntT uncompress_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen);

/** zError_spec **/
mediator zError_media for specification
CString* zError_spec( CallContext context, IntT err );

/** zlibVersion_spec **/
mediator zlibVersion_media for specification
CString* zlibVersion_spec( CallContext context);


#endif

