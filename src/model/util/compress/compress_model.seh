/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_COMPRESS_MODEL_SEH
#define UTIL_COMPRESS_MODEL_SEH

#include "common/common_model.seh"
#include "util/compress/compress_zlib.seh"
#include "data/sys/types_model.seh"

/********************************************************************/
/**                      Defines                                   **/
/********************************************************************/

#define BASE 65521 /* largest prime smaller than 65536 */

/********************************************************************/
/*       Specification types and their creation functions           */
/********************************************************************/
specification typedef struct ZStream
{
    StringTPtr next_in;
    UIntT avail_in;
    ULongT total_in;
    StringTPtr next_out;
    UIntT avail_out;
    ULongT total_out;
    CString* msg;
    VoidTPtr int_state;
    //struct internal_state *state;???for buggy compilers...

    //If zalloc==0, NULL be passed.
    //In other case will be used zalloc from compress_agent.sec
    VoidTPtr zalloc;
    //If zfree==0, NULL be passed.
    //In other case will be used zfree from compress_agent.sec
    VoidTPtr zfree;
    VoidTPtr opaque;
    IntT data_type;
    ULongT adler;
    ULongT reserved;
} ZStream;

ZStream* create_ZStream(StringTPtr next_in,
                        UIntT avail_in,
                        ULongT total_in,
                        StringTPtr next_out,
                        UIntT avail_out,
                        ULongT total_out,
                        CString* msg,
                        VoidTPtr int_state,
                        VoidTPtr zalloc,
                        VoidTPtr zfree,
                        VoidTPtr opaque,
                        IntT data_type,
                        ULongT adler,
                        ULongT reserved);

ZStream* create_emptyZStream();
/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** adler32_spec **/
specification
ULongT adler32_spec( CallContext context, ULongT adler, CByteArray* buf,
                                                                    UIntT len);
ULongT adler32_model(ULongT adler, CByteArray* buf, UIntT len);

/** compress_spec **/
specification
IntT compress_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen);

/** compress2_spec **/
specification
IntT compress2_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen, IntT level);

/** compressBound_spec **/
specification
IntT compressBound_spec( CallContext context, ULongT sourceLen);

/** crc32_spec **/
specification
ULongT crc32_spec( CallContext context, ULongT crc, StringTPtr buf,
                  UIntT len);
ULongT crc32_model(ULongT crc, StringTPtr buf, UIntT len);

/** deflate_spec **/
specification
IntT deflate_spec( CallContext context, ZStream* stream, IntT flush );

/** deflateBound_spec **/
specification
IntT deflateBound_spec(CallContext context, ZStream* stream, ULongT sourceLen);

/** deflateCopy_spec **/
specification
IntT deflateCopy_spec( CallContext context, ZStream* dest, ZStream* source);

/** deflateEnd_spec **/
specification
IntT deflateEnd_spec( CallContext context, ZStream* stream );

/** deflateInit2__spec **/
specification
IntT deflateInit2__spec(    CallContext context, ZStream* strm, IntT level,
                            IntT method, IntT windowBits, IntT memLevel,
                            IntT strategy, CString* version, IntT stream_size);

/** deflateInit__spec **/
specification
IntT deflateInit__spec(     CallContext context, ZStream* strm, IntT level,
                            CString* version, IntT stream_size );

/** deflateParams_spec **/
specification
IntT deflateParams_spec( CallContext context, ZStream* stream, IntT level,
                            IntT strategy );

/** deflateReset_spec **/
specification
IntT deflateReset_spec( CallContext context, ZStream* stream );

/** deflateSetDictionary_spec **/
specification
IntT deflateSetDictionary_spec( CallContext context, ZStream* stream,
                               StringTPtr dictionary, UIntT dictlen);

/** get_crc_table_spec **/
specification
List* get_crc_table_spec( CallContext context);
List* get_crc_table_model();


/** gzclose_spec **/
specification
IntT gzclose_spec( CallContext context, VoidTPtr file, ErrorCode* errnum,
                                                    ErrorCode* errno);

/** gzdopen_spec **/
specification
VoidTPtr gzdopen_spec( CallContext context, FileDescId fd, CString* mode,
                                            ErrorCode* errno);

/** gzeof_spec **/
specification
IntT gzeof_spec( CallContext context, VoidTPtr file );

/** gzerror_spec **/
specification
CString* gzerror_spec( CallContext context, VoidTPtr file, IntT* errnum);

/** gzflush_spec **/
specification
IntT gzflush_spec( CallContext context, VoidTPtr file, IntT flush,
                  ErrorCode* errnum, ErrorCode* errno);

/** gzgetc_spec **/
specification
IntT gzgetc_spec( CallContext context, VoidTPtr file, ErrorCode* errno );

/** gzgets_spec **/
specification
StringTPtr gzgets_spec( CallContext context, VoidTPtr file, StringTPtr buf,
                        IntT len, ErrorCode* errno);

/** gzopen_spec **/
specification
VoidTPtr gzopen_spec( CallContext context, CString* path, CString* mode,
                                                            ErrorCode* errno);

/** gzprintf_spec **/
specification
IntT gzprintf_spec( CallContext context, VoidTPtr file, CString *str,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzputc_spec **/
specification
IntT gzputc_spec( CallContext context, VoidTPtr file, IntT c);

/** gzputs_spec **/
specification
IntT gzputs_spec( CallContext context, VoidTPtr file, CString* s,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzread_spec **/
specification
IntT gzread_spec( CallContext context, VoidTPtr file, VoidTPtr buf, UIntT len,
                 ErrorCode* errnum, ErrorCode* errno);

/** gzrewind_spec **/
specification
IntT gzrewind_spec( CallContext context, VoidTPtr file, ErrorCode* errnum);

/** gzseek_spec **/
specification
OffT gzseek_spec( CallContext context, VoidTPtr file, OffT offset,
                 IntT whence, ErrorCode* errnum);

/** gzsetparams_spec **/
specification
IntT gzsetparams_spec( CallContext context, VoidTPtr file, IntT level,
                      IntT strategy);

/** gztell_spec **/
specification
OffT gztell_spec( CallContext context, VoidTPtr file, ErrorCode* errnum);

/** gzwrite_spec **/
specification
IntT gzwrite_spec( CallContext context, VoidTPtr file, VoidTPtr buf, UIntT len,
                 ErrorCode* errnum, ErrorCode* errno);

/** inflate_spec **/
specification
IntT inflate_spec( CallContext context, ZStream* stream, IntT flush );

/** inflateEnd_spec **/
specification
IntT inflateEnd_spec( CallContext context, ZStream* stream );

/** inflateInit2__spec **/
specification
IntT inflateInit2__spec(    CallContext context, ZStream* strm,
                            IntT windowBits,
                            CString* version, IntT stream_size );

/** inflateInit__spec **/
specification
IntT inflateInit__spec(     CallContext context, ZStream* strm,
                            CString* version, IntT stream_size );

/** inflateReset_spec **/
specification
IntT inflateReset_spec( CallContext context, ZStream* stream );

/** inflateSetDictionary_spec **/
specification
IntT inflateSetDictionary_spec( CallContext context, ZStream* stream,
                               StringTPtr dictionary, UIntT dictlen);

/** inflateSync_spec **/
specification
IntT inflateSync_spec( CallContext context, ZStream* stream );

/** inflateSyncPoint_spec **/
specification
IntT inflateSyncPoint_spec( CallContext context, ZStream* stream );

/** uncompress_spec **/
specification
IntT uncompress_spec( CallContext context, StringTPtr* dest, ULongT* destLen,
                   StringTPtr source, ULongT sourceLen);

/** zError_spec **/
specification
CString* zError_spec( CallContext context, IntT err);

/** zlibVersion_spec **/
specification
CString* zlibVersion_spec( CallContext context);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
bool deflate_has_error(ZStream* stream, IntT flush, IntT deflate_spec);
IntT deflate_data_type(CByteArray* ba);
bool deflateCopy_check(ZStream* source, ZStream* dest);
bool equals_ZStream(ZStream* first, ZStream* second);
bool inSyncPoint();
bool gzopen_mode_check(CString* mode);

#endif

