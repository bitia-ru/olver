/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/getopt/tests/getopt_scenario.seh"


#include "util/getopt/getopt_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/environ/environ_media.seh"
#include "process/environ/environ_model.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static CharT* getopt_optionp[]=
{
    (CharT *)"a1s2d3f4",
    (CharT *)"",
    (CharT *)"qwertyuiop",
    (CharT *)"zaqwsxcderfvbgtyhnmjuiklop",
    (CharT *)"newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};

static CharT* getopt_valuep[]=
{
    (CharT *)"asdf",
    (CharT *)"4321",
    (CharT *)"1",
    (CharT *)"mnbvc",
    (CharT *)"",
    (CharT *)" ",
    (CharT *)"\n",
    (CharT *)"\t",
    (CharT *)"\\",
    (CharT *)"\"",
    (CharT *)"%",
    (CharT *)"a1s2d3f4",
    (CharT *)"qwertyuiop",
    (CharT *)"zaqwsxcderfvbgtyhnmjuiklop",
    (CharT *)"newline\n;tab\t;slash\\;space other:~!@#$%^&*()_+\"|}?><:{"
};

static int getopt_optionp_size=sizeof(getopt_optionp)/sizeof(CharT*);
static int getopt_valuep_size=sizeof(getopt_valuep)/sizeof(CharT*);

static const int maxSize=1024;


/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;
static VoidTPtr optionp;
static VoidTPtr valuep;
static VoidTPtr buffer;


/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static void getOptind(CallContext context)
{
    TSCommand command = create_TSCommand();
    IntT optind;
    ProcessState* ps=getProcessState_CallContext(context);

    if(ps->getOpt==NULL)
        ps->getOpt=create_emptyGetoptRet();

    format_TSCommand( &command, "getoptind:");

    executeCommandInContext( context, &command );
    if (!isBadVerdict())
    {
        optind=readInt_TSStream(&command.response);
    }

    ps->getOpt->optind=optind;

    DUMP("Optind==%d\n", optind);

    destroy_TSCommand(&command);

    return;
}
static void setOpterr(CallContext context, IntT err)
{
    TSCommand command = create_TSCommand();

    format_TSCommand( &command, "getopterr:$(int)", create_IntTObj(err));

    executeCommandInContext( context, &command );

    destroy_TSCommand(&command);

    return;
}
static void setOptind(CallContext context, IntT ind)
{
    TSCommand command = create_TSCommand();

    format_TSCommand( &command, "setoptind:$(int)", create_IntTObj(ind));

    executeCommandInContext( context, &command );

    destroy_TSCommand(&command);

    return;
}
static bool init_getopt_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();
    optionp = allocateMemoryBlock(context, maxSize);
    valuep = allocateMemoryBlock(context, maxSize);

    getOptind(context);
    //setOpterr(context, 0);
    setFinishMode( UNTIL_END );
    initProcessEnvironment(context);
    setenv_spec(context, create_CString("POSIXLY_CORRECT"), create_CString("true"), 1, requestErrorCode());

    return true;
}
static void finish_getopt_scenario(void)
{
/*I don't delete pointers, cause they overlap due getsubopt function...

    if(!isNULL_VoidTPtr(optionp))
        deallocateMemoryBlock(context, optionp);
    if(!isNULL_VoidTPtr(valuep))
        deallocateMemoryBlock(context, valuep);
*/

    TEST_SCENARIO_VERDICT_VERBOSE(util_getopt_scenario);
}


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool clean_optind()
{
    ProcessState* ps=getProcessState_CallContext(context);

    ps->getOpt=NULL;

    setOptind(context, 1);
    getOptind(context);
}
scenario
bool getopt_err_no_arg_scen()
{
    CString* optstr=create_CString("0:");
    List* lst=create_List(&type_CString);

    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-0"));

    getopt_spec(context, size_List(lst), lst, optstr);

    return true;
}
scenario
bool getopt_09_scen()
{
    CString* optstr=create_CString("1:23");
    List* lst=create_List(&type_CString);
    IntT ret;

    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-1"));
    append_List(lst, create_CString("1"));

    append_List(lst, create_CString("-s"));
/*
    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-"));
*/
    getopt_spec(context, size_List(lst), lst, optstr);
    getopt_spec(context, size_List(lst), lst, optstr);
    getopt_spec(context, size_List(lst), lst, optstr);
    getopt_spec(context, size_List(lst), lst, optstr);

    return true;
}


scenario
bool getopt_long_scen()
{
    CString* optstr=create_CString("12:34567890qwertyuiopa:sdfghjklzxcvbnmQWE:RTYUIOPASDFGHJKLZXCVBN");
    Option* opt=create_Option(create_CString("unused"), 2, 1, 1, 1);
    Option* opt2=create_Option(create_CString("longoption"), 2, 1, 1, 1);
    List* longopts=create_List(&type_Option);
    IntT longindex=0;
    List* lst=create_List(&type_CString);
    IntT ret=0;

    append_List(longopts, opt);
    append_List(longopts, opt2);

    append_List(lst, create_CString("./my_program"));
    /*append_List(lst, create_CString("-7"));
    append_List(lst, create_CString("-qP6"));
    append_List(lst, create_CString("-E"));
    append_List(lst, create_CString("E_arg"));
    append_List(lst, create_CString("-22_arg590"));

   /* append_List(lst, create_CString("--longoption"));

    append_List(lst, create_CString("a"));

    append_List(lst, create_CString("-b"));

    append_List(lst, create_CString("-M"));*/

    append_List(lst, create_CString("-2"));

    ret=getopt_long_spec(context, size_List(lst), lst, optstr, longopts, &longindex);

    while(ret!=-1)
    {
        DUMP("ret==%d(==%c)(endofline)\n", ret, ret);
        ret=getopt_long_spec(context, size_List(lst), lst, optstr, longopts, &longindex);
    }

    DUMP("ret==%d(==%c)(endofline)\n", ret, ret);
    getopt_long_spec(context, size_List(lst), lst, optstr, longopts, &longindex);


    return true;

}
scenario
bool getopt_long_err_no_arg_scen()
{
    CString* optstr=create_CString("0:");
    List* lst=create_List(&type_CString);
    List* longopts=create_List(&type_Option);
    IntT longindex=0;
    Option* opt=create_Option(create_CString("longoption"), 2, 1, 0, 1);

    append_List(longopts, opt);

    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-0"));

    getopt_long_spec(context, size_List(lst), lst, optstr, longopts, &longindex);

    return true;
}
scenario
bool getopt_long_09_scen()
{
    CString* optstr=create_CString("123");
    List* lst=create_List(&type_CString);
    IntT ret;
    Option* opt=create_Option(create_CString("longoption"), 1, 1, 1, 1);
    List* longopts=create_List(&type_Option);
    IntT longindex=0;

    append_List(longopts, opt);

    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("s"));
/*
    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-"));
*/
    getopt_long_spec(context, size_List(lst), lst, optstr, longopts, &longindex);

    return true;
}

scenario
bool getopt_long_only_scen()
{
    CString* optstr=create_CString("12:34567890qwertyuiopa:sdfghjklzxcvbnmQWE:RTYUIOPASDFGHJKLZXCVBN");
    Option* opt=create_Option(create_CString("unused"), 2, 1, 1, 1);
    Option* opt2=create_Option(create_CString("longoption"), 2, 1, 1, 1);
    List* longopts=create_List(&type_Option);
    IntT longindex=0;
    List* lst=create_List(&type_CString);
    IntT ret=0;

    append_List(longopts, opt);
    append_List(longopts, opt2);

    append_List(lst, create_CString("./my_program"));
    append_List(lst, create_CString("-7"));
    append_List(lst, create_CString("-qP6"));
    append_List(lst, create_CString("-E"));
    append_List(lst, create_CString("E_arg"));
    append_List(lst, create_CString("-22_arg590"));

    append_List(lst, create_CString("-longoption=a"));

//    append_List(lst, create_CString("a"));

//    append_List(lst, create_CString("-b"));

    append_List(lst, create_CString("-M"));

    append_List(lst, create_CString("-2"));

    ret=getopt_long_only_spec(context, size_List(lst), lst, optstr, longopts, &longindex);

    while(ret!=-1)
    {
        DUMP("ret==%d(==%c)(endofline)\n", ret, ret);
        ret=getopt_long_only_spec(context, size_List(lst), lst, optstr, longopts, &longindex);
    }

    DUMP("ret==%d(==%c)(endofline)\n", ret, ret);
    getopt_long_only_spec(context, size_List(lst), lst, optstr, longopts, &longindex);


    return true;

}

scenario
bool getsubopt_posix_scen()
{
    List* lst=create_List(&type_CString);
    CString* tmp;

    append_List(lst, create_CString("opt1"));
    append_List(lst, create_CString("opt2"));
    append_List(lst, create_CString("opt3"));
    append_List(lst, create_CString("opt4"));
    append_List(lst, create_CString("opt5"));

    setPosixGetoptValuepChangingInterpretation(POSIX_GETSUBOPT_VALUEP_POSIX);

    writeCString_VoidTPtr(optionp, create_CString("opt7=val7,opt1,opt2=val2,op,opt2==val"));

    tmp=readCString_VoidTPtr(optionp);
    while(length_CString(tmp)!=0)
    {
        getsubopt_spec(context, &optionp, lst, &valuep);
        tmp=readCString_VoidTPtr(optionp);
        DUMP("\n");
    }

    return true;
}
scenario
bool getsubopt_implementation_scen()
{
    List* lst=create_List(&type_CString);
    CString* tmp;

    append_List(lst, create_CString("opt1"));
    append_List(lst, create_CString("opt2"));
    append_List(lst, create_CString("opt3"));
    append_List(lst, create_CString("opt4"));
    append_List(lst, create_CString("opt5"));

    setPosixGetoptValuepChangingInterpretation(POSIX_GETSUBOPT_VALUEP_IMPLEMENTATION);

    writeCString_VoidTPtr(optionp, create_CString("opt7=val7,opt1,opt2=val2,op,opt2==val"));

    tmp=readCString_VoidTPtr(optionp);
    while(length_CString(tmp)!=0)
    {
        getsubopt_spec(context, &optionp, lst, &valuep);
        tmp=readCString_VoidTPtr(optionp);
        DUMP("\n");
    }

    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_getopt_scenario =
{
    .init = init_getopt_scenario,
    .finish = finish_getopt_scenario,
    .actions = {
                    getopt_long_only_scen,
                    clean_optind,
                    getopt_long_scen,
                    clean_optind,
                    getopt_09_scen,
                    clean_optind,
                    clean_optind,
                    clean_optind,
                    getsubopt_implementation_scen,
                    clean_optind,
                    getopt_err_no_arg_scen,
                    clean_optind,
                    getopt_long_err_no_arg_scen,
                    NULL
                }
};

#include "util/getopt/tests/getopt_scenario.seh"


#ifdef UTIL_GETOPT_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/getopt/getopt_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilGetoptSubsystem();
    initProcessEnvironSubsystem();
}


bool main_util_getopt(int argc, char** argv)
{
    util_getopt_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");
    addTraceToFile("trace.xml");
    // Run test scenario
    main_util_getopt(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif

