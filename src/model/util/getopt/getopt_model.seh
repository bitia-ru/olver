/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_GETOPT_MODEL_SEH
#define UTIL_GETOPT_MODEL_SEH

#include "common/common_model.seh"
#include "process/process/process_model.seh"


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/
specification typedef struct Option
{
    CString *name;
    IntT has_arg;
    IntT flag;
    bool flag_null;
    IntT val;
} Option;

/** getopt_spec **/
specification
IntT getopt_spec( CallContext context, IntT argc, List* argv,
                        CString* optstring);
void OnGetopt( CallContext context, IntT argc, List* argv,
                CString* optstring, IntT getopt_spec, GetoptRet* getopt_post);

/** getopt_long_spec **/
//This specification refers to: getopt, getopt_long
specification
IntT getopt_long_spec( CallContext context, IntT argc, List* argv,
                    CString* optstring, List* longopts, IntT* longindex);
void OnGetoptLong( CallContext context, IntT argc, List* argv,
                   CString* optstring,  List* longopts,
                   IntT* longindex, IntT getopt_spec, GetoptRet* getopt_post);

/** getopt_long_only_spec **/
specification
IntT getopt_long_only_spec( CallContext context, IntT argc, List* argv,
                    CString* optstring, List* longopts, IntT* longindex);
void OnGetoptLongOnly( CallContext context, IntT argc, List* argv,
                   CString* optstring,  List* longopts,
                   IntT* longindex, IntT getopt_spec, GetoptRet* getopt_post);

/** getsubopt_spec **/
specification
IntT getsubopt_spec( CallContext context, StringTPtr* optionp, List* keylistp,
                    StringTPtr *valuep);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
Option* create_Option( CString *name, IntT has_arg, IntT flag, bool flag_null,
                      IntT val);

bool getopt_11_pred(CString* item, GetoptRet* getopt_pre, CString* optstring);
bool getopt_take_arg(CString* item, GetoptRet* getopt_pre, CString* optarg);
bool getopt_08_03_check(GetoptRet* getopt_pre, GetoptRet* getopt_post,
                        List* argv);
bool getopt_08_01_check(GetoptRet* getopt_pre, GetoptRet* getopt_post,
                        List* argv, ProcessState* ps);
bool getopt_long_11_pred(CString* item, GetoptRet* getopt_pre,
                         CString* optstring, List* longopts);
bool getopt_long_take_arg(  CString* item, GetoptRet* getopt_pre,
                            CString* optstring, List* longopts, List* argv,
                            IntT* variant, ProcessState* ps);
bool getopt_13_check(GetoptRet* getopt_pre, GetoptRet* getopt_post, List* argv,
                     CString* optstring);
bool getopt_long_only_11_pred(CString* item, GetoptRet* getopt_pre,
                         CString* optstring, List* longopts);
bool getopt_long_only_take_arg(CString* item, GetoptRet* getopt_pre,
              CString* optstring, List* longopts, List* argv, IntT* variant, ProcessState* ps);
bool NoCommasAndEqualSigns(List* keylistp);
bool OneSuboption(StringTPtr* optionp, StringTPtr optionp_pre);
IntT argumentValid(CString* optionp_pre_str, List* keylist);

#endif

