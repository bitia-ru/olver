       /*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/float/float_media.seh"
#include "common/common_media.seh"

#include <string.h>

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initUtilFloatSubsystem(void)
{
    // Set up mediators
    set_mediator___finite_spec(__finite_media);
    set_mediator___fpclassify_spec(__fpclassify_media);
    set_mediator___isinf_spec(__isinf_media);
    set_mediator___isnan_spec(__isnan_media);
    set_mediator___signbit_spec(__signbit_media);
    set_mediator_finite_spec(finite_media);
    set_mediator_frexp_spec(frexp_media);
    set_mediator_ilogb_spec(ilogb_media);
    set_mediator_ldexp_spec(ldexp_media);
    set_mediator_logb_spec(logb_media);
    set_mediator_nextafter_spec(nextafter_media);
    set_mediator_nexttoward_spec(nexttoward_media);
    set_mediator_scalb_spec(scalb_media);
    set_mediator_scalbln_spec(scalbln_media);
    set_mediator_scalbn_spec(scalbn_media);
    set_mediator_significand_spec(significand_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __finite_spec **/
//This mediator refers to: __finitef, __finite, __finitel
mediator __finite_media for 
specification
IntT __finite_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char st[3][100] = {"__finitef:$(unifloat)",
                           "__finite:$(unifloat)", 
                           "__finitel:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

/** __fpclassify_spec **/
//This mediator refers to: __fpclassifyf, __fpclassify
mediator __fpclassify_media for 
specification
IntT __fpclassify_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char st[2][100] = {"__fpclassifyf:$(unifloat)",
                           "__fpclassify:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}


/** __isinf_spec **/
//This mediator refers to: __isinff, __isinf, __isinfl
mediator __isinf_media for 
specification
IntT __isinf_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char st[3][100] = {"__isinff:$(unifloat)",
                           "__isinf:$(unifloat)", 
                           "__isinfl:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

/** __isnan_spec **/
//This mediator refers to: __isnanf, __isnan, __isnanl
mediator __isnan_media for
specification
IntT __isnan_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char st[3][100] = {"__isnanf:$(unifloat)",
                           "__isnan:$(unifloat)", 
                           "__isnanl:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

/** __signbit_spec **/
//This mediator refers to: __signbitf, __signbit
mediator __signbit_media for 
specification
IntT __signbit_spec(CallContext context, Unifloat* x, IntT *ExistFunction)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char str[50] = "Function not found in any library";
        char st[2][100] = {"__signbitf:$(unifloat)",
                           "__signbit:$(unifloat)"};

        int i = 1;

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (command.response.buffer.data != NULL)
        {
            if (strstr(command.response.buffer.data, str) != NULL)
            {
                *ExistFunction = 0;
                return false;
            }
            else
            {
               *ExistFunction = 1;
            }
        }

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

/** finite_spec **/
//This mediator refers to: finitef, finite, finitel
mediator finite_media for 
specification
IntT finite_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;
        char st[3][100] = {"finitef:$(unifloat)",
                           "finite:$(unifloat)", 
                           "finitel:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
    }
}

/** frexp_spec **/
//This mediator refers to: frexpf, frexp, frexpl
mediator frexp_media for 
specification
Unifloat* frexp_spec(CallContext context, Unifloat* x, IntT* exp)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"frexpf:$(unifloat)",
                           "frexp:$(unifloat)", 
                           "frexpl:$(unifloat)"};

        format_TSCommand( &command, st[x->type], x);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *exp = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;  
  }
}

/** ilogb_spec **/
//This mediator refers to: ilogbf, ilogb, ilogbl
mediator ilogb_media for 
specification
IntT ilogb_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        IntT res;        
        char par[3][30] = {"ilogbf:$(unifloat)",
                           "ilogb:$(unifloat)", 
                           "ilogbl:$(unifloat)"};

        format_TSCommand( &command, par[x->type], x);

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}

/** ldexp_spec **/
//This mediator refers to: ldexpf, ldexp, ldexpl
mediator ldexp_media for 
specification
Unifloat* ldexp_spec(CallContext context, Unifloat* x, IntT exp, 
                     ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        char par[3][30] = {"ldexpf:$(unifloat)$(int)",
                           "ldexp:$(unifloat)$(int)", 
                           "ldexpl:$(unifloat)$(int)"};

        format_TSCommand( &command, par[x->type], x, create_IntTObj(exp));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
            *errno = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** logb_spec **/
//This mediator refers to: logbf, logb, logbl
mediator logb_media for 
specification
Unifloat* logb_spec(CallContext context, Unifloat* x, ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        char par[3][30] = {"logbf:$(unifloat)",
                           "logb:$(unifloat)", 
                           "logbl:$(unifloat)"};

        format_TSCommand( &command, par[x->type], x);

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** nextafter_spec **/
//This mediator refers to: nextafterf, nextafter, nextafterl
mediator nextafter_media for 
specification
Unifloat* nextafter_spec(CallContext context, Unifloat* x, Unifloat* y, 
                         ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"nextafterf:$(unifloat)$(unifloat)",
                           "nextafter:$(unifloat)$(unifloat)", 
                           "nextafterl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[x->type], x, y);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** nexttoward_spec **/
//This mediator refers to: nexttowardf, nexttoward, nexttowardl
mediator nexttoward_media for 
specification
Unifloat* nexttoward_spec(CallContext context, Unifloat* x, Unifloat* y, 
                         ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"nexttowardf:$(unifloat)$(unifloat)",
                           "nexttoward:$(unifloat)$(unifloat)", 
                           "nexttowardl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[x->type], x, y);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** scalb_spec **/
//This mediator refers to: scalbf, scalb, scalbl
mediator scalb_media for 
specification
Unifloat* scalb_spec(CallContext context, Unifloat* x, Unifloat* n,
                     ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        char st[3][100] = {"scalbf:$(unifloat)$(unifloat)",
                           "scalb:$(unifloat)$(unifloat)", 
                           "scalbl:$(unifloat)$(unifloat)"};

        format_TSCommand( &command, st[x->type], x, n);

        executeCommandInContext( context, &command );

        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);            
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** scalbln_spec **/
//This mediator refers to: scalblnf, scalbln, scalblnl
mediator scalbln_media for 
specification
Unifloat* scalbln_spec(CallContext context, Unifloat* x, LongT n,
                       ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        char par[3][30] = {"scalblnf:$(unifloat)$(long)",
                           "scalbln:$(unifloat)$(long)", 
                           "scalblnl:$(unifloat)$(long)"};

        format_TSCommand( &command, par[x->type], x, create_LongTObj(n));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** scalbn_spec **/
//This mediator refers to: scalbnf, scalbn, scalbnl
mediator scalbn_media for 
specification
Unifloat* scalbn_spec(CallContext context, Unifloat* x, IntT n, 
                      ErrorCode* errno)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        char par[3][30] = {"scalbnf:$(unifloat)$(int)",
                           "scalbn:$(unifloat)$(int)", 
                           "scalbnl:$(unifloat)$(int)"};

        format_TSCommand( &command, par[x->type], x, create_IntTObj(n));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *errno = readInt_TSStream(&command.response);
            res = readUnifloat_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

/** significand_spec **/
//This mediator refers to: significandf, significand, significandl
mediator significand_media for 
specification
Unifloat* significand_spec(CallContext context, Unifloat* x)
{
    call
    {
        TSCommand command = create_TSCommand();
        Unifloat* res;
        
        char par[3][30] = {"significandf:$(unifloat)",
                           "significand:$(unifloat)", 
                           "significandl:$(unifloat)"};

        format_TSCommand( &command, par[x->type], x);

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readUnifloat_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

