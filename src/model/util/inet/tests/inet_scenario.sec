/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "util/inet/tests/inet_scenario.seh"
#include "util/inet/inet_model.seh"

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"


static VoidTPtr inet_ntop_src4;
static VoidTPtr inet_ntop_dst4;
static VoidTPtr inet_ntop_src6;
static VoidTPtr inet_ntop_dst6;


static VoidTPtr inet_pton_src4;
static VoidTPtr inet_pton_dst4;
static VoidTPtr inet_pton_src6;
static VoidTPtr inet_pton_dst6;
/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

/*
 * strcpy, strncpy, strdup, __strdup, strcat, strncat, strlen, strstr, stpcpy,
 * __stpcpy, stpncpy, strndup, strnlen
 */

static char* inet_addr_param_4[]=
{
    "0",
    "0123",
    "0XfF"
};
static char* inet_addr_param_3[]=
{
    "0",
    "0123",
    "0XfF",
    "0400",
    "0XDcBA",
    "65535"
};
static char* inet_addr_param_2[]=
{
    "0",
    "0123",
    "0XfF",
    "0400",
    "0xAbcD",
    "65535",
    "65536",
    "0xabcDEf",
    "077777777"
};
static char* inet_addr_param_1[]=
{
    "0",
    "0123",
    "0XfF",
    "0400",
    "0xAbcD",
    "65535",
    "65536",
    "0xabcDEf",
    "077777777",
    "16777216",
    "3456789012",
    "0xFfeEDDcc"
};
static char* inet_addr_param_err[]=
{
    "321.12.0.0",
    "0400.22.33.4",
    "2.3.4",
    "1.2.3.4.0xF",
    "0xw.0xz.90",
    "123.16777216",
    "0123.0123.65600",
    "10210201201201020120121",
    "0121212221212121"
};


static unsigned long inet_ntoa_param[]=
{
    0,
    1,
    255
};

static ByteT inet_ntop_param4[]=
{
    0,
    1,
    128,
    255
};

static unsigned long inet_ntop_param6[]=
{
    0,
    255,
    45678,
    12345678,
    3211233211
};

int inet_ntop_err_af_param[]=
{
    2*SUT_AF_INET+2*SUT_AF_INET6,
        SUT_AF_INET,
        SUT_AF_INET6
};
int inet_ntop_err_len_param[]=
{
    SUT_INET_ADDRSTRLEN,
        0,
        0
};
ByteT inet_ntop_scen_err_arr[4]=
{
    0,
    0,
    0,
    0
};
ByteT inet_ntop_scen_add_err_arr[16]=
{
    0,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255
};


static char* inet_pton_param[]=
{
    "0.1.2.3",
    "123.45.67.89",
    "111.222.333.444",
    "0.111.2.33",
    "44.55.66.77",
    "...",
    "1.1.1.1.1.1.1.",
    "00.0.0.0.0",
    "3.2",
    "::65536",
    "::65536:",
    ":",
    "1:2:3:4",
    "100000:0:0:0:0:0:0:0",
    ":::",
    "1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7",
    "1.",
    "...",
    "100:101:102:103:104:105:106:...",
    "10:11:12:13:14:15::16:...",
    "10:11:12:13:14:15:16::2.3.4.5",
    "::",
    "1::",
    "0:ff::",
    "a:b:c:d:e:f:0:1",
    "::0.0.0.0",
    "::1.0.0.0",
    "af:be:cd:dc:eb:fa:7.123.0.12",
    "1a:2b:3c:4d:5e:6f:123.34.56.67",
    "a0:b1:c2:d3:e4:f5:231.49.0.127",
    "1:2:3:4:5:6:7:8:9:0:1",
    "11:22:33:44:55:66:77.88.99.11.22",
    "1:2:3:4.5:6.7:8.9:0:1",
    ".,dfgdfgd\\",
    "1234.34.34.34",
    "11111:22:33:44:55:66:77:88",
    "11:22:33:44:55:66:0.0.256.0"
};

static int inet_addr_size_1=sizeof(inet_addr_param_1)/sizeof(char*);
static int inet_addr_size_2=sizeof(inet_addr_param_2)/sizeof(char*);
static int inet_addr_size_3=sizeof(inet_addr_param_3)/sizeof(char*);
static int inet_addr_size_4=sizeof(inet_addr_param_4)/sizeof(char*);
static int inet_addr_size_err=sizeof(inet_addr_param_err)/sizeof(char*);
static int inet_ntoa_size=sizeof(inet_ntoa_param)/sizeof(unsigned long);
static int inet_ntop_size4=sizeof(inet_ntop_param4)/sizeof(char);
static int inet_ntop_size6=sizeof(inet_ntop_param6)/sizeof(unsigned long);
static int inet_ntop_size_err=sizeof(inet_ntop_err_af_param)/sizeof(int);
static int inet_pton_size=sizeof(inet_pton_param)/sizeof(char*);
/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_inet_scenario(int argc, char** argv)
{
    // Init test scenario data
    context = getContext();
    inet_ntop_src4 = allocateMemoryBlock(context, 5);
    inet_ntop_dst4 = allocateMemoryBlock(context, SUT_INET_ADDRSTRLEN);
    inet_ntop_src6 = allocateMemoryBlock(context, 20);
    inet_ntop_dst6 = allocateMemoryBlock(context, SUT_INET6_ADDRSTRLEN);

    inet_pton_src4 = allocateMemoryBlock(context, 50);
    inet_pton_dst4 = allocateMemoryBlock(context, 4);
    inet_pton_src6 = allocateMemoryBlock(context, 100);
    inet_pton_dst6 = allocateMemoryBlock(context, 16);

    if (isNULL_VoidTPtr(inet_ntop_src4) || isNULL_VoidTPtr(inet_ntop_dst4)
        || isNULL_VoidTPtr(inet_ntop_src6) || isNULL_VoidTPtr(inet_ntop_dst6))
        return false;

    return true;
}

static void finish_inet_scenario(void)
{
    deallocateMemoryBlock(context, inet_ntop_src4);
    deallocateMemoryBlock(context, inet_ntop_dst4);
    deallocateMemoryBlock(context, inet_ntop_src6);
    deallocateMemoryBlock(context, inet_ntop_dst6);

    deallocateMemoryBlock(context, inet_pton_src4);
    deallocateMemoryBlock(context, inet_pton_dst4);
    deallocateMemoryBlock(context, inet_pton_src6);
    deallocateMemoryBlock(context, inet_pton_dst6);
}


/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool inet_addr_scen1()
{
    CString* param;
    CString* dot=create_CString(".");
    CString* part;

    iterate(int i0=0;i0<inet_addr_size_1;++i0;)
    {
        param=create_CString(inet_addr_param_1[i0]);
        inet_addr_spec(context, param);
    }

    return true;
}

scenario
bool inet_addr_scen2()
{
    CString* param;
    CString* dot=create_CString(".");
    CString* part;

    iterate(int i0=0;i0<inet_addr_size_4;++i0;)
    {
        param=create_CString(inet_addr_param_4[i0]);
        iterate(int i1=0;i1<inet_addr_size_2;++i1;)
        {
            part=create_CString(inet_addr_param_2[i1]);
            part=concat_CString(dot, part);
            param=concat_CString(param, part);

            inet_addr_spec(context, param);
        }
    }

    return true;
}

scenario
bool inet_addr_scen3()
{
    CString* param;
    CString* dot=create_CString(".");
    CString* part;

    iterate(int i0=0;i0<inet_addr_size_4;++i0;)
    {
        param=create_CString(inet_addr_param_4[i0]);
        iterate(int i1=0;i1<inet_addr_size_4;++i1;)
        {
            part=create_CString(inet_addr_param_4[i1]);
            part=concat_CString(dot, part);
            param=concat_CString(param, part);

            iterate(int i2=0;i2<inet_addr_size_3;++i2;)
            {
                part=create_CString(inet_addr_param_3[i2]);
                part=concat_CString(dot, part);
                param=concat_CString(param, part);

                inet_addr_spec(context, param);
            }
        }
    }

    return true;
}

scenario
bool inet_addr_scen4()
{
    CString* param;
    CString* dot=create_CString(".");
    CString* part;

    iterate(int i0=0;i0<inet_addr_size_4;++i0;)
    {
        param=create_CString(inet_addr_param_4[i0]);
        iterate(int i1=0;i1<inet_addr_size_4;++i1;)
        {
            part=create_CString(inet_addr_param_4[i1]);
            part=concat_CString(dot, part);
            param=concat_CString(param, part);

            iterate(int i2=0;i2<inet_addr_size_4;++i2;)
            {
                part=create_CString(inet_addr_param_4[i2]);
                part=concat_CString(dot, part);
                param=concat_CString(param, part);

                iterate(int i3=0;i3<inet_addr_size_4;++i3;)
                {
                    part=create_CString(inet_addr_param_4[i3]);
                    part=concat_CString(dot, part);
                    param=concat_CString(param, part);

                    inet_addr_spec(context, param);
                }
            }
        }
    }

    return true;
}

scenario
bool inet_addr_scen_err()
{
    CString* param;
    CString* dot=create_CString(".");
    CString* part;

    iterate(int i0=0;i0<inet_addr_size_err;++i0;)
    {
        param=create_CString(inet_addr_param_err[i0]);
        inet_addr_spec(context, param);
    }

    return true;
}

scenario
bool inet_ntoa_scen()
{
    InAddrT* param;
    iterate(int i0=0;i0<inet_ntoa_size;++i0;)
        iterate(int i1=0;i1<inet_ntoa_size;++i1;)
            iterate(int i2=0;i2<inet_ntoa_size;++i2;)
                iterate(int i3=0;i3<inet_ntoa_size;++i3;)
                {
                    param=create_InAddrT( (unsigned char)inet_ntoa_param[i0],
                                          (unsigned char)inet_ntoa_param[i1],
                                          (unsigned char)inet_ntoa_param[i2],
                                          (unsigned char)inet_ntoa_param[i3]);
                    inet_ntoa_spec(context, param);
                }

    return true;
}

scenario
bool inet_ntop_scen4()
{
    ByteT arr[4];
    CByteArray* param;
    IntT af=SUT_AF_INET;
    IntT len=SUT_INET_ADDRSTRLEN;
    iterate(int i0=0;i0<inet_ntop_size4;++i0;)
        iterate(int i1=0;i1<inet_ntop_size4;++i1;)
            iterate(int i2=0;i2<inet_ntop_size4;++i2;)
                iterate(int i3=0;i3<inet_ntop_size4;++i3;)
                {
                    arr[0]=inet_ntop_param4[i0];
                    arr[1]=inet_ntop_param4[i1];
                    arr[2]=inet_ntop_param4[i2];
                    arr[3]=inet_ntop_param4[i3];
                    param = create_CByteArray(arr, 4);
                    writeCByteArray_VoidTPtr(inet_ntop_src4, param);
                    inet_ntop_spec(context, af, inet_ntop_src4,
                                    inet_ntop_dst4, len, requestErrorCode());
                }

    return true;
}

scenario
bool inet_ntop_scen6()
{
    ByteT arr[16];
    CByteArray* param;
    IntT af=SUT_AF_INET6;
    IntT len=SUT_INET6_ADDRSTRLEN;
    iterate(int i0=0;i0<inet_ntop_size6;++i0;)
        iterate(int i1=0;i1<inet_ntop_size6;++i1;)
            iterate(int i2=0;i2<inet_ntop_size6;++i2;)
                iterate(int i3=0;i3<inet_ntop_size6;++i3;)
                {
                    arr[0]=(ByteT)(inet_ntop_param6[i0]>>24);
                    arr[1]=(ByteT)((inet_ntop_param6[i0]>>16)&255);
                    arr[2]=(ByteT)((inet_ntop_param6[i0]>>8)&255);
                    arr[3]=(ByteT)((inet_ntop_param6[i0])&255);

                    arr[4]=(ByteT)(inet_ntop_param6[i1]>>24);
                    arr[5]=(ByteT)((inet_ntop_param6[i1]>>16)&255);
                    arr[6]=(ByteT)((inet_ntop_param6[i1]>>8)&255);
                    arr[7]=(ByteT)((inet_ntop_param6[i1])&255);

                    arr[8]=(ByteT)(inet_ntop_param6[i2]>>24);
                    arr[9]=(ByteT)((inet_ntop_param6[i2]>>16)&255);
                    arr[10]=(ByteT)((inet_ntop_param6[i2]>>8)&255);
                    arr[11]=(ByteT)((inet_ntop_param6[i2])&255);

                    arr[12]=(ByteT)(inet_ntop_param6[i3]>>24);
                    arr[13]=(ByteT)((inet_ntop_param6[i3]>>16)&255);
                    arr[14]=(ByteT)((inet_ntop_param6[i3]>>8)&255);
                    arr[15]=(ByteT)((inet_ntop_param6[i3])&255);

                    param = create_CByteArray(arr, 16);
                    writeCByteArray_VoidTPtr(inet_ntop_src6, param);
                    inet_ntop_spec(context, af, inet_ntop_src6,
                                    inet_ntop_dst6, len, requestErrorCode());
                }

    return true;
}

scenario
bool inet_ntop_scen_err()
{
    CByteArray* param;
    IntT af;
    IntT len;

    param = create_CByteArray(inet_ntop_scen_err_arr, 4);
    writeCByteArray_VoidTPtr(inet_ntop_src4, param);

    iterate(int i=0;i<inet_ntop_size_err;i++;)
    {
        af=inet_ntop_err_af_param[i];
        len=inet_ntop_err_len_param[i];

        inet_ntop_spec(context, af, inet_ntop_src4,
                        inet_ntop_dst4, len, requestErrorCode());
    }

    return true;
}

scenario
bool inet_ntop_scen_add_err()
{
    CByteArray* param;

    param = create_CByteArray(inet_ntop_scen_add_err_arr, 16);
    writeCByteArray_VoidTPtr(inet_ntop_src6, param);

    inet_ntop_spec(context, SUT_AF_INET6, inet_ntop_src6,
                inet_ntop_dst6, SUT_INET6_ADDRSTRLEN, requestErrorCode());

    inet_ntop_spec(context, SUT_AF_INET6, inet_ntop_src6,
                inet_ntop_dst6, SUT_INET_ADDRSTRLEN, requestErrorCode());

    inet_ntop_spec(context, SUT_AF_INET6, inet_ntop_src6,
                inet_ntop_dst4, SUT_INET_ADDRSTRLEN, requestErrorCode());

    return true;
}

scenario
bool inet_pton_scen_ipv4()
{
    CString* param;
    iterate(int i=0;i<inet_pton_size;i++;)
    {
        param=create_CString(inet_pton_param[i]);
        VERBOSE("param==%s, ", *param);
        writeCString_VoidTPtr(inet_pton_src4, param);
        VERBOSE("param4==%s\n", *readCString_VoidTPtr(inet_pton_src4));
        inet_pton_spec(context, SUT_AF_INET, inet_pton_src4, inet_pton_dst4,
                                                        requestErrorCode());
    }

    return true;
}

scenario
bool inet_pton_scen_ipv6()
{
    CString* param;
    iterate(int i=0;i<inet_pton_size;i++;)
    {
        param=create_CString(inet_pton_param[i]);
        VERBOSE("param==%s, ", *param);
        writeCString_VoidTPtr(inet_pton_src6, param);
        VERBOSE("param6==%s\n", *readCString_VoidTPtr(inet_pton_src6));
        inet_pton_spec(context, SUT_AF_INET6, inet_pton_src6, inet_pton_dst6,
                                                        requestErrorCode());
    }

    return true;
}

scenario
bool inet_pton_scen_err()
{
    CString* param;
    {
        param=create_CString(inet_pton_param[0]);
        VERBOSE("param==%s, ", *param);
        writeCString_VoidTPtr(inet_pton_src6, param);
        VERBOSE("param6==%s\n", *readCString_VoidTPtr(inet_pton_src6));
        inet_pton_spec(context, SUT_AF_INET6+SUT_AF_INET+1,
                        inet_pton_src6, inet_pton_dst6, requestErrorCode());
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_inet_scenario =
{
    .init = init_inet_scenario,
    .finish = finish_inet_scenario,
    .actions = {
        inet_addr_scen1,
        inet_addr_scen2,
        inet_addr_scen3,
        inet_addr_scen4,
        inet_addr_scen_err,

        inet_ntoa_scen,

        inet_ntop_scen4,
        inet_ntop_scen6,
        inet_ntop_scen_err,
        inet_ntop_scen_add_err,

        inet_pton_scen_ipv4,
        inet_pton_scen_ipv6,
        inet_pton_scen_err,
            NULL}
};

bool main_util_inet(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    util_inet_scenario(argc,argv);
    return true;
}

#ifdef UTIL_INET_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "util/inet/inet_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initUtilInetSubsystem();
}

int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    setTraceEncoding("windows-1251");

    // Run test scenario
    main_util_inet(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
