/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef UTIL_INET_MODEL_SEH
#define UTIL_INET_MODEL_SEH

#include "common/common_model.seh"
#include "config/interpretation.seh"
#include "util/inet/inet_config.h"

#include "socket/socket/socket_model.seh"
#include "data/netinet/in_model.seh"

specification typedef struct InAddrT
{
    CharT arr[4];
} InAddrT;

#define IS_IPV6 true

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** inet_addr_spec **/
specification
InAddrT* inet_addr_spec( CallContext context, CString* address);
InAddrT* inet_addr_model(CString* address);

/** inet_ntoa_spec **/
specification
CString* inet_ntoa_spec( CallContext context, InAddrT* address);
CString* inet_ntoa_model(InAddrT* address);

/** inet_ntop_spec **/
specification
VoidTPtr inet_ntop_spec( CallContext context, IntT af, VoidTPtr src,
                               VoidTPtr dst,  IntT size, ErrorCode* errno);
CString* inet_ntop_model(int af, VoidTPtr src);

/** inet_pton_spec **/
specification
int inet_pton_spec( CallContext context, IntT af, VoidTPtr src,
                               VoidTPtr dst, ErrorCode* errno);
bool inet_pton_model(int af_pre, CString* src_pre, CByteArray* dst);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
int inet_addr_how_many_parts(CString* address);

bool inet_addr_num_input_parts(CString* address, int num);
InAddrT* inet_addr_get_input_parts(CString* address, int num);

unsigned long inet_addr_part_get_hex(CString* comp);
unsigned long inet_addr_part_get_oct(CString* comp);
unsigned long inet_addr_part_get_dec(CString* comp);

bool inet_addr_part_is_hex(CString* comp, unsigned long max);
bool inet_addr_part_is_oct(CString* comp, unsigned long max);
bool inet_addr_part_is_dec(CString* comp, unsigned long max);

InAddrT* create_InAddrT(CharT arr0, CharT arr1, CharT arr2, CharT arr3);

CString* inet_ntop_model_ipv4(VoidTPtr src);
CString* inet_ntop_model_ipv6(VoidTPtr src);
CString* inet_ntop_int2CString(unsigned int a, int base);
CString* inet_ntop_ipv6_make_full_zeroes(CString* addr);
CString* inet_ntop_tolower(CString* addr);
CString* inet_ntop_convert_last_4bytes(CString* addr);
unsigned long inet_ntop_char2num(char x);
char inet_ntop_num2char(int x);

bool inet_pton_correct_src(CString* src_pre, int af_pre);
int inet_pton_correct_part_dec(CString* part);
int inet_pton_correct_part_hex(CString* part);

#endif

