/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <stdio.h>

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "process/environ/environ_media.seh"
#include "util/wordexp/wordexp_media.seh"
#include "util/wordexp/tests/wordexp_scenario.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/
static WordExpTPtr pwordexp;

/********************************************************************/
/**                      Test Scenario Debug                       **/
/********************************************************************/
#ifdef UTIL_WORDEXP_LOCAL_MAIN

static AssertionExit system_assertion_handler;

void util_wordexp_assertion_exit(const char *format, va_list arg_list)
{
    system_assertion_handler(format, arg_list);
}

#endif /* #ifdef UTIL_WORDEXP_LOCAL_MAIN */

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/
static bool init_wordexp_scenario(int argc, char **argv)
{
#ifdef UTIL_WORDEXP_LOCAL_MAIN

    system_assertion_handler = atAssertion(util_wordexp_assertion_exit);

#endif /* #ifdef UTIL_WORDEXP_LOCAL_MAIN */

    context = getContext();

    pwordexp = allocateMemoryBlock(context, sizeof_Type(context, "wordexp_t"));

    if(isNULL_VoidTPtr(pwordexp))
        return false;

    initProcessEnvironment(context);

    return true;
}

static void finish_wordexp_scenario(void)
{
    deallocateMemoryBlock(context, pwordexp);

    TEST_SCENARIO_VERDICT_VERBOSE(util_wordexp_scenario);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/
scenario
bool wordexp_scen()
{
    Word *words = create_Word();

    WordExp *wordexp0 =
        create_EmptyExpansion(create_CString("string"));
    WordExp *wordexp1 =
        create_ParameterExpansion(RegularParameterExpansion, create_CString("param"), create_CString(""));
    WordExp *wordexp2 =
        create_CommandSubstitution(create_CString("echo output"), create_CString("output"));
    WordExp *wordexp3 =
        create_ArithmeticExpansion(create_IntegerValue(13));

    append_List(words, wordexp0);
    append_List(words, wordexp1);
    append_List(words, wordexp2);
    append_List(words, wordexp3);

    wordexp_spec(context, words, pwordexp, default_WordExpFlags());

    wordfree_spec(context, pwordexp);

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm util_wordexp_scenario =
{
    .init = init_wordexp_scenario,
    .finish = finish_wordexp_scenario,
    .actions =
    {
        wordexp_scen,
        NULL
    }
};

bool main_util_wordexp(int argc, char **argv)
{
    util_wordexp_scenario(argc, argv);
    return true;
}

#ifdef UTIL_WORDEXP_LOCAL_MAIN

#include "common/init.seh"
#include "common/control_center.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initProcessEnvironSubsystem();
}

int main(int argc, char **argv)
{
    initTestSystem();
    loadSUT();

    main_util_wordexp(argc, argv);

    return 0;
}

#endif /* #ifdef UTIL_WORDEXP_LOCAL_MAIN */
