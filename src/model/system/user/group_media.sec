/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "system/user/group_media.seh"
#include "common/common_media.seh"
#include "common/common_model.seh"
#include "atl/integer.h"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initSystemUserGroupSubsystem(void)
{
  // Set up mediators
    set_mediator_endgrent_spec(endgrent_media);
    set_mediator_getgrent_spec(getgrent_media);
    set_mediator_getgrgid_spec(getgrgid_media);
    set_mediator_getgrgid_r_spec(getgrgid_r_media);
    set_mediator_getgrnam_spec(getgrnam_media);
    set_mediator_getgrnam_r_spec(getgrnam_r_media);
    set_mediator_getgrouplist_spec(getgrouplist_media);
    set_mediator_setgrent_spec(setgrent_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** endgrent_spec **/
mediator endgrent_media for specification
void endgrent_spec( CallContext context, ErrorCode* errno, CancelStatus status)
{

    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "endgrent" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                *errno = readInt_TSStream(&command.response);
            }
        }
        
        destroy_TSCommand(&command);

        return; 
    }
    state
    {
        SystemState* curState=getSystemState( context.system );
        Set*  groupsSet=curState->groups;

        if (CANCELLED(status))
        {
            return;
        }

        if(*errno == SUT_EOK)
        {
            curState->isGroupsSetValid=true;
        }
    }
}


/** getgrent_spec **/
mediator getgrent_media for specification
UsersGroup* getgrent_spec(CallContext context, ErrorCode* errno,
                          CancelStatus status)
{
    UsersGroup* res=NULL;
    VoidTPtr   resEntry=NULL_VoidTPtr;
    CString*   gr_name;
    GidT       gr_gid;
    IntT       numItems;
    List       *gr_mem; 
    CString    *tmp;
    int        i=0;


    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "getgrent" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                resEntry = readPointer_TSStream(context, &command.response );
                if(!isNULL_VoidTPtr(resEntry))
                {
                    gr_name = readCString_TSStream(&command.response);
                    gr_gid = readInt_TSStream(&command.response);
                    numItems = readInt_TSStream(&command.response);
                    gr_mem = create_List(&type_CString);
                    if(gr_mem==NULL)
                    {
                        setBadVerdict("Not enough memory");
                        return NULL;
                    }
                    for(i=0;i<numItems;i++)
                    {
                        tmp=readCString_TSStream(&command.response);
                        append_List(gr_mem, tmp);
                    }
                }

                *errno = readInt_TSStream(&command.response);
            }
        }
        
        destroy_TSCommand(&command);
        if(!CANCELLED(status) && !isNULL_VoidTPtr(resEntry))
        { 
           res = create_UsersGroup( gr_name, gr_gid, gr_mem);
        }

        return res; 
    }
    state
    {
        SystemState* curState=getSystemState( context.system );
        Set*  groupsSet=curState->groups;

        if (CANCELLED(status))
        {
            return;
        }

        if(curState->isGroupsSetValid==true)
        {
           curState->isGroupsSetFilled=false;
           clear_Set(groupsSet);
        }

        curState->isGroupsSetValid=false;
        if(getgrent_spec != NULL)
        {
            /*
            * When first called, getgrent() shall return a pointer to a group 
            * structure  containing the first entry in the group database.
            */
            IMPLEMENT_REQ("getgrent.01");
    
            /*
            * Thereafter, it shall return a pointer to a group structure 
            * containing the next group structure in the group database, so 
            * successive calls may be used to search the entire database.
            */
            IMPLEMENT_REQ("getgrent.02");

            /*
            * An implementation that provides extended security controls may 
            * impose further implementation-defined restrictions on accessing
            * the group database. In particular, the system may deny the 
            * existence of some or all of the group database entries associated
            * with groups other than those groups associated with the caller 
            * and may omit users other than the caller from the list of members
            * of groups in database entries that are returned.
            */
            IMPLEMENT_REQ("getgrent.03");

            add_Set(groupsSet, getgrent_spec);
        }
        else if(*errno==SUT_EOK)
        {
           curState->isGroupsSetFilled=true;
        }
        
    }
}


/** getgrgid_r_spec **/

mediator getgrgid_r_media for specification
GetGrxxxFunctionResult*  getgrgid_r_spec(CallContext context, 
                                         GidT gid,  
                                         UsersGroupTPtr grp, SizeT bufsize, 
                                         UsersGroupTPtr* result, 
                                         ErrorCode* errno, CancelStatus status)
{
    IntT       res=0;
    VoidTPtr   resEntry=NULL_VoidTPtr;
    CString*   gr_name;
    GidT       gr_gid;
    IntT       numItems;
    List       *gr_mem; 
    CString    *tmp;
    int        i=0;

    UsersGroup* groupResult=NULL;
    GetGrxxxFunctionResult* funcResult=NULL;

    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "getgrgid_r:$(int)$(ptr)$(size)",  
            create_IntTObj(gid),
            create_VoidTPtrObj(grp),
            create_SizeTObj(bufsize)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                res=readInt_TSStream(&command.response);
                *errno = readInt_TSStream(&command.response);
                *result=readPointer_TSStream(context, &command.response );

                if(!isNULL_VoidTPtr(*result))
                {
                    gr_name = readCString_TSStream(&command.response);
                    gr_gid = readInt_TSStream(&command.response);
                    numItems = readInt_TSStream(&command.response);
                    gr_mem = create_List(&type_CString);
                    if(gr_mem==NULL)
                    {
                        setBadVerdict("Not enough memory");
                        return NULL;
                    }
                    for(i=0;i<numItems;i++)
                    {
                        tmp=readCString_TSStream(&command.response);
                        append_List(gr_mem, tmp);
                    }
                }
            }

        }
        
        destroy_TSCommand(&command);
        if(!CANCELLED(status) && !isNULL_VoidTPtr(*result))
        { 
           groupResult=create_UsersGroup( gr_name, gr_gid, gr_mem);
        }
        if (!CANCELLED(status))
        {
            funcResult=create_GetGrxxxFunctionResult( res, groupResult);
        }
        return funcResult; 
    }

}



/** getgrgid_spec **/
mediator getgrgid_media for specification
UsersGroup* getgrgid_spec(CallContext context, GidT gid, ErrorCode* errno, 
                          CancelStatus status)
{
    UsersGroup* res=NULL;
    VoidTPtr    resEntry=NULL_VoidTPtr;
    CString*    gr_name;
    GidT        gr_gid;
    IntT        numItems;
    List        *gr_mem; 
    int         i=0;
    CString     *tmp;


    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand( &command, "getgrgid:$(int)",  create_IntTObj(gid));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                resEntry = readPointer_TSStream(context, &command.response );
                if(!isNULL_VoidTPtr(resEntry))
                {
                    gr_name = readCString_TSStream(&command.response);
                    gr_gid = readInt_TSStream(&command.response);

                    numItems = readInt_TSStream(&command.response);
                    gr_mem = create_List(&type_CString);
                    if(gr_mem==NULL)
                    {
                        setBadVerdict("Not enough memory");
                        return NULL;
                    }
                    for(i=0;i<numItems;i++)
                    {
                        tmp=readCString_TSStream(&command.response);
                        append_List(gr_mem, tmp);
                    }
                }

                *errno = readInt_TSStream(&command.response);
            }
        }
        
        destroy_TSCommand(&command);
        if(!CANCELLED(status) && !isNULL_VoidTPtr(resEntry))
        { 
           res = create_UsersGroup( gr_name, gr_gid, gr_mem);
        }

        return res; 
    }
}



/** getgrnam_spec **/
mediator getgrnam_media for specification
UsersGroup* getgrnam_spec(CallContext context, CString* dest, 
                          ErrorCode* errno, CancelStatus status)
{
    UsersGroup* res=NULL;
    VoidTPtr    resEntry=NULL_VoidTPtr;
    CString*    gr_name;
    GidT        gr_gid;
    IntT        numItems;
    List        *gr_mem; 
    int         i=0;
    CString     *tmp;


    call
    {
        TSCommand command = create_TSCommand();

         
        format_TSCommand( &command, "getgrnam:$(str)",  dest);
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                resEntry = readPointer_TSStream(context, &command.response );
                if(!isNULL_VoidTPtr(resEntry))
                {
                    gr_name = readCString_TSStream(&command.response);
                    gr_gid = readInt_TSStream(&command.response);

                    numItems = readInt_TSStream(&command.response);
                    gr_mem = create_List(&type_CString);
                    if(gr_mem==NULL)
                    {
                        setBadVerdict("Not enough memory");
                        return NULL;
                    }
                    for(i=0;i<numItems;i++)
                    {
                        tmp=readCString_TSStream(&command.response);
                        append_List(gr_mem, tmp);
                    }
                }

                *errno = readInt_TSStream(&command.response);
            }
        }
        
        destroy_TSCommand(&command);
        if(!CANCELLED(status) && !isNULL_VoidTPtr(resEntry))
        { 
           res = create_UsersGroup( gr_name, gr_gid, gr_mem);
        }

        return res; 
    }
}


/** getgrnam_r_spec **/
mediator getgrnam_r_media for specification
GetGrxxxFunctionResult*  getgrnam_r_spec(CallContext context, 
                                         CString* name,  
                                         UsersGroupTPtr grp, SizeT bufsize, 
                                         UsersGroupTPtr* result, 
                                         ErrorCode* errno, CancelStatus status)
{
    IntT       res=0;
    VoidTPtr   resEntry=NULL_VoidTPtr;
    CString*   gr_name;
    GidT       gr_gid;
    IntT       numItems;
    List       *gr_mem; 
    CString    *tmp;
    int        i=0;

    UsersGroup* groupResult=NULL;
    GetGrxxxFunctionResult* funcResult=NULL;

    call
    {
        TSCommand command = create_TSCommand();

        format_TSCommand( &command, "getgrnam_r:$(str)$(ptr)$(size)",  
            name,
            create_VoidTPtrObj(grp),
            create_SizeTObj(bufsize)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                res=readInt_TSStream(&command.response);
                *errno = readInt_TSStream(&command.response);
                *result=readPointer_TSStream(context, &command.response );

                if(!isNULL_VoidTPtr(*result))
                {
                    gr_name = readCString_TSStream(&command.response);
                    gr_gid = readInt_TSStream(&command.response);
                    numItems = readInt_TSStream(&command.response);
                    gr_mem = create_List(&type_CString);
                    if(gr_mem==NULL)
                    {
                        setBadVerdict("Not enough memory");
                        return NULL;
                    }
                    for(i=0;i<numItems;i++)
                    {
                        tmp=readCString_TSStream(&command.response);
                        append_List(gr_mem, tmp);
                    }
                }
            }

        }
        
        destroy_TSCommand(&command);
        if(!CANCELLED(status) && !isNULL_VoidTPtr(*result))
        { 
           groupResult=create_UsersGroup( gr_name, gr_gid, gr_mem);
        }

        if (!CANCELLED(status))
        {
            funcResult=create_GetGrxxxFunctionResult( res, groupResult);
        }
        return funcResult; 
    }

}



/** getgrouplist_spec **/
mediator getgrouplist_media for specification
IntT getgrouplist_spec(CallContext context, CString* user, GidT group, 
                       Set* groups, IntT* ngroups)

{
    IntT res=0;
    IntT i=0;
    IntT curInt;
    IntT ngr=*ngroups;
    IntT act_groups;

    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "getgrouplist:$(str)$(int)$(int)", 
            user,
            create_IntTObj(group),
            create_IntTObj(ngr)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res=readInt_TSStream(&command.response);
            *ngroups=readInt_TSStream(&command.response);
            act_groups=readInt_TSStream(&command.response);
            clear_Set(groups);
            for(i=0;i<act_groups;i++)
            {
                curInt=readInt_TSStream(&command.response);
                add_Set(groups, create_Integer(curInt));
            }
        }
        
        destroy_TSCommand(&command);
        
        return res;
  }
}



/** setgrent_spec **/
mediator setgrent_media for specification
void setgrent_spec( CallContext context, ErrorCode* errno, CancelStatus status)
{

    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "setgrent" );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            readCancelStatus_TSStream(&command.response,status);
            if (!CANCELLED(status))
            {
                *errno = readInt_TSStream(&command.response);
            }
        }
        
        destroy_TSCommand(&command);

        return; 
    }
    state
    {
        SystemState* curState=getSystemState( context.system );
        Set*  groupsSet=curState->groups;

        if (CANCELLED(status))
        {
            return;
        }

        if(*errno == SUT_EOK)
        {
            if(curState->isGroupsSetValid==false)
            {
               clear_Set(groupsSet);
               curState->isGroupsSetFilled=false;
            }
        }
    }
}




