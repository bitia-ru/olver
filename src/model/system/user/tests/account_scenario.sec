/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "system/user/tests/account_scenario.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"

#include "config/system_config.seh"

#include "system/user/tests/account_scenario.seh"
#include "system/user/account_model.seh"
#include "system/user/account_media.seh"

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

static VoidTPtr ptr1;
CString * line1;
CString * name1;
CString * host1;
CString * dbname1;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_account_scenario(int argc, char** argv)
{

    /* Init test scenario data */
    context = getContext();

    INIT_SCENARIO_ACTION( makeSureProcessHasAppropriatePrivileges(context) );

    ptr1 = allocateMemoryBlock( context, sizeof_Type(context, "void*") );
    line1 = create_CString( "testdevice" );
    name1 = create_CString( "tester" );
    host1 = create_CString( "localhost" );
    dbname1 = create_CString( "/var/log/wtmp" );
	{
		VoidTPtr address=allocateMemoryBlock(context, 1000);
	    pututxline_spec(context, address, requestErrorCode() );
	}
    return true;
}

static void finish_account_scenario(void)
{
    deallocateMemoryBlock( context, ptr1 );
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/


scenario
bool endutxent_scen(void)
{
    endutxent_spec(context);

    return true;
}

scenario
bool getutxent_scen(void)
{
    getutxent_spec(context);

    return true;
}

scenario
bool getutxid_scen(void)
{
    UtmpxT * utmpx;
    setutxent_spec(context); // reset cursor
    utmpx = getutxent_spec(context);
   	getutxid_spec(context, utmpx->address );

    return true;
}

scenario
bool getutxline_scen(void)
{
    UtmpxT * utmpx;
    setutxent_spec(context); // reset cursor
    utmpx = getutxent_spec(context);
    getutxline_spec(context, utmpx->address );

    return true;
}

scenario
bool pututxline_scen(void)
{
    UtmpxT * utmpx;
    setutxent_spec(context); // reset cursor
    utmpx = getutxent_spec(context);
    pututxline_spec(context, utmpx->address, requestErrorCode() );

    return true;
}

scenario
bool setutxent_scen(void)
{
    setutxent_spec(context);

    return true;
}

scenario
bool getutent_scen(void)
{
    UtmpT * utmp;
    do{
    utmp = getutent_spec(context);
        if(utmp!=NULL)
            DUMP("TEST: %s\n",toCharArray_CString(utmp->ut_line));
    }while(utmp);/**/
    return true;
}

scenario
bool getutent_r_scen(void)
{
    UtmpxT * utmpx;
    setutxent_spec(context); // reset cursor
    utmpx = getutxent_spec(context);

    writeInt_VoidTPtr( ptr1, utmpx->address.address );
    getutent_r_spec( context, utmpx->address, ptr1 );

    return true;
}

scenario
bool login_scen(void)
{
    UtmpT * utmp;
    setutent_spec(context); // reset cursor
    utmp = getutent_spec(context);
    login_spec( context, utmp->address );

    return true;
}

scenario
bool logout_scen(void)
{
    logout_spec( context, line1 );

    return true;
}

scenario
bool logwtmp_scen(void)
{
    logwtmp_spec( context, line1, name1, host1 );

    return true;
}

scenario
bool setutent_scen(void)
{
    setutent_spec( context );

    return true;
}

scenario
bool utmpname_scen(void)
{
    utmpname_spec( context, dbname1 );

    return true;
}

scenario
bool endutent_scen(void)
{
    endutent_spec(context);

    return true;
}

scenario ndfsm system_user_account_scenario =
{
    .init = init_account_scenario,
    .finish = finish_account_scenario,

    .actions = {
        endutxent_scen,
        getutxent_scen,
        getutxid_scen,
        getutxline_scen,
        pututxline_scen,
        setutxent_scen,
        getutent_scen,
        getutent_r_scen,
        login_scen,
        logout_scen,
        logwtmp_scen,
        setutent_scen,
        utmpname_scen,
        endutent_scen,

        NULL
    }
};



#ifdef SYSTEM_USER_ACCOUNT_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "system/system/system_model.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();

    initSystemUserAccountSubsystem();
}


bool main_system_user_account(int argc, char** argv)
{
    system_user_account_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_system_user_account(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif
