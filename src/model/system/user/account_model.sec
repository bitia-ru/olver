/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from the Single UNIX Specification Version 2, Copyright (C) 1997 by The Open
 * Group. In the event of any discrepancy between this version and the original
 * document from the Open Group, the Open Group document is the referee document.
 * The original document can be obtained online at http://www.unix.org/version2/online.html.
 */

#include "system/user/account_config.h"
#include "system/user/account_model.seh"


#pragma SEC subsystem user "system.user"

/* 
   The group of functions 'system.user.account' consists of: 
       endutent [3]
       endutxent [1]
       getutent [2]
       getutent_r [2]
       getutxent [1]
       getutxid [1]
       getutxline [1]
       login [1]
       logout [1]
       logwtmp [1]
       pututxline [1]
       setutent [2]
       setutxent [1]
       utmpname [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers 

SUSv2
(specification not found)
*/
specification
void endutent_spec(CallContext context)
{
    pre
    {
        return true;
    }

    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }

    post
    {
        /*
         * endutent() closes the utmp file.
         */
        REQ("endutent.01", "", TODO_REQ());

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

    refers

The Open Group Base Specifications Issue 6

IEEE Std 1003.1, 2004 Edition

Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved. 

NAME 

endutxent, getutxent, getutxid, getutxline, pututxline, setutxent - user 
accounting database functions 

SYNOPSIS 

[XSI] #include <utmpx.h>

void endutxent(void);

struct utmpx *getutxent(void);

struct utmpx *getutxid(const struct utmpx *id);

struct utmpx *getutxline(const struct utmpx *line);

struct utmpx *pututxline(const struct utmpx *utmpx);

void setutxent(void); 

DESCRIPTION 

These functions shall provide access to the user accounting database. 

The getutxent() function shall read the next entry from the user accounting 
database. If the database is not already open, it shall open it. If it 
reaches the end of the database, it shall fail. 

The getutxid() function shall search forward from the current point in the 
database. If the ut_type value of the utmpx structure pointed to by id is 
BOOT_TIME, OLD_TIME, or NEW_TIME, then it shall stop when it finds an entry 
with a matching ut_type value. If the ut_type value is INIT_PROCESS, 
LOGIN_PROCESS, USER_PROCESS, or DEAD_PROCESS, then it shall stop when it finds 
an entry whose type is one of these four and whose ut_id member matches the 
ut_id member of the utmpx structure pointed to by id. If the end of the 
database is reached without a match, getutxid() shall fail. 

The getutxline() function shall search forward from the current point in the 
database until it finds an entry of the type LOGIN_PROCESS or USER_PROCESS 
which also has a ut_line value matching that in the utmpx structure pointed to 
by line. If the end of the database is reached without a match, getutxline() 
shall fail. 

The getutxid() or getutxline() function may cache data. For this reason, to 
use getutxline() to search for multiple occurrences, the application shall 
zero out the static data after each success, or getutxline() may return a 
pointer to the same utmpx structure. 

There is one exception to the rule about clearing the structure before further 
reads are done. The implicit read done by pututxline() (if it finds that 
it is not already at the correct place in the user accounting database) shall 
not modify the static structure returned by getutxent(), getutxid(), or 
getutxline(), if the application has modified this structure and passed the 
pointer back to pututxline(). 

For all entries that match a request, the ut_type member indicates the type of 
the entry. Other members of the entry shall contain meaningful data based on 
the value of the ut_type member as follows: 

ut_type Member  Other Members with Meaningful Data 
EMPTY   No others 
BOOT_TIME   ut_tv 
OLD_TIME    ut_tv 
NEW_TIME    ut_tv 
USER_PROCESS    ut_id, ut_user (login name of the user), ut_line, ut_pid, ut_tv 
INIT_PROCESS    ut_id, ut_pid, ut_tv 
LOGIN_PROCESS   ut_id, ut_user (implementation-defined name of the login 
    process), ut_pid, ut_tv 
DEAD_PROCESS    ut_id, ut_pid, ut_tv 

An implementation that provides extended security controls may impose 
implementation-defined restrictions on accessing the user accounting database. 
In particular, the system may deny the existence of some or all of the user 
accounting database entries associated with users other than the caller. 

If the process has appropriate privileges, the pututxline() function shall 
write out the structure into the user accounting database. It shall use 
getutxid() to search for a record that satisfies the request. If this search 
succeeds, then the entry shall be replaced. Otherwise, a new entry shall be 
made at the end of the user accounting database. 

The endutxent() function shall close the user accounting database. 

The setutxent() function shall reset the input to the beginning of the database. 
This should be done before each search for a new entry if it is desired that 
the entire database be examined. 

These functions need not be reentrant. A function that is not required to be 
reentrant is not required to be thread-safe. 

RETURN VALUE 

Upon successful completion, getutxent(), getutxid(), and getutxline() shall 
return a pointer to a utmpx structure containing a copy of the requested 
entry in the user accounting database. Otherwise, a null pointer shall be 
returned. 

The return value may point to a static area which is overwritten by a 
subsequent call to getutxid() or getutxline(). 

Upon successful completion, pututxline() shall return a pointer to a utmpx 
structure containing a copy of the entry added to the user accounting database. 
Otherwise, a null pointer shall be returned. 

The endutxent() and setutxent() functions shall not return a value. 

ERRORS 

No errors are defined for the endutxent(), getutxent(), getutxid(), 
getutxline(), and setutxent() functions. 

The pututxline() function may fail if: 

[EPERM] 
    
     The process does not have appropriate privileges.
*/

specification
void endutxent_spec( CallContext context )
{
    pre
    {
        /*
         * These functions need not be reentrant.
         */
        REQ("app.endutxent.05", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The endutxent() function shall close the user accounting database.
         */
        REQ("endutxent.01", "", TODO_REQ());

        /*
         * The endutxent() and setutxent() functions shall not return a value.
         */
        REQ("endutxent.06", "", TODO_REQ());

      
        return true;
    }
}

specification
UtmpxT * getutxent_spec( CallContext context )
{
    pre
    {
        /*
         * These functions need not be reentrant.
         */
        REQ("app.getutxent.05", "", TODO_REQ());
        
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The getutxent() function shall read the next entry from the user accounting 
         * database.
         */
        REQ("getutxent.01", "", TODO_REQ());

        /*
         * If the database is not already open, it shall open it.
         */
        REQ("getutxent.02", "", TODO_REQ());

        /*
         * If it reaches the end of the database, it shall fail.
         */
        REQ("getutxent.03", "", TODO_REQ());

        /*
         * Upon successful completion, getutxent(), getutxid(), and getutxline() shall 
         * return a pointer to a utmpx structure containing a copy of the requested 
         * entry in the user accounting database.
         */
        REQ("getutxent.06.01", "", TODO_REQ());

        /*
         * Otherwise, a null pointer shall be returned.
         */
        REQ("getutxent.06.02", "", TODO_REQ());

        return true;
    }
}

specification
UtmpxT * getutxid_spec( CallContext context, UtmpxTPtr id)
{
    pre
    {
        /*
         * These functions need not be reentrant.
         */
        REQ("app.getutxid.05", "", TODO_REQ());
        
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The getutxid() function shall search forward from the current point in the 
         * database.
         * 
         * If the ut_type value of the utmpx structure pointed to by id is BOOT_TIME, 
         * OLD_TIME, or NEW_TIME, then it shall stop when it finds an entry with a 
         * matching ut_type value.
         */
        REQ("getutxid.01.01", "", TODO_REQ());

        /*
         * The getutxid() function shall search forward from the current point in the 
         * database.
         * 
         * If the ut_type value is INIT_PROCESS, LOGIN_PROCESS, USER_PROCESS, or 
         * DEAD_PROCESS, then it shall stop when it finds an entry whose type is one of 
         * these four and whose ut_id member matches the ut_id member of the utmpx 
         * structure pointed to by id.
         */
        REQ("getutxid.01.02", "", TODO_REQ());

        /*
         * If the end of the database is reached without a match, getutxid() shall fail.
         */
        REQ("getutxid.03", "", TODO_REQ());

        /*
         * The getutxid() or getutxline() function may cache data.
         */
        REQ("getutxid.04", "", TODO_REQ());

        /*
         * Upon successful completion, getutxent(), getutxid(), and getutxline() shall 
         * return a pointer to a utmpx structure containing a copy of the requested 
         * entry in the user accounting database.
         */
        REQ("getutxid.06.01", "", TODO_REQ());

        /*
         * Otherwise, a null pointer shall be returned.
         */
        REQ("getutxid.06.02", "", TODO_REQ());

        /*
         * The return value may point to a static area which is overwritten by a 
         * subsequent call to getutxid() or getutxline().
         */
        REQ("app.getutxid.07", "", TODO_REQ());
        
        return true;
    }
}

specification
UtmpxT * getutxline_spec( CallContext context, UtmpxTPtr line)
{
    pre
    {
        /*
         * These functions need not be reentrant.
         */
        REQ("app.getutxline.05", "", TODO_REQ());
        
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The getutxline() function shall search forward from the current point in the 
         * database until it finds an entry of the type LOGIN_PROCESS or USER_PROCESS 
         * which also has a ut_line value matching that in the utmpx structure pointed to 
         * by line.
         */
        REQ("getutxline.01", "", TODO_REQ());

        /*
         * If the end of the database is reached without a match, getutxline() shall fail.
         */
        REQ("getutxline.03", "", TODO_REQ());

        /*
         * The getutxid() or getutxline() function may cache data.
         */
        REQ("getutxline.04", "", TODO_REQ());

        /*
         * Upon successful completion, getutxent(), getutxid(), and getutxline() shall 
         * return a pointer to a utmpx structure containing a copy of the requested 
         * entry in the user accounting database.
         */
        REQ("getutxline.06.01", "", TODO_REQ());

        /*
         * Otherwise, a null pointer shall be returned.
         */
        REQ("getutxline.06.02", "", TODO_REQ());

        /*
         * The return value may point to a static area which is overwritten by a 
         * subsequent call to getutxid() or getutxline().
         */
        REQ("app.getutxline.07", "", TODO_REQ());
        
        return true;
    }
}

specification
UtmpxT * pututxline_spec( CallContext context, UtmpxTPtr utmpx, ErrorCode * errno)
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        ERROR_BEGIN(POSIX_PUTUTXLINE, "", pututxline_spec == NULL, *errno)
        /*
         * The pututxline() function may fail if:
         * 
         * [EPERM] 
         * 
         * The process does not have appropriate privileges. 
         */
            ERROR_MAY(POSIX_PUTUTXLINE, EPERM, "pututxline.08.01", TODO_ERR(EPERM))

        ERROR_END()


        /*
         * If the process has appropriate privileges, the pututxline() function shall 
         * write out the structure into the user accounting database.
         */
        REQ("pututxline.01", "", TODO_REQ());

        /*
         * It shall use getutxid() to search for a record that satisfies the request.
         */
        REQ("pututxline.02", "", TODO_REQ());

        /*
         * If this search succeeds, then the entry shall be replaced.
         */
        REQ("pututxline.03.01", "", TODO_REQ());

        /*
         * Otherwise, a new entry shall be made at the end of the user accounting database.
         */
        REQ("pututxline.03.02", "", TODO_REQ());

        /*
         * The implicit read done by pututxline() (if it finds that it is not already 
         * at the correct place in the user accounting database) shall not modify the 
         * static structure returned by getutxent(), getutxid(), or getutxline(), if the 
         * application has modified this structure and passed the pointer back to 
         * pututxline().
         */
        REQ("pututxline.04", "", TODO_REQ());

        /*
         * Upon successful completion, pututxline() shall return a pointer to a utmpx 
         * structure containing a copy of the entry added to the user accounting database.
         */
        REQ("pututxline.06.01", "", TODO_REQ());

        /*
         * Otherwise, a null pointer shall be returned.
         */
        REQ("pututxline.06.02", "", TODO_REQ());
        
        return true;
    }
}

specification
void setutxent_spec( CallContext context )
{
    pre
    {
        /*
         * These functions need not be reentrant.
         */
        REQ("app.setutxent.05", "", TODO_REQ());
        
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The setutxent() function shall reset the input to the beginning of the database.
         */
        REQ("setutxent.01", "", TODO_REQ());

        /*
         * The endutxent() and setutxent() functions shall not return a value.
         */
        REQ("setutxent.06", "", TODO_REQ());
        
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

getutent -- access user accounting database entries 

Synopsis

#include <utmp.h>

struct utmp *getutent(void);

Description

The getutent() function shall read the next entry from the user accounting 
database.

Return Value

Upon successful completion, getutent() shall return a pointer to a utmp 
structure containing a copy of the requested entry in the user accounting 
database. Otherwise, a null pointer shall be returned. The return value may 
point to a static area which is overwritten by a subsequent call to getutent().

Errors

None defined.
*/

specification
UtmpT * getutent_spec( CallContext context )
{
    pre
    {
        /*
         * The return value may point to a static area which is overwritten by a 
         * subsequent call to getutent().
         */
        REQ("app.getutent.07", "", TODO_REQ());
        
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The getutent() function shall read the next entry from the user accounting 
         * database.
         */
        REQ("getutent.01", "", TODO_REQ());

        /*
         * Upon successful completion, getutent() shall return a pointer to a utmp 
         * structure containing a copy of the requested entry in the user accounting 
         * database.
         */
        REQ("getutent.06.01", "", TODO_REQ());

        /*
         * Otherwise, a null pointer shall be returned.
         */
        REQ("getutent.06.02", "", TODO_REQ());
        
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

getutent_r -- access user accounting database entries

Synopsis

int getutent_r(struct utmp * buffer, struct utmp ** result);

Description

The getutent_r() function is a reentrant version of the getutent() function. 
On entry, buffer should point to a user supplied buffer to which the next 
entry in the database will be copied, and result should point to a location 
where the result will be stored.

Return Value

On success, getutent_r() shall return 0 and set the location referenced by 
result to a pointer to buffer. Otherwise, getutent_r() shall return -1 and 
set the location referenced by result to NULL.
*/

specification
IntT getutent_r_spec( CallContext context, UtmpTPtr buffer, VoidTPtr result )
{
    pre
    {
        /*
         * On entry, buffer should point to a user supplied buffer to which the next 
         * entry in the database will be copied, and result should point to a location 
         * where the result will be stored.
         */
        REQ("app.getutent_r.02", "", TODO_REQ());

        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The getutent_r() function is a reentrant version of the getutent() function.
         */
        REQ("getutent_r.01", "", TODO_REQ());

        /*
         * On success, getutent_r() shall return 0 and set the location referenced by 
         * result to a pointer to buffer.
         */
        REQ("getutent_r.06.01", "", TODO_REQ());

        /*
         * Otherwise, getutent_r() shall return -1 and set the location referenced by 
         * result to NULL.
         */
        REQ("getutent_r.06.02", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

login -- login utility function

Synopsis

#include <utmp.h>

void login (struct utmp * ut );

Description

The login() function shall update the user accounting databases. The ut 
parameter shall reference a utmp structure for all fields except the 
following: 

The ut_type field shall be set to USER_PROCESS.

The ut_pid field shall be set to the process identifier for the current 
process.

The ut_line field shall be set to the name of the controlling terminal device. 
The name shall be found by examining the device associated with the standard 
input, output and error streams in sequence, until one associated with a 
terminal device is found. If none of these streams refers to a terminal device, 
the ut_line field shall be set to "???". If the terminal device is 
in the /dev directory hierarchy, the ut_line field shall not contain the 
leading "/dev/", otherwise it shall be set to the final component 
of the pathname of the device. If the user accounting database imposes a 
limit on the size of the ut_line field, it shall truncate the name, but any 
such limit shall not be smaller than UT_LINESIZE (including a terminating 
null character).

Return Value

None

Errors

None
*/

specification
void login_spec( CallContext context, UtmpTPtr ut )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The login() function shall update the user accounting databases.
         */
        REQ("login.01", "", TODO_REQ());

        /*
         * The ut parameter shall reference a utmp structure for all fields except the 
         * following: 
         * 
         * The ut_type field shall be set to USER_PROCESS.
         */
        REQ("login.02.01", "", TODO_REQ());

        /*
         * The ut parameter shall reference a utmp structure for all fields except the 
         * following: 
         * 
         * The ut_pid field shall be set to the process identifier for the current 
         * process.
         */
        REQ("login.02.02", "", TODO_REQ());

        /*
         * The ut parameter shall reference a utmp structure for all fields except the 
         * following: 
         * 
         * The ut_line field shall be set to the name of the controlling terminal device.
         * 
         * The name shall be found by examining the device associated with the standard 
         * input, output and error streams in sequence, until one associated with a 
         * terminal device is found. If none of these streams refers to a terminal device, 
         * the ut_line field shall be set to "???".
         */
        REQ("login.02.03.01.input", "", TODO_REQ());
        REQ("login.02.03.01.output", "", TODO_REQ());
        REQ("login.02.03.01.error", "", TODO_REQ());
        REQ("login.02.03.01.notfound", "", TODO_REQ());

        /*
         * The ut parameter shall reference a utmp structure for all fields except the 
         * following: 
         * 
         * The ut_line field shall be set to the name of the controlling terminal device.
         * 
         * If the terminal device is in the /dev directory hierarchy, the ut_line field 
         * shall not contain the leading "/dev/", otherwise it shall be set to 
         * the final component of the pathname of the device.
         */
        REQ("login.02.03.02.sub_dev", "", TODO_REQ());
        REQ("login.02.03.02.final", "", TODO_REQ());

        /*
         * The ut parameter shall reference a utmp structure for all fields except the 
         * following: 
         * 
         * The ut_line field shall be set to the name of the controlling terminal device.
         * 
         * If the user accounting database imposes a limit on the size of the ut_line 
         * field, it shall truncate the name, but any such limit shall not be smaller 
         * than UT_LINESIZE (including a terminating null character).
         */
        REQ("login.02.03.03.truncate", "", TODO_REQ());
        REQ("login.02.03.03.notsmaller", "", TODO_REQ());
        
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

logout -- logout utility function

Synopsis

#include <utmp.h>

int logout (const char * line );

Description

Given the device line, the logout() function shall search the user accounting 
database which is read by getutent() for an entry with the corresponding line, 
and with the type of USER_PROCESS. If a corresponding entry is located, it 
shall be updated as follows:

The ut_name field shall be set to zeroes (UT_NAMESIZE NUL bytes).

The ut_host field shall be set to zeroes (UT_HOSTSIZE NUL bytes).

The ut_tv shall be set to the current time of day.

The ut_type field shall be set to DEAD_PROCESS.

Return Value

On success, the logout() function shall return non-zero. Zero is returned if 
there was no entry to remove, or if the utmp file could not be opened or 
updated.
  
*/

specification
IntT logout_spec( CallContext context, CString * line )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * Given the device line, the logout() function shall search the user accounting 
         * database which is read by getutent() for an entry with the corresponding line, 
         * and with the type of USER_PROCESS.
         */
        REQ("logout.01", "", TODO_REQ());

        /*
         * If a corresponding entry is located, it shall be updated as follows:
         * 
         * The ut_name field shall be set to zeroes (UT_NAMESIZE NUL bytes).
         */
        REQ("logout.02.01", "", TODO_REQ());

        /*
         * If a corresponding entry is located, it shall be updated as follows:
         * 
         * The ut_host field shall be set to zeroes (UT_HOSTSIZE NUL bytes).
         */
        REQ("logout.02.02", "", TODO_REQ());

        /*
         * If a corresponding entry is located, it shall be updated as follows:
         * 
         * The ut_tv shall be set to the current time of day.
         */
        REQ("logout.02.03", "", TODO_REQ());

        /*
         * If a corresponding entry is located, it shall be updated as follows:
         * 
         * The ut_type field shall be set to DEAD_PROCESS.
         */
        REQ("logout.02.04", "", TODO_REQ());

        /*
         * On success, the logout() function shall return non-zero.
         */
        REQ("logout.06.01", "", TODO_REQ());

        /*
         * Zero is returned if there was no entry to remove, or if the utmp file could 
         * not be opened or updated.
         */
        REQ("logout.06.02.noentry", "", TODO_REQ());
        REQ("logout.06.02.perm", "", TODO_REQ());

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

logwtmp -- append an entry to the wtmp file

Synopsis

#include <utmp.h>

void logwtmp (const char * line , const char * name , 
const char * host );

Description

If the process has permission to update the user accounting databases, the 
logwtmp() function shall append a record to the user accounting database 
that records all logins and logouts. The record to be appended shall be 
constructed as follows:

The ut_line field shall be initialized from line. If the user accounting 
database imposes a limit on the size of the ut_line field, it shall truncate 
the value, but any such limit shall not be smaller than UT_LINESIZE 
(including a terminating null character).

The ut_name field shall be initialized from name. If the user accounting 
database imposes a limit on the size of the ut_name field, it shall truncate 
the value, but any such limit shall not be smaller than UT_NAMESIZE 
(including a terminating null character).

The ut_host field shall be initialized from host. If the user accounting 
database imposes a limit on the size of the ut_host field, it shall truncate 
the value, but any such limit shall not be smaller than UT_HOSTSIZE 
(including a terminating null character).

If the name parameter does not refer to an empty string (i.e. ""), 
the ut_type field shall be set to USER_PROCESS; otherwise the ut_type field 
shall be set to DEAD_PROCESS.

The ut_id field shall be set to the process identifier for the current 
process.

The ut_tv field shall be set to the current time of day.

Note: If a process does not have write access to the the user accounting 
database, the logwtmp() function will not update it. Since the function does 
not return any value, an application has no way of knowing whether it 
succeeded or failed.

Return Value

None.
*/

specification
void logwtmp_spec( CallContext context, CString * line, CString * name, CString * host )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * If the process has permission to update the user accounting databases, the 
         * logwtmp() function shall append a record to the user accounting database 
         * that records all logins and logouts.
         */
        REQ("logwtmp.01", "", TODO_REQ());

        /*
         * The ut_line field shall be initialized from line.
         */
        REQ("logwtmp.02.01.01", "", TODO_REQ());

        /*
         * If the user accounting database imposes a limit on the size of the ut_line 
         * field, it shall truncate the value, but any such limit shall not be smaller 
         * than UT_LINESIZE (including a terminating null character).
         */
        REQ("logwtmp.02.01.02.truncate", "", TODO_REQ());
        REQ("logwtmp.02.01.02.notsmaller", "", TODO_REQ());

        /*
         * The ut_name field shall be initialized from name.
         */
        REQ("logwtmp.02.02.01", "", TODO_REQ());

        /*
         * If the user accounting database imposes a limit on the size of the ut_name 
         * field, it shall truncate the value, but any such limit shall not be smaller 
         * than UT_NAMESIZE (including a terminating null character).
         */
        REQ("logwtmp.02.02.02.truncate", "", TODO_REQ());
        REQ("logwtmp.02.02.02.notsmaller", "", TODO_REQ());

        /*
         * The ut_host field shall be initialized from host.
         */
        REQ("logwtmp.02.03.01", "", TODO_REQ());

        /*
         * If the user accounting database imposes a limit on the size of the ut_host 
         * field, it shall truncate the value, but any such limit shall not be smaller 
         * than UT_HOSTSIZE (including a terminating null character).
         */
        REQ("logwtmp.02.03.02.truncate", "", TODO_REQ());
        REQ("logwtmp.02.03.02.notsmaller", "", TODO_REQ());

        /*
         * If the name parameter does not refer to an empty string (i.e. ""), 
         * the ut_type field shall be set to USER_PROCESS;
         */
        REQ("logwtmp.02.04.01", "", TODO_REQ());

        /*
         * otherwise the ut_type field shall be set to DEAD_PROCESS.
         */
        REQ("logwtmp.02.04.02", "", TODO_REQ());

        /*
         * The record to be appended shall be constructed as follows:
         * 
         * The ut_id field shall be set to the process identifier for the current 
         * process.
         */
        REQ("logwtmp.02.05", "", TODO_REQ());

        /*
         * The record to be appended shall be constructed as follows:
         * 
         * The ut_tv field shall be set to the current time of day.
         */
        REQ("logwtmp.02.06", "", TODO_REQ());

        return true;
    }
}




/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

setutent -- access user accounting database entries

Synopsis

#include <utmp.h>

void setutent(void);

Description

The setutent() function shall reset the user accounting database such that 
the next call to getutent() shall return the first record in the database. It 
is recommended to call it before any of the other functions that operate on 
the user accounting databases (e.g. getutent())

Return Value

None.
*/

specification
void setutent_spec( CallContext context )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The setutent() function shall reset the user accounting database such that 
         * the next call to getutent() shall return the first record in the database.
         */
        REQ("setutent.01", "", TODO_REQ());
        
        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

Name

utmpname -- set user accounting database

Synopsis

#include <utmp.h>

int utmpname(const char * dbname);

Description

The utmpname() function shall cause the user accounting database used by the 
getutent(), getutent_r(), getutxent(), getutxid(), getutxline(), and 
pututxline() functions to be that named by dbname, instead of the system 
default database. See Section 16.3 for further information. 

Note: The LSB does not specify the format of the user accounting database, nor 
the names of the file or files that may contain it. 

Return Value

None.

Errors

None defined.
*/

specification
IntT utmpname_spec( CallContext context, CString * dbname )
{
    pre
    {
        return true;
    }
    coverage C
    {
        return { TheOnlyBranch, "The only branch" };
    }
    post
    {
        /*
         * The utmpname() function shall cause the user accounting database used by the 
         * getutent(), getutent_r(), getutxent(), getutxid(), getutxline(), and 
         * pututxline() functions to be that named by dbname, instead of the system 
         * default database.
         */
        REQ("utmpname.01", "", TODO_REQ());

        return true;
    }
}

/********************************************************************/
/**                       Account Types                            **/
/********************************************************************/

specification typedef struct UtmpT UtmpT = {};

UtmpT * create_UtmpT( VoidTPtr address, CString * ut_user, CString * ut_host, CString * ut_id, CString * ut_line, 
                        PidT ut_pid, ShortT ut_type, TimeVal * ut_tv
                      )
{
    return create(&type_UtmpT,address, ut_user, ut_host, ut_id, ut_line, ut_pid, ut_type, ut_tv);
}
                      


specification typedef struct UtmpxT UtmpxT = {};

UtmpxT * create_UtmpxT( VoidTPtr address, CString * ut_user, CString * ut_id, CString * ut_line, 
                        PidT ut_pid, ShortT ut_type, TimeVal * ut_tv
                      )
{
    return create(&type_UtmpxT, address, ut_user, ut_id, ut_line, ut_pid, ut_type, ut_tv);
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
