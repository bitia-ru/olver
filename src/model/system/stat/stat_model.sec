/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "common/coverages.seh"
#include "system/stat/stat_model.seh"
#include "system/stat/stat_config.h"
#include "system/system/system_model.seh"

#pragma SEC subsystem stat "system.stat"

/*
   The group of functions 'system.stat' consists of:
       acct [1]
       clock [2]
       getloadavg [1]
       times [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    acct -- switch process accounting on or off

SYNOPSIS

    #include <dirent.h>
    int acct(const char * filename);

DESCRIPTION

    When filename is the name of an existing file, acct() turns accounting on
    and appends a record to filename for each terminating process. When
    filename is NULL, acct() turns accounting off.

RETURN VALUE

    On success, 0 is returned.On error, -1 is returned and the global variable
    errno is set appropriately.

ERRORS

    ENOSYS
    BSD process accounting has not been enabled when the operating system
    kernel was compiled. The kernel configuration parameter controlling this
    feature is CONFIG_BSD_PROCESS_ACCT.

    ENOMEM
    Out of memory.

    EPERM
    The calling process has no permission to enable process accounting.

    EACCES
    filename is not a regular file.

    EIO
    Error writing to the filename.

    EUSERS
    There are no more free file structures or we run out of memory.
*/
specification
IntT acct_spec( CallContext context, CString * filename, ErrorCode * errno )
{
    pre
    {
        return true;
    }
    coverage acct_coverage = CoverageForCString( filename );
    post
    {
        SystemState * systemState = getSystemState_CallContext( context );
        StatState * statState = systemState->statState;

        /*
         * On error, -1 is returned and the global variable errno is set appropriately.
         */
        ERROR_BEGIN( LSB_ACCT, "acct.03.02", acct_spec == -1, * errno )
            /*
             * [ENOSYS] BSD process accounting has not been enabled when the operating system
             * kernel was compiled. The kernel configuration parameter controlling this
             * feature is CONFIG_BSD_PROCESS_ACCT.
             */
            ERROR_SHALL(LSB_ACCT, ENOSYS, "acct.04.01", TODO_ERR(ENOSYS) )

            /*
             * [ENOMEM] Out of memory.
             */
            ERROR_SHALL(LSB_ACCT, ENOMEM, "acct.04.02", TODO_ERR(ENOMEM) )

            /*
             * [EPERM] The calling process has no permission to enable process accounting.
             */
            ERROR_SHALL(LSB_ACCT, EPERM, "acct.04.03", TODO_ERR(EPERM) )

            /*
             * [EACCES] filename is not a regular file.
             */
            ERROR_SHALL(LSB_ACCT, EACCES, "acct.04.04", TODO_ERR(EACCES) )

            /*
            * [EIO] Error writing to the filename.
            */
            ERROR_SHALL(LSB_ACCT, EIO, "acct.04.05", TODO_ERR(EIO) )

            /*
             * [EUSERS] There are no more free file structures or we run out of memory.
             */
            ERROR_SHALL(LSB_ACCT, EUSERS, "acct.04.06", TODO_ERR(EUSERS) )
        ERROR_END()

        if ( filename != NULL ) {
            /*
             * When filename is the name of an existing file, acct() turns accounting on and
             * appends a record to filename for each terminating process.
             */
            REQ( "acct.01", "acct() turns accounting on", equals( getFilename_StatState( statState ), filename ) );
        } else {
            /*
             * When filename is NULL, acct() turns accounting off.
             */
            REQ( "acct.02", "acct() turns accounting off", getFilename_StatState( statState ) == NULL );
        }

        /*
         * On success, 0 is returned.
         */
        REQ( "acct.03.01", "On success, 0 is returned", acct_spec == 0 );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    clock - report CPU time used

SYNOPSIS

    #include <time.h>
    clock_t clock(void);

DESCRIPTION

    [CX]  The functionality described on this reference page is aligned with
    the ISO C standard. Any conflict between the requirements described here
    and the ISO C standard is unintentional. This volume of IEEE Std
    1003.1-2001 defers to the ISO C standard.

    The clock() function shall return the implementation's best approximation
    to the processor time used by the process since the beginning of an
    implementation-defined era related only to the process invocation.

RETURN VALUE

    To determine the time in seconds, the value returned by clock() should be
    divided by the value of the macro CLOCKS_PER_SEC. [XSI]   CLOCKS_PER_SEC
    is defined to be one million in <time.h>.  If the processor time used is
    not available or its value cannot be represented, the function shall return
    the value ( clock_t)-1.

ERRORS

    No errors are defined.
*/
specification
ClockT clock_spec( CallContext context )
{
    pre
    {
        return true;
    }
    post
    {
        SystemState * systemState = getSystemState_CallContext( context );
        bool checkResult = getClock_StatState( systemState->statState ) == clock_spec;

        /*
         * The clock() function shall return the implementation's best approximation to
         * the processor time used by the process since the beginning of an implementation-
         * defined era related only to the process invocation.
         */
        REQ( "clock.01", "return the approximation to the processor time used by the process", checkResult );

        /*
         * To determine the time in seconds, the value returned by clock() should be
         * divided by the value of the macro CLOCKS_PER_SEC.
         */
        REQ("clock.02", "", TODO_REQ());

        /*
         * CLOCKS_PER_SEC is defined to be one million in <time.h>.
         */
        REQ( "clock.03", "", true );

        /*
         * If the processor time used is not available or its value cannot be represented,
         * the function shall return the value ( clock_t)-1.
         */
        REQ( "clock.04", "return the value ( clock_t)-1", checkResult );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

NAME

    getloadavg -- get system load averages

SYNOPSIS

    #include <stdlib.h>
    int getloadavg(double loadavg[], int nelem);

DESCRIPTION

    getloadavg() returns the number of processes in the system run queue
    averaged over various periods of time. Up to nelem samples are retrieved
    and assigned to successive elements of loadavg[]. The system imposes a
    maximum of 3 samples, representing averages over the last 1, 5, and 15
    minutes, respectively.
*/

specification typedef struct GetLoadAvgReturnType GetLoadAvgReturnType = {};

GetLoadAvgReturnType * create_GetLoadAvgReturnType( List /* Unifloat */ * loadAvg, IntT retVal ) {
    return create( & type_GetLoadAvgReturnType, loadAvg, retVal );
}

specification
GetLoadAvgReturnType * getloadavg_spec( CallContext context, IntT nelem )
{
    pre
    {
        /*
         * The system imposes a maximum of 3 samples, representing averages over the last
         * 1, 5, and 15 minutes, respectively.
         */
        REQ( "app.getloadavg.03", "system imposes a maximum of 3 samples", nelem <= 3 );

        return true;
    }
    coverage getloadavg_coverage = CoverageForInteger_Min( nelem, 0, 3 );
    post
    {
        SystemState * systemState = getSystemState_CallContext( context );

        /*
         * getloadavg() returns the number of processes in the system run queue averaged
         * over various periods of time.
         */
        REQ( "getloadavg.01", "the number of processes in the system run queue averaged over various periods of time",
                              getLoadAvg_StatState( systemState->statState ) == getloadavg_spec->retVal
           );

        /*
         * Up to nelem samples are retrieved and assigned to successive elements of
         * loadavg[].
         */
        REQ( "getloadavg.02", "Up to nelem samples are retrieved and assigned to successive elements of loadavg[]",
                              size_List( getloadavg_spec->loadAvg ) <= nelem
           );

        return true;
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

  refers

IEEE Std 1003.1, 2004 Edition
Copyright © 2001-2004 The IEEE and The Open Group, All Rights reserved.

-------------------------------------------------------------------------------

NAME

    times - get process and waited-for child process times

SYNOPSIS

    #include <sys/times.h>
    clock_t times(struct tms *buffer);

DESCRIPTION

    The times() function shall fill the tms structure pointed to by buffer with
    time-accounting information. The tms structure is defined in <sys/times.h>.

    All times are measured in terms of the number of clock ticks used.

    The times of a terminated child process shall be included in the tms_cutime
    and tms_cstime elements of the parent when wait() or waitpid() returns the
    process ID of this terminated child. If a child process has not waited for
    its children, their times shall not be included in its times.

    The tms_utime structure member is the CPU time charged for the execution of
    user instructions of the calling process.

    The tms_stime structure member is the CPU time charged for execution by the
    system on behalf of the calling process.

    The tms_cutime structure member is the sum of the tms_utime and tms_cutime
    times of the child processes.

    The tms_cstime structure member is the sum of the tms_stime and tms_cstime
    times of the child processes.

RETURN VALUE
    Upon successful completion, times() shall return the elapsed real time, in
    clock ticks, since an arbitrary point in the past (for example, system
    start-up time). This point does not change from one invocation of times()
    within the process to another. The return value may overflow the possible
    range of type clock_t. If times() fails, (clock_t)-1 shall be returned and
    errno set to indicate the error.

ERRORS

    No errors are defined.
*/
specification typedef struct TmsT TmsT = {};

TmsT * create_TmsT( ClockT tms_utime, ClockT tms_stime, ClockT tms_cutime, ClockT tms_cstime ) {
    return create( & type_TmsT, tms_utime, tms_stime, tms_cutime, tms_cstime );
}

specification typedef struct TimesReturnType TimesReturnType = {};

TimesReturnType * create_TimesReturnType( ClockT retVal, TmsT * times ) {
    return create( & type_TimesReturnType, retVal, times );
}

specification
TimesReturnType * times_spec( CallContext context, ErrorCode * errno )
{
    pre
    {
        return true;
    }
    post
    {
        if ( * errno != SUT_EOK ) {
            /*
             * If times() fails, (clock_t)-1 shall be returned and errno set to indicate the
             * error.
             */
            REQ( "times.12", "(clock_t)-1 shall be returned", times_spec->retVal == -1 );
        } else {
            /*
             * The times of a terminated child process shall be included in the tms_cutime and
             * tms_cstime elements of the parent when wait() or waitpid() returns the process
             * ID of this terminated child.
             */
            REQ("times.03", "", TODO_REQ());

            /*
             * If a child process has not waited for its children, their times shall not be
             * included in its times.
             */
            REQ("times.04", "", TODO_REQ());

            /*
             * The tms_utime structure member is the CPU time charged for the execution of
             * user instructions of the calling process.
             */
            REQ("times.05", "", TODO_REQ());

            /*
             * The tms_stime structure member is the CPU time charged for execution by the
             * system on behalf of the calling process.
             */
            REQ("times.06", "", TODO_REQ());

            /*
             * The tms_cutime structure member is the sum of the tms_utime and tms_cutime
             * times of the child processes.
             */
            REQ("times.07", "", TODO_REQ());

            /*
             * The tms_cstime structure member is the sum of the tms_stime and tms_cstime
             * times of the child processes.
             */
            REQ("times.08", "", TODO_REQ());

            /*
             * Upon successful completion, times() shall return the elapsed real time, in
             * clock ticks, since an arbitrary point in the past (for example, system start-up
             * time).
             */
            REQ("times.09", "", TODO_REQ());

            /*
             * This point does not change from one invocation of times() within the process to
             * another. The return value may overflow the possible range of type clock_t.
             */
            REQ("times.10", "", TODO_REQ());
        }

        return true;
    }
}
