/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef SYSTEM_SYSCONF_MODEL_SEH
#define SYSTEM_SYSCONF_MODEL_SEH

#include "common/common_model.seh"
#include "config/system_config.seh"
#include "data/errno_model.seh"
#include "atl/integer.h"

#include "confname.h"


/********************************************************************/
/**                        Interface Data                          **/
/********************************************************************/

#define SC_MAX_NAME (SUT_SC_TRACE_LOG+1)

typedef enum CmpT{CMPT_MIN, CMPT_EQORM1, CMPT_EQUALS, CMPT_NO, CMPT_SKIP,CMPT_UNKN}CmpT;

specification typedef struct SCData
{
    CString * req_id;
    LongT sc_lim;
    CmpT cmp_type;
    CString * lim_id;
}SCData;
extern Map * sc_map;

SCData *create_SCData(
    CString *req_id,
    LongT sc_lim,
    CmpT cmp_type,
    CString * lim_id
    );

bool init_sc();

extern Map * cs_name_map;
specification typedef struct CSData
{
    IntT req_support;
    CString * req_id;
    SizeT str_size;
    CString * str;
}CSData;

CSData *create_CSData(
    IntT req_support,
    CString * req_id,
    SizeT str_size,
    CString * str
    );


bool init_cs();

extern Map * pc_map;
specification typedef struct PCData
{
    CString * pc_name_req_id; // the id of the requirement which states that
                             // this <name> shall be supported. (pathconf.02.~)
    LongT pc_lim;
    CmpT pc_cmp_type;
    CString * pc_lim_req_id; // the id of the requirement which states the limitation
                            // of the corresponding value

    IntT pc_reqs; // bit mask. See PC_REQ1..PC_REQ10;

    CString * pc_req_id; // the id that identifies imposed requirements (pathconf.03.~)
}PCData;

PCData * create_PCData(CString * pc_name_req_id, LongT pc_lim, CmpT pc_cmp_type,
                       CString * pc_lim_req_id, IntT pc_reqs, CString * pc_req_id);

/* [Requirement kinds for pathconf()] */
#define PC_REQ1 1
#define PC_REQ2 2
#define PC_REQ3 4
#define PC_REQ4 8
#define PC_REQ5 16
#define PC_REQ6 32
#define PC_REQ7 64
#define PC_REQ8 128
#define PC_REQ9 256
#define PC_REQ10 512

bool init_pc();

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sysconf_spec **/
specification
LongT sysconf_spec( CallContext context, IntT name, ErrorCode * errno );

/** __sysconf_spec **/
specification
LongT __sysconf_spec( CallContext context, IntT name, ErrorCode * errno );

/** confstr_spec **/
specification
SizeT confstr_spec( CallContext context, IntT name, StringTPtr buf, SizeT len, ErrorCode * errno );


/** getpagesize_spec **/
specification
IntT getpagesize_spec( CallContext context, ErrorCode * errno);

/** __getpagesize_spec **/
 specification
IntT __getpagesize_spec( CallContext context, ErrorCode * errno);

/** pathconf_spec **/
specification
LongT pathconf_spec( CallContext context, CString * path, IntT name, ErrorCode * errno );

specification
LongT fpathconf_spec( CallContext context, FileDescId fildes, IntT name, ErrorCode * errno );

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

typedef enum
{
    ADV,    AIO,    BAR,    CS,    CPT,    FSC,    IP6,    MF,    ML,    MR,
    MPR,    MSG_,    MON,    PIO,    PS,    RS,    THR,    RTS,    SEM,    SHM,
    SPN,    SPI,    SS,    SIO,    TSA,    TSS,    TCT,    TPI,    TPP,    TPS,
    TSH,    TSF,    TSP,    THR_,    TMO,    TMR,    TRC,    TEF,    TRI,    TRL,
    TYM,    CD,    FD,    FR,    BE,    UP,    XSI
}Posix_Option;

bool POSIX_OPTION(CallContext context, Posix_Option opt);
SCData * getSCData(IntT name);

#endif

