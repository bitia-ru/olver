/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef SYSTEM_MODEL_SEH
#define SYSTEM_MODEL_SEH

#include "atl/map.h"
#include "common/common_model.seh"
#include "config/system_config.seh"
#include "data/locale_model.seh"
#include "data/sys/types_model.seh"
#include "fs/fs/fs_model.seh"
#include "io/file/file_model.seh"
#include "io/fstream/fstream_model.seh"
#include "memory/mman/mman_model.seh"
#include "system/stat/stat_model.seh"

/********************************************************************/
/**                  PThread Model Initialization                  **/
/********************************************************************/

void initSystemModel(void);

/********************************************************************/
/**                              Passwd                            **/
/********************************************************************/

specification typedef struct Passwd
{
    CString*    pw_name;
    UidT        pw_uid;
    GidT        pw_gid;
    CString*    pw_dir;
    CString*    pw_shell;
} Passwd;

Passwd *create_Passwd(
    CString*    pw_name,
    UidT        pw_uid,
    GidT        pw_gid,
    CString*    pw_dir,
    CString*    pw_shell
    );
specification typedef struct UsersGroup
{
    CString*   gr_name;
    GidT       gr_gid;
    List       *gr_mem;
} UsersGroup;

UsersGroup *create_UsersGroup(
    CString*   gr_name,
    GidT       gr_gid,
    List       *gr_mem
    );

/********************************************************************/
/**                           Clock State                          **/
/********************************************************************/

specification typedef struct ObservedValues { TimeSpecTObj * secPrecision;
                                              TimeSpecTObj * millisecPrecision;
                                              TimeSpecTObj * nanosecPrecision;
                                            } ObservedValues;

ObservedValues * create_ObservedValues
                     ( TimeSpecTObj * secPrecision, TimeSpecTObj * millisecPrecision, TimeSpecTObj * nanosecPrecision );

specification typedef
struct ClockState
{
    TimeSpecTObj * resolution;
    ObservedValues * observedValues;
} ClockState;

ClockState * create_ClockState( TimeSpecTObj * resolution );

/********************************************************************/
/**                            Stat State                          **/
/********************************************************************/

specification typedef struct StatState { // private:
    // for acct
    CString * filename;
    // for clock
    ClockT lastClock;
    // for getloadavg
    IntT loadAvg;
#if 0 // for avoid too many "// "
public:
    // for acct
    void setFilename( CString * filename );
    void clearFilename( void );
    CString * getFilename( void ) const;
    // for clock
    void setClock( ClockT c );
    ClockT getClock( void ) const;
    // for getloadavg
    void setLoadAvg( IntT loadAvg );
    IntT getLoadAvg( void ) const;
#endif // 0 for avoid too many "// "
} StatState;

/* quasi constructor */
StatState * create_StatState( void );
void setFilename_StatState( StatState * thisStatState, CString * filename );
void clearFilename_StatState( StatState * thisStatState );
CString * getFilename_StatState( /* const */ StatState * thisStatState );
void setClock_StatState( StatState * thisStatState, ClockT c );
ClockT getClock_StatState( /* const */ StatState * thisStatState );
void setLoadAvg_StatState( StatState * thisStatState, IntT loadAvg );
IntT getLoadAvg_StatState( /* const */ StatState * thisStatState );

/********************************************************************/
/**                           System State                         **/
/********************************************************************/

specification typedef
struct SystemState
{
  SystemId             id;
  // System Configuration
  SystemConfiguration* configuration;
  // ?HardwareState?
  // FileSystemState
  FileSystem*          file_system;
  // SharedMemorySystemState
  SharedMemorySystem*  shared_memory_system;
  // Processes State
  Map*                 processes;  // ProcessId -m-> ProcessState
  // User Database
  Set*                 globalUsers;
  bool                 isGlobalSetFilled;
  Set*                 groups;
  bool                 isGroupsSetFilled;
  bool                 isGroupsSetValid;
  CString *            hostname;
  // Clocks
  Map /* ClockidTObj +> ClockState */ * clocks;

  Map*/*<CString*, LocaleInfo*>*/ locInfoMap;

  // Streams
  Map /* FileTPtrObj +> StreamState */ * streams;
  // Signals
  Map /* IntTObj +> CString */ * signalToString;
  // Stat State
  StatState * statState;

  Set* textdomainState;

} SystemState;

SystemState* create_SystemState( SystemId id, SystemConfiguration* configuration );

/********************************************************************/
/**                            System Storage                      **/
/********************************************************************/

extern Map* systems; // SystemId -m-> SystemState

SystemState* getSystemState( SystemId systemid );
SystemState* findSystemState( Map* systems, SystemId systemid );

SystemState* getSystemState_CallContext( CallContext context );

/********************************************************************/
/**                         Helper Functions                       **/
/********************************************************************/
FileSystem* getFileSystem( CallContext context );
FileSystem* getFileSystem_SystemId( SystemId systemid );

Map* getAllThreads(void);         // ThreadId   -m-> ThreadState
Map* getAllProcesses(void);       // ProcessId  -m-> ProcessState
Map* getAllFileDescriptors(void); // FileDescId -m-> FileDescriptor
Map* getAllFileSystems(void);     // SystemId   -m-> FileSystem

#endif

