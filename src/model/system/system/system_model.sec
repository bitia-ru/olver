/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */

#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "data/time_model.seh"
#include "data/sys/types_model.seh"
#include "locale/locale/locale_model.seh"
#include "locale/textdomain/textdomain_model.seh"

/********************************************************************/
/**                  PThread Model Initialization                  **/
/********************************************************************/

void initSystemModel(void)
{
  systems = create_Map( &type_Long, &type_SystemState );
}

/********************************************************************/
/**                              Passwd                            **/
/********************************************************************/

specification typedef struct Passwd Passwd = {};
specification typedef struct UsersGroup UsersGroup = {};

Passwd *create_Passwd(
    CString*    pw_name,
    UidT        pw_uid,
    GidT        pw_gid,
    CString*    pw_dir,
    CString*    pw_shell
    )
{
    return create(&type_Passwd, pw_name, pw_uid, pw_gid, pw_dir, pw_shell);
}

UsersGroup *create_UsersGroup(
    CString*   gr_name,
    GidT       gr_gid,
    List       *gr_mem
    )
{
    return create(&type_UsersGroup, gr_name, gr_gid, gr_mem);
}

/********************************************************************/
/**                           Clock State                          **/
/********************************************************************/

specification typedef struct ObservedValues ObservedValues = {};

ObservedValues * create_ObservedValues
                     ( TimeSpecTObj * secPrecision, TimeSpecTObj * millisecPrecision, TimeSpecTObj * nanosecPrecision ) {
    return create( & type_ObservedValues, secPrecision, millisecPrecision, nanosecPrecision );
}

specification typedef struct ClockState ClockState = {};

ClockState * create_ClockState( TimeSpecTObj * resolution ) {
    return create( & type_ClockState, resolution, create_ObservedValues( NULL, NULL, NULL ) );
}

/********************************************************************/
/**                            Stat State                          **/
/********************************************************************/

// struct StatState

specification typedef struct StatState StatState = {};

/* quasi constructor */
StatState * create_StatState( void ) {
    return create( & type_StatState, NULL, -1, 0 );
}

// void StatState::setFilename( CString * filename )
void setFilename_StatState( StatState * thisStatState, CString * filename ) {
    assertion( thisStatState != NULL, "StatState::setFilename : this is NULL\n" );
    assertion( filename != NULL, "StatState::setFilename : filename is NULL\n" );
    thisStatState->filename = filename;
}

// void StatState::clearFilename( void )
void clearFilename_StatState( StatState * thisStatState ) {
    assertion( thisStatState != NULL, "StatState::clearFilename : this is NULL\n" );
    thisStatState->filename = NULL;
}

// CString * StatState::getFilename( void ) const
CString * getFilename_StatState( /* const */ StatState * thisStatState ) {
    assertion( thisStatState != NULL, "StatState::getFilename : this is NULL\n" );
    return thisStatState->filename;
}

// void StatState::setClock( ClockT c )
void setClock_StatState( StatState * thisStatState, ClockT c ) {
    assertion( thisStatState != NULL, "StatState::setClock : this is NULL\n" );
    thisStatState->lastClock = c;
}

// ClockT StatState::getClock( void ) const
ClockT getClock_StatState( /* const */ StatState * thisStatState ) {
    assertion( thisStatState != NULL, "StatState::getClock : this is NULL\n" );
    return thisStatState->lastClock;
}

// void StatState::setLoadAvg( IntT loadAvg )
void setLoadAvg_StatState( StatState * thisStatState, IntT loadAvg ) {
    assertion( thisStatState != NULL, "StatState::setLoadAvg : this is NULL\n" );
    thisStatState->loadAvg = loadAvg;
}

// void StatState::getLoadAvg( void ) const
IntT getLoadAvg_StatState( /* const */ StatState * thisStatState ) {
    assertion( thisStatState != NULL, "StatState::getLoadAvg : this is NULL\n" );
    return thisStatState->loadAvg;
}

/********************************************************************/
/**                           System State                         **/
/********************************************************************/

specification typedef struct SystemState SystemState = {};

SystemState* create_SystemState( SystemId id, SystemConfiguration* configuration )
{
    SystemState * result = create( & type_SystemState,
                                   id,
                                   // System Configuration
                                   configuration,
                                   // FileSystemState
                                   create_FileSystemBySystemId(id),
                                   // SharedMemorySystem
                                   create_SharedMemorySystem(),
                                   // Processes State
                                   create_Map( &type_ProcessIdObj, &type_ProcessState ),
                                   // User Database
                                   create_Set(&type_Passwd),
                                   false,
                                   create_Set(&type_UsersGroup),
                                   false,
                                   false,
                                   (CString*)NULL, // hostname
                                   // Clocks
                                   create_Map( & type_ClockidTObj, & type_ClockState ),
                                   create_Map( & type_CString, & type_LocaleInfo ),
                                   // Streams
                                   create_Map( & type_FILETPtrObj, & type_StreamState ),
                                   // Signals
                                   //create_Map( & type_IntTObj, & type_CString ),
                                   NULL,
                                   // Stat State
                                   create_StatState(),
                                   init_SystemStateDomain()
                                 );
    put_Map( result->clocks, create_ClockidTObj( SUT_CLOCK_REALTIME ), create_ClockState( NULL ) );
    return result;
}

/********************************************************************/
/**                            System Storage                      **/
/********************************************************************/

Map* systems; // SystemId -m-> SystemState

SystemState* getSystemState( SystemId systemid )
{
  return get_Map( systems, create_Long(systemid) );
}

SystemState* findSystemState( Map* systems, SystemId systemid )
{
  return get_Map( systems, create_Long(systemid) );
}

SystemState* getSystemState_CallContext( CallContext context )
{
  return getSystemState(context.system);
}


/********************************************************************/
/**                         Helper Functions                       **/
/********************************************************************/
FileSystem* getFileSystem( CallContext context )
{
SystemState* systemState = getSystemState( context.system );

  if (systemState == NULL)
    return NULL;
  return systemState->file_system;
}

FileSystem* getFileSystem_SystemId( SystemId systemid )
{
SystemState* systemState = getSystemState( systemid );

  if (systemState == NULL)
    return NULL;
  return systemState->file_system;
}


Map* getAllThreads(void)
{
int i,j,k,size1,size2,size3;
Map* res;

  res = create_Map( &type_ThreadIdObj, &type_ThreadState );
  size1 = size_Map(systems);
  for( i = 0; i < size1; i++ )
   {
    SystemState* systemState = get_Map( systems, key_Map( systems, i ) );
    size2 = size_Map(systemState->processes);
    for( j = 0; j < size2; j++ )
     {
      ProcessState* processState = get_Map( systemState->processes, key_Map( systemState->processes, j ) );
      size3 = size_Map(processState->threads);
      for( k = 0; k < size3; k++ )
       {
        ThreadState* threadState = get_Map( processState->threads, key_Map( processState->threads, k ) );
        put_Map( res, create_ThreadIdObj(threadState->id), threadState );
       }
     }
   }
  return res;
}

Map* getAllProcesses(void)
{
int i,j,size1,size2;
Map* res;

  res = create_Map( &type_ProcessIdObj, &type_ProcessState );
  size1 = size_Map(systems);
  for( i = 0; i < size1; i++ )
   {
    SystemState* systemState = get_Map( systems, key_Map( systems, i ) );
    size2 = size_Map(systemState->processes);
    for( j = 0; j < size2; j++ )
     {
      ProcessState* processState = get_Map( systemState->processes, key_Map( systemState->processes, j ) );
      put_Map( res, create_ProcessIdObj(processState->processid), processState );
     }
   }
  return res;
}

Map* getAllFileDescriptors(void)
{
int i,j,k,size1,size2,size3;
Map* res;

  res = create_Map( &type_FileDescIdObj, &type_FileDescriptor );
  size1 = size_Map(systems);
  for( i = 0; i < size1; i++ )
   {
    SystemState* systemState = get_Map( systems, key_Map( systems, i ) );
    size2 = size_Map(systemState->processes);
    for( j = 0; j < size2; j++ )
     {
      ProcessState* processState = get_Map( systemState->processes, key_Map( systemState->processes, j ) );
      size3 = size_Map(processState->file_descriptors);
      for( k = 0; k < size3; k++ )
       {
        FileDescriptor* fileDescriptor = get_Map( processState->file_descriptors, key_Map( processState->file_descriptors, k ) );
        put_Map( res, create_FileDescIdObj(fileDescriptor->file_desc_id), fileDescriptor );
       }
     }
   }
  return res;
}

Map* getAllFileSystems(void)
{
int i,size1;
Map* res;

  res = create_Map( &type_SystemIdObj, &type_FileSystem );
  size1 = size_Map(systems);
  for( i = 0; i < size1; i++ )
   {
    SystemState* systemState = get_Map( systems, key_Map( systems, i ) );
    put_Map( res, create_SystemIdObj(systemState->id), systemState->file_system );
   }
  return res;
}
