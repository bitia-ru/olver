/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/attr/attr_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadAttrSubsystem(void)
{
    // Set up mediators
    set_mediator_pthread_attr_destroy_spec(pthread_attr_destroy_media);
    set_mediator_pthread_attr_getdetachstate_spec(pthread_attr_getdetachstate_media);
    set_mediator_pthread_attr_getguardsize_spec(pthread_attr_getguardsize_media);
    set_mediator_pthread_attr_getinheritsched_spec(pthread_attr_getinheritsched_media);
    set_mediator_pthread_attr_getschedparam_spec(pthread_attr_getschedparam_media);
    set_mediator_pthread_attr_getschedpolicy_spec(pthread_attr_getschedpolicy_media);
    set_mediator_pthread_attr_getscope_spec(pthread_attr_getscope_media);
    set_mediator_pthread_attr_getstack_spec(pthread_attr_getstack_media);
    set_mediator_pthread_attr_getstackaddr_spec(pthread_attr_getstackaddr_media);
    set_mediator_pthread_attr_getstacksize_spec(pthread_attr_getstacksize_media);
    set_mediator_pthread_attr_init_spec(pthread_attr_init_media);
    set_mediator_pthread_attr_setdetachstate_spec(pthread_attr_setdetachstate_media);
    set_mediator_pthread_attr_setguardsize_spec(pthread_attr_setguardsize_media);
    set_mediator_pthread_attr_setinheritsched_spec(pthread_attr_setinheritsched_media);
    set_mediator_pthread_attr_setschedparam_spec(pthread_attr_setschedparam_media);
    set_mediator_pthread_attr_setschedpolicy_spec(pthread_attr_setschedpolicy_media);
    set_mediator_pthread_attr_setscope_spec(pthread_attr_setscope_media);
    set_mediator_pthread_attr_setstack_spec(pthread_attr_setstack_media);
    set_mediator_pthread_attr_setstackaddr_spec(pthread_attr_setstackaddr_media);
    set_mediator_pthread_attr_setstacksize_spec(pthread_attr_setstacksize_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_attr_destroy_spec **/
mediator pthread_attr_destroy_media for specification
IntT pthread_attr_destroy_spec( CallContext context, PThreadAttrTPtr attr)
{
    IntT res = 1;
    int  i=0;
    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "pthread_attr_destroy:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrDestroy(attr, pthread_attr_destroy_spec );
    }
}


/** pthread_attr_getdetachstate_spec **/
mediator pthread_attr_getdetachstate_media for specification
GetStateFunctionResult* pthread_attr_getdetachstate_spec(CallContext context, 
                                                         PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT funcRes=0;
    IntT detState=0;
    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "pthread_attr_getdetachstate:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            detState = readInt_TSStream(&command.response);
            res=create_GetStateFunctionResult(
                       funcRes, 
                       detState, 
                       0, 
                       0, 
                       NULL_VoidTPtr, 
                       0, 
                       0, 
                       NULL, 
                       0);
        }
        

        destroy_TSCommand(&command);
        
        return res;   
    }
}



/** pthread_attr_getguardsize_spec **/
mediator pthread_attr_getguardsize_media for specification
GetStateFunctionResult* pthread_attr_getguardsize_spec( CallContext context, 
                                                        PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT funcRes=0;
    SizeT gsize=0;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getguardsize:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            gsize = readSize_TSStream(&command.response);
            res=create_GetStateFunctionResult(
                       funcRes, 
                       0, 
                       gsize, 
                       0, 
                       NULL_VoidTPtr,
                       0,
                       0,
                       NULL,
                       0);
        }
        
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getinheritsched_spec **/
mediator pthread_attr_getinheritsched_media for specification
GetStateFunctionResult* pthread_attr_getinheritsched_spec(CallContext context,
                                                          PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT  inhs=0;
    SizeT gsize=0;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getinheritsched:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            inhs = readInt_TSStream(&command.response);
            res=create_GetStateFunctionResult(
                       funcRes, 
                       0, 
                       gsize, 
                       inhs, 
                       NULL_VoidTPtr, 
                       0, 
                       0, 
                       NULL, 
                       0);
        }
        
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getschedparam_spec **/
mediator pthread_attr_getschedparam_media for specification
GetStateFunctionResult* pthread_attr_getschedparam_spec(CallContext context, 
                                                        PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT detachState=0;
    SizeT guardSize=0;
    IntT  inheritedSched=-1;
    VoidTPtr    stackaddr=NULL_VoidTPtr;
    SizeT       stacksize=0;
    IntT        contentionscope=-1;
    ShedParam*   shedPar;
    IntT        policy = -1;

    IntT             sched_priority;
    IntT             sched_ss_low_priority; 
    TimeSpecTObj*        sched_ss_repl_period;  
    TimeSpecTObj*        sched_ss_init_budget;  
    IntT             sched_ss_max_repl;     


    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getschedparam:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            TimeSpecT tmpTime;
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);

            sched_priority = readInt_TSStream(&command.response);
            sched_ss_low_priority = readInt_TSStream(&command.response); 
            
            tmpTime.sec = readLong_TSStream(&command.response);
            tmpTime.nsec = readLong_TSStream(&command.response);

            sched_ss_repl_period = create_TimeSpecTObj(
                tmpTime
                );  

            tmpTime.sec = readLong_TSStream(&command.response);
            tmpTime.nsec = readLong_TSStream(&command.response);
            sched_ss_init_budget = create_TimeSpecTObj(
                tmpTime
                );  
            sched_ss_max_repl = readInt_TSStream(&command.response);     

            shedPar=create_ShedParam( sched_priority, 
                sched_ss_low_priority, sched_ss_repl_period, 
                sched_ss_init_budget, sched_ss_max_repl);

            res=create_GetStateFunctionResult(
                funcRes, detachState, guardSize, inheritedSched, stackaddr, 
                stacksize, contentionscope, shedPar, policy);
        }
        
        
        destroy_TSCommand(&command);
        
        return res; 
    }
}


/** pthread_attr_getschedpolicy_spec **/
mediator pthread_attr_getschedpolicy_media for specification
GetStateFunctionResult* pthread_attr_getschedpolicy_spec(CallContext context,
                                                         PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res=NULL;
    IntT functionResult = 0;
    IntT detachState = 0;
    SizeT guardSize = 0;
    IntT  inheritedSched = 0;

    VoidTPtr    stackaddr = NULL_VoidTPtr;
    SizeT       stacksize = 0;
    
    IntT        contentionscope = 0;
    ShedParam*   shedPar = NULL;
    IntT        policy  = 0;
    call 
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getschedpolicy:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            functionResult  = readInt_TSStream(&command.response);
            policy  = readInt_TSStream(&command.response);
            res=create_GetStateFunctionResult( functionResult,
                       detachState, guardSize, inheritedSched,  stackaddr,
                       stacksize, contentionscope, shedPar, policy);
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getscope_spec **/
mediator pthread_attr_getscope_media for specification
GetStateFunctionResult* pthread_attr_getscope_spec( CallContext context, 
                                                    PThreadAttrTPtr attr )
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT  inhs=0;
    SizeT gsize=0;
    VoidTPtr stackaddr = NULL_VoidTPtr;
    SizeT stacksize = 0;
    IntT contentionscope = 0;
    call 
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getscope:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            contentionscope  = readInt_TSStream(&command.response);
            res=create_GetStateFunctionResult( funcRes, 0, gsize, inhs, 
                stackaddr, stacksize, contentionscope, NULL, 0);
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getstack_spec **/
mediator pthread_attr_getstack_media for specification
GetStateFunctionResult* pthread_attr_getstack_spec( CallContext context,
                                                    PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT  inhs=0;
    SizeT gsize=0;
    VoidTPtr stackaddr = NULL_VoidTPtr;
    SizeT stacksize = 0;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getstack:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            stackaddr = readPointer_TSStream(context, &command.response);
            stacksize = readSize_TSStream(&command.response);
            res=create_GetStateFunctionResult( funcRes, 0, gsize, inhs, 
                    stackaddr, stacksize, 0, NULL, 0);
        }
        
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getstackaddr_spec **/
mediator pthread_attr_getstackaddr_media for specification
GetStateFunctionResult* pthread_attr_getstackaddr_spec( CallContext context,
                                                        PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT  inhs=0;
    SizeT gsize=0;
    VoidTPtr stackaddr = NULL_VoidTPtr;
    SizeT stacksize = 0;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getstackaddr:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            stackaddr = readPointer_TSStream(context, &command.response);
            res=create_GetStateFunctionResult( funcRes, 0, gsize, inhs, 
                stackaddr, stacksize, 0, NULL, 0);
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_getstacksize_spec **/
mediator pthread_attr_getstacksize_media for specification
GetStateFunctionResult* pthread_attr_getstacksize_spec( CallContext context, 
                                                        PThreadAttrTPtr attr)
{
    GetStateFunctionResult* res = NULL;
    IntT  funcRes=0;
    IntT  inhs=0;
    SizeT gsize=0;
    VoidTPtr stackaddr = NULL_VoidTPtr;
    SizeT stacksize = 0;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_getstacksize:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            funcRes  = readInt_TSStream(&command.response);
            stacksize = readSize_TSStream(&command.response);
            res=create_GetStateFunctionResult( funcRes, 0, gsize, inhs, 
                stackaddr, stacksize, 0, NULL, 0);
        }
        
        
        destroy_TSCommand(&command);
        
        return res;   
    }
}


/** pthread_attr_init_spec **/
mediator pthread_attr_init_media for specification
IntT pthread_attr_init_spec( CallContext context, VoidTPtr attr)
{
    IntT res = 1;
    int i=0;
    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "pthread_attr_init:$(ptr)",
            create_VoidTPtrObj(attr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrInit(attr, context, pthread_attr_init_spec );

    }
} 


/** pthread_attr_setdetachstate_spec **/
mediator pthread_attr_setdetachstate_media for specification
IntT pthread_attr_setdetachstate_spec( CallContext context, 
                                       PThreadAttrTPtr attr, 
                                       IntT detachstate)
                                      
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
    
         
        format_TSCommand( &command, "pthread_attr_setdetachstate:$(ptr)$(int)",
            create_VoidTPtrObj(attr),
            create_IntTObj(detachstate));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetdetachstate(attr, detachstate,
            pthread_attr_setdetachstate_spec );
    }
}



/** pthread_attr_setguardsize_spec **/
mediator pthread_attr_setguardsize_media for specification
IntT pthread_attr_setguardsize_spec( CallContext context, PThreadAttrTPtr attr, 
                                     SizeT guardsize)
                                      
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_setguardsize:$(ptr)$(size)",
            create_VoidTPtrObj(attr),
            create_SizeTObj(guardsize));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
      onPThreadAttrSetguardsize(attr, guardsize,
        pthread_attr_setguardsize_spec);
    }
}



/** pthread_attr_setinheritsched_spec **/
mediator pthread_attr_setinheritsched_media for specification
IntT pthread_attr_setinheritsched_spec( CallContext context, 
                                        PThreadAttrTPtr attr, 
                                        IntT  inheritsched)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, 
            "pthread_attr_setinheritsched:$(ptr)$(int)",
            create_VoidTPtrObj(attr),
            create_IntTObj(inheritsched));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetinheritsched(attr, inheritsched,
                                     pthread_attr_setinheritsched_spec );
    }
}


/** pthread_attr_setschedparam_spec **/
mediator pthread_attr_setschedparam_media for specification
IntT pthread_attr_setschedparam_spec( CallContext context, 
                                      PThreadAttrTPtr attr, 
                                      ShedParam* param)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, 
            "pthread_attr_setschedparam:$(ptr)$(int)$(int)$(long)$(long)"
            "$(long)$(long)$(int)",
            create_VoidTPtrObj(attr),
            create_IntTObj(param->sched_priority),
            create_IntTObj(param->sched_ss_low_priority), 
            create_LongTObj(param->sched_ss_repl_period->sec),  
            create_LongTObj(param->sched_ss_repl_period->nsec),  
            create_LongTObj(param->sched_ss_init_budget->sec),  
            create_LongTObj(param->sched_ss_init_budget->nsec),  
            create_IntTObj(param->sched_ss_max_repl)
            );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetschedparam(attr, param,
                                   pthread_attr_setschedparam_spec );
    }
}


/** pthread_attr_setschedpolicy_spec **/
mediator pthread_attr_setschedpolicy_media for specification
IntT pthread_attr_setschedpolicy_spec( CallContext context, 
                                       PThreadAttrTPtr attr,
                                       IntT  policy)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_setschedpolicy:$(ptr)$(int)",
            create_VoidTPtrObj(attr),
            create_IntTObj(policy));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetschedpolicy(attr, policy,
                                    pthread_attr_setschedpolicy_spec);
    }
}



/** pthread_attr_setscope_spec **/
mediator pthread_attr_setscope_media for specification
IntT pthread_attr_setscope_spec( CallContext context, PThreadAttrTPtr attr, 
                                 IntT contentionscope)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_setscope:$(ptr)$(int)",
            create_VoidTPtrObj(attr),
            create_IntTObj(contentionscope));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetscope(attr, contentionscope,
                              pthread_attr_setscope_spec );
    }
}

/** pthread_attr_setstack_spec **/
mediator pthread_attr_setstack_media for specification
IntT pthread_attr_setstack_spec(CallContext context, PThreadAttrTPtr attr, 
                                VoidTPtr stackaddr, SizeT stacksize)
{
    IntT res = -1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, 
            "pthread_attr_setstack:$(ptr)$(ptr)$(size)",
            create_VoidTPtrObj(attr),
            create_VoidTPtrObj(stackaddr),
            create_SizeTObj(stacksize));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetstack(attr, stackaddr, 
                              stacksize, pthread_attr_setstack_spec);
    }
}

/** pthread_attr_setstackaddr_spec **/
mediator pthread_attr_setstackaddr_media for specification
IntT pthread_attr_setstackaddr_spec(CallContext context, PThreadAttrTPtr attr, 
                                    VoidTPtr stackaddr)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_setstackaddr:$(ptr)$(ptr)",
            create_VoidTPtrObj(attr),
            create_VoidTPtrObj(stackaddr));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetstackaddr(attr, stackaddr,
                                  pthread_attr_setstackaddr_spec);
    }
}



/** pthread_attr_setstacksize_spec **/
mediator pthread_attr_setstacksize_media for specification
IntT pthread_attr_setstacksize_spec(CallContext context, PThreadAttrTPtr attr,
                                    SizeT stacksize)
{
    IntT res = 1;
    call
    {
        TSCommand command = create_TSCommand();
        
         
        format_TSCommand( &command, "pthread_attr_setstacksize:$(ptr)$(size)",
            create_VoidTPtrObj(attr),
            create_SizeTObj(stacksize));
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            res = readInt_TSStream(&command.response);
             
        }
        
        destroy_TSCommand(&command);
        
        return res;   
    }
    state
    {
        onPThreadAttrSetstacksize(attr, stacksize,
                                  pthread_attr_setstacksize_spec);
    }
}



