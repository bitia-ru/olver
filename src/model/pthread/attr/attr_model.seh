/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_ATTR_MODEL_SEH
#define PTHREAD_ATTR_MODEL_SEH

#include "common/common_model.seh"
#include "data/time_model.seh"

#define SUT_SS_REPL_MAX 4

typedef VoidTPtr PThreadAttrTPtr;

typedef enum DetachStates
{
    SUT_PTHREAD_CREATE_JOINABLE,
    SUT_PTHREAD_CREATE_DETACHED
} DetachStates;

typedef enum InheritedSheds
{
    SUT_PTHREAD_INHERIT_SCHED,
    SUT_PTHREAD_EXPLICIT_SCHED
} InheritedSheds;

typedef enum ContentionScopes
{
    SUT_PTHREAD_SCOPE_SYSTEM=0x0,
    SUT_PTHREAD_SCOPE_PROCESS
} ContentionScopes;


specification typedef struct ShedParam
{
    IntT             sched_priority;

    IntT             sched_ss_low_priority; 
    TimeSpecTObj*    sched_ss_repl_period;  
    TimeSpecTObj*    sched_ss_init_budget;  
    IntT             sched_ss_max_repl;     
} ShedParam;

ShedParam *create_ShedParam(
    IntT             sched_priority,
    IntT             sched_ss_low_priority, 
    TimeSpecTObj*    sched_ss_repl_period,  
    TimeSpecTObj*    sched_ss_init_budget,  
    IntT             sched_ss_max_repl
    );

typedef enum PThreadAttrVarIds
{
    DETACHSTATE,
    GUARDSIZE,           
    INHERITSCHED,
    SHEDPAR,
    POLICY,
    CONTENTIONSCOPE,
    STACKADDR,
    STACKSIZE
}   PThreadAttrVarIds;

specification typedef struct PThreadAttr
{
    PThreadAttrTPtr    pattr;
    Map*               isInitialized;   

    IntT               detachstate;        
    SizeT              guardsize;           
    IntT               inheritsched;
    ShedParam*         shedPar;
    IntT               policy;
    IntT               contentionscope;
    VoidTPtr           stackaddr;
    SizeT              stacksize;
} PThreadAttr;

PThreadAttr* getPThreadAttr(PThreadAttrTPtr pattr);
PThreadAttr* create_PThreadAttrPattr(CallContext context, PThreadAttrTPtr pattr);

PThreadAttr *create_PThreadAttr(
    PThreadAttrTPtr    pattr,
    Map*               isInitialized,   
    IntT               detachstate,        
    SizeT              guardsize,           
    IntT               inheritsched,
    ShedParam*         shedPar,
    IntT               policy,
    IntT               contentionscope,
    VoidTPtr           stackaddr,
    SizeT              stacksize
    );

specification typedef struct GetStateFunctionResult
{
    IntT               functionResult;

    IntT               detachState;
    SizeT              guardSize;
    IntT               inheritedSched;
    VoidTPtr           stackaddr;
    SizeT              stacksize;
    IntT               contentionscope;
    ShedParam*         shedPar;
    IntT               policy;
} GetStateFunctionResult;

GetStateFunctionResult *create_GetStateFunctionResult(
    IntT               functionResult,
    IntT               detachState,
    SizeT              guardSize,
    IntT               inheritedSched,
    VoidTPtr           stackaddr,
    SizeT              stacksize,
    IntT               contentionscope,
    ShedParam*         shedPar,
    IntT               policy
    );


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_attr_destroy_spec **/
specification
IntT pthread_attr_destroy_spec( CallContext context, PThreadAttrTPtr attr);

void onPThreadAttrDestroy(PThreadAttrTPtr pattr, 
                          IntT pthread_attr_destroy_spec );

/** pthread_attr_getdetachstate_spec **/
specification
GetStateFunctionResult* pthread_attr_getdetachstate_spec(CallContext context, 
                                                         PThreadAttrTPtr attr);

/** pthread_attr_getguardsize_spec **/
specification
GetStateFunctionResult* pthread_attr_getguardsize_spec( CallContext context,
                                                       PThreadAttrTPtr attr);

/** pthread_attr_getinheritsched_spec **/
specification
GetStateFunctionResult* pthread_attr_getinheritsched_spec( CallContext context,
                                                          PThreadAttrTPtr attr);

/** pthread_attr_getschedparam_spec **/
specification
GetStateFunctionResult* pthread_attr_getschedparam_spec( CallContext context, 
                                                        PThreadAttrTPtr attr);

/** pthread_attr_getschedpolicy_spec **/
specification
GetStateFunctionResult* pthread_attr_getschedpolicy_spec( CallContext context,
                                                         PThreadAttrTPtr attr);

/** pthread_attr_getscope_spec **/
specification
GetStateFunctionResult* pthread_attr_getscope_spec( CallContext context, 
                                                    PThreadAttrTPtr attr );

/** pthread_attr_getstack_spec **/
specification
GetStateFunctionResult* pthread_attr_getstack_spec( CallContext context,
                                                           PThreadAttrTPtr attr);

/** pthread_attr_getstackaddr_spec **/
specification
GetStateFunctionResult* pthread_attr_getstackaddr_spec( CallContext context,
                                                       PThreadAttrTPtr attr);

/** pthread_attr_getstacksize_spec **/
specification
GetStateFunctionResult* pthread_attr_getstacksize_spec( CallContext context, 
                                                       PThreadAttrTPtr attr);

/** pthread_attr_init_spec **/
specification
IntT pthread_attr_init_spec( CallContext context, VoidTPtr attr);

void onPThreadAttrInit(VoidTPtr pattr, CallContext context, 
                       IntT pthread_attr_init_spec );

/** pthread_attr_setdetachstate_spec **/
specification
IntT pthread_attr_setdetachstate_spec( CallContext context, PThreadAttrTPtr attr, 
                                       IntT detachstate);

void onPThreadAttrSetdetachstate(PThreadAttrTPtr pattr, IntT detachstate,
                                 IntT pthread_attr_setdetachstate_spec );

/** pthread_attr_setguardsize_spec **/
specification
IntT pthread_attr_setguardsize_spec( CallContext context, PThreadAttrTPtr attr, 
                                    SizeT  guardsize);

void onPThreadAttrSetguardsize(PThreadAttrTPtr pattr, SizeT  guardsize,
                               IntT pthread_attr_setguardsize_spec);

/** pthread_attr_setinheritsched_spec **/
specification
IntT pthread_attr_setinheritsched_spec( CallContext context,PThreadAttrTPtr attr, 
                                       IntT  inheritsched);

void onPThreadAttrSetinheritsched(PThreadAttrTPtr pattr,IntT  inheritsched,
                                  IntT pthread_attr_setinheritsched_spec );

/** pthread_attr_setschedparam_spec **/
specification
IntT pthread_attr_setschedparam_spec( CallContext context, PThreadAttrTPtr attr, 
                                     ShedParam* param);

void onPThreadAttrSetschedparam(PThreadAttrTPtr pattr, ShedParam* param,
                                IntT pthread_attr_setschedparam_spec );

/** pthread_attr_setschedpolicy_spec **/
specification
IntT pthread_attr_setschedpolicy_spec( CallContext context, 
                                           PThreadAttrTPtr attr,
                                           IntT  policy);
void onPThreadAttrSetschedpolicy(PThreadAttrTPtr pattr, IntT  policy,
                                 IntT pthread_attr_setschedpolicy_spec );

/** pthread_attr_setscope_spec **/
specification
IntT pthread_attr_setscope_spec( CallContext context, PThreadAttrTPtr attr, 
                                IntT contentionscope);

void onPThreadAttrSetscope(PThreadAttrTPtr pattr, IntT  contentionscope,
                           IntT pthread_attr_setscope_spec );

/** pthread_attr_setstack_spec **/
specification
IntT pthread_attr_setstack_spec(CallContext context, PThreadAttrTPtr attr, 
                                VoidTPtr stackaddr, SizeT stacksize);

void onPThreadAttrSetstack(PThreadAttrTPtr pattr, VoidTPtr stackaddr, 
                           SizeT stacksize, IntT pthread_attr_setstack_spec);

/** pthread_attr_setstackaddr_spec **/
specification
IntT pthread_attr_setstackaddr_spec(CallContext context, PThreadAttrTPtr attr, 
                                    VoidTPtr stackaddr);

void onPThreadAttrSetstackaddr(PThreadAttrTPtr pattr, VoidTPtr stackaddr,
                               IntT pthread_attr_setstackaddr_spec);

/** pthread_attr_setstacksize_spec **/
specification
IntT pthread_attr_setstacksize_spec(CallContext context, PThreadAttrTPtr attr,
                                    SizeT stacksize);

void onPThreadAttrSetstacksize(PThreadAttrTPtr pattr, SizeT stacksize,
                               IntT pthread_attr_setstacksize_spec);



/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

void registerPThreadAttr(CallContext context, PThreadAttrTPtr pattr);
void unregisterPThreadAttr(PThreadAttrTPtr pattr);

#endif

