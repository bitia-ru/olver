/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_COND_MODEL_SEH
#define PTHREAD_COND_MODEL_SEH

#include "common/common_model.seh"
#include "pthread/pthread/pthread_model.seh"
#include "pthread/mutex/mutex_model.seh"
#include "pthread/cond/condattr_model.seh"


/********************************************************************/
/**                       Condition Variable                       **/
/********************************************************************/

typedef VoidTPtr PThreadCondTPtr;

/* 
 * This type represents internal data of pthread_mutex_t
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libpthread', header file 'pthread.h'.
 */ 
specification invariant typedef struct PThreadCondT
{
  PThreadCondTPtr   cond;
  PThreadMutexTPtr  mutex;
  IntT              predicate;
  PThreadPShared    pshared;
  List*             wait_list;
} PThreadCondT;

PThreadCondT* create_PThreadCondT(PThreadCondTPtr cond, PThreadMutexTPtr mutex, IntT predicate, PThreadPShared pshared);
void register_PThreadCondT(PThreadCondTPtr cond, PThreadMutexTPtr mutex, IntT predicate, PThreadPShared pshared);
void unregister_PThreadCondT(PThreadCondTPtr cond);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_cond_init_spec **/
specification
ErrorCode* pthread_cond_init_spec(CallContext context, VoidTPtr cond, PThreadCondAttrTPtr attr);

void onPThreadCondInit(VoidTPtr cond, PThreadCondAttrTPtr attr, ErrorCode* pthread_cond_init_spec);

/** pthread_cond_destroy_spec **/
specification
ErrorCode* pthread_cond_destroy_spec(CallContext context, PThreadCondTPtr cond);

void onPThreadCondDestroy(PThreadCondTPtr cond, ErrorCode* pthread_cond_destroy_spec);

/** pthread_cond_broadcast_spec **/
specification typedef
struct CondBroadcastCall
{
    CallContext      context;
    PThreadCondTPtr     cond;
} CondBroadcastCall;

CondBroadcastCall* create_CondBroadcastCall(CallContext context, PThreadCondTPtr cond);

specification
void pthread_cond_broadcast_spec(CallContext context, PThreadCondTPtr cond);

void onPThreadCondBroadcast(CallContext context, PThreadCondTPtr cond);

specification typedef
struct CondBroadcastReturnType
{
    CallContext context;
    ErrorCode*  errno;
} CondBroadcastReturnType;

CondBroadcastReturnType * create_CondBroadcastReturnType(
    CallContext context,
    ErrorCode*  errno
);

reaction 
CondBroadcastReturnType* pthread_cond_broadcast_return(void);

void onPThreadCondBroadcastReturn(CallContext context, ErrorCode* pthread_cond_broadcast_spec);

/** pthread_cond_signal_spec **/
specification typedef
struct CondSignalCall
{
    CallContext      context;
    PThreadCondTPtr     cond;
} CondSignalCall;

CondSignalCall* create_CondSignalCall(CallContext context, PThreadCondTPtr cond);

specification
void pthread_cond_signal_spec(CallContext context, PThreadCondTPtr cond);

void onPThreadCondSignal(CallContext context, PThreadCondTPtr cond);

specification typedef
struct CondSignalReturnType
{
    CallContext context;
    ErrorCode*  errno;
} CondSignalReturnType;

CondSignalReturnType * create_CondSignalReturnType(
    CallContext context,
    ErrorCode*  errno
);

reaction 
CondSignalReturnType* pthread_cond_signal_return(void);

void onPThreadCondSignalReturn(CallContext context, ErrorCode* pthread_cond_signal_spec);

/** pthread_cond_wait_spec **/
specification typedef
struct CondWaitCall
{
    CallContext      context;
    PThreadCondTPtr  cond;
    PThreadMutexTPtr mutex;
} CondWaitCall;

CondWaitCall* create_CondWaitCall(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex);

specification
void pthread_cond_wait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex);

void onPThreadCondWait(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex);

specification typedef
struct CondWaitReturnType
{
    CallContext context;
    ErrorCode*  errno;
} CondWaitReturnType;

CondWaitReturnType * create_CondWaitReturnType(
    CallContext context,
    ErrorCode*  errno
);

reaction 
CondWaitReturnType* pthread_cond_wait_return(void);

void onPThreadCondWaitReturn(CallContext context, ErrorCode* pthread_cond_wait_spec);

/** pthread_cond_timedwait_spec **/
specification typedef struct CondTimedWaitCall
{
    CallContext      context;
    PThreadCondTPtr  cond;
    PThreadMutexTPtr mutex;
    TimeInterval     t_stamp;
    TimeUnit         timeout;
} CondTimedWaitCall;

CondTimedWaitCall* create_CondTimedWaitCall(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, TimeInterval t_stamp, TimeUnit timeout);

specification
void pthread_cond_timedwait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, TimeUnit timeout);

specification
ErrorCode* pthread_cond_timedwait_bad_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, IntT nsec);

void onPThreadCondTimedWait(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, TimeInterval t_stamp, TimeUnit timeout);

specification typedef
struct CondTimedWaitReturnType
{
    CallContext context;
    ErrorCode*  errno;
} CondTimedWaitReturnType;

CondTimedWaitReturnType * create_CondTimedWaitReturnType(
    CallContext context,
    ErrorCode*  errno
);

reaction
CondTimedWaitReturnType* pthread_cond_timedwait_return(void);

void onPThreadCondTimedWaitReturn(CallContext context, ErrorCode* pthread_cond_timedwait_spec);


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

PThreadCondT* getCondVariable(PThreadCondTPtr cond);
PThreadCondT* findCondVariable(ObjectsInMemory* objects, PThreadCondTPtr cond);
ObjectsInMemory* getAllCondVariables(void);
bool isLocked_Cond(PThreadCondT* cond);


#endif

