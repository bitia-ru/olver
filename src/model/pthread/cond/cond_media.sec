/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/cond/cond_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                 Deferred Reactions Processors                  **/
/********************************************************************/
static void pthread_cond_broadcast_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);
    *code = readInt_TSStream(stream);
    
    registerReactionWithTimeInterval
        (
         getThreadChannelID(threadId),
         NULL,
         pthread_cond_broadcast_return,
         create_CondBroadcastReturnType( threadId, code),
         meta->timestamp
        );
}

static void pthread_cond_signal_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);
    *code = readInt_TSStream(stream);
    
    registerReactionWithTimeInterval
        (
         getThreadChannelID(threadId),
         NULL,
         pthread_cond_signal_return,
         create_CondSignalReturnType( threadId, code),
         meta->timestamp
        );
}

static void pthread_cond_wait_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);
    *code = readInt_TSStream(stream);
    
    registerReactionWithTimeInterval
        (
         getThreadChannelID(threadId),
         NULL,
         pthread_cond_wait_return,
         create_CondWaitReturnType( threadId, code),
         meta->timestamp
        );
}

static void pthread_cond_timedwait_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);
    *code = readInt_TSStream(stream);
    
    registerReactionWithTimeInterval
        (
         getThreadChannelID(threadId),
         NULL,
         pthread_cond_timedwait_return,
         create_CondTimedWaitReturnType( threadId, code),
         meta->timestamp
        );
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadCondSubsystem(void)
{
    // Set up mediators
    set_mediator_pthread_cond_init_spec(pthread_cond_init_media);
    set_mediator_pthread_cond_destroy_spec(pthread_cond_destroy_media);
    set_mediator_pthread_cond_broadcast_spec(pthread_cond_broadcast_media);
    set_mediator_pthread_cond_signal_spec(pthread_cond_signal_media);
    set_mediator_pthread_cond_wait_spec(pthread_cond_wait_media);
    set_mediator_pthread_cond_timedwait_spec(pthread_cond_timedwait_media);
    set_mediator_pthread_cond_timedwait_bad_spec(pthread_cond_timedwait_bad_media);

    set_mediator_pthread_cond_broadcast_return(pthread_cond_broadcast_return_media);
    set_mediator_pthread_cond_signal_return(pthread_cond_signal_return_media);
    set_mediator_pthread_cond_wait_return(pthread_cond_wait_return_media);
    set_mediator_pthread_cond_timedwait_return(pthread_cond_timedwait_return_media);

    // Set up dr processors
    registerDRProcessor("pthread_cond_broadcast_return", pthread_cond_broadcast_return_processor);
    registerDRProcessor("pthread_cond_signal_return", pthread_cond_signal_return_processor);
    registerDRProcessor("pthread_cond_wait_return", pthread_cond_wait_return_processor);
    registerDRProcessor("pthread_cond_timedwait_return", pthread_cond_timedwait_return_processor);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_cond_init_spec **/
mediator pthread_cond_init_media for specification
ErrorCode* pthread_cond_init_spec(CallContext context, VoidTPtr cond, PThreadCondAttrTPtr attr)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);
    
        format_TSCommand(&command, "pthread_cond_init:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(cond),
                                    create_VoidTPtrObj(attr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPThreadCondInit(cond, attr, pthread_cond_init_spec);
    }
}

/** pthread_cond_destroy_spec **/
mediator pthread_cond_destroy_media for specification
ErrorCode* pthread_cond_destroy_spec(CallContext context, PThreadCondTPtr cond)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);
    
        format_TSCommand(&command, "pthread_cond_destroy:$(ptr)",
                                    create_VoidTPtrObj(cond)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPThreadCondDestroy(cond, pthread_cond_destroy_spec);
    }
}

/** pthread_cond_broadcast_spec **/
mediator pthread_cond_broadcast_media for specification
void pthread_cond_broadcast_spec(CallContext context, PThreadCondTPtr cond)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_cond_broadcast:$(ptr)",
                                    create_VoidTPtrObj(cond)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadCondBroadcast(context, cond);
    }
}

mediator pthread_cond_broadcast_return_media for reaction 
CondBroadcastReturnType* pthread_cond_broadcast_return(void)
{
    state
    {
        onPThreadCondBroadcastReturn(pthread_cond_broadcast_return->context, pthread_cond_broadcast_return->errno);
    }
}

/** pthread_cond_signal_spec **/
mediator pthread_cond_signal_media for specification
void pthread_cond_signal_spec(CallContext context, PThreadCondTPtr cond)
{
    call
    {
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_cond_signal:$(ptr)",
                                    create_VoidTPtrObj(cond)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadCondSignal(context, cond);
    }
}

mediator pthread_cond_signal_return_media for reaction 
CondSignalReturnType* pthread_cond_signal_return(void)
{
    state
    {
        onPThreadCondSignalReturn(pthread_cond_signal_return->context, pthread_cond_signal_return->errno);
    }
}

/** pthread_cond_wait_spec **/
mediator pthread_cond_wait_media for specification
void pthread_cond_wait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_cond_wait:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(cond),
                                    create_VoidTPtrObj(mutex)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadCondWait(context, cond, mutex);
    }
}

mediator pthread_cond_wait_return_media for reaction 
CondWaitReturnType* pthread_cond_wait_return(void)
{
    state
    {
        onPThreadCondWaitReturn(pthread_cond_wait_return->context, pthread_cond_wait_return->errno);
    }
}

/** pthread_cond_timedwait_spec **/
mediator pthread_cond_timedwait_media for specification
void pthread_cond_timedwait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, TimeUnit timeout)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_cond_timedwait:$(ptr)$(ptr)$(timeunit)",
                                    create_VoidTPtrObj(cond),
                                    create_VoidTPtrObj(mutex),
                                    create_TimeUnitObj(timeout)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadCondTimedWait(context, cond, mutex, timestamp, timeout);
    }
}

mediator pthread_cond_timedwait_bad_media for specification
ErrorCode* pthread_cond_timedwait_bad_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, IntT nsec)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_cond_timedwait_bad:$(ptr)$(ptr)$(int)",
                                    create_VoidTPtrObj(cond),
                                    create_VoidTPtrObj(mutex),
                                    create_IntTObj(nsec)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
}

mediator pthread_cond_timedwait_return_media for reaction 
CondTimedWaitReturnType* pthread_cond_timedwait_return(void)
{
    state
    {
        onPThreadCondTimedWaitReturn(pthread_cond_timedwait_return->context, pthread_cond_timedwait_return->errno);
    }
}
