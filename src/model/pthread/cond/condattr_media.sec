/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/cond/condattr_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadCondCondattrSubsystem(void)
{
    // Set up mediators
    set_mediator_pthread_condattr_destroy_spec(pthread_condattr_destroy_media);
    set_mediator_pthread_condattr_getpshared_spec(pthread_condattr_getpshared_media);
    set_mediator_pthread_condattr_init_spec(pthread_condattr_init_media);
    set_mediator_pthread_condattr_setpshared_spec(pthread_condattr_setpshared_media);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_condattr_init_spec **/
mediator pthread_condattr_init_media for specification
ErrorCode* pthread_condattr_init_spec(CallContext context, VoidTPtr attr)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);

        format_TSCommand(&command, "pthread_condattr_init:$(ptr)",
                                    create_VoidTPtrObj(attr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadCondAttrInit(context, attr, pthread_condattr_init_spec);
    }
}

/** pthread_condattr_destroy_spec **/
mediator pthread_condattr_destroy_media for specification
ErrorCode* pthread_condattr_destroy_spec(CallContext context, PThreadCondAttrTPtr attr)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);

        format_TSCommand(&command, "pthread_condattr_destroy:$(ptr)",
                                    create_VoidTPtrObj(attr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadCondAttrDestroy(context, attr, pthread_condattr_destroy_spec);
    }
}

/** pthread_condattr_getpshared_spec **/
mediator pthread_condattr_getpshared_media for specification
ErrorCode* pthread_condattr_getpshared_spec(CallContext context, PThreadCondAttrTPtr attr, IntT* pshared)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);

        format_TSCommand(&command, "pthread_condattr_getpshared:$(ptr)",
                                    create_VoidTPtrObj(attr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
            *pshared = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
}

/** pthread_condattr_setpshared_spec **/
mediator pthread_condattr_setpshared_media for specification
ErrorCode* pthread_condattr_setpshared_spec(CallContext context, PThreadCondAttrTPtr attr, IntT pshared)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);

        format_TSCommand(&command, "pthread_condattr_setpshared:$(ptr)$(int)",
                                    create_VoidTPtrObj(attr),
                                    create_IntTObj(pshared)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadCondAttrSetPshared(context, attr, pshared, pthread_condattr_setpshared_spec);
    }
}



