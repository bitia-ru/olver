/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/cond/tests/condattr_scenario.seh"
#include "pthread/cond/condattr_model.seh"
#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"


/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

#define MAX_SIZE (32768)
#define sizeof_PThreadCondAttrT (4)

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

CallContext context;
VoidTPtr memory;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

static bool init_condattr_scenario(int argc, char** argv)
{
    context = getContext();

    memory = allocateMemoryBlock(context, MAX_SIZE);
    
    if (isNULL_VoidTPtr(memory))
    {
        return false;
    }

    return true;
}

static void finish_condattr_scenario(void)
{
    deallocateMemoryBlock(context, memory);
}

/********************************************************************/
/**                Test Scenarios Generalized States               **/
/********************************************************************/


/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

scenario
bool pthread_condattr_scen()
{
    int i, j;
    IntT pshared;

    /*
     * A destroyed attr attributes object can be reinitialized using 
     * pthread_condattr_init();
     */
    REQ("app.pthread.cond.condattr.01", "", TODO_REQ());

    /*
     * the results of otherwise referencing the object after it has been destroyed 
     * are undefined.
     */
    REQ("app.pthread.cond.condattr.02", "", TODO_REQ());

    /*
     * After a condition variable attributes object has been used to initialize one or 
     * more condition variables, any function affecting the attributes object ( 
     * including destruction) shall not affect any previously initialized condition 
     * variables.
     */
    REQ("pthread.cond.01", "", TODO_REQ());

    for (i=0; i<6; i++)
    {
        pthread_condattr_init_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i));
        pthread_condattr_getpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), &pshared);
    }

    pthread_condattr_init_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * 6));

    for (i=0; i<7; i+=2)
    {
        for (j=0; j<5; j++)
        {
            pthread_condattr_setpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), j);
            pthread_condattr_getpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), &pshared);
        }
    }

    for (i=0; i<7; i+=2)
    {
        pthread_condattr_setpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), SUT_PTHREAD_PROCESS_SHARED);
        pthread_condattr_setpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), SUT_PTHREAD_PROCESS_PRIVATE);
        pthread_condattr_getpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), &pshared);
    }

    for (i=0; i<7; i++)
    {
        pthread_condattr_getpshared_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i), &pshared);
    }

    for (i=0; i<7; i++)
    {
        pthread_condattr_destroy_spec(context, add_VoidTPtr(memory, sizeof_PThreadCondAttrT * i));
    }

    return true;
}

/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/
scenario dfsm condattr_scenario =
{
    .init = init_condattr_scenario,
    .finish = finish_condattr_scenario,
    .actions = {
        pthread_condattr_scen,
        NULL
    }
};

#ifdef PTHREAD_COND_CONDATTR_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "process/process/process_model.seh"
#include "pthread/pthread/pthread_media.seh"
#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/mutex/mutex_media.seh"
#include "pthread/cond/condattr_media.seh"

/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initPthreadCondCondattrSubsystem();
}


bool main_pthread_cond_condattr(int argc, char** argv)
{
    condattr_scenario(argc,argv);
    return true;
}


int main(int argc, char** argv)
{
    //
    initTestSystem();
    loadSUT();

    // Set up tracer
    //setTraceEncoding("windows-1251");

    // Run test scenario
    main_pthread_cond_condattr(argc,argv);

    //  unloadSUT();
    return 0;
}
#endif
