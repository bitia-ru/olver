/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "pthread/cond/condattr_config.h"
#include "pthread/cond/condattr_model.seh"
#include "config/pthread_config.seh"
#include "data/errno_model.seh"


#pragma SEC subsystem cond "pthread.cond"

/* 
   The group of functions 'pthread.cond.condattr' consists of: 
       pthread_condattr_init [2]
       pthread_condattr_destroy [2]
       pthread_condattr_getpshared [2]
       pthread_condattr_setpshared [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    pthread_condattr_destroy, pthread_condattr_init - destroy and initialize
    the condition variable attributes object

SYNOPSIS

    #include <pthread.h>

    int pthread_condattr_destroy(pthread_condattr_t *attr);
    int pthread_condattr_init(pthread_condattr_t *attr);

DESCRIPTION

    The pthread_condattr_destroy() function shall destroy a condition variable
    attributes object; the object becomes, in effect, uninitialized. An
    implementation may cause pthread_condattr_destroy() to set the object
    referenced by attr to an invalid value. A destroyed attr attributes object
    can be reinitialized using pthread_condattr_init(); the results of
    otherwise referencing the object after it has been destroyed are undefined.

    The pthread_condattr_init() function shall initialize a condition variable
    attributes object attr with the default value for all of the attributes
    defined by the implementation.

    Results are undefined if pthread_condattr_init() is called specifying an
    already initialized attr attributes object.

    After a condition variable attributes object has been used to initialize
    one or more condition variables, any function affecting the attributes
    object (including destruction) shall not affect any previously initialized
    condition variables.

    This volume of IEEE Std 1003.1-2001 requires two attributes, the clock
    attribute and the process-shared attribute.

    Additional attributes, their default values, and the names of the
    associated functions to get and set those attribute values are
    implementation-defined.

RETURN VALUE

    If successful, the pthread_condattr_destroy() and pthread_condattr_init()
    functions shall return zero; otherwise, an error number shall be returned
    to indicate the error.

ERRORS

    The pthread_condattr_destroy() function may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    The pthread_condattr_init() function shall fail if:

    [ENOMEM]
        Insufficient memory exists to initialize the condition variable
        attributes object.

    These functions shall not return an error code of [EINTR].

*/

specification
ErrorCode* pthread_condattr_init_spec(CallContext context, VoidTPtr attr)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "attr is not NULL", !isNULL_VoidTPtr(attr));

        /*
         * Results are undefined if pthread_condattr_init() is called specifying an 
         * already initialized attr attributes object.
         */
        REQ("app.pthread_condattr_init.02", "The attr object must be uninitialized.", getCondAttributes(attr) == NULL);

        return true;
    }
    coverage C
    {
        return {InitCondAttr, "Initialize a condition variable attributes object"};
    }
    post
    {
        PThreadCondAttrT* attrObj = getCondAttributes(attr);

        if (*pthread_condattr_init_spec != 0)
        {
            /* [On error no object is created.] */
            REQ("", "The object should not be initialized", attrObj == NULL);
        }
        else
        {
            /* [Else the object is created.] */
            REQ("", "Attributes object should be initialized", attrObj != NULL);
        }

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_CONDATTR_INIT, "pthread_condattr_init.04",
                    *pthread_condattr_init_spec != 0, *pthread_condattr_init_spec)
            /*
             * The pthread_condattr_init() function shall fail if:
             * 
             * [ENOMEM] 
             * 
             * Insufficient memory exists to initialize the condition variable attributes 
             * object. 
             */
            ERROR_SHALL(POSIX_PTHREAD_CONDATTR_INIT, ENOMEM, "pthread_condattr_init.05.01", TODO_ERR(ENOMEM))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_CONDATTR_INIT, EINTR, "pthread_condattr_init.06")

        ERROR_END()

        /*
         * The pthread_condattr_init() function shall initialize a condition variable 
         * attributes object attr with the default value for all of the attributes 
         * defined by the implementation.
         */
        REQ("pthread_condattr_init.01", "", TODO_REQ());

        /*
         * If successful, the pthread_condattr_destroy() and pthread_condattr_init() 
         * functions shall return zero;
         */
        REQ("pthread_condattr_init.03", "return value should be zero",
            *pthread_condattr_init_spec == 0
           );

        /* The default value of the attribute is PTHREAD_PROCESS_PRIVATE. */
        REQ("", "the default pshared value must be PTHREAD_PROCESS_PRIVATE.", attrObj->pshared == getDefaultCondPShared());

        return true;
    }
}

void onPThreadCondAttrInit(CallContext context, PThreadCondAttrTPtr attr, ErrorCode* res)
{
    if (*res == 0)
    {
        registerObjectInMemory(attr, 0, create_PThreadCondAttrT(attr, getDefaultCondPShared()));
    }
}

specification
ErrorCode* pthread_condattr_destroy_spec(CallContext context, PThreadCondAttrTPtr attr)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "attr is not NULL", !isNULL_VoidTPtr(attr));

        /* [The object must be previously initialized.] */
        REQ("", "the attr object must be initialized.", getCondAttributes(attr) != NULL);

        return true;
    }
    coverage C
    {
        return {DestroyCondAttr, "Destroy a condition variable attributes object"};
    }
    post
    {
        PThreadCondAttrT* attrObj = getCondAttributes(attr);

        if (*pthread_condattr_destroy_spec != 0)
        {

            /* [On error the object is not destroyed.] */
            REQ("", "The object should not be destroyed", attrObj != NULL);
        }
        else
        {
            /*
             * The pthread_condattr_destroy() function shall destroy a condition variable 
             * attributes object; the object becomes, in effect, uninitialized.
             */
            REQ("pthread_condattr_destroy.01", "Attributes object should be destroyed", attrObj == NULL);
        }

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_CONDATTR_DESTROY, "pthread_condattr_destroy.03",
                    *pthread_condattr_destroy_spec != 0, *pthread_condattr_destroy_spec)
            /*
             * The pthread_condattr_destroy() function may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY(POSIX_PTHREAD_CONDATTR_DESTROY, EINVAL, "pthread_condattr_destroy.04.01", TODO_ERR(EINVAL))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_CONDATTR_DESTROY, EINTR, "pthread_condattr_destroy.05")

        ERROR_END()

        /*
         * If successful, the pthread_condattr_destroy() and pthread_condattr_init() 
         * functions shall return zero;
         */
        REQ("pthread_condattr_destroy.02", "return value should be zero",
            *pthread_condattr_destroy_spec == 0
           );

        return true;
    }
}

void onPThreadCondAttrDestroy(CallContext context, PThreadCondAttrTPtr attr, ErrorCode* res)
{
    if (*res == 0)
    {
        unregisterObjectInMemory(attr);    
    }
}

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    pthread_condattr_getpshared, pthread_condattr_setpshared - get and set the
    process-shared condition variable attributes

SYNOPSIS

    #include <pthread.h>

    int pthread_condattr_getpshared(const pthread_condattr_t *restrict attr,
           int *restrict pshared);
    int pthread_condattr_setpshared(pthread_condattr_t *attr,
           int pshared);

DESCRIPTION

    The pthread_condattr_getpshared() function shall obtain the value of the
    process-shared attribute from the attributes object referenced by attr.
    The pthread_condattr_setpshared() function shall set the process-shared
    attribute in an initialized attributes object referenced by attr.

    The process-shared attribute is set to PTHREAD_PROCESS_SHARED to permit a
    condition variable to be operated upon by any thread that has access to the
    memory where the condition variable is allocated, even if the condition
    variable is allocated in memory that is shared by multiple processes. If
    the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the condition
    variable shall only be operated upon by threads created within the same
    process as the thread that initialized the condition variable; if threads
    of differing processes attempt to operate on such a condition variable, 
    the behavior is undefined. The default value of the attribute
    is PTHREAD_PROCESS_PRIVATE.

RETURN VALUE

    If successful, the pthread_condattr_setpshared() function shall return
    zero; otherwise, an error number shall be returned to indicate the error.

    If successful, the pthread_condattr_getpshared() function shall return zero
    and store the value of the process-shared attribute of attr into the object
    referenced by the pshared parameter. Otherwise, an error number shall be
    returned to indicate the error.

ERRORS

    The pthread_condattr_getpshared() and pthread_condattr_setpshared()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    The pthread_condattr_setpshared() function may fail if:

    [EINVAL]
        The new value specified for the attribute is outside the range of legal
        values for that attribute.

    These functions shall not return an error code of [EINTR].

*/

specification
ErrorCode* pthread_condattr_getpshared_spec(CallContext context, PThreadCondAttrTPtr attr, IntT* pshared)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "attr is not NULL", !isNULL_VoidTPtr(attr));

        /* [The object must be initialized.] */
        REQ("", "the object must be initialized.", getCondAttributes(attr) != NULL);

        return true;
    }
    coverage C
    {
        return {GetSharedValue, "Obtain the value of the process-shared attribute"};
    }
    post
    {
        PThreadCondAttrT* attrObj = getCondAttributes(attr);

        /* [The object must stay initialized.] */
        REQ("", "the object must stay initialized.", attrObj != NULL);

        /*
         * Otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_CONDATTR_GETPSHARED, "pthread_condattr_getpshared.06",
                    *pthread_condattr_getpshared_spec != 0, *pthread_condattr_getpshared_spec)
            /*
             * The pthread_condattr_getpshared() and pthread_condattr_setpshared() functions 
             * may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY(POSIX_PTHREAD_CONDATTR_GETPSHARED, EINVAL, "pthread_condattr_getpshared.07.01", TODO_ERR(EINVAL))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_CONDATTR_GETPSHARED, EINTR, "pthread_condattr_getpshared.08")

        ERROR_END()

        /*
         * The pthread_condattr_getpshared() function shall obtain the value of the 
         * process-shared attribute from the attributes object referenced by attr.
         */
        REQ("pthread_condattr_getpshared.01", "pshared should be valid.", attrObj->pshared == *pshared);

        /*
         * The process-shared attribute is set to PTHREAD_PROCESS_SHARED to permit a 
         * condition variable to be operated upon by any thread that has access to the 
         * memory where the condition variable is allocated, even if the condition 
         * variable is allocated in memory that is shared by multiple processes.
         */
        REQ("pthread_condattr_getpshared.02", "", TODO_REQ());

        /*
         * If the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the condition 
         * variable shall only be operated upon by threads created within the same process 
         * as the thread that initialized the condition variable; if threads of differing 
         * processes attempt to operate on such a condition variable, the behavior is 
         * undefined.
         */
        REQ("pthread_condattr_getpshared.03", "", TODO_REQ());

        /*
         * If successful, the pthread_condattr_getpshared() function shall return zero
         */
        REQ("pthread_condattr_getpshared.04", "return value should be zero",
            *pthread_condattr_getpshared_spec == 0
           );

        /*
         * and store the value of the process-shared attribute of attr into the 
         * object referenced by the pshared parameter.
         */
        REQ("pthread_condattr_getpshared.05", "", TODO_REQ());

        return true;
    }
}

specification
ErrorCode* pthread_condattr_setpshared_spec(CallContext context, PThreadCondAttrTPtr attr, IntT pshared)
{
    PThreadCondAttrT* state_pre;
    PThreadCondAttrT* state_post;

    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "attr is not NULL", !isNULL_VoidTPtr(attr));

        state_pre = clone(getCondAttributes(attr));

        /* [The object must be initialized.] */
        REQ("", "the object must be initialized.", state_pre != NULL);

        return true;
    }
    coverage C
    {
        if (pshared == SUT_PTHREAD_PROCESS_SHARED)
        {
            return {SharedAttr, "Shared attribute"};
        }
        else if (pshared == SUT_PTHREAD_PROCESS_PRIVATE)
        {
            return {PrivateAttr, "Private attribute"};
        }
        else
        {
            return {InvalidAttr, "Invalid attribute"};
        }
    }
    post
    {
        state_post = getCondAttributes(attr);

        /* [The object must stay initialized.] */
        REQ("", "the object must stay initialized.", state_post != NULL);

        if (*pthread_condattr_setpshared_spec != 0)
        {
            /* [The model state must not change.] */
            REQ("", "the model state must not change.", state_post->pshared == state_pre->pshared);
        }

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_CONDATTR_SETPSHARED, "pthread_condattr_setpshared.06",
                    *pthread_condattr_setpshared_spec != 0, *pthread_condattr_setpshared_spec)
            /*
             * The pthread_condattr_getpshared() and pthread_condattr_setpshared() functions 
             * may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY_EXT(POSIX_PTHREAD_CONDATTR_SETPSHARED, BAD_ATTR, EINVAL, "pthread_condattr_setpshared.07.01",
                          TODO_ERR(EINVAL))

            /*
             * The pthread_condattr_setpshared() function may fail if:
             * 
             * [EINVAL] 
             * 
             * The new value specified for the attribute is outside the range of legal values 
             * for that attribute. 
             */
            ERROR_MAY_EXT(POSIX_PTHREAD_CONDATTR_SETPSHARED, BAD_PSHARED, EINVAL, "pthread_condattr_setpshared.08.01",
                          (pshared != SUT_PTHREAD_PROCESS_SHARED) 
                          &&
                          (pshared != SUT_PTHREAD_PROCESS_PRIVATE)                          
                         )

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_CONDATTR_SETPSHARED, EINTR, "pthread_condattr_setpshared.09")

        ERROR_END()

        /*
         * The pthread_condattr_setpshared() function shall set the process-shared 
         * attribute in an initialized attributes object referenced by attr.
         */
        REQ("pthread_condattr_setpshared.01", "the new model state should be set.", state_post->pshared == pshared);

        /*
         * The process-shared attribute is set to PTHREAD_PROCESS_SHARED to permit a 
         * condition variable to be operated upon by any thread that has access to the 
         * memory where the condition variable is allocated, even if the condition 
         * variable is allocated in memory that is shared by multiple processes.
         */
        REQ("pthread_condattr_setpshared.02", "", TODO_REQ());

        /*
         * If the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the condition 
         * variable shall only be operated upon by threads created within the same process 
         * as the thread that initialized the condition variable; if threads of differing 
         * processes attempt to operate on such a condition variable, the behavior is 
         * undefined.
         */
        REQ("pthread_condattr_setpshared.03", "", TODO_REQ());

        /*
         * The default value of the attribute is PTHREAD_PROCESS_PRIVATE.
         */
        REQ("pthread_condattr_setpshared.04", "", TODO_REQ());

        /*
         * If successful, the pthread_condattr_setpshared() function shall return zero;
         */
        REQ("pthread_condattr_setpshared.05", "return value should be zero",
            *pthread_condattr_setpshared_spec == 0
           );

        return true;
    }
}

void onPThreadCondAttrSetPshared(CallContext context, PThreadCondAttrTPtr attr, IntT pshared, ErrorCode* res)
{
    if (*res == 0)
    {
        PThreadCondAttrT* tmp = getCondAttributes(attr);
        tmp->pshared = pshared;
    }
}

/********************************************************************/
/**                       PThreadCondAttrT Type                    **/
/********************************************************************/

specification typedef struct PThreadCondAttrT PThreadCondAttrT = {};

PThreadCondAttrT* create_PThreadCondAttrT(PThreadCondAttrTPtr address, PThreadPShared pshared)
{
    return create(&type_PThreadCondAttrT, address, pshared);
}

PThreadCondAttrT* getCondAttributes(PThreadCondAttrTPtr address)
{
    return getObjectInMemory(address);
}

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/
