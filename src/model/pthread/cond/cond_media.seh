/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_COND_MEDIA_SEH
#define PTHREAD_COND_MEDIA_SEH

#include "pthread/cond/cond_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadCondSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_cond_init_spec **/
mediator pthread_cond_init_media for specification
ErrorCode* pthread_cond_init_spec(CallContext context, VoidTPtr cond, PThreadCondAttrTPtr attr);

/** pthread_cond_destroy_spec **/
mediator pthread_cond_destroy_media for specification
ErrorCode* pthread_cond_destroy_spec(CallContext context, PThreadCondTPtr cond);

/** pthread_cond_broadcast_spec **/
mediator pthread_cond_broadcast_media for specification
void pthread_cond_broadcast_spec(CallContext context, PThreadCondTPtr cond);

mediator pthread_cond_broadcast_return_media for reaction 
CondBroadcastReturnType* pthread_cond_broadcast_return(void);

/** pthread_cond_signal_spec **/
mediator pthread_cond_signal_media for specification
void pthread_cond_signal_spec(CallContext context, PThreadCondTPtr cond);

mediator pthread_cond_signal_return_media for reaction 
CondSignalReturnType* pthread_cond_signal_return(void);

/** pthread_cond_wait_spec **/
mediator pthread_cond_wait_media for specification
void pthread_cond_wait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex);

mediator pthread_cond_wait_return_media for reaction 
CondWaitReturnType* pthread_cond_wait_return(void);

/** pthread_cond_timedwait_spec **/
mediator pthread_cond_timedwait_media for specification
void pthread_cond_timedwait_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, TimeUnit timeout);

mediator pthread_cond_timedwait_bad_media for specification
ErrorCode* pthread_cond_timedwait_bad_spec(CallContext context, PThreadCondTPtr cond, PThreadMutexTPtr mutex, IntT nsec);

mediator pthread_cond_timedwait_return_media for reaction 
CondTimedWaitReturnType* pthread_cond_timedwait_return(void);


#endif

