/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_SEM_MEDIA_SEH
#define PTHREAD_SEM_MEDIA_SEH

#include "pthread/sem/sem_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadSemSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** sem_close_spec **/
mediator sem_close_media for specification
IntT sem_close_spec( CallContext context, PThreadSemaphoreTPtr semaphore, ErrorCode* errno);

/** sem_destroy_spec **/
mediator sem_destroy_media for specification
IntT sem_destroy_spec( CallContext context, PThreadSemaphoreTPtr semaphore, ErrorCode* errno);

/** sem_getvalue_spec **/
mediator sem_getvalue_media for specification
IntT sem_getvalue_spec( CallContext context, PThreadSemaphoreTPtr semaphore, IntT* sval, ErrorCode* errno);

/** sem_init_spec **/
mediator sem_init_media for specification
IntT sem_init_spec( CallContext context, PThreadSemaphoreTPtr semaphore, IntT pshared, UIntT value, ErrorCode* errno);

/** sem_open_spec **/
mediator sem_open_media for specification
PThreadSemaphoreTPtr sem_open_spec( CallContext context, StringTPtr name,  OpenFlags oflag, FilePermissions* mode, UIntT value, ErrorCode* errno);

/** sem_post_spec **/
mediator sem_post_media for specification
IntT sem_post_spec( CallContext context, PThreadSemaphoreTPtr semaphore);

mediator pthread_sem_post_return_media for reaction 
SemaphoreLockReturnType* pthread_sem_post_return(void);

/** sem_timedwait_spec **/
mediator sem_timedwait_media for specification
void sem_timedwait_spec(CallContext context, PThreadSemaphoreTPtr semaphore, TimeUnit delta);

mediator sem_timedwait_return_media for reaction 
SemaphoreLockReturnType* sem_timedwait_return(void);

/** sem_trywait_spec **/
mediator sem_trywait_media for specification
IntT sem_trywait_spec( CallContext context, PThreadSemaphoreTPtr semaphore, ErrorCode* errno);

/** sem_unlink_spec **/
mediator sem_unlink_media for specification
IntT sem_unlink_spec( CallContext context, StringTPtr sem_name, ErrorCode* errno);

/** sem_wait_spec **/
mediator sem_wait_media for specification
IntT sem_wait_spec( CallContext context, PThreadSemaphoreTPtr semaphore);

/** pthread_sem_wait_return **/
mediator pthread_sem_wait_return_media for reaction
SemaphoreLockReturnType* pthread_sem_wait_return(void);

#endif

