/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_MEDIA_SEH
#define PTHREAD_MEDIA_SEH

#include "pthread/pthread/pthread_model.seh"


/********************************************************************/
/**                        Format Functions                        **/
/********************************************************************/
void writePShared_TSStream(TSStream* stream,IntTObj* value);
IntT readPShared_TSStream(TSStream* stream);


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadPthreadSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** __errno_location_spec **/
mediator __errno_location_media for specification
VoidTPtr __errno_location_spec(CallContext context);

/** _pthread_cleanup_pop_spec **/
mediator _pthread_cleanup_pop_media for specification
void _pthread_cleanup_pop_spec(CallContext context, IntT execute);


mediator _pthread_cleanup_pop_return_media for reaction
PThreadCleanupPopReturnType* _pthread_cleanup_pop_return(void);

mediator _pthread_cleanup_return_media for reaction
PThreadCleanupReturnType* _pthread_cleanup_return(void);
/** _pthread_cleanup_push_spec **/
mediator _pthread_cleanup_push_media for specification
void _pthread_cleanup_push_spec(CallContext context, VoidTPtr arg);

/** pthread_cancel_spec **/
mediator pthread_cancel_media for specification
IntT pthread_cancel_spec(CallContext context, ThreadId thread);

/** pthread_create_spec **/
mediator pthread_create_media for specification
IntT  pthread_create_spec(CallContext context, ThreadId* thread, 
                          PThreadAttrTPtr attr, VoidTPtr arg);

mediator pthread_started_event_media for  
reaction PThreadStartedEventType* pthread_started_event(void);

void onPThreadStartedEventReturn(CallContext context);


/** pthread_detach_spec **/
mediator pthread_detach_media for specification
IntT pthread_detach_spec(CallContext context, ThreadId thread);

/** pthread_equal_spec **/
mediator pthread_equal_media for specification
IntT pthread_equal_spec(CallContext context, ThreadId t1, ThreadId t2);

/** pthread_exit_spec **/
mediator pthread_exit_media for specification
void pthread_exit_spec(CallContext context, VoidTPtr value_ptr);

/** pthread_join_spec **/
mediator pthread_join_media for specification
void pthread_join_spec(CallContext context, ThreadId thread, 
                       VoidTPtr* value_ptr);

mediator pthread_join_return_media for 
reaction PThreadJoinReturnType* pthread_join_return(void);

/** pthread_once_spec **/
mediator pthread_once_media for specification
PThreadOnceInitReturnType* pthread_once_spec(CallContext context, 
                                             PThreadOnceTPtr once_control);

/** pthread_self_spec **/
mediator pthread_self_media for specification
ThreadId pthread_self_spec(CallContext context);

/** pthread_setcancelstate_spec **/
mediator pthread_setcancelstate_media for specification
SetCancelStateReturnType* pthread_setcancelstate_spec(CallContext context, 
                                                      IntT pstate);

/** pthread_setcanceltype_spec **/
mediator pthread_setcanceltype_media for specification
SetCancelTypeReturnType* pthread_setcanceltype_spec(CallContext context, 
                                                    IntT canceltype);

/** pthread_testcancel_spec **/
mediator pthread_testcancel_media for specification
void pthread_testcancel_spec(CallContext context, CancelStatus status);

mediator pthread_testcancel_return_media for
reaction PThreadTestCancelReturnType* pthread_testcancel_return(void);

/** pthread_finish_spec **/
mediator pthread_finish_media for specification
void pthread_finish_spec(CallContext context, VoidTPtr value_ptr);


#endif

