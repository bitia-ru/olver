/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "pthread/pthread/tests/pthread_scenario.seh"
#include "pthread/pthread/tests/pthread_main.seh"
#include "pthread/attr/attr_media.seh"


bool main_pthread_pthread(int argc, char** argv)
{
    set_assertion_exit_callback();
    pthread_pthread_cancelpoints_scenario(argc, argv);

    pthread_pthread_exit_join_scenario(argc, argv);

    pthread_pthread_create_cancel_scenario(argc, argv);
    pthread_pthread_cleanup_simple_scenario(argc, argv);
    pthread_pthread_cleanup_diff_scenario(argc, argv);

    return true;
}


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/

#ifdef PTHREAD_PTHREAD_LOCAL_MAIN

void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initProcessModel();
    initPThreadModel();

    initPthreadAttrSubsystem();
    initPthreadPthreadSubsystem();
}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    addTraceToFile("test.xml");
    // Set up tracer
    //setTraceEncoding("windows-1251");
    // Run test scenario
    main_pthread_pthread(argc, argv);
    //  unloadSUT();
    return 0;
}

#endif
