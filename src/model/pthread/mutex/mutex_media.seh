/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_MUTEX_MEDIA_SEH
#define PTHREAD_MUTEX_MEDIA_SEH

#include "pthread/mutex/mutex_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPThreadMutexSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_mutex_static_init_spec **/
mediator pthread_mutex_static_init_media for specification
void pthread_mutex_static_init_spec( CallContext context, VoidTPtr ptr );


/** pthread_mutex_init_spec **/
mediator pthread_mutex_init_media for specification
ErrorCode* pthread_mutex_init_spec( CallContext context, VoidTPtr mutex, PThreadMutexAttrTPtr attr );


/** pthread_mutex_destroy_spec **/
mediator pthread_mutex_destroy_media for specification
ErrorCode* pthread_mutex_destroy_spec( CallContext context, PThreadMutexTPtr mutex );


/** pthread_mutex_lock_spec **/
mediator pthread_mutex_lock_media for specification
void pthread_mutex_lock_spec( CallContext context, PThreadMutexTPtr mutex );

mediator pthread_mutex_lock_return_media for reaction 
MutexLockReturnType* pthread_mutex_lock_return(void);


/** pthread_mutex_trylock_spec **/
mediator pthread_mutex_trylock_media for specification
ErrorCode* pthread_mutex_trylock_spec( CallContext context, PThreadMutexTPtr mutex );


/** pthread_mutex_unlock_spec **/
mediator pthread_mutex_unlock_media for specification
void pthread_mutex_unlock_spec( CallContext context, PThreadMutexTPtr mutex );

mediator pthread_mutex_unlock_return_media for reaction
MutexUnlockReturnType* pthread_mutex_unlock_return(void);


/** pthread_mutex_getprioceiling_spec **/
mediator pthread_mutex_getprioceiling_media for specification
ErrorCode* pthread_mutex_getprioceiling_spec( CallContext context, PThreadMutexTPtr mutex, IntT* prioceiling);

/** pthread_mutex_setprioceiling_spec **/
mediator pthread_mutex_setprioceiling_media for specification
void pthread_mutex_setprioceiling_spec( CallContext context, PThreadMutexTPtr mutex, IntT new_prioceiling);

mediator pthread_mutex_setprioceiling_return_media for reaction
MutexSetPrioceilingReturnType* pthread_mutex_setprioceiling_return(void);
#endif
