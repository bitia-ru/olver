/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_MUTEX_MUTEXATTR_MODEL_SEH
#define PTHREAD_MUTEX_MUTEXATTR_MODEL_SEH

#include "common/common_model.seh"
#include "pthread/pthread/pthread_model.seh"


/********************************************************************/
/**                             Mutex Types                        **/
/********************************************************************/

/* 
 * This type represents pthread mutex type defined implicitly in
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libpthread', header file 'pthread.h'.
 */
typedef 
enum MutexType
{
    SUT_PTHREAD_MUTEX_NORMAL,
    SUT_PTHREAD_MUTEX_ERRORCHECK,
    SUT_PTHREAD_MUTEX_RECURSIVE,
    SUT_PTHREAD_MUTEX_DEFAULT
} MutexType;


/********************************************************************/
/**                        Mutex Attributes                        **/
/********************************************************************/
typedef VoidTPtr PThreadMutexAttrTPtr;

/* 
 * This type represents internal data of pthread_mutexattr_t
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libpthread', header file 'pthread.h'.
 */
specification typedef
struct PThreadMutexAttrT
{
    PThreadMutexAttrTPtr address;
    MutexType            type;
    PThreadPShared       pshared;
} PThreadMutexAttrT;

PThreadMutexAttrT * create_PThreadMutexAttrT(
    PThreadMutexAttrTPtr address,
    MutexType            type,
    PThreadPShared       pshared
);

PThreadMutexAttrT* defaultMutexAttributes(VoidTPtr address);
void registerPThreadMutexAttrT(PThreadMutexAttrTPtr pmutexattr);
void unregisterPThreadMutexAttrT(PThreadMutexAttrTPtr pmutexattr);

/********************************************************************/
/**                   Mutex Attributes Storage                     **/
/********************************************************************/
PThreadMutexAttrT* getMutexAttributes( PThreadMutexAttrTPtr address );
ObjectsInMemory* getAllMutexAttributes(void);


/********************************************************************/
/**                Mutex Attributes Interface Functions            **/
/********************************************************************/

/** pthread_mutexattr_init_spec **/
specification
ErrorCode* pthread_mutexattr_init_spec( CallContext context, VoidTPtr attr );

void onPThreadMutexAttrInit(VoidTPtr attr, ErrorCode* pthread_mutexattr_init_spec);


/** pthread_mutexattr_gettype_spec **/
specification
ErrorCode* pthread_mutexattr_gettype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* type );

void onPThreadMutexAttrGetType( CallContext context, 
                                PThreadMutexAttrTPtr attr, 
                                IntT* type,
                                ErrorCode* pthread_mutexattr_gettype_spec
                              );


/** pthread_mutexattr_settype_spec **/
specification
ErrorCode* pthread_mutexattr_settype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT type );

void onPThreadMutexAttrSetType(PThreadMutexAttrTPtr attr, IntT type, ErrorCode* pthread_mutexattr_settype_spec);


/** pthread_mutexattr_getpshared_spec **/
specification
ErrorCode* pthread_mutexattr_getpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* pshared );


/** pthread_mutexattr_setpshared_spec **/
specification
ErrorCode* pthread_mutexattr_setpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT pshared );

void onPThreadMutexAttrSetPShared(PThreadMutexAttrTPtr attr, IntT pshared, ErrorCode* pthread_mutexattr_setpshared_spec);

/** pthread_mutexattr_destroy_spec **/
specification
ErrorCode* pthread_mutexattr_destroy_spec( CallContext context, PThreadMutexAttrTPtr attr );

void onPThreadMutexAttrDestroy(PThreadMutexAttrTPtr attr, ErrorCode* pthread_mutexattr_destroy_spec);


#endif

