/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_MUTEX_MODEL_SEH
#define PTHREAD_MUTEX_MODEL_SEH

#include "atl/list.h"
#include "atl/map.h"
#include "pthread/mutex/mutexattr_model.seh"


/********************************************************************/
/**                             Mutex                              **/
/********************************************************************/
typedef VoidTPtr PThreadMutexTPtr;

/* 
 * This type represents internal data of pthread_mutex_t
 *   Linux Standard Base Core Specification 3.1
 *   Copyright (c) 2004, 2005 Free Standards Group
 *
 *   See section 'Data Definitions for libpthread', header file 'pthread.h'.
 */
specification typedef
struct Mutex
{
  PThreadMutexTPtr address;
  ThreadId         owner;
  int              lock_count;
  List*            wait_list;
  MutexType        type;
  PThreadPShared   pshared;
} Mutex;

Mutex* create_Mutex(PThreadMutexTPtr pmutex,MutexType type,PThreadPShared pshared);
void registerMutex(PThreadMutexTPtr pmutex,MutexType type,PThreadPShared pshared);
void unregisterMutex(PThreadMutexTPtr pmutex);


/********************************************************************/
/**                          Mutex Storage                         **/
/********************************************************************/
Mutex* getMutex(PThreadMutexTPtr pmutex);
Mutex* findMutex(ObjectsInMemory* objects,PThreadMutexTPtr pmutex);
ObjectsInMemory* getAllMutexes(void);
int getNumberOfMutexes(CallContext context);


/********************************************************************/
/**                Auxiliary Functions for Mutexes                 **/
/********************************************************************/
bool isLocked_Mutex(Mutex* mutex);
bool isOwner_Mutex(Mutex* mutex,CallContext context);

Mutex* isThreadBlockedByMutex(ObjectsInMemory* mutexes,ThreadId threadid);
bool isDeadlockToLockMutex(ThreadId threadid,PThreadMutexTPtr pmutex);
//List* getOwnedMutexes(Thread* thread);


/********************************************************************/
/**                    Mutex Interface Functions                   **/
/********************************************************************/

/** pthread_mutex_static_init_spec **/
specification
void pthread_mutex_static_init_spec( CallContext context, VoidTPtr ptr );

void onPThreadMutexStaticInit( VoidTPtr ptr );


/** pthread_mutex_init_spec **/
specification
ErrorCode* pthread_mutex_init_spec( CallContext context, VoidTPtr mutex, PThreadMutexAttrTPtr attr );

void onPThreadMutexInit( VoidTPtr mutex, PThreadMutexAttrTPtr attr, ErrorCode* pthread_mutex_init_spec );


/** pthread_mutex_destroy_spec **/
specification
ErrorCode* pthread_mutex_destroy_spec( CallContext context, PThreadMutexTPtr mutex );

void onPThreadMutexDestroy( PThreadMutexTPtr mutex, ErrorCode* pthread_mutex_destroy_spec );


/** pthread_mutex_lock_spec **/
specification typedef
struct MutexLockCall
{
  CallContext      context;
  PThreadMutexTPtr mutex;
} MutexLockCall;

MutexLockCall* create_MutexLockCall( CallContext context, PThreadMutexTPtr mutex );

specification
void pthread_mutex_lock_spec( CallContext context, PThreadMutexTPtr mutex );

void onPThreadMutexLock( CallContext context, PThreadMutexTPtr mutex );


specification typedef
struct MutexLockReturnType
{
  CallContext context;
  ErrorCode*  returned_value;
} MutexLockReturnType;

MutexLockReturnType * create_MutexLockReturnType(
  CallContext context,
  ErrorCode*  returned_value
);

reaction MutexLockReturnType* pthread_mutex_lock_return(void);

void onPThreadMutexLockReturn( CallContext context, ErrorCode* pthread_mutex_lock_spec );


/** pthread_mutex_trylock_spec **/
specification
ErrorCode* pthread_mutex_trylock_spec( CallContext context, PThreadMutexTPtr mutex );

void onPThreadMutexTrylock( CallContext context, PThreadMutexTPtr mutex, ErrorCode* pthread_mutex_trylock_spec );


/** pthread_mutex_unlock_spec **/
specification typedef
struct MutexUnlockCall
{
  CallContext      context;
  PThreadMutexTPtr mutex;
  Mutex*           pre_mutex; 
} MutexUnlockCall;


MutexUnlockCall* create_MutexUnlockCall( CallContext context, PThreadMutexTPtr mutex, Mutex *pre_mutex );

specification
void pthread_mutex_unlock_spec( CallContext context, PThreadMutexTPtr mutex );

void onPThreadMutexUnlock( CallContext context, PThreadMutexTPtr mutex );


specification typedef
struct MutexUnlockReturnType
{
  CallContext context;
  ErrorCode*  returned_value;
} MutexUnlockReturnType;

MutexUnlockReturnType * create_MutexUnlockReturnType(
  CallContext context,
  ErrorCode*  returned_value
);

reaction MutexUnlockReturnType* pthread_mutex_unlock_return(void);

void onPThreadMutexUnlockReturn( CallContext context, ErrorCode* pthread_mutex_unlock_spec );


#endif

