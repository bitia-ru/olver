/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */


#include "pthread/mutex/mutexattr_config.h"
#include "pthread/mutex/mutexattr_model.seh"
#include "config/pthread_config.seh"
#include "config/system_config.seh"
#include "data/errno_model.seh"
#include "atl/long.h"


#pragma SEC subsystem mutex "pthread.mutex"

/********************************************************************/
/**               Interface Functions                              **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_init - initialize the mutex attributes object

SYNOPSIS

    int pthread_mutexattr_init(pthread_mutexattr_t *attr);

DESCRIPTION

    The pthread_mutexattr_init() function shall initialize a mutex attributes
    object attr with the default value for all of the attributes defined
    by the implementation.

    Results are undefined if pthread_mutexattr_init() is called specifying
    an already initialized attr attributes object.

    After a mutex attributes object has been used to initialize one or more
    mutexes, any function affecting the attributes object (including
    destruction) shall not affect any previously initialized mutexes.

RETURN VALUE

    Upon successful completion, pthread_mutexattr_init() shall return zero;
    otherwise, an error number shall be returned to indicate the error.

ERRORS

    The pthread_mutexattr_init() function shall fail if:

    [ENOMEM]
        Insufficient memory exists to initialize the mutex attributes object.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_init_spec( CallContext context, VoidTPtr attr )
{
    pre
    {
        /* [Implicit precondition] */
        REQ("", "attr is not NULL", !isNULL_VoidTPtr(attr));

        /* [Consistency of test suite] */
        REQ("", "Memory pointed to by attr is available in the context", isValidPointer(context,attr));

        /* [Implicit precondition] */
        REQ("", "Memory pointed to by attr is enough", sizeWMemoryAvailable(attr) >= sizeof_Type(context,"pthread_mutexattr_t"));

        /*
         * Results are undefined if pthread_mutexattr_init() is called specifying an
         * already initialized attr attributes object.
         */
        REQ("app.pthread_mutexattr_init.02", "Memory pointed to by attr is free", getObjectInMemory(attr) == NULL);

        return true;
    }

    coverage C
    {
        return { Unique, "The only branch"};
    }

    post
    {
        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_INIT, "pthread_mutexattr_init.03.02",
                    *pthread_mutexattr_init_spec != 0, *pthread_mutexattr_init_spec)

            /*
             * The pthread_mutexattr_init() function shall fail if:
             *
             * [ENOMEM]
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_INIT, ENOMEM, "pthread_mutexattr_init.04.01", "Hard to check insufficient memory")

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_INIT, EINTR, "pthread_mutexattr_init.05")

        ERROR_END()

        {
            PThreadMutexAttrT* post_attr = getMutexAttributes(attr);

            /*
             * Upon successful completion, pthread_mutexattr_destroy() and
             * pthread_mutexattr_init() shall return zero;
             */
            REQ("pthread_mutexattr_init.03.01", "pthread_mutexattr_init() shall return zero", *pthread_mutexattr_init_spec == 0);

            /*
             * The pthread_mutexattr_init() function shall initialize a mutex attributes
             * object attr with the default value for all of the attributes defined by the
             * implementation.
             */
            REQ("?pthread_mutexattr_init.01", "'type' shall be initialized with the default value",
                post_attr->type == getDefaultMutexType());
            REQ("?pthread_mutexattr_init.01", "'pshared' shall be initialized with the default value",
                post_attr->pshared == getDefaultMutexPShared());

            return true;
        }
    }
}


void onPThreadMutexAttrInit(VoidTPtr attr,ErrorCode* pthread_mutexattr_init_spec)
{
    if (*pthread_mutexattr_init_spec == 0)
    {
        registerPThreadMutexAttrT(attr);
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_gettype - get the mutex type attribute

SYNOPSIS

    int pthread_mutexattr_gettype( const pthread_mutexattr_t *restrict attr,
                                   int *restrict type );

DESCRIPTION

    The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions,
    respectively, shall get and set the mutex type attribute.
    This attribute is set in the type parameter to these functions.
    The default value of the type attribute is PTHREAD_MUTEX_DEFAULT.

RETURN VALUE

    Upon successful completion, the pthread_mutexattr_gettype() function shall
    return zero and store the value of the type attribute of attr into
    the object referenced by the type parameter. Otherwise, an error shall be
    returned to indicate the error.

ERRORS

    The pthread_mutexattr_gettype() and pthread_mutexattr_settype()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_gettype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* type )
{
    PThreadMutexAttrT* pre_attr = clone(getMutexAttributes(attr));

    pre
    {
        /* [Consistency of test suite] */
        REQ("", "Memory block is not available in the context", isValidPointer(context,attr));

        /* [The value specified by attr is invalid. Behaviour is unspecified.] */
        /*
         * the results of otherwise referencing the object after it has been destroyed are
         * undefined.
         */
        REQ("app.pthread_mutexattr_destroy.03", "The value specified by attr is invalid", (pre_attr != NULL));

        /* [If type is a NULL pointer behavior is undefined] */
        REQ("", "The type parameter is NULL pointer", (type != NULL));

        return true;
    }

    coverage C
    {
        switch (pre_attr->type)
        {
            case SUT_PTHREAD_MUTEX_NORMAL :
                return { Normal, "PTHREAD_MUTEX_NORMAL"};
            case SUT_PTHREAD_MUTEX_ERRORCHECK :
                return { ErrorCheck, "PTHREAD_MUTEX_ERRORCHECK"};
            case SUT_PTHREAD_MUTEX_RECURSIVE :
                return { Recursive, "PTHREAD_MUTEX_RECURSIVE"};
            case SUT_PTHREAD_MUTEX_DEFAULT :
                return { Default, "PTHREAD_MUTEX_DEFAULT"};
        }
    }

    post
    {
        /*
         * Otherwise, an error shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_GETTYPE, "pthread_mutexattr_gettype.03.02",
                    *pthread_mutexattr_gettype_spec != 0, *pthread_mutexattr_gettype_spec)

            /*
             * The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions may
             * fail if:
             *
             * [EINVAL] The value specified by attr is invalid.
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_GETTYPE, EINVAL, "pthread_mutexattr_gettype.04.01",
                              "Valid and invalid values for mutex attr are not defined in the Standard")

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_GETTYPE, EINTR, "pthread_mutexattr_gettype.05")

        ERROR_END()

        /*
         * Upon successful completion, the pthread_mutexattr_gettype() function shall
         * return zero
         */
        REQ("pthread_mutexattr_gettype.03.01", "pthread_mutexattr_gettype() shall return zero", *pthread_mutexattr_gettype_spec == 0);

        /*
         * The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions,
         * respectively, shall get and set the mutex type attribute.
         *
         * and store the value of the type attribute of attr into the object referenced by
         * the type parameter.
         */
        REQ("pthread_mutexattr_gettype.01.01", "pthread_mutexattr_gettype() shall store the value of the 'type' attribute into *type",
             T(*type == pre_attr->type)
           ||
             (
                T(pre_attr->type == SUT_PTHREAD_MUTEX_DEFAULT)
              &&
                T(*type == getDefaultMutexTypeAlias(context))
             )
           );

        return true;
    }
}


void onPThreadMutexAttrGetType( CallContext context,
                                PThreadMutexAttrTPtr attr,
                                IntT* type,
                                ErrorCode* pthread_mutexattr_gettype_spec
                              )
{
    if (*pthread_mutexattr_gettype_spec == 0)
    {
        PThreadMutexAttrT* pre_attr = getMutexAttributes(attr);
        if (pre_attr->type == SUT_PTHREAD_MUTEX_DEFAULT)
        {
            setDefaultMutexTypeAlias(context,*type);
        }
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_settype - set the mutex type attribute

SYNOPSIS

    int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);

DESCRIPTION

    The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions,
    respectively, shall get and set the mutex type attribute.
    This attribute is set in the type parameter to these functions.
    The default value of the type attribute is PTHREAD_MUTEX_DEFAULT.

RETURN VALUE

    If successful, the pthread_mutexattr_settype() function shall return zero;
    otherwise, an error number shall be returned to indicate the error.

ERRORS

    The pthread_mutexattr_settype() function shall fail if:

    [EINVAL]
        The value type is invalid.

    The pthread_mutexattr_gettype() and pthread_mutexattr_settype()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_settype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT type )
{
    PThreadMutexAttrT* pre_attr = clone(getMutexAttributes(attr));

    pre
    {
        /* [Consistency of test suite] */
        REQ("", "Memory block is not available in the context", isValidPointer(context,attr));

        /* [The value specified by attr is invalid. Behaviour is unspecified.] */
        /*
         * the results of otherwise referencing the object after it has been destroyed are
         * undefined.
         */
        REQ("app.pthread_mutexattr_destroy.03", "The value specified by attr is invalid", (pre_attr != NULL));

        return true;
    }

    coverage C
    {
        switch (type)
        {
            case SUT_PTHREAD_MUTEX_NORMAL :
                if (pre_attr->type == type)
                    return { SaveNormal, "Save PTHREAD_MUTEX_NORMAL"};
                else
                    return { SetNormal, "Set PTHREAD_MUTEX_NORMAL"};
            case SUT_PTHREAD_MUTEX_ERRORCHECK :
                if (pre_attr->type == type)
                    return { SaveErrorCheck, "Save PTHREAD_MUTEX_ERRORCHECK"};
                else
                    return { SetErrorCheck, "Set PTHREAD_MUTEX_ERRORCHECK"};
            case SUT_PTHREAD_MUTEX_RECURSIVE :
                if (pre_attr->type == type)
                    return { SaveRecursive, "Save PTHREAD_MUTEX_RECURSIVE"};
                else
                    return { SetRecursive, "Set PTHREAD_MUTEX_RECURSIVE"};
            case SUT_PTHREAD_MUTEX_DEFAULT :
                if (pre_attr->type == type)
                    return { SaveDefault, "Save PTHREAD_MUTEX_DEFAULT"};
                else
                    return { SetDefault, "Set PTHREAD_MUTEX_DEFAULT"};
            default :
                return { InvalidType, "Invalid value of type"};
        }
    }

    post
    {
        PThreadMutexAttrT* post_attr = getMutexAttributes(attr);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_SETTYPE, "pthread_mutexattr_settype.03.02",
                    *pthread_mutexattr_settype_spec != 0, *pthread_mutexattr_settype_spec)

            /*
             * The pthread_mutexattr_settype() function shall fail if:
             *
             * [EINVAL] The value type is invalid.
             */
#ifdef NewCTesK
            ERROR_SHALL(POSIX_PTHREAD_MUTEXATTR_SETTYPE, EINVAL, "pthread_mutexattr_settype.04.01", C == C.InvalidType )
#else
            ERROR_SHALL(POSIX_PTHREAD_MUTEXATTR_SETTYPE, EINVAL, "pthread_mutexattr_settype.04.01", coverage(C) == InvalidType )
#endif

            /*
             * The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions may
             * fail if:
             *
             * [EINVAL] The value specified by attr is invalid.
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_SETTYPE, EINVAL, "pthread_mutexattr_settype.05.01",
                              "Valid and invalid values for mutex attr are not defined in the Standard")

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_SETTYPE, EINTR, "pthread_mutexattr_settype.06")

        ERROR_END()

        /*
         * If successful, the pthread_mutexattr_settype() function shall return zero;
         */
        REQ("pthread_mutexattr_settype.03.01", "pthread_mutexattr_settype() shall return zero",
            *pthread_mutexattr_settype_spec == 0);

        /*
         * The pthread_mutexattr_gettype() and pthread_mutexattr_settype() functions,
         * respectively, shall get and set the mutex type attribute.
         *
         * This attribute is set in the type parameter to these functions.
         */
        REQ("?pthread_mutexattr_settype.01.01", "The pthread_mutexattr_settype() shall set the mutex type attribute.",
            (post_attr->type == type));

        return true;
    }
}


void onPThreadMutexAttrSetType(PThreadMutexAttrTPtr attr, IntT type, ErrorCode* pthread_mutexattr_settype_spec)
{
    if (*pthread_mutexattr_settype_spec == 0)
    {
        PThreadMutexAttrT* pre_attr = getMutexAttributes(attr);
        switch (type)
        {
            case SUT_PTHREAD_MUTEX_NORMAL :
            case SUT_PTHREAD_MUTEX_ERRORCHECK :
            case SUT_PTHREAD_MUTEX_RECURSIVE :
            case SUT_PTHREAD_MUTEX_DEFAULT :
                pre_attr->type = type;
        }
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_getpshared - get the process-shared attribute

SYNOPSIS

    int pthread_mutexattr_getpshared( const pthread_mutexattr_t *
                                      restrict attr, int *restrict pshared );

DESCRIPTION

    The pthread_mutexattr_getpshared() function shall obtain the value of
    the process-shared attribute from the attributes object referenced by attr.
    The pthread_mutexattr_setpshared() function shall set the process-shared
    attribute in an initialized attributes object referenced by attr.

    The process-shared attribute is set to PTHREAD_PROCESS_SHARED to permit
    a mutex to be operated upon by any thread that has access to the memory
    where the mutex is allocated, even if the mutex is allocated in memory
    that is shared by multiple processes. If the process-shared attribute is
    PTHREAD_PROCESS_PRIVATE, the mutex shall only be operated upon by threads
    created within the same process as the thread that initialized the mutex;
    if threads of differing processes attempt to operate on such a mutex,
    the behavior is undefined. The default value of the attribute shall be
    PTHREAD_PROCESS_PRIVATE.

RETURN VALUE

    Upon successful completion, pthread_mutexattr_getpshared() shall return zero
    and store the value of the process-shared attribute of attr into the object
    referenced by the pshared parameter. Otherwise, an error number shall be
    returned to indicate the error.

ERRORS

    The pthread_mutexattr_getpshared() and pthread_mutexattr_setpshared()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_getpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* pshared )
{
    PThreadMutexAttrT* pre_attr = clone(getMutexAttributes(attr));

    pre
    {
        /* [Consistency of test suite] */
        REQ("", "Memory block is not available in the context", isValidPointer(context,attr));

        /* [The value specified by attr is invalid. Behaviour is unspecified.] */
        /*
         * the results of otherwise referencing the object after it has been destroyed are
         * undefined.
         */
        REQ("app.pthread_mutexattr_destroy.03", "The value specified by attr is invalid", (pre_attr != NULL));

        /* [If pshared is a NULL pointer behavior is undefined] */
        REQ("", "The pshared parameter is NULL pointer", (pshared != NULL));

        return true;
    }

    coverage C
    {
        switch (pre_attr->pshared)
        {
            case SUT_PTHREAD_PROCESS_SHARED :
                return { Shared, "PTHREAD_PROCESS_SHARED"};
            case SUT_PTHREAD_PROCESS_PRIVATE :
                return { Private, "PTHREAD_PROCESS_PRIVATE"};
        }
    }

    post
    {
        /*
         * Otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_GETPSHARED, "pthread_mutexattr_getpshared.02.02",
                    *pthread_mutexattr_getpshared_spec != 0, *pthread_mutexattr_getpshared_spec)

            /*
             * The pthread_mutexattr_getpshared() and pthread_mutexattr_setpshared() functions
             * may fail if:
             *
             * [EINVAL] The value specified by attr is invalid.
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_GETPSHARED, EINVAL, "pthread_mutexattr_getpshared.03.01",
                              "Valid and invalid values for mutex attr are not defined in the Standard")

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_GETPSHARED, EINTR, "pthread_mutexattr_getpshared.04")

        ERROR_END()

        /*
         * Upon successful completion, pthread_mutexattr_getpshared() shall return zero
         * and store the value of the process-shared attribute of attr into the object
         * referenced by the pshared parameter.
         */
        REQ("pthread_mutexattr_getpshared.02.01", "pthread_mutexattr_getpshared() shall return zero",
            *pthread_mutexattr_getpshared_spec == 0);
        /*
         * The pthread_mutexattr_getpshared() function shall obtain the value of the
         * process-shared attribute from the attributes object referenced by attr.
         */
        REQ("pthread_mutexattr_getpshared.01;pthread_mutexattr_getpshared.02.01", "pthread_mutexattr_getpshared() shall store the value of the 'pshared' attribute into *pshared",
             (*pshared == pre_attr->pshared)
           );

        return true;
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_setpshared - set the process-shared attribute

SYNOPSIS

    int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);

DESCRIPTION

    The pthread_mutexattr_getpshared() function shall obtain the value of
    the process-shared attribute from the attributes object referenced by attr.
    The pthread_mutexattr_setpshared() function shall set the process-shared
    attribute in an initialized attributes object referenced by attr.

    The process-shared attribute is set to PTHREAD_PROCESS_SHARED to permit
    a mutex to be operated upon by any thread that has access to the memory
    where the mutex is allocated, even if the mutex is allocated in memory
    that is shared by multiple processes. If the process-shared attribute is
    PTHREAD_PROCESS_PRIVATE, the mutex shall only be operated upon by threads
    created within the same process as the thread that initialized the mutex;
    if threads of differing processes attempt to operate on such a mutex,
    the behavior is undefined. The default value of the attribute shall be
    PTHREAD_PROCESS_PRIVATE.

RETURN VALUE

    Upon successful completion, pthread_mutexattr_setpshared() shall return
    zero; otherwise, an error number shall be returned to indicate the error.

ERRORS

    The pthread_mutexattr_setpshared() function may fail if:

    [EINVAL]
        The new value specified for the attribute is outside the range
        of legal values for that attribute.

    The pthread_mutexattr_getpshared() and pthread_mutexattr_setpshared()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_setpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT pshared )
{
PThreadMutexAttrT* pre_attr = clone(getMutexAttributes(attr));

    pre
    {
        /* [Consistency of test suite] */
        REQ("", "Memory block is not available in the context", isValidPointer(context,attr));

        /* [The value specified by attr is invalid. Behaviour is unspecified.] */
        /*
         * the results of otherwise referencing the object after it has been destroyed are
         * undefined.
         */
        REQ("app.pthread_mutexattr_destroy.03", "The value specified by attr is invalid", (pre_attr != NULL) );

        return true;
    }

    coverage C
    {
        switch (pshared)
        {
            case SUT_PTHREAD_PROCESS_SHARED :
                if (pre_attr->pshared == pshared)
                    return { SaveShared, "Save PTHREAD_PROCESS_SHARED"};
                else
                    return { SetShared, "Set PTHREAD_PROCESS_SHARED"};
            case SUT_PTHREAD_PROCESS_PRIVATE :
                if (pre_attr->pshared == pshared)
                    return { SavePrivate, "Save PTHREAD_PROCESS_PRIVATE"};
                else
                    return { SetPrivate, "Set PTHREAD_PROCESS_PRIVATE"};
            default :
                return { InvalidType, "Invalid value of pshared"};
        }
    }

    post
    {
        PThreadMutexAttrT* post_attr = getMutexAttributes(attr);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_SETPSHARED, "pthread_mutexattr_setpshared.02.02",
                    *pthread_mutexattr_setpshared_spec != 0, *pthread_mutexattr_setpshared_spec)

            /*
             * The pthread_mutexattr_setpshared() function may fail if
             *
             * [EINVAL] The value specified by attr is invalid.
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_SETPSHARED, EINVAL, "pthread_mutexattr_setpshared.03.01",
                              "Valid and invalid values for mutex attr are not defined in the Standard")

            /*
             * The pthread_mutexattr_setpshared() function may fail if
             *
             * [EINVAL] The new value specified for the attribute is outside the range of
             * legal values for that attribute.
             */
#ifdef NewCTesK
            ERROR_MAY(POSIX_PTHREAD_MUTEXATTR_SETPSHARED, EINVAL, "pthread_mutexattr_setpshared.03.02", (C == C.InvalidType))
#else
            ERROR_MAY(POSIX_PTHREAD_MUTEXATTR_SETPSHARED, EINVAL, "pthread_mutexattr_setpshared.03.02", (coverage(C) == InvalidType))
#endif

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_SETPSHARED, EINTR, "pthread_mutexattr_setpshared.04")

        ERROR_END()

        /*
         * Upon successful completion, pthread_mutexattr_setpshared() shall return zero;
         */
        REQ("pthread_mutexattr_setpshared.02.01", "pthread_mutexattr_setpshared() shall return zero",
            *pthread_mutexattr_setpshared_spec == 0);

        /*
         * The pthread_mutexattr_setpshared() function shall set the process-shared
         * attribute in an initialized attributes object referenced by attr.
         */
        REQ("?pthread_mutexattr_setpshared.01", "pthread_mutexattr_setpshared() shall set the mutex 'pshared' attribute",
            (post_attr->pshared == pshared)
           );

        return true;
    }
}


void onPThreadMutexAttrSetPShared(PThreadMutexAttrTPtr attr, IntT pshared, ErrorCode* pthread_mutexattr_setpshared_spec)
{
    if (*pthread_mutexattr_setpshared_spec == 0)
    {
        PThreadMutexAttrT* pre_attr = getMutexAttributes(attr);
        switch (pshared)
        {
            case SUT_PTHREAD_PROCESS_SHARED :
            case SUT_PTHREAD_PROCESS_PRIVATE :
                pre_attr->pshared = pshared;
        }
    }
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved

NAME

    pthread_mutexattr_destroy - destroy the mutex attributes object

SYNOPSIS

    int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);

DESCRIPTION

    The pthread_mutexattr_destroy() function shall destroy a mutex attributes
    object; the object becomes, in effect, uninitialized. An implementation
    may cause pthread_mutexattr_destroy() to set the object referenced by attr
    to an invalid value. A destroyed attr attributes object can be
    reinitialized using pthread_mutexattr_init(); the results of otherwise
    referencing the object after it has been destroyed are undefined.

RETURN VALUE

    Upon successful completion, pthread_mutexattr_destroy() shall return zero;
    otherwise, an error number shall be returned to indicate the error.

ERRORS

    The pthread_mutexattr_destroy() function may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    These functions shall not return an error code of [EINTR].

*/
specification
ErrorCode* pthread_mutexattr_destroy_spec( CallContext context, PThreadMutexAttrTPtr attr )
{
    PThreadMutexAttrT* pre_attr = clone(getMutexAttributes(attr));

    pre
    {
        /* [Consistency of test suite] */
        REQ("", "Memory block is not available in the context", isValidPointer(context,attr));

        /* [The value specified by attr is invalid. Behaviour is unspecified.] */
        /*
         * the results of otherwise referencing the object after it has been destroyed are
         * undefined.
         */
        REQ("app.pthread_mutexattr_destroy.03", "The value specified by attr is invalid", (pre_attr != NULL) );

        return true;
    }

    coverage C
    {
        return { Unique, "The only branch"};
    }

    post
    {
        PThreadMutexAttrT* post_attr = getMutexAttributes(attr);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_MUTEXATTR_DESTROY, "pthread_mutexattr_destroy.04.02",
                    *pthread_mutexattr_destroy_spec != 0, *pthread_mutexattr_destroy_spec)

            /*
             * The pthread_mutexattr_destroy() function may fail if:
             *
             * [EINVAL] The value specified by attr is invalid.
             */
            ERROR_UNCHECKABLE(POSIX_PTHREAD_MUTEXATTR_DESTROY, EINVAL, "pthread_mutexattr_destroy.05.01",
                              "Valid and invalid values for mutex attr are not defined in the Standard")

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_MUTEXATTR_DESTROY, EINTR, "pthread_mutexattr_destroy.06")

        ERROR_END()

        /*
         * Upon successful completion, pthread_mutexattr_destroy() and
         * pthread_mutexattr_init() shall return zero;
         */
        REQ("pthread_mutexattr_destroy.04.01", "pthread_mutexattr_destroy() shall return zero",
            *pthread_mutexattr_destroy_spec == 0);

        /*
         * The pthread_mutexattr_destroy() function shall destroy a mutex attributes
         * object; the object becomes, in effect, uninitialized.
         */
        REQ("?pthread_mutexattr_destroy.01", "pthread_mutexattr_destroy() shall destroy a mutex attributes object",
            post_attr == NULL);


        return true;
    }
}


void onPThreadMutexAttrDestroy(PThreadMutexAttrTPtr attr, ErrorCode* pthread_mutexattr_destroy_spec)
{
    if (*pthread_mutexattr_destroy_spec == 0)
    {
        unregisterPThreadMutexAttrT(attr);
    }
}

/********************************************************************/
/**                        Mutex Types                             **/
/********************************************************************/
specification typedef struct PThreadMutexAttrT PThreadMutexAttrT = {};

PThreadMutexAttrT * create_PThreadMutexAttrT(
    PThreadMutexAttrTPtr address,
    MutexType            type,
    PThreadPShared       pshared
)
{
    return create(&type_PThreadMutexAttrT, address, type, pshared);
}


PThreadMutexAttrT* defaultMutexAttributes(VoidTPtr address)
{
    return create_PThreadMutexAttrT( address, getDefaultMutexType(), getDefaultMutexPShared() );
}

void registerPThreadMutexAttrT(PThreadMutexAttrTPtr pmutexattr)
{
    registerObjectInMemory(
          pmutexattr,
          sizeof_SUTType("pthread_mutexattr_t"),
          defaultMutexAttributes( pmutexattr )
                        );
}

void unregisterPThreadMutexAttrT(PThreadMutexAttrTPtr pmutexattr)
{
    unregisterObjectInMemory(pmutexattr);
}


/********************************************************************/
/**                   Mutex Attributes Storage                     **/
/********************************************************************/
PThreadMutexAttrT* getMutexAttributes( PThreadMutexAttrTPtr address )
{
    return getObjectInMemory(address);
}

ObjectsInMemory* getAllMutexAttributes(void)
{
    return getAllTypedObjectsInMemory(&type_PThreadMutexAttrT);
}

