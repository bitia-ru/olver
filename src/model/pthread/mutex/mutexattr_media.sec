/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/mutex/mutexattr_media.seh"
#include "pthread/pthread/pthread_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                        Format Functions                        **/
/********************************************************************/

/* MutexType */
void writeMutexType_TSStream( TSStream* stream, IntTObj* value )
{
    writeTypeHeaderTSStream(stream,"mutype");
    switch (*value)
    {
        case SUT_PTHREAD_MUTEX_NORMAL :
            writeStringLiteral_TSStream( stream, "PTHREAD_MUTEX_NORMAL" );
            return ;
        case SUT_PTHREAD_MUTEX_ERRORCHECK :
            writeStringLiteral_TSStream( stream, "PTHREAD_MUTEX_ERRORCHECK" );
            return ;
        case SUT_PTHREAD_MUTEX_RECURSIVE :
            writeStringLiteral_TSStream( stream, "PTHREAD_MUTEX_RECURSIVE" );
            return ;
        case SUT_PTHREAD_MUTEX_DEFAULT :
            writeStringLiteral_TSStream( stream, "PTHREAD_MUTEX_DEFAULT" );
            return ;
        default :
            writeInt_TSStream( stream, *value );
    }
}

static void mutex_type_formatter(TSStream* stream,IntTObj* value)
{
    VERIFY_TYPE( mutex_type_formatter, &type_IntTObj, value );

    writeMutexType_TSStream( stream, value );
}

IntT readMutexType_TSStream(TSStream* stream)
{
    IntT res;

    verifyType_TSStream(stream,"mutype");
    if (startsWith_TSStream(stream,"str"))
    {
        CString* value = readCString_TSStream(stream);
        if (equals(value,create_CString("PTHREAD_MUTEX_NORMAL")))
            return SUT_PTHREAD_MUTEX_NORMAL;
        else if (equals(value,create_CString("PTHREAD_MUTEX_ERRORCHECK")))
            return SUT_PTHREAD_MUTEX_ERRORCHECK;
        else if (equals(value,create_CString("PTHREAD_MUTEX_RECURSIVE")))
            return SUT_PTHREAD_MUTEX_RECURSIVE;
        else if (equals(value,create_CString("PTHREAD_MUTEX_DEFAULT")))
            return SUT_PTHREAD_MUTEX_DEFAULT;
        setBadVerdict("Invalid value of MutexType");
    }
    res = readInt_TSStream(stream);
    switch (res)
    {
        case SUT_PTHREAD_MUTEX_NORMAL :
        case SUT_PTHREAD_MUTEX_ERRORCHECK :
        case SUT_PTHREAD_MUTEX_RECURSIVE :
        case SUT_PTHREAD_MUTEX_DEFAULT :
            res = -11;
            break;
    }
    return res;
}


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPThreadMutexMutexattrSubsystem(void)
{
    // Set up mediators
    set_mediator_pthread_mutexattr_init_spec(pthread_mutexattr_init_media);
    set_mediator_pthread_mutexattr_getpshared_spec(pthread_mutexattr_getpshared_media);
    set_mediator_pthread_mutexattr_gettype_spec(pthread_mutexattr_gettype_media);
    set_mediator_pthread_mutexattr_setpshared_spec(pthread_mutexattr_setpshared_media);
    set_mediator_pthread_mutexattr_settype_spec(pthread_mutexattr_settype_media);
    set_mediator_pthread_mutexattr_destroy_spec(pthread_mutexattr_destroy_media);
    // Set up formatters
    registerTSFormatter("mutype",(TSFormatterFuncType)mutex_type_formatter);
}


/********************************************************************/
/**                Mutex Attributes Interface Functions            **/
/********************************************************************/

/** pthread_mutexattr_init_spec **/
mediator pthread_mutexattr_init_media for specification
ErrorCode* pthread_mutexattr_init_spec( CallContext context, VoidTPtr attr )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_init:$(ptr)", create_VoidTPtrObj(attr) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadMutexAttrInit( attr, pthread_mutexattr_init_spec );
    }
}


/** pthread_mutexattr_gettype_spec **/
mediator pthread_mutexattr_gettype_media for specification
ErrorCode* pthread_mutexattr_gettype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* type )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_gettype:$(ptr)$(int)", 
                                        create_VoidTPtrObj(attr),
                                        create_IntTObj(type != NULL)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
            if (type != NULL)
             {
              *type = readMutexType_TSStream( &command.response );
             }
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadMutexAttrGetType( context, attr, type, pthread_mutexattr_gettype_spec );
    }
}


/** pthread_mutexattr_settype_spec **/
mediator pthread_mutexattr_settype_media for specification
ErrorCode* pthread_mutexattr_settype_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT type )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_settype:$(ptr)$(mutype)", 
                                        create_VoidTPtrObj(attr),
                                        create_IntTObj(type)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadMutexAttrSetType( attr, type, pthread_mutexattr_settype_spec );
    }
}


/** pthread_mutexattr_getpshared_spec **/
mediator pthread_mutexattr_getpshared_media for specification
ErrorCode* pthread_mutexattr_getpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT* pshared )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_getpshared:$(ptr)$(int)", 
                                        create_VoidTPtrObj(attr),
                                        create_IntTObj(pshared != NULL)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
            if (pshared != NULL)
             {
              *pshared = readPShared_TSStream( &command.response );
             }
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
    }
}


/** pthread_mutexattr_setpshared_spec **/
mediator pthread_mutexattr_setpshared_media for specification
ErrorCode* pthread_mutexattr_setpshared_spec( CallContext context, PThreadMutexAttrTPtr attr, IntT pshared )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_setpshared:$(ptr)$(pshared)", 
                                        create_VoidTPtrObj(attr),
                                        create_IntTObj(pshared)
                        );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadMutexAttrSetPShared( attr, pshared, pthread_mutexattr_setpshared_spec );
    }
}


/** pthread_mutexattr_destroy_spec **/
mediator pthread_mutexattr_destroy_media for specification
ErrorCode* pthread_mutexattr_destroy_spec( CallContext context, PThreadMutexAttrTPtr attr )
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand( &command, "pthread_mutexattr_destroy:$(ptr)", create_VoidTPtrObj(attr) );
        executeCommandInContext( context, &command );
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream( &command.response );
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadMutexAttrDestroy( attr, pthread_mutexattr_destroy_spec );
    }
}

