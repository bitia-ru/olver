/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_SCHEDULER_MODEL_SEH
#define PTHREAD_SCHEDULER_MODEL_SEH

#include "common/common_model.seh"
#include "data/sched_model.seh"
#include "pthread/pthread/pthread_model.seh"

/********************************************************************/
/**                          Errno Config                          **/
/********************************************************************/


/*
 * POSIX_PTHREAD_GETSCHEDPARAM
 */
/*
* If this constant is set to 1, then current implementation of undefined() 
* may support additional errors not included in the list described in the
* IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_GETSCHEDPARAM_HAS_EXTRA_ERROR_CODES 0

/*
* If this constant is set to 1, the function getschedparam() ensures
* that the error ESRCH will be found and correctly handled.
*/
#define POSIX_PTHREAD_GETSCHEDPARAM_FAILS_WITH_ESRCH 1
/*
* If this constant is set to 1, the current implementation of getschedparam() 
* may generate error code of ESRCH under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_GETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ESRCH 0

/*
 * POSIX_PTHREAD_SETSCHEDPARAM
 */
/*
* If this constant is set to 1, then current implementation of getschedparam() 
* may support additional errors not included in the list described in the
* IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_ERROR_CODES 0

/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error EINVAL will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_EINVAL 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of EINVAL under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EINVAL 0 
/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error ENOTSUP will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_ENOTSUP 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of ENOTSUP under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ENOTSUP 0
/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error ENOTSUP will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_ENOTSUP 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of ENOTSUP under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ENOTSUP 0
/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error EPERM will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_EPERM 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of EPERM under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EPERM 0
/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error EPERM will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_EPERM 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of EPERM under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_EPERM 0
/*
* If this constant is set to 1, the function setschedparam() ensures
* that the error ESRCH will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_FAILS_WITH_ESRCH 1
/*
* If this constant is set to 1, the current implementation of setschedparam() 
* may generate error code of ESRCH under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPARAM_HAS_EXTRA_CONDITION_ON_ESRCH 0


/*
 * POSIX_PTHREAD_SETSCHEDPRIO
 */
/*
* If this constant is set to 1, then current implementation of undefined() 
* may support additional errors not included in the list described in the
* IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_ERROR_CODES 0

/*
* If this constant is set to 1, the function setschedprio() ensures
* that the error EINVAL will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_FAILS_WITH_EINVAL 1
/*
* If this constant is set to 1, the current implementation of setschedprio() 
* may generate error code of EINVAL under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_CONDITION_ON_EINVAL 0
/*
* If this constant is set to 1, the function setschedprio() ensures
* that the error ENOTSUP will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_FAILS_WITH_ENOTSUP 1
/*
* If this constant is set to 1, the current implementation of setschedprio() 
* may generate error code of ENOTSUP under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_CONDITION_ON_ENOTSUP 0
/*
* If this constant is set to 1, the function setschedprio() ensures
* that the error EPERM will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_FAILS_WITH_EPERM 1
/*
* If this constant is set to 1, the current implementation of setschedprio() 
* may generate error code of EPERM under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_CONDITION_ON_EPERM 0
/*
* If this constant is set to 1, the function setschedprio() ensures
* that the error EPERM will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_FAILS_WITH_EPERM 1
/*
* If this constant is set to 1, the current implementation of setschedprio() 
* may generate error code of EPERM under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_CONDITION_ON_EPERM 0
/*
* If this constant is set to 1, the function setschedprio() ensures
* that the error ESRCH will be found and correctly handled.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_FAILS_WITH_ESRCH 1
/*
* If this constant is set to 1, the current implementation of setschedprio() 
* may generate error code of ESRCH under circumstances other than those 
* described in the IEEE Std 1003.1, 2004 Edition.
*/
#define POSIX_PTHREAD_SETSCHEDPRIO_HAS_EXTRA_CONDITION_ON_ESRCH 0


/********************************************************************/
/**                          Model Data                            **/
/********************************************************************/

extern IntT concurrency_level_model;

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_getconcurrency_spec **/
specification
IntT pthread_getconcurrency_spec( CallContext context);

/** pthread_setconcurrency_spec **/
specification
IntT pthread_setconcurrency_spec( CallContext context, IntT new_level );

/** pthread_getschedparam_spec **/
specification
IntT pthread_getschedparam_spec( CallContext context, PThreadT thread, IntT * policy, SchedParam * param );

/** pthread_setschedparam_spec **/
specification
IntT pthread_setschedparam_spec( CallContext context, PThreadT thread, IntT policy, SchedParam * param );

/** pthread_setschedprio_spec **/
specification
IntT pthread_setschedprio_spec( CallContext context, PThreadT thread, IntT prio );


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

bool isModelConcurrencyLevelUnkn(void);

ThreadState * findThreadState_PThreadT(PThreadT thread_t);

bool isPolicyInitialized_PThreadAttr(PThreadAttr * attr);
bool isSchedParInitialized_PThreadAttr(PThreadAttr * attr);

bool init_scheduler_model(CallContext context);

void setModelConcurrencyLevelUnkn(void);

#endif

