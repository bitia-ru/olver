/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "config/system_config.seh"
#include "common/common_media.seh"
#include "common/common_scenario.seh"

#include "pthread/scheduler/tests/scheduler_scenario.seh"
#include "pthread/scheduler/scheduler_model.seh"
#include "pthread/scheduler/scheduler_media.seh"

#include "system/sysconf/sysconf_media.seh"
#include "system/system/system_model.seh"
#include "atl/integer.h"


#define PTHREAD_SETCONCURRENCY_SCEN_THREADS_NUM 5
#define PTHREAD_SETSCHEDPRIO_SCEN_MAX_THREADS 3


//bool pre_pthread_setschedparam_spec( CallContext context, PThreadT thread, IntT policy, SchedParam * param );

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/
static CallContext context;

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/ 

static bool init_pthread_scheduler_scenario(int argc, char** argv)
{
    /* Init test scenario data */
    context = getContext();
    
    sysconf_spec(getContext(), SUT_SC_THREAD_SPORADIC_SERVER, requestErrorCode());
    sysconf_spec(getContext(), SUT_SC_THREAD_PRIORITY_SCHEDULING, requestErrorCode());

    if(!init_scheduler_model(context))
    {
        traceUserInfo("init_scheduler_scenario: init_scheduler_model() failed");
        //return false;
    }
    
    return true;
}

static void finish_pthread_scheduler_scenario(void)
{
    /**/
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/


scenario
bool pthread_getconcurrency_scen(void)
{
    pthread_getconcurrency_spec(context);

    return true;
}

scenario
bool pthread_setconcurrency_scen(void)
{
    IntT new_level;

    iterate(int i=0;i<=4;i++;)
    {
        switch(i)
        {
        case 0: new_level = min_IntT;
            break;
        case 1: new_level = -1;
            break;
        case 2: new_level = 0;
            break;
        case 3: new_level = 1;
            break;
        case 4: new_level = max_IntT;
            break;
        default:
            traceUserInfo("setconcurency:Wrong iteration");
            return false;
        }    

        pthread_setconcurrency_spec(context,new_level);
        pthread_getconcurrency_spec(context); // for check;
    }
    return true;
}

scenario
bool pthread_setconcurrency_scen_multithread(void)
{  
//    PThreadAttrTPtr attr;
    CallContext context_thr;
/*
    IntT res;
    PThreadT threads[PTHREAD_SETCONCURRENCY_SCEN_THREADS_NUM];

    attr = allocateMemoryBlock(context, PTHREAD_ATTR_SIZE);
    if (isNULL_VoidTPtr(attr))
        return false;
    //pthread_attr_init_spec(context, attr);


    //pthread_attr_setdetachstate_spec(context, attr,  DetachState );
    //pthread_attr_setguardsize_spec(context, attr,    GuardSize   );
    //pthread_attr_setinheritsched_spec(context, attr, InhSched    );
    //pthread_attr_setschedparam_spec(context, attr,   schedulingParam);   
    //pthread_attr_setschedpolicy_spec(context, attr,  Policy      );
    //pthread_attr_setscope_spec(context, attr,        Scope       );
    //pthread_attr_setstack_spec(context, attr, StackPtr, StackSize);
/**/

    iterate(int i=0;i<PTHREAD_SETCONCURRENCY_SCEN_THREADS_NUM;i++;)
    { 
        
        //res = pthread_create_spec(context,&threads[i], NULL_VoidTPtr /* attr */, NULL_VoidTPtr);
        
      /*  if(res!=0)
        {
            traceUserInfo("Thread creation failed");
            return false;
        }
        
        ts_sleep_msec(5000);

        context_thr = create_CallContext( context.system, context.process, threads[i] );
/**/
        context_thr = createThread();
        
        ts_sleep_msec(50);

        pthread_setconcurrency_spec(context_thr, i);
        pthread_getconcurrency_spec(context_thr);

        sysconf_spec(context_thr,85,requestErrorCode());
     //   traceFormattedUserInfo("Tread #%i",i);
    }

/*
    deallocateMemoryBlock(context, attr);
/**/

    return true;
}

scenario
bool pthread_getschedparam_scen(void)
{
    int size1;
    IntT policy;
    SchedParam param;
    ThreadIdObj * key;
    Map * map_thr;
    
    /* [TPS] extension checking*/
    if(!POSIX_OPTION(context,TPS))
    {
        traceUserInfo("[TPS] option is not supported! The scenario have been cancelled.");
        return true;
    }

    map_thr = getAllThreads();
    if(map_thr == NULL)
    {
        traceUserInfo("pthread_getschedparam_scen: getAllThreads() failed");
        return false;
    };

    size1 = size_Map(map_thr);
    iterate(int i=0;i<size1;i++;)
    {
        key = (ThreadIdObj *)key_Map(map_thr,i);
        
        iterate(int j=0;j<1;j++;)
        {
            switch(j)
            {
            case 0: pthread_getschedparam_spec(context, key->thread, &policy, &param);
                break;
/*            case 1: 
                //pthread_getschedparam_spec(context, key->thread, NULL, &param);
                break;
            case 2: 
                //pthread_getschedparam_spec(context, key->thread, &policy, NULL);
                break;
            case 3: 
                //pthread_getschedparam_spec(context, key->thread, NULL, NULL);
                break;/**/
            default:
                traceUserInfo("getschedparam_scen:wrong iteration");
                return false;
            }
        }
    }

    return true;
}

scenario
bool pthread_getschedparam_scen_illegal(void)
{
    IntT policy;    
    SchedParam param;
    ThreadIdObj * key;
    PThreadT thr;

    /* [TPS] extension checking*/
    if(!POSIX_OPTION(context,TPS))
    {
        traceUserInfo("[TPS] option is not supported! The scenario have been cancelled.");
        return true;
    }

    iterate(int i=0;i<3;i++;)
    {
        switch(i)
        {
        case 0: thr = 0;
            break; /**/
        case 1: thr = 12345;
            break;
        case 2: thr = max_ULongT;
            break;
        default:
            traceUserInfo("getschedparam_scen_illegal:wrong iteration");
            return false;
        }
    }

    iterate(int j=0;j<1;j++;)
    {
        switch(j)
        {
        case 0: pthread_getschedparam_spec(context, thr, &policy, &param);
            break;
        case 1: pthread_getschedparam_spec(context, thr, NULL, &param);
            break;
        case 2: pthread_getschedparam_spec(context, thr, &policy, NULL);
            break;
        case 3: pthread_getschedparam_spec(context, thr, NULL, NULL);
            break; /**/
        default:
            traceUserInfo("getschedparam_scen:wrong iteration");
            return false;
        }
    }

    
}

scenario
bool pthread_setschedparam_scen(void)
{
    int size1;
    IntT policy;
    SchedParam param;
    SchedParam * p_param;
    ThreadIdObj * key;
    Map * map_thr;

    /* [TPS] extension checking*/
    if(!POSIX_OPTION(context,TPS))
    {
        traceUserInfo("[TPS] option is not supported! The scenario have been cancelled.");
        return true;
    }

    map_thr = getAllThreads();
    if(map_thr == NULL)
    {
        traceUserInfo("pthread_getschedparam_scen: getAllThreads() failed");
        return false;
    };


    size1 = size_Map(map_thr);
    iterate(int i=0;i<size1;i++;)
    iterate(int j=0;j<4;j++;)
    iterate(int k=0;k<5;k++;)
    {
        key = (ThreadIdObj *)key_Map(map_thr,i);
              
        switch(j)
        {
        case 0:
            param.sched_priority = 0;
            p_param=&param;
            break;
        case 1: 
            param.sched_priority = 1;
            p_param=&param;
            break; 
        case 2:
            param.sched_priority = max_IntT;
            p_param=&param;
            break;/**/
        case 3:
            p_param=NULL;
            break;/**/

        default:
            traceUserInfo("getschedparam_scen:wrong iteration");
            return false;
        }

        switch(k)
        {
        case 0:
            policy = SUT_SCHED_OTHER;
            break;
        case 1: 
            policy = SUT_SCHED_FIFO;
            break; 
        case 2:
            policy = SUT_SCHED_RR;
            break;/**/
        case 3:
            policy = SUT_SCHED_SPORADIC;
            break;/**/
        case 4:
            policy = max_IntT;
            break;/**/
        default:
            traceUserInfo("getschedparam_scen:wrong iteration");
            return false;
        }

        /*  to keep the current thread not affected */
        if(key->thread != context.thread
           //&&
           // ! REDO 
           //pre_pthread_setschedparam_spec(context, key->thread, policy, p_param)
          )
        {
            pthread_setschedparam_spec(context, key->thread, policy, p_param);
            pthread_getschedparam_spec(context, key->thread, &policy, &param);
        }      
    }
    
    return true;
}

scenario
bool pthread_setschedprio_scen(void)
{
    int size1;
    IntT prio;
    IntT policy;
    SchedParam param;
    ThreadIdObj * key;
    Map * map_thr;

    /* [TPS] extension checking*/
    if(!POSIX_OPTION(context,TPS))
    {
        traceUserInfo("[TPS] option is not supported! The scenario have been cancelled.");
        return true;
    }

    map_thr = getAllThreads();
    if(map_thr == NULL)
    {
        traceUserInfo("pthread_getschedparam_scen: getAllThreads() failed");
        return false;
    };

    size1 = size_Map(map_thr);
    if(size1<2)
    {
        traceUserInfo("pthread_setschedprio_scen: some threads shall be started");
        return false;
    }

    iterate(int i=0;i<size1 && i<PTHREAD_SETSCHEDPRIO_SCEN_MAX_THREADS;i++;)
    iterate(int j=0;j<4;j++;)
    {
        key = (ThreadIdObj *)key_Map(map_thr,i);
               
        switch(j)
        {
        case 0:
            prio = 0;
            break;
        case 1: 
            prio = 1;
            break; 
        case 2: 
            prio = 100;
            break; 
        case 3:
            prio = max_IntT;
            break;/**/

        default:
            traceUserInfo("getschedparam_scen:wrong iteration");
            return false;
        }

        /*  to keep the current thread not affected */
        if(key->thread != context.thread)
        {
            pthread_setschedprio_spec(context, key->thread, prio);
            pthread_getschedparam_spec(context, key->thread, &policy, &param);
        }
    }
    
    return true;
}


scenario dfsm pthread_scheduler_scenario =
{
    .init = init_pthread_scheduler_scenario,
    .finish = finish_pthread_scheduler_scenario,
    .actions = {
        pthread_getconcurrency_scen,
        pthread_setconcurrency_scen,
        pthread_setconcurrency_scen_multithread,
        pthread_getschedparam_scen,
        //pthread_getschedparam_scen_illegal,
        pthread_setschedparam_scen,
        pthread_setschedparam_scen,
        pthread_setschedprio_scen,
        NULL
    }
};

bool main_pthread_scheduler(int argc, char** argv)
{
    addTraceToFile("trace.xml");
    pthread_scheduler_scenario(argc,argv);
    return true;
}

#ifdef PTHREAD_SCHEDULER_LOCAL_MAIN

#include "common/init.seh"

#include "common/common_media.seh"
#include "common/common_scenario.seh"
#include "common/control_center.seh"
#include "config/system_config.seh"
#include "system/system/system_model.seh"
#include "pthread/pthread/pthread_media.seh"


/********************************************************************/
/**                     Test System Initialization                 **/
/********************************************************************/
void reinitTestSystem(void)
{
    reinitControlCenter();
    initCommonModel();
    initCommonMedia();
    initCommonScenarioState();

    initSystemConfiguration();
    initSystemModel();
    initPThreadModel();

    initPthreadPthreadSubsystem();
    initSystemSysconfSubsystem();

    initPThreadSchedulerSubsystem();
}

int main(int argc, char** argv)
{
    initTestSystem();
    loadSUT();

    /* Set up tracer */
    /*setTraceEncoding("windows-1251");
     */

    /* Run test scenario */
    main_pthread_scheduler(argc,argv);

    /*  unloadSUT(); */
    return 0;
}
#endif

