/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_TLS_MEDIA_SEH
#define PTHREAD_TLS_MEDIA_SEH

#include "pthread/tls/tls_model.seh"
#include "pthread/pthread/pthread_model.seh"

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadTlsSubsystem(void);

/********************************************************************/
/**                        Helper Functions                        **/
/********************************************************************/

ThreadSpecific * findSpecificByAddr(CallContext context, VoidTPtr addr);

/********************************************************************/
/**                      Cleanup Postponement                      **/
/********************************************************************/

/* This functions makes thread not to cleanup specific data, and returns 
 * pointer on this data. You shall free this data after the thread exit.
 */

VoidTPtr postpone_thread_cleanup(CallContext context);

void deallocate(CallContext context, VoidTPtr address);

/********************************************************************/
/**                 Deferred Reactions Processors                  **/
/********************************************************************/

static void pthread_key_destructor_call_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta);

void destructor_return(CallContext context, DestrSpecif * specific);

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_getspecific_spec **/
mediator pthread_getspecific_media for specification
ThreadSpecific* pthread_getspecific_spec( CallContext context, PThreadKey* key, ErrorCode * errno );

/** pthread_setspecific_spec **/
mediator pthread_setspecific_media for specification
IntT pthread_setspecific_spec( CallContext context, PThreadKey* key, VoidTPtr value);

/** pthread_key_create_spec **/
mediator pthread_key_create_media for specification
IntT pthread_key_create_spec( CallContext context, VoidTPtr keyaddress, PThreadKeyDestructor destruct );

/** pthread_key_delete_spec **/
mediator pthread_key_delete_media for specification
PThreadKeyFunctionResult* pthread_key_delete_spec( CallContext context, PThreadKey* key );

/** pthread_key_destructor_call **/
mediator pthread_key_destructor_call_media for reaction 
PThreadKeyDestructorReturnType* pthread_key_destructor_call(void);


#endif

