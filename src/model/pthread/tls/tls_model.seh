/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_TLS_MODEL_SEH
#define PTHREAD_TLS_MODEL_SEH

#include "common/common_model.seh"
#include "process/process/process_model.seh"


specification typedef struct DestructorState
{
    IntT num_calls;
    bool isActive;
} DestructorState;

DestructorState *create_DestructorState(
    IntT num_calls,
    bool isActive
    );

specification typedef struct DestrSpecif
{
    ThreadId threadId;
    ThreadSpecific * specific;
} DestrSpecif;

DestrSpecif *create_DestrSpecif(
    ThreadId threadId,
    ThreadSpecific *specific
    );

extern Map *destructorCalls;
extern Map * beforeTerminating; // ThreadIdObj -> @ThreadState


/********************************************************************/
/**                    PThreadKeyFunctionResult                    **/
/********************************************************************/

specification typedef struct PThreadKeyFunctionResult
{
    IntT    errno;
    IntT    destructorCallsNum;
} PThreadKeyFunctionResult;

PThreadKeyFunctionResult *create_PThreadKeyFunctionResult(
    IntT    errno,
    IntT    destructorCallsNum
    );

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_getspecific_spec **/
specification
ThreadSpecific* pthread_getspecific_spec( CallContext context, PThreadKey* key, ErrorCode * errno);

/** pthread_setspecific_spec **/
specification
IntT pthread_setspecific_spec( CallContext context, PThreadKey* key, VoidTPtr value);

/** pthread_key_create_spec **/
specification
IntT pthread_key_create_spec( CallContext context, VoidTPtr keyaddress, PThreadKeyDestructor destruct );

/** pthread_key_delete_spec **/
specification
PThreadKeyFunctionResult* pthread_key_delete_spec( CallContext context, PThreadKey* key );


specification typedef
struct PThreadKeyDestructorReturnType
{
    CallContext context;
    ThreadSpecific * threadSpecific;
    ThreadSpecific * pre_threadSpecific;
    IntT num_calls;
} PThreadKeyDestructorReturnType;

PThreadKeyDestructorReturnType * create_PThreadKeyDestructorReturnType
(
    CallContext context,
    ThreadSpecific * threadSpecific,
    ThreadSpecific * pre_threadSpecific,
    IntT num_calls
);

/** pthread_key_destructor_call **/
reaction PThreadKeyDestructorReturnType* pthread_key_destructor_call(void);

void onPThreadKeyDestructor(PThreadKeyDestructorReturnType * data);

/* [This function checks that all destuctors have been called 
 *  for the thread specified by `context`] 
 */
bool checkAllDestructorsHaveBeenCalled(CallContext context);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

void initDestructorCounter(void);
void store_ThreadState(ThreadId threadId);
void initBeforeTerminating(void);
bool inDestructor(CallContext context);
int getNumberOfKeysByProcess(PidT pid);

#endif

