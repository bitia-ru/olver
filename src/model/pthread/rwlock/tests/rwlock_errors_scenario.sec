/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "pthread/rwlock/rwlock_model.seh"
#include "pthread/rwlock/tests/rwlock_scenario.seh"
#include <atl/integer.h>
#include <atl/multiset.h>

#include "common/common_scenario.seh"
#include "system/system/system_model.seh"

/********************************************************************/
/**                     Test Scenario Parameters                   **/
/********************************************************************/

#define THREAD_NUM 2

/********************************************************************/
/**                       Test Scenario Data                       **/
/********************************************************************/

static CallContext context;
static VoidTPtr rwlock;
static VoidTPtr rwlock_area;
static VoidTPtr rwlockattr_area;
static CallContext context_array[THREAD_NUM];

/********************************************************************/
/**                  Test Scenario Initialization                  **/
/********************************************************************/

Integer* get_InitializeThreadsStateER(void)
{
    return create_Integer(0);
}

bool init_rwlock_errors_scenario(int argc, char** argv)
{
    int i;
    setWTimeMSec(80);

    context = getContext();
    context_array[0] = context;

    /* create threads */
    for (i=1; i<THREAD_NUM; i++)
    {
        context_array[i] = createThread();
        if (isWrong_ThreadId(context_array[i]))
            return false;
    }

    rwlockattr_area = allocateMemoryBlock(context, 1024);
    if (isNULL_VoidTPtr(rwlockattr_area))
        return false;

    rwlock_area = allocateMemoryBlock(context, 1024);
    if (isNULL_VoidTPtr(rwlock_area))
        return false;

    setTSTimeModel(NotUseTSTime);

    set_assertion_exit_callback();

    setFindFirstSeriesOnly(true);

    return true;
}

void finish_rwlock_errors_scenario(void)
{
    deallocateMemoryBlock(context, rwlock_area);
    deallocateMemoryBlock(context, rwlockattr_area);
}

/********************************************************************/
/**                          Test Actions                          **/
/********************************************************************/

/*
    The list of scenarios:

    initattr, destroyattr:
        initializes and destroys the rwlockattr object, respectively.

    initattr_bad:
        initializes the rwlockattr object with the incorrect value.

    init, destroy:
        initializes and destroys the rwlock object, respectively.

    rdlock, tryrdlock, timedrdlock,
    wrlock, trywrlock, timedwrlock,
    unlock:
        calls the corresponding rwlock function for the context_array[0] thread.

    timedrdlock_bad, timedwrlock_bad:
        calls the timedrdlock or timedwrlock function for the context_array[0]
        thread using the incorrect timeout values.

    rdlock1, wrlock1, unlock1:
        calls the corresponding rwlock function for the context_array[1] thread.

*/

scenario
bool er_initattr_scen()
{
    pthread_rwlockattr_init_spec(context_array[0], rwlockattr_area);
    return true;
}

/* Full OLVER Edition Source Start */
/*
scenario
bool er_initattr_bad_scen()
{
    verbose("INITATTR_BAD\n");
    pthread_rwlockattr_init_spec(context_array[0], rwlockattr_area);
    return true;
}
*/
/* Full OLVER Edition Source End */

scenario
bool er_destroyattr_scen()
{
    if (!isNULL_VoidTPtr(rwlockattr_area))
    {
        pthread_rwlockattr_destroy_spec(context_array[0], rwlockattr_area);
    }
    return true;
}

scenario
bool er_init_scen()
{
    pthread_rwlock_init_spec(context_array[0], rwlock_area, rwlockattr_area);
    return true;
}

scenario
bool er_destroy_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_destroy_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_rdlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_rdlock_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_tryrdlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_tryrdlock_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_timedrdlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_timedrdlock_spec(context_array[0], rwlock_area, MILLIARD);
    }
    return true;
}

scenario
bool er_timedrdlock_bad_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_timedrdlock_bad_spec(context_array[0], rwlock_area, -1);
        pthread_rwlock_timedrdlock_bad_spec(context_array[0], rwlock_area, MILLIARD + 10);
    }
    return true;
}

scenario
bool er_wrlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_wrlock_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_trywrlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_trywrlock_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_timedwrlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_timedwrlock_spec(context_array[0], rwlock_area, MILLIARD);
    }
    return true;
}

scenario
bool er_timedwrlock_bad_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_timedwrlock_bad_spec(context_array[0], rwlock_area, -1);
        pthread_rwlock_timedwrlock_bad_spec(context_array[0], rwlock_area, MILLIARD + 10);
    }
    return true;
}

scenario
bool er_unlock_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_unlock_spec(context_array[0], rwlock_area);
    }
    return true;
}

scenario
bool er_rdlock1_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_rdlock_spec(context_array[1], rwlock_area);
    }
    return true;
}

scenario
bool er_wrlock1_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_wrlock_spec(context_array[1], rwlock_area);
    }
    return true;
}

scenario
bool er_unlock1_scen()
{
    if (!isNULL_VoidTPtr(rwlock_area))
    {
        pthread_rwlock_unlock_spec(context_array[1], rwlock_area);
    }
    return true;
}

scenario
bool rw_sleep_scen()
{
    ts_sleep_msec(1000);
    return true;
}

/********************************************************************/
/**                     Model State Operations                     **/
/********************************************************************/

Map* saveErrorsModelState(void)
{
    return clone(systems);
}

void restoreErrorsModelState(Map* saved_state)
{
    systems = saved_state;
}

bool isErrorsModelStateStationary(void)
{
    return true;
}


/********************************************************************/
/**                    Test Scenario Definition                    **/
/********************************************************************/

scenario dfsm pthread_rwlock_rwlock_errors_scenario =
{
    .init = init_rwlock_errors_scenario,
    .finish = finish_rwlock_errors_scenario,
    .getState = (PtrGetState)get_InitializeThreadsStateER,
    .saveModelState = (PtrSaveModelState)saveErrorsModelState,
    .restoreModelState = (PtrRestoreModelState)restoreErrorsModelState,
    .isStationaryState = (PtrIsStationaryState)isErrorsModelStateStationary,
    .actions = {
            /* Full OLVER Edition Source Start */
            /* pthread_rwlock_init */
            // EINVAL
#if POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EINVAL
            er_init_scen,           // error: non-initialized attr
//            er_initattr_bad_scen,
//            er_init_scen,           // error: incorrect attr value
#endif
            /* Full OLVER Edition Source End */

            /* All other tests need good attr value. */
            er_initattr_scen,

            // EBUSY
#if POSIX_PTHREAD_RWLOCK_INIT_FAILS_WITH_EBUSY
            er_init_scen,
            er_init_scen,           // error
            er_destroy_scen,
#endif

            /* pthread_rwlock_destroy */
            // EBUSY
#if POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EBUSY
            er_init_scen,
            er_rdlock_scen,
            er_destroy_scen,        // error
            er_unlock_scen,
            er_wrlock_scen,
            er_destroy_scen,        // error
            er_unlock_scen,
            er_destroy_scen,
#endif

            // EINVAL
#if POSIX_PTHREAD_RWLOCK_DESTROY_FAILS_WITH_EINVAL
            er_destroy_scen,        // error
#endif


            /* pthread_rwlock_tryrdlock */
            // EBUSY
            er_init_scen,
            er_wrlock1_scen,
            er_tryrdlock_scen,      // error
            er_unlock1_scen,
            er_destroy_scen,

            /* pthread_rwlock_rdlock, pthread_rwlock_tryrdlock */
            // EINVAL
#if POSIX_PTHREAD_RWLOCK_TRYRDLOCK_FAILS_WITH_EINVAL
            er_tryrdlock_scen,      // error
#endif
#if POSIX_PTHREAD_RWLOCK_RDLOCK_FAILS_WITH_EINVAL
            er_rdlock_scen,         // error
#endif


            /* pthread_rwlock_trywrlock */
            // EBUSY
            er_init_scen,
            er_wrlock1_scen,
            er_trywrlock_scen,      // error
            er_unlock1_scen,
            er_rdlock1_scen,
            er_trywrlock_scen,      // error
            er_unlock1_scen,
            er_destroy_scen,

            /* pthread_rwlock_wrlock, pthread_rwlock_trywrlock */
            // EINVAL
#if POSIX_PTHREAD_RWLOCK_TRYWRLOCK_FAILS_WITH_EINVAL
            er_trywrlock_scen,      // error
#endif
#if POSIX_PTHREAD_RWLOCK_WRLOCK_FAILS_WITH_EINVAL
            er_wrlock_scen,         // error
#endif


            /* pthread_rwlock_timedrdlock */
            // ETIMEDOUT
            er_init_scen,
            er_wrlock1_scen,
            er_timedrdlock_scen,    // error
            rw_sleep_scen,
            er_unlock1_scen,
            er_destroy_scen,

            // EINVAL
#if POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK
            er_timedrdlock_scen,    // error: non-initialized rwlock
#endif

#if POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK
            er_init_scen,
            er_timedrdlock_bad_scen,    // error: bad timeout
            er_destroy_scen,
#endif

#if POSIX_PTHREAD_RWLOCK_TIMEDRDLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK
            er_init_scen,
            er_wrlock1_scen,
            er_timedrdlock_bad_scen,    // error: bad timeout
            er_unlock1_scen,
            er_destroy_scen,
#endif

            /* pthread_rwlock_timedwrlock */
            // ETIMEDOUT
            er_init_scen,
            er_wrlock1_scen,
            er_timedwrlock_scen,    // error
            rw_sleep_scen,
            er_unlock1_scen,
            er_destroy_scen,

            // EINVAL
#if POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_RWLOCK
            er_timedwrlock_scen,    // error: non-initialized rwlock
#endif

#if POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_FREE_LOCK
            er_init_scen,
            er_timedwrlock_bad_scen,    // error: bad timeout
            er_destroy_scen,
#endif

#if POSIX_PTHREAD_RWLOCK_TIMEDWRLOCK_FAILS_WITH_EINVAL_ON_BAD_TIMEOUT_BUSY_LOCK
            er_init_scen,
            er_wrlock1_scen,
            er_timedwrlock_bad_scen,    // error: bad timeout
            er_unlock1_scen,
            er_destroy_scen,
#endif

            /* pthread_rwlock_unlock */
            // EINVAL
#if POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EINVAL
            er_unlock_scen,         // error
#endif

            // EPERM
#if POSIX_PTHREAD_RWLOCK_UNLOCK_FAILS_WITH_EPERM
            er_init_scen,
            er_wrlock1_scen,
            er_unlock_scen,         // error
            er_unlock1_scen,
            er_rdlock1_scen,
            er_unlock_scen,         // error
            er_unlock1_scen,
            er_destroy_scen,
#endif

            er_destroyattr_scen,

            NULL
    }
};
