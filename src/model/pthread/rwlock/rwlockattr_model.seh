/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_RWLOCK_RWLOCKATTR_MODEL_SEH
#define PTHREAD_RWLOCK_RWLOCKATTR_MODEL_SEH

#include "common/common_model.seh"
#include "pthread/pthread/pthread_model.seh"


typedef VoidTPtr PThreadRwlockAttrTPtr;

specification typedef struct PThreadRwlockAttrT
{
  PThreadRwlockAttrTPtr address;
  PThreadPShared pshared;
} PThreadRwlockAttrT;


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_rwlockattr_destroy_spec **/
specification
ErrorCode* pthread_rwlockattr_destroy_spec(CallContext context, PThreadRwlockAttrTPtr ptr);

void onPThreadRwlockAttrDestroy(CallContext context, PThreadRwlockAttrTPtr rwlock, ErrorCode* res);

/** pthread_rwlockattr_getpshared_spec **/
specification
ErrorCode* pthread_rwlockattr_getpshared_spec(CallContext context, PThreadRwlockAttrTPtr ptr, IntT* pshared);

/** pthread_rwlockattr_init_spec **/
specification
ErrorCode* pthread_rwlockattr_init_spec(CallContext context, VoidTPtr ptr);

void onPThreadRwlockAttrInit(CallContext context, PThreadRwlockAttrTPtr rwlock, ErrorCode* res);

/** pthread_rwlockattr_setpshared_spec **/
specification
ErrorCode* pthread_rwlockattr_setpshared_spec(CallContext context, PThreadRwlockAttrTPtr ptr, IntT pshared);

void onPThreadRwlockAttrSetPshared(CallContext context, PThreadRwlockAttrTPtr rwlock, IntT pshared, ErrorCode* res);

/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

PThreadRwlockAttrT* create_PThreadRwlockAttrT(PThreadRwlockAttrTPtr address, PThreadPShared pshared);
PThreadRwlockAttrT* getRwlockAttributes(PThreadRwlockAttrTPtr address);

#endif
