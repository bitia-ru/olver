/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef PTHREAD_RWLOCK_MEDIA_SEH
#define PTHREAD_RWLOCK_MEDIA_SEH

#include "pthread/rwlock/rwlock_model.seh"


/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadRwlockSubsystem(void);


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_rwlock_destroy_spec **/
mediator pthread_rwlock_destroy_media for specification
ErrorCode* pthread_rwlock_destroy_spec(CallContext context, PThreadRwlockTPtr rwlock);

/** pthread_rwlock_init_spec **/
mediator pthread_rwlock_init_media for specification
ErrorCode* pthread_rwlock_init_spec(CallContext context, VoidTPtr rwlock, PThreadRwlockAttrTPtr attr);

/** pthread_rwlock_rdlock_spec **/
mediator pthread_rwlock_rdlock_media for specification
void pthread_rwlock_rdlock_spec( CallContext context, PThreadRwlockTPtr rwlock);

/** pthread_rwlock_rdlock_return **/
mediator pthread_rwlock_rdlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_rdlock_return(void);

/** pthread_rwlock_timedrdlock_spec **/
mediator pthread_rwlock_timedrdlock_media for specification
void pthread_rwlock_timedrdlock_spec(CallContext context, PThreadRwlockTPtr rwlock, TimeUnit delta);

mediator pthread_rwlock_timedrdlock_bad_media for specification
ErrorCode* pthread_rwlock_timedrdlock_bad_spec(CallContext context, PThreadRwlockTPtr rwlock, IntT nsec);

/** pthread_rwlock_timedrdlock_return **/
mediator pthread_rwlock_timedrdlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_timedrdlock_return(void);

/** pthread_rwlock_timedwrlock_spec **/
mediator pthread_rwlock_timedwrlock_media for specification
void pthread_rwlock_timedwrlock_spec(CallContext context, PThreadRwlockTPtr rwlock, TimeUnit delta);

mediator pthread_rwlock_timedwrlock_bad_media for specification
ErrorCode* pthread_rwlock_timedwrlock_bad_spec(CallContext context, PThreadRwlockTPtr rwlock, IntT nsec);

/** pthread_rwlock_timedrdlock_return **/
mediator pthread_rwlock_timedwrlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_timedwrlock_return(void);

/** pthread_rwlock_tryrdlock_spec **/
mediator pthread_rwlock_tryrdlock_media for specification
ErrorCode* pthread_rwlock_tryrdlock_spec( CallContext context, PThreadRwlockTPtr rwlock );

/** pthread_rwlock_trywrlock_spec **/
mediator pthread_rwlock_trywrlock_media for specification
ErrorCode* pthread_rwlock_trywrlock_spec(CallContext context, PThreadRwlockTPtr rwlock);

/** pthread_rwlock_unlock_spec **/
mediator pthread_rwlock_unlock_media for specification
void pthread_rwlock_unlock_spec(CallContext context, PThreadRwlockTPtr rwlock);

/** pthread_rwlock_unlock_return **/
mediator pthread_rwlock_unlock_return_media for reaction
RwlockUnlockReturnType* pthread_rwlock_unlock_return(void);

/** pthread_rwlock_wrlock_spec **/
mediator pthread_rwlock_wrlock_media for specification
void pthread_rwlock_wrlock_spec(CallContext context, PThreadRwlockTPtr rwlock);

/** pthread_rwlock_wrlock_return **/
mediator pthread_rwlock_wrlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_wrlock_return(void);

#endif

