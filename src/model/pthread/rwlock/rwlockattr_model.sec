/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Portions of this text are reprinted and reproduced in electronic form
 * from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology
 * -- Portable Operating System Interface (POSIX), The Open Group Base
 * Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of
 * Electrical and Electronics Engineers, Inc and The Open Group. In the
 * event of any discrepancy between this version and the original IEEE and
 * The Open Group Standard, the original IEEE and The Open Group Standard
 * is the referee document. The original Standard can be obtained online at
 * http://www.opengroup.org/unix/online.html.
 */



#include "pthread/rwlock/rwlockattr_config.h"
#include "pthread/rwlock/rwlockattr_model.seh"
#include "config/pthread_config.seh"
#include "data/errno_model.seh"


#pragma SEC subsystem rwlock "pthread.rwlock"

/*
   The group of functions 'pthread.rwlock.rwlockattr' consists of:
       pthread_rwlockattr_destroy [2]
       pthread_rwlockattr_init [2]
       pthread_rwlockattr_getpshared [2]
       pthread_rwlockattr_setpshared [2]
 */

/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    pthread_rwlockattr_destroy, pthread_rwlockattr_init - destroy and
    initialize the read-write lock attributes object

SYNOPSIS

    #include <pthread.h>

    int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
    int pthread_rwlockattr_init(pthread_rwlockattr_t *attr); 

DESCRIPTION

    The pthread_rwlockattr_destroy() function shall destroy a read-write lock
    attributes object. A destroyed attr attributes object can be reinitialized
    using pthread_rwlockattr_init(); the results of otherwise referencing the
    object after it has been destroyed are undefined. An implementation may
    cause pthread_rwlockattr_destroy() to set the object referenced by attr to
    an invalid value.

    The pthread_rwlockattr_init() function shall initialize a read-write lock
    attributes object attr with the default value for all of the attributes
    defined by the implementation.

    Results are undefined if pthread_rwlockattr_init() is called specifying an
    already initialized attr attributes object.

    After a read-write lock attributes object has been used to initialize one
    or more read-write locks, any function affecting the attributes object
    (including destruction) shall not affect any previously initialized
    read-write locks.

RETURN VALUE

    If successful, the pthread_rwlockattr_destroy() and
    pthread_rwlockattr_init() functions shall return zero; otherwise, an error
    number shall be returned to indicate the error.

ERRORS

    The pthread_rwlockattr_destroy() function may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    The pthread_rwlockattr_init() function shall fail if:

    [ENOMEM]
        Insufficient memory exists to initialize the read-write lock attributes
        object.

    These functions shall not return an error code of [EINTR].

*/

specification
ErrorCode* pthread_rwlockattr_destroy_spec(CallContext context, PThreadRwlockAttrTPtr ptr)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "ptr is not NULL", !isNULL_VoidTPtr(ptr));

        /* [The object must be previously initialized.] */
        REQ("", "the attr object must be initialized.", getRwlockAttributes(ptr) != NULL);

        return true;
    }
    coverage C
    {
        return {DestroyRwlockAttr, "Destroy read-write lock attributes object"};
    }
    post
    {
        PThreadRwlockAttrT* tmp = getRwlockAttributes(ptr);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_RWLOCKATTR_DESTROY, "pthread_rwlockattr_destroy.03",
                    *pthread_rwlockattr_destroy_spec != 0, *pthread_rwlockattr_destroy_spec)
            /*
             * The pthread_rwlockattr_destroy() function may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY(POSIX_PTHREAD_RWLOCKATTR_DESTROY, EINVAL, "pthread_rwlockattr_destroy.04.01", TODO_ERR(EINVAL))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_RWLOCKATTR_DESTROY, EINTR, "pthread_rwlockattr_destroy.05")

        ERROR_END()

        /*
         * The pthread_rwlockattr_destroy() function shall destroy a read-write lock 
         * attributes object.
         */
        REQ("pthread_rwlockattr_destroy.01", "the rwlockattr object should be destroyed", tmp == NULL);

        /*
         * If successful, the pthread_rwlockattr_destroy() and pthread_rwlockattr_init() 
         * functions shall return zero;
         */
        REQ("pthread_rwlockattr_destroy.02", "return value should be zero",
            *pthread_rwlockattr_destroy_spec == 0
           );

        /*
         * If successful, the pthread_rwlockattr_destroy() function shall
         * return zero; otherwise, an error number shall be returned to
         * indicate the error.
         * The pthread_rwlockattr_destroy() function may fail if: [EINVAL].
         */
        REQ("", "the return value must be valid.",
            ((*pthread_rwlockattr_destroy_spec == 0) && (tmp == NULL))
            ||
            ((*pthread_rwlockattr_destroy_spec == SUT_EINVAL) && (tmp != NULL))
           );

        return true;
    }
}

void onPThreadRwlockAttrDestroy(CallContext context, PThreadRwlockAttrTPtr rwlock, ErrorCode* res)
{
    if (*res == 0)
        unregisterObjectInMemory(rwlock);
}

specification
ErrorCode* pthread_rwlockattr_init_spec(CallContext context, VoidTPtr ptr)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "ptr is not NULL", !isNULL_VoidTPtr(ptr));

        /*
         * Results are undefined if pthread_rwlockattr_init() is called specifying an 
         * already initialized attr attributes object.
         */
        REQ("app.pthread_rwlockattr_init.02", "The attr object must be uninitialized.", getRwlockAttributes(ptr) == NULL);

        return true;
    }
    coverage C
    {
        return {InitRwlockAttr, "Initialize a read-write lock attributes object"};
    }
    post
    {
        PThreadRwlockAttrT* tmp = getRwlockAttributes(ptr);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_RWLOCKATTR_INIT, "pthread_rwlockattr_init.04",
                    *pthread_rwlockattr_init_spec != 0, *pthread_rwlockattr_init_spec)
            /*
             * The pthread_rwlockattr_init() function shall fail if:
             * 
             * [ENOMEM] 
             * 
             * Insufficient memory exists to initialize the read-write lock attributes object. 
             * 
             */
            ERROR_SHALL(POSIX_PTHREAD_RWLOCKATTR_INIT, ENOMEM, "pthread_rwlockattr_init.05.01", TODO_ERR(ENOMEM))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_RWLOCKATTR_INIT, EINTR, "pthread_rwlockattr_init.06")

        ERROR_END()

        /*
         * The pthread_rwlockattr_init() function shall initialize a read-write lock 
         * attributes object attr with the default value for all of the attributes 
         * defined by the implementation.
         */
        REQ("pthread_rwlockattr_init.01", "", TODO_REQ());

        /*
         * If successful, the pthread_rwlockattr_destroy() and pthread_rwlockattr_init() 
         * functions shall return zero;
         */
        REQ("pthread_rwlockattr_init.03", "return value should be zero",
            *pthread_rwlockattr_init_spec == 0
           );

        /*
         * If successful, the pthread_rwlockattr_init() function shall
         * return zero; otherwise, an error number shall be returned to
         * indicate the error.
         * The pthread_rwlockattr_init() function shall fail if: [ENOMEM].
         */
        REQ("", "the return value must be valid.",
            ((*pthread_rwlockattr_init_spec == 0) && (tmp != NULL))
            ||
            ((*pthread_rwlockattr_init_spec == SUT_ENOMEM) && (tmp == NULL))
           );

        if (tmp != NULL)
        {
            /* The default value of the process-shared attribute shall be PTHREAD_PROCESS_PRIVATE. */
            REQ("", "the default value must be PTHREAD_PROCESS_PRIVATE.", tmp->pshared == getDefaultRwlockPShared());
        }

        return true;
    }
}

void onPThreadRwlockAttrInit(CallContext context, PThreadRwlockAttrTPtr rwlock, ErrorCode* res)
{
    if (*res == 0)
        registerObjectInMemory(rwlock, 0, create_PThreadRwlockAttrT(rwlock, getDefaultRwlockPShared()));
}


/*
Linux Standard Base Core Specification 3.1
Copyright (c) 2004, 2005 Free Standards Group

 refers

The Open Group Base Specifications Issue 6
IEEE Std 1003.1, 2004 Edition
Copyright (c) 2001-2004 The IEEE and The Open Group, All Rights reserved.

NAME

    pthread_rwlockattr_getpshared, pthread_rwlockattr_setpshared - get and set
    the process-shared attribute of the read-write lock attributes object

SYNOPSIS

    #include <pthread.h>

    int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *
           restrict attr, int *restrict pshared);
    int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr,
           int pshared); 

DESCRIPTION

    The pthread_rwlockattr_getpshared() function shall obtain the value of the
    process-shared attribute from the initialized attributes object referenced
    by attr. The pthread_rwlockattr_setpshared() function shall set the
    process-shared attribute in an initialized attributes object referenced by
    attr.

    The process-shared attribute shall be set to PTHREAD_PROCESS_SHARED to
    permit a read-write lock to be operated upon by any thread that has access
    to the memory where the read-write lock is allocated, even if the
    read-write lock is allocated in memory that is shared by multiple
    processes. If the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the
    read-write lock shall only be operated upon by threads created within the
    same process as the thread that initialized the read-write lock; if threads
    of differing processes attempt to operate on such a read-write lock, the
    behavior is undefined. The default value of the process-shared attribute
    shall be PTHREAD_PROCESS_PRIVATE.

    Additional attributes, their default values, and the names of the
    associated functions to get and set those attribute values are
    implementation-defined.

RETURN VALUE

    Upon successful completion, the pthread_rwlockattr_getpshared() function
    shall return zero and store the value of the process-shared attribute of
    attr into the object referenced by the pshared parameter. Otherwise, an
    error number shall be returned to indicate the error.

    If successful, the pthread_rwlockattr_setpshared() function shall return
    zero; otherwise, an error number shall be returned to indicate the error.

ERRORS

    The pthread_rwlockattr_getpshared() and pthread_rwlockattr_setpshared()
    functions may fail if:

    [EINVAL]
        The value specified by attr is invalid.

    The pthread_rwlockattr_setpshared() function may fail if:

    [EINVAL]
        The new value specified for the attribute is outside the range of legal
        values for that attribute.

    These functions shall not return an error code of [EINTR].

*/

specification
ErrorCode* pthread_rwlockattr_getpshared_spec(CallContext context, PThreadRwlockAttrTPtr ptr, IntT* pshared)
{
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "ptr is not NULL", !isNULL_VoidTPtr(ptr));

        /* [The object must be initialized.] */
        REQ("", "the object must be initialized.", getRwlockAttributes(ptr) != NULL);

        return true;
    }
    coverage C
    {
        return {GetSharedValue, "Obtain the value of the process-shared attribute"};
    }
    post
    {
        PThreadRwlockAttrT* tmp = getRwlockAttributes(ptr);

        /* [The object must stay initialized.] */
        REQ("", "the object must stay initialized.", tmp != NULL);

        /*
         * Otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_RWLOCKATTR_GETPSHARED, "pthread_rwlockattr_getpshared.06",
                    *pthread_rwlockattr_getpshared_spec != 0, *pthread_rwlockattr_getpshared_spec)
            /*
             * The pthread_rwlockattr_getpshared() and pthread_rwlockattr_setpshared() 
             * functions may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY(POSIX_PTHREAD_RWLOCKATTR_GETPSHARED, EINVAL, "pthread_rwlockattr_getpshared.07.01", TODO_ERR(EINVAL))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_RWLOCKATTR_GETPSHARED, EINTR, "pthread_rwlockattr_getpshared.08")

        ERROR_END()

        /*
         * The pthread_rwlockattr_getpshared() function shall obtain the value of the 
         * process-shared attribute from the initialized attributes object referenced by 
         * attr.
         */
        REQ("pthread_rwlockattr_getpshared.01", "", TODO_REQ());

        /*
         * The process-shared attribute shall be set to PTHREAD_PROCESS_SHARED to permit a 
         * read-write lock to be operated upon by any thread that has access to the 
         * memory where the read-write lock is allocated, even if the read-write lock is 
         * allocated in memory that is shared by multiple processes.
         */
        REQ("pthread_rwlockattr_getpshared.02", "", TODO_REQ());

        /*
         * If the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the read-write lock 
         * shall only be operated upon by threads created within the same process as the 
         * thread that initialized the read-write lock; if threads of differing processes 
         * attempt to operate on such a read-write lock, the behavior is undefined
         */
        REQ("pthread_rwlockattr_getpshared.03", "", TODO_REQ());

        /*
         * Upon successful completion, the pthread_rwlockattr_getpshared() function shall 
         * return zero
         */
        REQ("pthread_rwlockattr_getpshared.04", "return value should be zero",
            *pthread_rwlockattr_getpshared_spec == 0
           );

        /*
         * and store the value of the process-shared attribute of attr into the 
         * object referenced by the pshared parameter.
         */
        REQ("pthread_rwlockattr_getpshared.05", "pshared must be valid.", tmp->pshared == *pshared);

        return true;
    }
}

specification
ErrorCode* pthread_rwlockattr_setpshared_spec(CallContext context, PThreadRwlockAttrTPtr ptr, IntT pshared)
{
    PThreadRwlockAttrT* state_pre;
    PThreadRwlockAttrT* state_post;
    pre
    {
        /* [Pointer must not be NULL.] */
        REQ("", "ptr is not NULL", !isNULL_VoidTPtr(ptr));

        state_pre = getRwlockAttributes(ptr);

        /* [The object must be initialized.] */
        REQ("", "the object must be initialized.", state_pre != NULL);

        return true;
    }
    coverage C
    {
        if (pshared == SUT_PTHREAD_PROCESS_SHARED)
            return {SharedAttr, "Shared attribute"};
        else if (pshared == SUT_PTHREAD_PROCESS_PRIVATE)
            return {PrivateAttr, "Private attribute"};
        else
            return {InvalidAttr, "Invalid attribute"};
    }
    post
    {
        state_post = getRwlockAttributes(ptr);

        /* [The object must stay initialized.] */
        REQ("", "the object must stay initialized.", state_post != NULL);

        /* [In case of error, the model state must not change.] */
        if (pthread_rwlockattr_setpshared_spec != 0)
            REQ("", "the model state must not change.", state_post->pshared == state_pre->pshared);

        /*
         * otherwise, an error number shall be returned to indicate the error.
         */
        ERROR_BEGIN(POSIX_PTHREAD_RWLOCKATTR_SETPSHARED, "pthread_rwlockattr_setpshared.06",
                    *pthread_rwlockattr_setpshared_spec != 0, *pthread_rwlockattr_setpshared_spec)
            /*
             * The pthread_rwlockattr_getpshared() and pthread_rwlockattr_setpshared() 
             * functions may fail if:
             * 
             * [EINVAL] 
             * 
             * The value specified by attr is invalid. 
             */
            ERROR_MAY_EXT(POSIX_PTHREAD_RWLOCKATTR_SETPSHARED, BAD_ATTR, EINVAL, "pthread_rwlockattr_setpshared.07.01",
                          TODO_ERR(EINVAL))

            /*
             * The pthread_rwlockattr_setpshared() function may fail if:
             * 
             * [EINVAL] 
             * 
             * The new value specified for the attribute is outside the range of legal values 
             * for that attribute. 
             */
            ERROR_MAY_EXT(POSIX_PTHREAD_RWLOCKATTR_SETPSHARED, BAD_PSHARED, EINVAL, "pthread_rwlockattr_setpshared.08.01",
                          (pshared != SUT_PTHREAD_PROCESS_SHARED) && (pshared != SUT_PTHREAD_PROCESS_PRIVATE))

            /*
             * These functions shall not return an error code of [EINTR].
             */
            ERROR_NEVER(POSIX_PTHREAD_RWLOCKATTR_SETPSHARED, EINTR, "pthread_rwlockattr_setpshared.09")

        ERROR_END()

        /*
         * The pthread_rwlockattr_setpshared() function shall set the process-shared 
         * attribute in an initialized attributes object referenced by attr.
         */
        REQ("pthread_rwlockattr_setpshared.01", "", TODO_REQ());

        /*
         * The process-shared attribute shall be set to PTHREAD_PROCESS_SHARED to permit a 
         * read-write lock to be operated upon by any thread that has access to the 
         * memory where the read-write lock is allocated, even if the read-write lock is 
         * allocated in memory that is shared by multiple processes.
         */
        REQ("pthread_rwlockattr_setpshared.02", "", TODO_REQ());

        /*
         * If the process-shared attribute is PTHREAD_PROCESS_PRIVATE, the read-write lock 
         * shall only be operated upon by threads created within the same process as the 
         * thread that initialized the read-write lock; if threads of differing processes 
         * attempt to operate on such a read-write lock, the behavior is undefined
         */
        REQ("pthread_rwlockattr_setpshared.03", "", TODO_REQ());

        /*
         * The default value of the process-shared attribute shall be 
         * PTHREAD_PROCESS_PRIVATE.
         */
        REQ("pthread_rwlockattr_setpshared.04", "", TODO_REQ());

        /*
         * If successful, the pthread_rwlockattr_setpshared() function shall return zero;
         */
        REQ("pthread_rwlockattr_setpshared.05", "return value should be zero",
            *pthread_rwlockattr_setpshared_spec == 0
           );

        /* [The model state must correspond the pshared value.] */
        REQ("", "the model state must be valid.", state_post->pshared == pshared);

        return true;
    }
}

void onPThreadRwlockAttrSetPshared(CallContext context, PThreadRwlockAttrTPtr rwlock, IntT pshared, ErrorCode* res)
{
    if (*res == 0)
    {
        PThreadRwlockAttrT* tmp = getRwlockAttributes(rwlock);
        tmp->pshared = pshared;
    }
}


/********************************************************************/
/**                       Helper Functions                         **/
/********************************************************************/

specification typedef struct PThreadRwlockAttrT PThreadRwlockAttrT = {};

PThreadRwlockAttrT* create_PThreadRwlockAttrT(PThreadRwlockAttrTPtr address, PThreadPShared pshared)
{
    return create(&type_PThreadRwlockAttrT, address, pshared);
}

PThreadRwlockAttrT* getRwlockAttributes(PThreadRwlockAttrTPtr address)
{
    return getObjectInMemory(address);
}
