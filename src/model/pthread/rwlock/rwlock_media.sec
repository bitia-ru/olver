/*
 * Copyright (c) 2005-2006 Institute for System Programming
 * Russian Academy of Sciences
 * All rights reserved. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "pthread/rwlock/rwlock_media.seh"
#include "common/common_media.seh"


/********************************************************************/
/**                 Deferred Reactions Processors                  **/
/********************************************************************/
static void pthread_rwlock_rdlock_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
        getThreadChannelID(threadId),
        NULL,
        pthread_rwlock_rdlock_return,
        create_RwlockLockReturnType(threadId, code),
        meta->timestamp
        );
}

static void pthread_rwlock_wrlock_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
        getThreadChannelID(threadId),
        NULL,
        pthread_rwlock_wrlock_return,
        create_RwlockLockReturnType(threadId, code),
        meta->timestamp
        );
}

static void pthread_rwlock_timedrdlock_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
        getThreadChannelID(threadId),
        NULL,
        pthread_rwlock_timedrdlock_return,
        create_RwlockLockReturnType(threadId, code),
        meta->timestamp
        );
}

static void pthread_rwlock_timedwrlock_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
        getThreadChannelID(threadId),
        NULL,
        pthread_rwlock_timedwrlock_return,
        create_RwlockLockReturnType(threadId, code),
        meta->timestamp
        );
}

static void pthread_rwlock_unlock_return_processor(ThreadId threadId, TSStream* stream, TSMetaData* meta)
{
    ErrorCode* code = create_ErrorCode(0);

    *code = readInt_TSStream(stream);
    registerReactionWithTimeInterval
        (
        getThreadChannelID(threadId),
        NULL,
        pthread_rwlock_unlock_return,
        create_RwlockUnlockReturnType(threadId, code),
        meta->timestamp
        );
}

/********************************************************************/
/**                    Initialization Function                     **/
/********************************************************************/
void initPthreadRwlockSubsystem(void)
{
    // Set up mediators
    set_mediator_pthread_rwlock_destroy_spec(pthread_rwlock_destroy_media);
    set_mediator_pthread_rwlock_init_spec(pthread_rwlock_init_media);
    
    set_mediator_pthread_rwlock_rdlock_spec(pthread_rwlock_rdlock_media);
    set_mediator_pthread_rwlock_rdlock_return(pthread_rwlock_rdlock_return_media);

    set_mediator_pthread_rwlock_timedrdlock_spec(pthread_rwlock_timedrdlock_media);
    set_mediator_pthread_rwlock_timedrdlock_bad_spec(pthread_rwlock_timedrdlock_bad_media);
    set_mediator_pthread_rwlock_timedrdlock_return(pthread_rwlock_timedrdlock_return_media);

    set_mediator_pthread_rwlock_timedwrlock_spec(pthread_rwlock_timedwrlock_media);
    set_mediator_pthread_rwlock_timedwrlock_bad_spec(pthread_rwlock_timedwrlock_bad_media);
    set_mediator_pthread_rwlock_timedwrlock_return(pthread_rwlock_timedwrlock_return_media);

    set_mediator_pthread_rwlock_tryrdlock_spec(pthread_rwlock_tryrdlock_media);
    set_mediator_pthread_rwlock_trywrlock_spec(pthread_rwlock_trywrlock_media);
    
    set_mediator_pthread_rwlock_unlock_spec(pthread_rwlock_unlock_media);
    set_mediator_pthread_rwlock_unlock_return(pthread_rwlock_unlock_return_media);

    set_mediator_pthread_rwlock_wrlock_spec(pthread_rwlock_wrlock_media);
    set_mediator_pthread_rwlock_wrlock_return(pthread_rwlock_wrlock_return_media);

    // Set up dr processors
    registerDRProcessor("pthread_rwlock_rdlock_return", pthread_rwlock_rdlock_return_processor);
    registerDRProcessor("pthread_rwlock_wrlock_return", pthread_rwlock_wrlock_return_processor);
    registerDRProcessor("pthread_rwlock_timedrdlock_return", pthread_rwlock_timedrdlock_return_processor);
    registerDRProcessor("pthread_rwlock_timedwrlock_return", pthread_rwlock_timedwrlock_return_processor);
    registerDRProcessor("pthread_rwlock_unlock_return", pthread_rwlock_unlock_return_processor);
}


/********************************************************************/
/**                      Interface Functions                       **/
/********************************************************************/

/** pthread_rwlock_destroy_spec **/
mediator pthread_rwlock_destroy_media for specification
ErrorCode* pthread_rwlock_destroy_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_destroy:$(ptr)", 
                                    create_VoidTPtrObj(rwlock)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadRwlockDestroy(rwlock, pthread_rwlock_destroy_spec);
    }
}


/** pthread_rwlock_init_spec **/
mediator pthread_rwlock_init_media for specification
ErrorCode* pthread_rwlock_init_spec(CallContext context, VoidTPtr rwlock, PThreadRwlockAttrTPtr attr)
{
    call
    {
        TSCommand command = create_TSCommand();
        ErrorCode* res = create_ErrorCode(0);

        format_TSCommand(&command, "pthread_rwlock_init:$(ptr)$(ptr)",
                                    create_VoidTPtrObj(rwlock),
                                    create_VoidTPtrObj(attr)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);
        
        return res;
    }
    state
    {
        onPThreadRwlockInit(rwlock, attr, pthread_rwlock_init_spec);
    }
}


/** pthread_rwlock_rdlock_spec **/
mediator pthread_rwlock_rdlock_media for specification
void pthread_rwlock_rdlock_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_rdlock:$(ptr)", create_VoidTPtrObj(rwlock));

        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadRwlockRdlock(context, rwlock);
    }
}

mediator pthread_rwlock_rdlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_rdlock_return(void)
{
    state
    {
        onPThreadRwlockRdlockReturn(pthread_rwlock_rdlock_return->context, pthread_rwlock_rdlock_return->returned_value);
    }
}


/** pthread_rwlock_timedrdlock_spec **/
mediator pthread_rwlock_timedrdlock_media for specification
void pthread_rwlock_timedrdlock_spec(CallContext context, PThreadRwlockTPtr rwlock, TimeUnit delta)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_rwlock_timedrdlock:$(ptr)$(timeunit)",
                         create_VoidTPtrObj(rwlock),
                         create_TimeUnitObj(delta)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadRwlockTimedRdlock(context, rwlock, timestamp, delta);
    }
}

mediator pthread_rwlock_timedrdlock_bad_media for specification
ErrorCode* pthread_rwlock_timedrdlock_bad_spec(CallContext context, PThreadRwlockTPtr rwlock, IntT nsec)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_rwlock_timedrdlock_bad:$(ptr)$(int)",
                         create_VoidTPtrObj(rwlock),
                         create_IntTObj(nsec)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);

        return res;
    }
}

mediator pthread_rwlock_timedrdlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_timedrdlock_return(void)
{
    state
    {
        onPThreadRwlockTimedRdlockReturn(pthread_rwlock_timedrdlock_return->context, pthread_rwlock_timedrdlock_return->returned_value);
    }
}


/** pthread_rwlock_timedwrlock_spec **/
mediator pthread_rwlock_timedwrlock_media for specification
void pthread_rwlock_timedwrlock_spec(CallContext context, PThreadRwlockTPtr rwlock, TimeUnit delta)
{
    call
    {
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_rwlock_timedwrlock:$(ptr)$(timeunit)",
                         create_VoidTPtrObj(rwlock),
                         create_TimeUnitObj(delta)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }
        
        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadRwlockTimedWrlock(context, rwlock, timestamp, delta);
    }
}

mediator pthread_rwlock_timedwrlock_bad_media for specification
ErrorCode* pthread_rwlock_timedwrlock_bad_spec(CallContext context, PThreadRwlockTPtr rwlock, IntT nsec)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
    
        format_TSCommand(&command, "pthread_rwlock_timedwrlock_bad:$(ptr)$(int)",
                         create_VoidTPtrObj(rwlock),
                         create_IntTObj(nsec)
                        );
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }
        
        destroy_TSCommand(&command);

        return res;
    }
}

mediator pthread_rwlock_timedwrlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_timedwrlock_return(void)
{
    state
    {
        onPThreadRwlockTimedWrlockReturn(pthread_rwlock_timedwrlock_return->context, pthread_rwlock_timedwrlock_return->returned_value);
    }
}


/** pthread_rwlock_tryrdlock_spec **/
mediator pthread_rwlock_tryrdlock_media for specification
ErrorCode* pthread_rwlock_tryrdlock_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_tryrdlock:$(ptr)", create_VoidTPtrObj(rwlock));
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadRwlockTryRdlock(context, rwlock, pthread_rwlock_tryrdlock_spec);
    }
}



/** pthread_rwlock_trywrlock_spec **/
mediator pthread_rwlock_trywrlock_media for specification
ErrorCode* pthread_rwlock_trywrlock_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        ErrorCode* res = create_ErrorCode(0);
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_trywrlock:$(ptr)", create_VoidTPtrObj(rwlock));
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
            *res = readInt_TSStream(&command.response);
        }

        destroy_TSCommand(&command);

        return res;
    }
    state
    {
        onPThreadRwlockTryWrlock(context, rwlock, pthread_rwlock_trywrlock_spec);
    }
}


/** pthread_rwlock_unlock_spec **/
mediator pthread_rwlock_unlock_media for specification
void pthread_rwlock_unlock_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_unlock:$(ptr)", create_VoidTPtrObj(rwlock));
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadRwlockUnlock(context, rwlock);
    }
}

mediator pthread_rwlock_unlock_return_media for reaction
RwlockUnlockReturnType* pthread_rwlock_unlock_return(void)
{
    state
    {
        onPThreadRwlockUnlockReturn(pthread_rwlock_unlock_return->context, pthread_rwlock_unlock_return->returned_value);
    }
}


/** pthread_rwlock_wrlock_spec **/
mediator pthread_rwlock_wrlock_media for specification
void pthread_rwlock_wrlock_spec(CallContext context, PThreadRwlockTPtr rwlock)
{
    call
    {
        TSCommand command = create_TSCommand();
            
        format_TSCommand(&command, "pthread_rwlock_wrlock:$(ptr)", create_VoidTPtrObj(rwlock));
        executeCommandInContext(context, &command);
        if (!isBadVerdict())
        {
            timestamp = command.meta.timestamp;
        }

        destroy_TSCommand(&command);
    }
    state
    {
        onPThreadRwlockWrlock(context, rwlock);
    }
}

mediator pthread_rwlock_wrlock_return_media for reaction 
RwlockLockReturnType* pthread_rwlock_wrlock_return(void)
{
    state
    {
        onPThreadRwlockWrlockReturn(pthread_rwlock_wrlock_return->context, pthread_rwlock_wrlock_return->returned_value);
    }
}
